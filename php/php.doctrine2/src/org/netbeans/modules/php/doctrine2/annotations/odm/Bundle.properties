# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

AlsoLoadTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@AlsoLoad</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Specify an additional <code>mongodb</code> field to check for and load data from it if it exists.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Field\n\
\ * @AlsoLoad("oldFieldName")\n\
\ */\n\
private $fieldName;\n\
</code></pre>\n\
<p>The above <code>$fieldName</code> will be loaded from <code>fieldName</code> if it exists and will fallback to <code>oldFieldName</code> if it does not exist.</p>
BinTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Bin</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Alias of <code>@Field</code>, with <code>type</code> attribute set to <code>bin</code>. Converts value to <a href="http://www.php.net/manual/en/class.mongobindata.php"><code>MongoBinData</code></a>, \
using <code>MongoBinData::BYTE_ARRAY</code> type.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ *@Bin\n\
\ */\n\
private $data;\n\
</code></pre>
BinCustomTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@BinCustom</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Alias of <code>@Field</code>, with <code>type</code> attribute set to <code>bin_custom</code>. Converts value to <a href="http://www.php.net/manual/en/class.mongobindata.php"><code>MongoBinData</code></a>, \
using <code>MongoBinData::CUSTOM</code> type.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @BinCustom\n\
\ */\n\
private $data;\n\
</code></pre>
BinFuncTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@BinFunc</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Alias of <code>@Field</code>, with <code>type</code> attribute set to <code>bin_func</code>. Converts value to <a href="http://www.php.net/manual/en/class.mongobindata.php"><code>MongoBinData</code></a>, \
using <code>MongoBinData::FUNC</code> type.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @BinFunc\n\
\ */\n\
private $data;\n\
</code></pre>
BinMd5Tag.documentation=<p style="font-weight: bold; font-size: 1.2em">@BinMD5</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Alias of <code>@Field</code>, with <code>type</code> attribute set to <code>bin_md5</code>. Converts value to <a href="http://www.php.net/manual/en/class.mongobindata.php"><code>MongoBinData</code></a>, \
using <code>MongoBinData::MD5</code> type.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @BinMD5\n\
\ */\n\
private $password;\n\
</code></pre>
BinUuidTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@BinUUID</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Alias of <code>@Field</code>, with <code>type</code> attribute set to <code>bin_uuid</code>. Converts value to <a href="http://www.php.net/manual/en/class.mongobindata.php"><code>MongoBinData</code></a>, \
using <code>MongoBinData::UUID</code> type.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @BinUUID\n\
\ */\n\
private $uuid;\n\
</code></pre>
BooleanTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Boolean</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Alias of <code>@Field</code>, with <code>type</code> attribute set to <code>boolean</code>.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Boolean\n\
\ */\n\
private $active;\n\
</code></pre>
CollectionTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Collection</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Alias of <code>@Field</code>, with <code>type</code> attribute set to <code>collection</code>. Stores and retrieves the value as numeric indexed array.</p>\
<p style="font-weight: bold; font-size: 1.1em">Optional attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>strategy</code></b></td>\
    <td>The strategy to use to persist the data. Possible values are <code>set</code> and <code>pushAll</code> and <code>pushAll</code> is the default.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Collection(strategy="pushAll")\n\
\ */\n\
private $tags = array();\n\
</code></pre>
DateTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Date</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Alias of <code>@Field</code>, with <code>type</code> attribute set to <code>date</code>. Converts value to <a href="http://www.php.net/manual/en/class.mongodate.php">MongoDate</a>, \
using <code>MongoBinData::UUID</code> type.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Date\n\
\ */\n\
private $createdAt;\n\
</code></pre>
DiscriminatorFieldTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@DiscriminatorField</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>This annotation is a required annotation for the topmost/super class of an inheritance hierachy. It specifies the details of the field which saves the name of the class, \
which the document is actually instantiated as.</p>\
<p style="font-weight: bold; font-size: 1.1em">Required attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>fieldName</code></b></td>\
    <td>The field name of the discriminator. This name is also used during array hydration as key to specify the class-name.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Document\n\
\ * @DiscriminatorField(fieldName="type")\n\
\ */\n\
class SuperUser {\n\
\    // ...\n\
}\n\
</code></pre>
DiscriminatorMapTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@DiscriminatorMap</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The discrimnator map is a required annotation on the top-most/super class in an inheritance hierachy. It takes an array as only argument which defines which class should be saved \
under which name in the database. Keys are the database value and values are the classes, either as fully- or as unqualified class names depending if the classes are in the namespace or not.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Document\n\
\ * @InheritanceType("SINGLE_COLLECTION")\n\
\ * @DiscriminatorField(fieldName="discr")\n\
\ * @DiscriminatorMap({"person" = "Person", "employee" = "Employee"})\n\
\ */\n\
class Person {\n\
\    /**\n\
\     * @Field(type="string")\n\
\     */\n\
\    private $discr;\n\
\    // ...\n\
}\n\
</code></pre>
DistanceTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Distance</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Use the <code>@Distance</code> annotation in combination with geospatial indexes and when running <code>$near</code> queries the property will be populated with a distance value.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Document\n\
\ * @Index(keys={"coordinates"="2d"})\n\
\ */\n\
class Place {\n\
\    /**\n\
\     * @Id\n\
\     */\n\
\    public $id;\n\
\n\
\    /**\n\
\     * @EmbedOne(targetDocument="Coordinates")\n\
\     */\n\
\    public $coordinates;\n\
\n\
\    /**\n\
\     * @Distance\n\
\     */\n\
\    public $distance;\n\
}\n\
\n\
/**\n\
\ * @EmbeddedDocument\n\
\ */\n\
class Coordinates {\n\
\    /**\n\
\     * @Float\n\
\     */\n\
\    public $latitude;\n\
\n\
\    /**\n\
\     * @Float\n\
\     */\n\
\    public $longitude;\n\
}\n\
</code></pre>\n\
<p>Now you can run a <code>near()</code> query and access the distance. Get the closest city to a set of coordinates:</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
$city = $this->dm->createQuery('City')\n\
\        ->field('coordinates')->near(50, 60)\n\
\        ->limit(1)\n\
\        ->getQuery()\n\
\        ->getSingleResult();\n\
echo $city->distance;\n\
</code></pre>
DocumentTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Document</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Required annotation to mark a <code>PHP</code> class as <code>Document</code>. <code>Doctrine</code> <code>ODM</code> manages the persistence of all classes marked as document.</p>\
<p style="font-weight: bold; font-size: 1.1em">Optional attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>db</code></b></td>\
    <td><code>Document Manager</code> uses the default <code>mongodb</code> database, unless it has database name to use set, this value can be specified to override database to use on per document basis.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>collection</code></b></td>\
    <td>By default collection name is extracted from the document's class name, but this attribute can be used to override.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>repositoryClass</code></b></td>\
    <td>Specifies custom repository class to use when.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>indexes</code></b></td>\
    <td>Specifies an array of indexes for this document.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>requireIndexes</code></b></td>\
    <td>Specifies whether or not queries should require indexes.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Document(\n\
\ *     db="documents",\n\
\ *     collection="users",\n\
\ *     repositoryClass="MyProject\UserRepository",\n\
\ *     indexes={\n\
\ *         @Index(keys={"username"="desc"}, options={"unique"=true})\n\
\ *     },\n\
\ *     requireIndexes=true\n\
\ * )\n\
\ */\n\
class User {\n\
\    //...\n\
}\n\
</code></pre>
EmbedManyTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@EmbedMany</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>This annotation is similar to <code>@EmbedOne</code>, but instead of embedding one document, it informs <code>mongodb</code> to embed a collection of documents.</p>\
<p style="font-weight: bold; font-size: 1.1em">Required attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>targetDocument</code></b></td>\
    <td>A full class name of the target document.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Optional attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>discriminatorField</code></b></td>\
    <td>The field name to store the discriminator value in.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>discriminatorMap</code></b></td>\
    <td>Map of discriminator values to class names.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>strategy</code></b></td>\
    <td>The strategy to use to persist the reference. Possible values are <code>set</code> and <code>pushAll</code> and <code>pushAll</code> is the default.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @EmbedMany(\n\
\ *     strategy="set",\n\
\ *     discriminatorField="type",\n\
\ *     discriminatorMap={\n\
\ *         "book"="Documents\BookTag",\n\
\ *         "song"="Documents\SongTag"\n\
\ *     }\n\
\ * )\n\
\ */\n\
private $tags = array();\n\
</code></pre>\n\
<p>Depending on the type of <code>Document</code> a value of <code>user<code> or <code>author<code> will be stored in a field named <code>type<code> and will be used to properly \
reconstruct the right class during hydration.</p>
EmbedOneTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@EmbedOne</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@EmbedOne</code> annotation works almost exactly as the <code>@ReferenceOne</code>, except that internally, the document is embedded in the parent document \
in <code>mongodb</code>. From <code>mongodb</code> docs:</p>\
<p><i>The key question in <code>Mongo</code> schema design is "does this object merit its own collection, or rather should it embed in objects in other collections?" In relational databases, \
each sub-item of interest typically becomes a separate table (unless denormalizing for performance). In <code>Mongo</code>, this is not recommended - embedding objects is much more efficient. \
Data is then colocated on disk; client-server turnarounds to the database are eliminated. So in general the question to ask is, "why would I not want to embed this object?"</i></p>\
<p style="font-weight: bold; font-size: 1.1em">Required attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>targetDocument</code></b></td>\
    <td>A full class name of the target document.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Optional attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>discriminatorField</code></b></td>\
    <td>The field name to store the discriminator value in.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>discriminatorMap</code></b></td>\
    <td>Map of discriminator values to class names.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>strategy</code></b></td>\
    <td>The strategy to use to persist the reference. Possible values are <code>set</code> and <code>pushAll</code> and <code>pushAll</code> is the default.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @EmbedOne(\n\
\ *     strategy="set",\n\
\ *     discriminatorField="type",\n\
\ *     discriminatorMap={\n\
\ *         "book"="Documents\BookTag",\n\
\ *         "song"="Documents\SongTag"\n\
\ *     }\n\
\ * )\n\
\ */\n\
private $tags = array();\n\
</code></pre>\n\
<p>Depending on the type of <code>Document</code> a value of <code>user<code> or <code>author<code> will be stored in a field named <code>type<code> and will be used to properly \
reconstruct the right class during hydration.</p>
EmbeddedDocumentTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@EmbeddedDocument</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Marks the document as embeddable. Without this annotation, you cannot embed non-document objects.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
class Money {\n\
\    /**\n\
\     * @Float\n\
\     */\n\
\    protected $amount;\n\
\n\
\    public function __construct($amount) {\n\
\        $this->amount = (float) $amount;\n\
\    }\n\
\    //...\n\
}\n\
\n\
/**\n\
\ * @Document(db="finance", collection="wallets")\n\
\ */\n\
class Wallet {\n\
\    /**\n\
\     * @EmbedOne(targetDocument="Money")\n\
\     */\n\
\    protected $money;\n\
\n\
\    public function setMoney(Money $money) {\n\
\        $this->money = $money;\n\
\    }\n\
\    //...\n\
}\n\
//...\n\
$wallet = new Wallet();\n\
$wallet->setMoney(new Money(34.39));\n\
$dm->persist($wallet);\n\
$dm->flush();\n\
</code></pre>\n\
<p>The code above wouldn\u2019t store the money object. In order for the above code to work, you should have:</p>\
<pre><code>\n\
/**\n\
\ * @Document\n\
\ */\n\
class Money {\n\
\    //...\n\
}\n\
</code></pre>\n\
<p>or</p>\
<pre><code>\n\
/**\n\
\ * @EmbeddedDocument\n\
\ */\n\
class Money {\n\
\    //...\n\
}\n\
</code></pre>\n\
<p>The difference is that <code>@EmbeddedDocument</code> cannot be stored without a parent <code>@Document</code> and cannot specify its own db or collection attributes.</p>
FieldTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Field</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Marks an annotated instance variable as "persistent". It has to be inside the instance variables <code>PHP</code> <code>DocBlock</code> comment. Any value hold inside this variable will be saved to \
and loaded from the document store as part of the lifecycle of the instance variables document-class.</p>\
<p style="font-weight: bold; font-size: 1.1em">Required attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>type</code></b></td>\
    <td>Name of the <code>Doctrine</code> <code>ODM</code> <code>Type</code> which is converted between <code>PHP</code> and Database representation. Can be one of: <code>string</code>, <code>boolean</code>, <code>int</code>, <code>float</code>, \
<code>hash</code>, <code>date</code>, <code>key</code>, <code>timestamp</code>, <code>bin</code>, <code>bin_func</code>, <code>bin_uuid</code>, <code>bin_md5</code>, <code>bin_custom</code>.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Optional attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>name</code></b></td>\
    <td>By default the property name is used for the <code>mongodb</code> field name also, however the <code>name<code> attribute allows you to specify the field name.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Field(type="string")\n\
\ */\n\
protected $username;\n\
\n\
/**\n\
\ * @Field(type="string" name="origin")\n\
\ */\n\
protected $country;\n\
\n\
/**\n\
\ * @Column(type="float")\n\
\ */\n\
protected $height;\n\
</code></pre>
FileTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@File</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Tells <code>ODM</code> that the property is a file, must be set to an existing file path before saving to <code>mongodb</code>. Will be instantiated as instance of \
<a href="http://www.php.net/manual/en/class.mongogridfsfile.php">MongoGridFSFile</a> class upon retreival.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @File\n\
\ */\n\
private $photo;\n\
</code></pre>
FloatTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Float</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Alias of <code>@Field</code>, with <code>type</code> attribute set to <code>float</code>.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Float\n\
\ */\n\
private $price;\n\
</code></pre>
HashTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Hash</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Alias of <code>@Field</code>, with <code>type</code> attribute set to <code>hash</code>. Stores and retrieves the value as associative array.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Hash\n\
\ */\n\
private $map;\n\
</code></pre>
IdTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Id</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The annotated instance variable will be marked as document identifier. This annotation is a marker only and has no required or optional attributes.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Document\n\
\ */\n\
class User {\n\
\    /**\n\
\     * @Id\n\
\     */\n\
\    protected $id;\n\
}\n\
</code></pre>
IncrementTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Increment</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The increment type is just like a normal field except that when you update, it will use the <code>$inc</code> operator instead of <code>$set</code>:</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
class Package {\n\
\    // ...\n\
\n\
\    /**\n\
\     * @Increment\n\
\     */\n\
\    protected $downloads = 0;\n\
\n\
\    public function incrementDownloads() {\n\
\        $this->downloads++;\n\
\    }\n\
\n\
\    // ...\n\
}\n\
</code></pre>\n\
<p>Now update a <code>Package</code> instance like the following:</p>\
<pre><code>\n\
$package->incrementDownloads();\n\
$dm->flush();\n\
</code></pre>\n\
<p>The query sent to <code>Mongo</code> would be something like the following:</p>\
<pre><code>\n\
array(\n\
\    '$inc' => array(\n\
\        'downloads' => 1\n\
\    )\n\
)\n\
</code></pre>\n\
<p>It will increment the value by the difference between the new value and the old value.</p>
IndexTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Index</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Annotation is used inside the <code>@Document</code> annotation on the class level. It allows to hint the <code>mongodb</code> to generate a database index on the specified document fields.</p>\
<p style="font-weight: bold; font-size: 1.1em">Required attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>keys</code></b></td>\
    <td>Fields to index.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>options</code></b></td>\
    <td>Array of <code>MongoCollection</code> options.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Document(\n\
\ *   db="my_database",\n\
\ *   collection="users",\n\
\ *   indexes={\n\
\ *     @Index(keys={"username"="desc"}, options={"unique"=true})\n\
\ *   }\n\
\ * )\n\
\ */\n\
class User {\n\
\    //...\n\
}\n\
</code></pre>\n\
<p>You can also simply specify an <code>@Index</code> or <code>@UniqueIndex</code> on a property:</p>\
<pre><code>\n\
/**\n\
\ * @String\n\
\ * @UniqueIndex(safe="true")\n\
\ */\n\
private $username;\n\
</code></pre>
IntTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Int</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Alias of <code>@Field</code>, with <code>type</code> attribute set to <code>int</code>.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Int\n\
\ */\n\
private $amount;\n\
</code></pre>
InheritanceTypeTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@InheritanceTypeTag</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>In an inheritance hierachy you have to use this annotation on the topmost/super class to define which strategy should be used for inheritance. \
Currently <code>SINGLE_COLLECTION</code> and <code>COLLECTION_PER_CLASS</code> are supported.</p>\
<p>This annotation has always been used in conjunction with the <code>@DiscriminatorMap</code> and <code>@DiscriminatorField</code> annotations.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Document\n\
\ * @InheritanceType("COLLECTION_PER_CLASS")\n\
\ * @DiscriminatorMap({"person"="Person", "employee"="Employee"})\n\
\ */\n\
class Person {\n\
\    // ...\n\
}\n\
\n\
/**\n\
\ * @Document\n\
\ * @InheritanceType("SINGLE_COLLECTION")\n\
\ * @DiscriminatorMap({"person"="Person", "employee"="Employee"})\n\
\ */\n\
class Person {\n\
\    // ...\n\
}\n\
</code></pre>
KeyTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Key</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Alias of <code>@Field</code>, with <code>type</code> attribute set to <code>key</code>. It is then converted to <a href="http://www.php.net/manual/en/class.mongomaxkey.php"><code>MongoMaxKey</code><a/> \
or <a href="http://www.php.net/manual/en/class.mongominkey.php"><code>MongoMinKey</code><a/>, if the value evaluates to <code>true</code> or <code>false</code> respectively.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Key\n\
\ */\n\
private $last;\n\
</code></pre>
MappedSuperclassTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@MappedSuperclass</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The annotation is used to specify classes that are parents of document classes and should not be managed. \
<a href="http://www.doctrine-project.org/projects/mongodb_odm/1.0/docs/reference/inheritance/en">Read more</a>.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @MappedSuperclass\n\
\ */\n\
class BaseDocument {\n\
\    // ...\n\
}\n\
</code></pre>
NotSavedTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@NotSaved</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The annotation is used to specify properties that are loaded if they exist but never saved.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @NotSaved\n\
\ */\n\
public $field;\n\
</code></pre>
PreLoadTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Preload</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Marks a method on the document to be called as a <code>@PreLoad</code> event.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Document\n\
\ */\n\
class Article {\n\
\    // ...\n\
\n\
\    /**\n\
\     * @PreLoad\n\
\     */\n\
\    public function preLoad(array &$data) {\n\
\        // ...\n\
\    }\n\
}\n\
</code></pre>
PostLoadTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@PostLoad</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Marks a method on the document to be called as a <code>@PostLoad</code> event.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Document\n\
\ */\n\
class Article {\n\
\    // ...\n\
\n\
\    /**\n\
\     * @PostLoad\n\
\     */\n\
\    public function postLoad() {\n\
\        // ...\n\
\    }\n\
}\n\
</code></pre>
PostPersistTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@PostPersist</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Marks a method on the document to be called as a <code>@PostPersist</code> event.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Document\n\
\ */\n\
class Article {\n\
\    // ...\n\
\n\
\    /**\n\
\     * @PostPersist\n\
\     */\n\
\    public function postPersist() {\n\
\        // ...\n\
\    }\n\
}\n\
</code></pre>
PostRemoveTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@PostRemove</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Marks a method on the document to be called as a <code>@PostRemove</code> event.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Document\n\
\ */\n\
class Article {\n\
\    // ...\n\
\n\
\    /**\n\
\     * @PostRemove\n\
\     */\n\
\    public function postRemove() {\n\
\        // ...\n\
\    }\n\
}\n\
</code></pre>
PostUpdateTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@PostUpdate</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Marks a method on the document to be called as a <code>@PostUpdate</code> event.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Document\n\
\ */\n\
class Article {\n\
\    // ...\n\
\n\
\    /**\n\
\     * @PostUpdate\n\
\     */\n\
\    public function postUpdate() {\n\
\        // ...\n\
\    }\n\
}\n\
</code></pre>
PrePersistTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@PrePersist</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Marks a method on the document to be called as a <code>@PrePersist</code> event.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Document\n\
\ */\n\
class Article {\n\
\    // ...\n\
\n\
\    /**\n\
\     * @PrePersist\n\
\     */\n\
\    public function prePersist() {\n\
\        // ...\n\
\    }\n\
}\n\
</code></pre>
PreRemoveTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@PreRemove</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Marks a method on the document to be called as a <code>@PreRemove</code> event.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Document\n\
\ */\n\
class Article {\n\
\    // ...\n\
\n\
\    /**\n\
\     * @PreRemove\n\
\     */\n\
\    public function preRemove() {\n\
\        // ...\n\
\    }\n\
}\n\
</code></pre>
PreUpdateTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@PreUpdate</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Marks a method on the document to be called as a <code>@PreUpdate</code> event.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Document\n\
\ */\n\
class Article {\n\
\    // ...\n\
\n\
\    /**\n\
\     * @PreUpdate\n\
\     */\n\
\    public function preUpdate() {\n\
\        // ...\n\
\    }\n\
}\n\
</code></pre>
ReferenceManyTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@ReferenceMany</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Defines that the annotated instance variable holds a collection of referenced documents.</p>\
<p style="font-weight: bold; font-size: 1.1em">Required attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>targetDocument</code></b></td>\
    <td>A full class name of the target document.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Optional attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>simple</code></b></td>\
    <td>Create simple references and only store a <code>MongoId</code> instead of a <code>DBRef</code>.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>cascade</code></b></td>\
    <td>Cascade option.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>discriminatorField</code></b></td>\
    <td>The field name to store the discriminator value in.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>discriminatorMap</code></b></td>\
    <td>Map of discriminator values to class names.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>inversedBy</code></b></td>\
    <td>The field name of the inverse side. Only allowed on owning side.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>mappedBy</code></b></td>\
    <td>The field name of the owning side. Only allowed on the inverse side.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>repositoryMethod</code></b></td>\
    <td>The name of the repository method to call to to populate this reference.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>sort</code></b></td>\
    <td>The default sort for the query that loads the reference.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>criteria</code></b></td>\
    <td>Array of default criteria for the query that loads the reference.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>limit</code></b></td>\
    <td>Limit for the query that loads the reference.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>skip</code></b></td>\
    <td>Skip for the query that loads the reference.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>strategy</code></b></td>\
    <td>The strategy to use to persist the reference. Possible values are <code>set</code> and <code>pushAll</code> and <code>pushAll</code> is the default.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @ReferenceMany(\n\
\ *     strategy="set",\n\
\ *     targetDocument="Documents\Item",\n\
\ *     cascade="all",\n\
\ *     discriminatorField="type",\n\
\ *     discriminatorMap={\n\
\ *         "book"="Documents\BookItem",\n\
\ *         "song"="Documents\SongItem"\n\
\ *     }\n\
\ * )\n\
\ */\n\
private $cart;\n\
</code></pre>
StringTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@String</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Alias of <code>@Field</code>, with <code>type</code> attribute set to <code>string</code>.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @String\n\
\ */\n\
private $username;\n\
</code></pre>
TimestampTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Timestamp</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Alias of <code>@Field</code>, with <code>type</code> attribute set to <code>timestamp</code>.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Timestamp\n\
\ */\n\
private $created;\n\
</code></pre>
UniqueIndexTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@UniqueIndex</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Defines a unique index on the given document.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @String\n\
\ * @UniqueIndex\n\
\ */\n\
private $email;\n\
</code></pre>
ReferenceOneTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@ReferenceOne</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Defines an instance variable holds a related document instance.</p>\
<p style="font-weight: bold; font-size: 1.1em">Required attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>targetDocument</code></b></td>\
    <td>A full class name of the target document.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Optional attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>simple</code></b></td>\
    <td>Create simple references and only store a <code>MongoId</code> instead of a <code>DBRef</code>.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>cascade</code></b></td>\
    <td>Cascade option.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>discriminatorField</code></b></td>\
    <td>The field name to store the discriminator value in.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>discriminatorMap</code></b></td>\
    <td>Map of discriminator values to class names.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>inversedBy</code></b></td>\
    <td>The field name of the inverse side. Only allowed on owning side.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>mappedBy</code></b></td>\
    <td>The field name of the owning side. Only allowed on the inverse side.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>repositoryMethod</code></b></td>\
    <td>The name of the repository method to call to to populate this reference.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>sort</code></b></td>\
    <td>The default sort for the query that loads the reference.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>criteria</code></b></td>\
    <td>Array of default criteria for the query that loads the reference.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>limit</code></b></td>\
    <td>Limit for the query that loads the reference.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>skip</code></b></td>\
    <td>Skip for the query that loads the reference.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @ReferenceOne(\n\
\ *     targetDocument="Documents\Item",\n\
\ *     cascade="all",\n\
\ *     discriminatorField="type",\n\
\ *     discriminatorMap={\n\
\ *         "book"="Documents\BookItem",\n\
\ *         "song"="DOcuments\SongItem"\n\
\ *     }\n\
\ * )\n\
\ */\n\
private $cart;\n\
</code></pre>
