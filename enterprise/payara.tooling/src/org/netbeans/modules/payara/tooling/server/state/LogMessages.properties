# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

################################################################################
# Log messages                                                                 #
# Use <class>.<method>.<name> notation for keys.                               #
################################################################################

# AdminPortTask class
AdminPortTask.closeSocket.failed=Socket closing failed when connecting \
to {0}:{1}: {2}
AdminPortTask.closeSocket.failedTm=[{0}] Socket closing failed when connecting \
to {1}:{2}: {3}
# AdminPortTask class
AdminPortTask.run.cancelled=Running already canceled administrator port check \
task.
AdminPortTask.run.started=Administrator port check task for server {0} \
in state {1} started.
AdminPortTask.run.connect=Port check could not connect to {0}:{1}: {2}
AdminPortTask.run.connectTm=[{0}] Port check could not connect to {1}:{2}: {3}
AdminPortTask.run.timeout=Port check timeout when connecting to {0}:{1}: {2}
AdminPortTask.run.timeoutTm=[{0}] Port check timeout when connecting \
to {1}:{2}: {3}
AdminPortTask.run.ioException=Port check caught IO exception when connecting \
to {0}:{1}: {2}
AdminPortTask.run.ioExceptionTm=[{0}] Port check caught IO exception when \
connecting to {1}:{2}: {3}
AdminPortTask.run.success=[{0}] Port status check for state {1} succeeded \
on {2}:{3}

# StatusJob class
StatusJob.portCheckTransition.transition=Port check transition {0}: {1} -> {2}
StatusJob.commandLocationsTransition.transition=Command check transition \
{0}: {1} -> {2}
StatusJob.commandVersionTransition.transition=Version check transition \
{0}: {1} -> {2}

# StatusJob.ListenerLocations class
ListenerLocations.operationStateChanged.result=Status check locations command \
result: {0}

# StatusJob.ListenerVersion class
ListenerVersion.operationStateChanged.result=Status check version command \
result: {0}

# StatusJob.ListenerPortCheck class
ListenerPortCheck.operationStateChanged.result=Status administrator port check \
result: {0}

# RunnerTask class
RunnerTask.run.cancelled=Running already canceled asadmin command check task.
RunnerTask.run.started=Asadmin command task for server {0} in state {1} started.
