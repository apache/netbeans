# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

DSC_ElNotAvail=The original element being refactored is not available. It was deleted or significantly changed. Usages cannot be collected.
DSC_ElementNotResolved=Cannot refactor unresolved elements
ERR_ProjectNotOpened=Cannot refactor {0} that is defined outside of an open project.

# --- SAFE DELETE REFACTORING ------------------------------------------------------
ERR_SafeDel=There was an error deleting <b>{0}</b>
LBL_ShowUsages=&Show Usages...
ERR_ReferencesFound=References to selected elements were found. Remove all references to these elements in order to safely delete your class.
WRN_Implements=Method {0} from {1} overrides the method {0} from {2}.
ERR_SafeDel_FromReference=Safe Delete cannot be invoked from Class/Method References
ERR_SafeDel_InvalidType=Safe Delete can be invoked only on a Method, Field or Class
ERR_OverridesAbstractMethod=The selected method cannot be safely deleted since it implements an abstract method {0}. 

# --- EXTRACT INTERFACE REFACTORING ------------------------------------------------
TXT_ExtractInterface_CreateIfc=Create interface <b>{0}</b>.
TXT_ExtractInterface_Method=Create declaration of method <b>{0}</b> in the new interface.
TXT_ExtractInterface_MoveMethod=Move method <b>{0}</b> to the new interface.
TXT_ExtractInterface_Field=Move field <b>{0}</b> to the new interface.
TXT_ExtractInterface_Class=Move inner class <b>{0}</b> to the new interface.
TXT_ExtractInterface_Implements=Move <b>{0}</b> to the extends clause of the new interface.
TXT_ExtractInterface_AddImplements=Add <b>{0}</b> to the implements/extends clause.
ERR_ElementNotAvailable=Cannot resolve the element.
ERR_ExtractInterface_MembersNotAvailable=Nothing to extract.
ERR_ExtractInterface_WrongModifiers=Method {0} must be public and not static.
ERR_ExtractInterface_UnknownMember={0} member cannot be extracted.

# --- EXTRACT SUPER CLASS REFACTORING ------------------------------------------------
ERR_ExtractSC_MustBeClass=The selected type must be a class (cannot perform this operation on an interface, enum or annotation type).
ERR_IntroduceLEWrongType=The selected type must be a class (cannot perform this operation on an interface, enum or annotation type).
ERR_IntroduceLEInnerType=The selected type cannot have publicly accessible Inner Types.
# Illegal member (0 = member name)
ERR_ExtractSC_IllegalMember=Member "{0}" cannot be extracted into a super class. It does not belong to the source type.
ERR_ExtractSuperClass_MembersNotAvailable=Nothing to extract.
ERR_ExtractSuperClass_UnknownMember={0} member cannot be extracted.
TXT_ExtractSC_CreateSC=Create class <b>{0}</b>.
TXT_ExtractSC_Method=Create declaration of method <b>{0}</b> in the new super class.
TXT_ExtractSC_Member=Move <b>{0}</b> to the new super class.
TXT_ExtractSC_AddExtends=Set <b>{0}</b> to the extend clause.

# --- PULL UP REFACTORING ------------------------------------------------------
# *** Pre-check ***
# No supertype
ERR_PullUp_NoSuperTypes=Cannot pull up any members. The selected type has no supertypes in the currently opened projects.
# No member
ERR_PullUp_NoMembers=The selected type and its supertypes have no members that could be pulled up.
# *** Fast parameters check
# No selected member
ERR_PullUp_NoMembersSelected=No members are selected to be pulled up.
# No target type selected
ERR_PullUp_NoTargetType=No supertype is selected.
# *** Parameters check
# Illegal target type
ERR_PullUp_IllegalTargetType=The target type is not a supertype of the source type, or the source code for the target type is not available.
# Illegal target type
ERR_PullUp_MemberTargetType=Member "{0}" equals the target type.
# Illegal member (0 = member name)
ERR_PullUp_IllegalMember=Member "{0}" cannot be pulled up. It does not belong to the source type or to one of the source type supertypes that are subtypes of the target type.
# Member already exists in the target type (0 = member name)
ERR_PullUp_MemberAlreadyExists=Member "{0}" already exists in the target type.
# *** Refactoring element descriptions
# Add abstract method to the target type (0 = method name)
ERR_CannotPullupDuplicateMembers=Cannot pull up two members with the same signature.
ERR_PullupNonPublicToInterface=Member "{0}" is being moved to interface, but is not public.
ERR_PullupStaticToInterface=Member "{0}" cannot be pulled up to interface, it is static.

TXT_PullUp_AddMethod=Add abstract method\: <b>{0}</b>
# Move member to the target type (0 = member name)
TXT_PullUp_Member=Move <b>{0}</b> to the target type.

# --- PUSH DOWN REFACTORING ------------------------------------------------------
TXT_PushDown_Member=Copy <b>{0}</b> to the type <b>{1}</b>.
TXT_PushDown_Remove=Remove <b>{0}</b> element.
TXT_PushDown_Abstract=Make method <b>{0}</b> abstract.
TXT_PushDown_RelaxAccessModifier=Change modifier from <b>{0}</b> to <b>{1}</b>.
LBL_PushDown_private=private
LBL_PushDown_package_private=package private
LBL_PushDown_protected=protected
ERR_PushDown_InvalidSource=Cannot resolve selected source: "{0}" -> "{1}".
ERR_PushDOwn_NoSubtype=Cannot push down any members. The selected type has no subtypes in the currently opened projects.
ERR_PushDown_NoMembers=The selected type has no members that could be pushed down.
ERR_PushDown_NoMembersSelected=No members are selected to be pushed down.

# --- INNER TO OUTER REFACTORING ------------------------------------------------
ERR_InnerToOuter_MustBeInnerClass=The selected type must be an inner type (cannot perform this operation on a top-level type).
ERR_InnerToOuter_FieldNameClash=Field named <b>{0}</b> already exists in this class.
ERR_InnerToOuter_OuterUsed=The class being moved to the outer level uses members of its outer class. You should let the refactoring create an instance variable holding reference to the original outer class.
ERR_InnerToOuter_InnerHidden=One of the super types of the target class already defines an inner class named <b>{0}</b>.
TXT_InnerToOuter_MoveToOuter=Make this class an inner class of <b>{0}</b>.
TXT_InnerToOuter_MoveToTop=Make this class a top-level class.
TXT_InnerToOuter_Rename=Rename this class to <b>{0}</b>.
TXT_InnerToOuter_AddReference=Add a new instance field named <b>{0}</b> pointing to the original outer class, update class constructors.
TXT_InnerToOuter_AddConstructor=Add constructor since the default constructor will not be available in the super class.
TXT_InnerToOuter_AddConstructorInvocation=Add explicit constructor invocation since the default constructor will not be available in the super class.
TXT_InnerToOuter_RelaxAccessRights=Change from private to package private.
ERR_InnerToOuter_UseDeclareField=Cannot refactor "{0}". Use "Declare Field" option.
ERR_InnerToOuter_Anonymous=Cannot refactor anonymous classes.
WRN_InnerToOuterRefToPrivate=Inner class is using private feature {0} which will not be accessible after refactoring
ERR_EmptyReferenceName=Name of the reference to the outer class can not be empty.
ERR_OuterNameAlreadyUsed=Name "{0}" is already used as a name of field from {1}.
WRN_OuterNameAlreadyUsed=Name "{0}" is already used as a name of field from {1}.
ERR_InnerToOuter_OuterNameClash=Name "{0}" is already used as a parameter of constructor from {1}.
ERR_InnerToOuter_OuterNameClashSubtype=Name {0} is already used in subtype of {1} ({2}) as a parameter of constructor.

# --- USE SUPERTYPE REFACTORING ------------------------------------------------------
TXT_UseSuperType=Use Supertype of <b>{0}</b> where possible
TXT_UseSuperTypeVariable=Change type of <b>{0}</b> to <b>{1}</b>
TXT_UseSuperTypeReturnType=Change return type of <b>{0}</b> to <b>{1}</b>
TXT_UseSuperTypeLocalVar=Change type of local variable(s) <b>{0}</b> to <b>{1}</b>
TXT_UseSuperTypeProblem=Type {0} is not visible within the body of {1}
ERR_UseSuperType_InvalidElement=Use Supertype can only be invoked on valid types
ERR_UseSuperTypeNoSuperType=No supertype selected.

# --- COPY CLASS ---------------------------------------------------------------
TXT_CopyClassToPackage=Create a new class {0} in package {1} as a copy of {2}

# rename error messages
ERR_RenameWrongType=Cannot rename this type of object. Java package, method, field or class has to be selected.
ERR_Overrides=This method overrides or implements methods in super classes/interfaces. They will also be renamed.
ERR_Overrides_Fatal=This method overrides or implements methods in super classes/interfaces, so its name cannot be changed.
ERR_Overrides_tree=This method overrides or implements a method in {0}. This method is also overridden or implemented in {1}. If you really want to perform this operation, invoke it on the method in {2}.
ERR_IsOverridden=There are methods in subclasses/implementors of {0} that override or implement this method. They will also be renamed.
ERR_IsOverriddenOverrides=The methods in subclasses/implementors of {0} that override or implement this method, also override or implement the method in super classes/interfaces. The sources will not compile after refactoring!
ERR_WillBeOverridden=After renaming, the original method "{0}" in {1} will be overridden by method "{2}" in {3}.
ERR_WillBeOverridden_access=After renaming, the original method {0} in {1} will be overridden by method "{2}" in {3} with weaker access privileges.
ERR_WillBeOverridden_static=After renaming, the original {0} method "{1}" in {2} will be overridden by {3} method "{4}" in {5}.
ERR_WillBeOverridden_final=After renaming, the original final method "{0}" in {1} will be overridden by method "{2}" in {3}.
ERR_WillOverride=After renaming, method "{0}" in {1} will override the original method "{2}" in {3}.
ERR_WillOverride_access=After renaming, method {0} in {1} will override the original method "{2}" in {3} with stronger access privileges.
ERR_WillOverride_static=After renaming, {0} method "{1}" in {2} will override the original {3} method "{4}" in {5}.
ERR_WillOverride_final=After renaming, method "{0}" in {1} will override the original final method "{2}" in {3}.
ERR_NameNotChanged=The name has not been modified. No changes will be performed.
ERR_InvalidIdentifier="{0}" is not a valid Java identifier.
ERR_InvalidPackage="{0}" is not a valid package identifier.
ERR_InvalidFolder="{0}" is not a valid folder name.
ERR_PackageExists=Package "{0}" already exists.
ERR_InnerClassClash=Cannot rename. Inner class {0} already exists in class {1}.
ERR_ClassClash=Cannot refactor. Class {0} already exists in folder {1}.
ERR_ClassPackageClash=Cannot rename. There is already folder {0} in {1}.
ERR_MethodClash=Cannot rename. Method {0} with the same signature already exists in class {1}.
ERR_FieldClash=Cannot rename. Field {0} already exists in class {1}.
ERR_LocVariableClash=Cannot rename. {0}
ERR_LabelClash=Cannot rename. Label {0} already used.
ERR_Hides=The field to be renamed hides a field in {0}.
ERR_WillHide=The new field will hide a field in {0}.
ERR_WillHidePrivate=The new field with {0} access will hide a field with {1} access in {2}.
ERR_NameNotSet=The name has not been specified.
ERR_CannotRenameFile=Cannot rename element in library file: "{0}".
ERR_ResourceUnavailable=Cannot rename method "{0}". Source file "{1}" not available.
ERR_RenameNative=Attempt to rename native method "{0}". Renaming a native method can cause UnsatisfiedLinkError on runtime.
ERR_CannotRefactorThis=Cannot refactor "{0}".

#Rename package
TXT_RenamePackage=Rename file 

#where used error messages
ERR_WhereUsedWrongType=Cannot search for usages of this type of object. A Java element has to be selected.

# move class/package error messages
ERR_TargetFolderNotSet=A target package has not been specified.
ERR_NoTarget=A target class has not been specified.
ERR_TargetNotResolved=Target class can not be resolved.
ERR_TargetFolderNotJavaPackage=A target folder is not java package.
ERR_SourceWithoutClass=Selected source does not contain any class.
ERR_AccessesPackagePrivateFeature=Class "{0}" within the same package is using feature "{1}" of class you want to move ("{2}").
ERR_AccessesPackagePrivateClass=Class "{0}" within the same package is using {1} class you want to move ("{2}").
ERR_AccessesPackagePrivateConstructor=Class "{0}" within the same package is using {1} constructor declared in class you want to move ("{2}").
ERR_AccessesPackagePrivateFeature2=Class you want to move ("{0}") is using feature "{1}" of class "{2}" within the same package.
ERR_AccessesPackagePrivateClass2=Class you want to move ("{0}") is using {1} class ("{2}") within the same package.
ERR_AccessesPackagePrivateConstructor2=Class you want to move ("{0}") is using {1} constructor declared in class ("{2}") within the same package.
ERR_PackageIsReadOnly=Package "{0}" is read only.
ERR_ClassToCopyClashes=Class "{0}" already exists in the target package.
ERR_ClassesToCopyClashes=One or more class names are already used in the target package, they will be renamed.
ERR_ClassToMoveInDefaultPackage=After the move, it will not be possible to import classes in the original default package.
ERR_MovingClassToDefaultPackage=If the class is moved to the default package, classes in other packages will not be able to import the moved class.
ERR_MovingMemberToDefaultPackage=If the member is moved to a class in the default package, classes in other packages will not be able to reference the moved member.
ERR_FileAlreadyExists=File {0} already exists in package {1}.
ERR_PackageMovesToItself=The parent package has been selected as the destination. There are no changes to be performed.
ERR_CannotMovePackageToSubpackage=A package cannot be moved into one of its subpackages or into itself.
ERR_DefaultPackageCannotBeMoved=Default package cannot be moved.
ERR_CannotMoveFile=Cannot move file from library: "{0}".
ERR_MissingProjectDeps=There are references in project "{0}" to moved files, but source project "{0}" does not depend on target project "{1}". Projects need not compile.
ERR_MemberMissingProjectDeps=Source project "{0}" does not depend on target project "{1}", but there are references in project "{0}" to moved members. Projects will not compile.

# encapsulate field error messages
ERR_EncapsulateWrongType=Cannot encapsulate this type of object. A field has to be selected.
ERR_EncapsulateNoFields=No field found in {0}.
ERR_EncapsulateInIntf=Cannot encapsulate an interface field.
ERR_EncapsulateMethods=Getter and setter names have to be valid method names.
ERR_EncapsulateMethodsAccess=The accessibility of created methods is private but some selected fields are referenced from other sources.
ERR_EncapsulateMethodsDefaultAccess=The refactoring might break your code since created methods have a default accessibility but some selected fields are referenced from other sources.
ERR_EncapsulateInsideAssignment=Cannot replace {0} in {1} with void setter in {2}.
ERR_EncapsulateInsideConstructor=The accessibility of field {0} is private but it is referenced from constructor of class {1}.
ERR_EncapsulateWrongGetter=The getter {0} already exists but with wrong return type {1}.
ERR_EncapsulateWrongSetter=The setter {0} already exists but with wrong return type {1}.
ERR_EncapsulateAccessGetter=The getter {0} will override method in class {1}, but has weaker access privileges.
ERR_EncapsulateAccessSetter=The setter {0} will override method in class {1}, but has weaker access privileges.
ERR_EncapsulateAccessOverGetter=The getter {0} will be overriden in class {1} with weaker access privileges.
ERR_EncapsulateAccessOverSetter=The setter {0} will be overriden in class {1} with weaker access privileges.
ERR_EncapsulateNothingSelected=Nothing to encapsulate. You have to select some checkbox.
ERR_EncapsulatePropertyVetoException=Setter method throws PropertyVetoException which must be handled.

# change method signature error messages
ERR_MethodOverrides=The method overrides or implements methods in super classes/interfaces.
ERR_MethodIsOverridden=There are methods in subclasses or implementors of {0} that override or implement the method.
WRN_MethodIsOverridden=There are methods in subclasses or implementors of {0} that will override or implement the method.
ERR_HasVarArg=You cannot use the Change Method Parameters refactoring on methods with variable arguments.
ERR_newpar=You have to provide {0} for all new parameters.
ERR_parname=parameter name
ERR_partype=parameter type
WRN_canNotResolve=Cannot resolve the type {0} for variable {1}. The sources may not compile after refactoring!
ERR_canNotResolve=Cannot resolve the type for {0}.
WRN_canNotResolveReturn=Cannot resolve the return type {0}. The sources may not compile after refactoring!
ERR_NoReturn=You have to provide a return type.
WRN_isNotAssignable=Old parameter values of type {0} can not be assigned to {1}. The sources may not compile after refactoring!
ERR_pardefv=default values
ERR_existingMethod=Method {0} with the same signature already exists in class {1}.
WRN_wideningConversion=Method {0} with the same signature (through widening) already exists in class {1}. Behavior can change.
ERR_existingConstructor=Constructor {0} with the same signature already exists in class {1}.
ERR_existingConstr=Cannot change signature. Constructor with the same signature already exists in class {0}.
ERR_NoValues=You have to provide values for the new parameters.
ERR_DuplicateName=Duplicate parameter name ({0}).
ERR_NameAlreadyUsed=Name "{0}" is already used as a name of a local variable.
ERR_NameAlreadyUsedField=Name "{0}" is already used as a name of a field.
ERR_ParamAlreadyUsed=Name "{0}" is already used as a name of parameter.
ERR_CannotChangeModifiers=Cannot change modifiers of method in interface.
ERR_StrongAccMod=You changed the access modifier to {0}. Method will not be accessible for some references in {1}. The sources will not compile after refactoring!
ERR_WeakerAccess=Method {0} with the same signature in class {1} has weaker access privileges.
ERR_existingReturnType=Method {0} with the same signature in class {1} has a different return type, {2} -> {3}

ERR_ChangeParamsWrongType=Cannot change parameters of this object. A method or the constructor has to be selected.
MSG_NothingToFind=You have not selected anything to find. Select Find Usages, Find Overriding Methods, or both.
ERR_CannotRefactorLibraryClass=Cannot refactor library class "{0}".
ERR_MethodsInAnnotationsNotSupported=@interface members may not have parameters.
ERR_CannnotRefactorLibrary=Cannot change parameters of "{0}" which overrides method from library class.

ERR_VarargsFinalPosition=Varargs can be used only in the final argument position.
ERR_FindUsagesArrayType=Cannot perform find usages on []

ERR_DollarWarning=The $ character should be used only in mechanically generated code.
ERR_UpperCaseWarning=The first letter of Java type should be in upper case.

TAG_Deprecated=@deprecated Moved to '{'@link {0}'}'

ERR_NoFactory=No factory method name specified.
ERR_NoBuildMethod=No build method name specified.
ERR_NotIdentifier={0} is not an identifier.
ERR_FileExists=File {0} already exists.
