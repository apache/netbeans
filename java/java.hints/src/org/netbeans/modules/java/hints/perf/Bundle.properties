#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
DN_org.netbeans.modules.java.hints.perf.ManualArrayCopy=Manual array copy
DESC_org.netbeans.modules.java.hints.perf.ManualArrayCopy=Finds occurrences of manual array copying via for loop
ERR_manual-array-copy-coll=Manual array copy to Collection
FIX_manual-array-copy-coll=Replace with Collection.addAll(Arrays.asList(...))
ERR_manual-array-copy=Manual array copy
FIX_manual-array-copy=Replace with System.arraycopy

DN_org.netbeans.modules.java.hints.perf.SizeEqualsZero=Usage of [Collection|Map].size() == 0
DESC_org.netbeans.modules.java.hints.perf.SizeEqualsZero=Use [Collection|Map].isEmpty() instead of .size() == 0 and !.isEmpty() instead of .size() != 0 or .size() > 0 where possible.
ERR_SizeEqualsZero={0}.size() == 0 can be replaced with {0}.isEmpty()
ERR_SizeEqualsZeroNeg={0}.size() != 0 can be replaced with !{0}.isEmpty()
ERR_SizeGreaterZeroNeg={0}.size() > 0 can be replaced with !{0}.isEmpty()
FIX_SizeEqualsZero=Change to {0}.isEmpty()
FIX_SizeEqualsZeroNeg=Change to !{0}.isEmpty()
FIX_SizeGreaterZeroNeg=Change to !{0}.isEmpty()
LBL_org.netbeans.modules.java.hints.perf.SizeEqualsZero.CHECK_NOT_EQUALS=Also check for .size() != 0 and .size() > 0
TP_org.netbeans.modules.java.hints.perf.SizeEqualsZero.CHECK_NOT_EQUALS=Should this hint also report occurrences of ".size() != 0" and ".size() > 0"?

DN_org.netbeans.modules.java.hints.perf.Tiny.stringConstructor=String constructor
DESC_org.netbeans.modules.java.hints.perf.Tiny.stringConstructor=Use of java.lang.String constructor is usually useless.
ERR_StringConstructor=String constructor invocation
FIX_StringConstructor=Remove String constructor invocation
LBL_org.netbeans.modules.java.hints.perf.Tiny.SC_IGNORE_SUBSTRING=Ignore String constructors containing invocations of String.substring
TP_org.netbeans.modules.java.hints.perf.Tiny.SC_IGNORE_SUBSTRING=Ignore String constructors containing invocations of java.lang.String.substring

DN_org.netbeans.modules.java.hints.perf.Tiny.stringEqualsEmpty=String.equals("")
DESC_org.netbeans.modules.java.hints.perf.Tiny.stringEqualsEmpty=Use of String.equals("") can be replaced with with \
String.length() == 0 (for JDK5 and lower) or String.isEmpty() (for JDK6 and higher)
ERR_StringEqualsEmpty=String equals empty string
FIX_StringEqualsEmpty=Change to String.length() == 0
FIX_StringEqualsEmptyNeg=Change to String.length() != 0
FIX_StringEqualsEmpty16=Change to String.isEmpty()

DN_org.netbeans.modules.java.hints.perf.StringBuffer2Builder=Useless use of StringBuffer
DESC_org.netbeans.modules.java.hints.perf.StringBuffer2Builder=Use StringBuilder instead of StringBuffer where possible.
ERR_StringBuffer2Builder=StringBuffer can be replaced with StringBuilder
FIX_StringBuffer2Builder=Replace with StringBuilder

DN_org.netbeans.modules.java.hints.perf.Tiny.lengthOneStringIndexOf=Length one String in String.indexOf
DESC_org.netbeans.modules.java.hints.perf.Tiny.lengthOneStringIndexOf=Length one String literal in String.indexOf can be replaced with a character literal
#the string:
ERR_LengthOneStringIndexOf=Length one string {0} in String.indexOf
FIX_LengthOneStringIndexOf=Replace with a character literal

DN_org.netbeans.modules.java.hints.perf.Tiny.getClassInsteadOfDotClass=.getClass() replaceable with .class
DESC_org.netbeans.modules.java.hints.perf.Tiny.getClassInsteadOfDotClass=Finds instantions of a class directly followed by invocation of .getClass() on the newly constructed object
ERR_GetClassInsteadOfDotClass=Invocation of .getClass() can be replaced with .class
FIX_GetClassInsteadOfDotClass=Replace invocation of .getClass() with .class

DN_org.netbeans.modules.java.hints.perf.Tiny.constantIntern=String.intern() called on constant
DESC_org.netbeans.modules.java.hints.perf.Tiny.constantIntern=Invocations of String.intern() on compile-time constants are superfluous.
ERR_ConstantIntern=Invoking String.intern() of a compile-time constant is superfluos
FIX_ConstantIntern=Remove invocation of String.intern()

DN_org.netbeans.modules.java.hints.perf.NoBooleanConstructor=Creating new Boolean
DESC_org.netbeans.modules.java.hints.perf.NoBooleanConstructor=Creating new Boolean is inefficient and typically useless.
ERR_NoBooleanConstructor=Creating new Boolean is inefficient
FIX_NoBooleanConstructorBoolean=Remove Boolean constructor invocation
FIX_NoBooleanConstructorString=Remove Boolean constructor invocation

DN_org.netbeans.modules.java.hints.perf.InitialCapacity.collections=Collections without initial capacity
DESC_org.netbeans.modules.java.hints.perf.InitialCapacity.collections=Looks for instantiations of collections with missing initial capacity. Only collections backed-up with an array are tested.
ERR_InitialCapacity_collections=Instantiating collection without specified initial capacity

DN_org.netbeans.modules.java.hints.perf.InitialCapacity.stringBuilder=StringBuilder without initial capacity
DESC_org.netbeans.modules.java.hints.perf.InitialCapacity.stringBuilder=Looks for instantiations of StringBuilder or StringBuffer with missing initial capacity.
ERR_InitialCapacity_stringBuilder=Instantiating StringBuilder or StringBuffer without specified capacity

DN_org.netbeans.modules.java.hints.perf.Tiny.enumSet=Set replaceable with EnumSet
DESC_org.netbeans.modules.java.hints.perf.Tiny.enumSet=Finds instantiations of Sets that can be replaced with EnumSet
DN_org.netbeans.modules.java.hints.perf.Tiny.enumMap=Map replaceable with EnumMap
DESC_org.netbeans.modules.java.hints.perf.Tiny.enumMap=Finds instantiations of Maps that can be replaced with EnumMap
ERR_Tiny_enumSet=Set can be replaced with java.util.EnumSet
ERR_Tiny_enumMap=Map can be replaced with java.util.EnumMap
FIX_Tiny_enumMap=Replace Map with java.util.EnumMap

DN_org.netbeans.modules.java.hints.perf.Tiny.collectionsToArray=Inefficient Collection.toArray
DESC_org.netbeans.modules.java.hints.perf.Tiny.collectionsToArray=<p>Passing new T[0] or T[]::new to Collection.toArray has \
    better performance on modern JVMs than the allocation of a new empty array (new T[collection.size()]) since the JVM can \
    return a copy directly without having to zero it out first.</p> \
    <p>T[]::new is also more concise and often considered best practice on Java 11 and later.</p>
ERR_Tiny_collectionsToArray=New array created just to be passed to Collection.toArray
FIX_Tiny_collectionsToArrayByZeroArray=Change to new {0}[0]
FIX_Tiny_collectionsToArrayByMethodRef=Change to {0}::new

DN_ReplaceBufferByString=Replace StringBuffer/StringBuilder by String
DESC_ReplaceBufferByString=The hint will find and offer to replace instances of <b>StringBuffer</b> or <b>StringBuilder</b> \
    which are accessed using ordinary <b>String</b> methods and are never passed out of the method, or assigned to another \
    variable. Keeping such data in StringBuffer/Builder is pointless, and String would be more efficient.

DN_BoxingOfBoxedValue=Boxing of already boxed value
DESC_BoxingOfBoxedValue=Reports boxing of already boxed value. Constructor or <i>valueOf</i> take a primitive parameter, so a \
    boxed value is unboxed first, then boxed again, which may create an extra instance of the wrapper and impact the performance.

DN_RedundantToString=Redundant String.toString()
DESC_RedundantToString=Reports calls of String.toString(), which is entirely useless, the String can be used directly.

DN_UnnecessaryTempFromString=Unnecessary temporary during conversion from String
DESC_UnnecessaryTempFromString=Finds occurrences of <i>Integer.valueOf($string)</i> and similar constructions, which \
    are assigned to primitive types and replaces it with <i>Integer.parseInt($string)</i> (vice versa for assignments to boxed types), \
    to remove unnecessary temporary boxing.

DN_UnnecessaryTempToString=Unnecessary temporary during conversion to String
DESC_UnnecessaryTempToString=Finds places like <i>Integer.valueOf(11).toString()</i> where a temporary boxed instance is created to \
    just produce a String representation of a primitive. The boxed types have <i>toString()</i> static method just for that purpose.

DN_BoxedPrimitiveConstruction=Boxed Primitive instantiation
DESC_BoxedPrimitiveConstruction=Replace the usage of deprecated boxed primitive constructors (new Integer("5")) \
    with their corresponding factory methods (Integer.valueOf("5")). This inspection can be used in conjunction with \
    <i>Unnecessary temporary during conversion from String</i>, to suggest <i>parseXXX()</i> instead of <i>valueOf()</i> where applicable.