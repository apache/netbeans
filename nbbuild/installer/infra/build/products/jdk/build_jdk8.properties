#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# path to the directory where the base build scripts library and properties 
# reside
common.dir=../../../../../nbi/infra/build/.common

# path to the local working directory; this directory which will be the target 
# for checking out the sources and will be used for the build process
# * this path can be either absolute or relative in any unix environment, 
#   however, only relative paths are supported on windows, as the cygwin scp 
#   command does not properly handle colon in local paths
work.dir=./build

# path to the local distributive directory; this directory will contain the 
# distributive file, when (if) the build script finishes successfully
dist.dir=./dist

# path to the products's sources within the cvs module; it should be a relative 
# path from the module's root, e.g. for 'nbi/engine', where 'nbi is the module 
# name, the path should be 'engine'
cvs.path=components/products/jdk

# core product properties: 
# * ${product.uid} - product "family" (e.g. nb-ide)
# * ${product.version} - actual products' version; together with the uid it 
#   forms the unique identifier for the product)
# * ${product.platforms} - the list of platforms that are supported by this 
#   product (note that this property is not related to native libraries)
product.uid=jdk
product.version=1.${jdk.version.number}.0.${jdk.update.number.long}.${jdk.build.number}
product.version.windows=${product.version}32
product.version.windows-x64=${product.version}64
product.version.linux=${product.version}32
product.version.linux-x64=${product.version}64
#product.platforms= - will be overriden, as we need to build several times 
#                     for several platforms

# miscellaneous product properties:
# * ${product.status} - default status that the product will have in the 
#   registry. it is meant to be always "not-installed", unless you want 
#   something really exotic
# * ${product.offset} - order of the product's node among its parent's 
#   children, the bigger the offset value, the further the product's node will 
#   be
# * ${product.expand} - whether to automatically expand the product's node in 
#   the components tree or not; 'true'/'false'
# * ${product.visible} - whether the product's node is visible or not (note 
#   that this value will be modified at nbi runtime, 'true' may become 'false' 
#   if the product is filtered out); 'true'/'false'
# * ${product.features} - list of features that this porduct belongs to; the 
#   list should be space-separated
product.status=not-installed
product.offset=10000
product.expand=false
product.visible=true
product.features=

# list of configuration logic jar files; normally the first one would be the 
# distributive file of the product's netbeans project
# * ${product.logic.length} - total number of the files
# * indices should start with 1
product.logic.length=1
product.logic.1.uri=file:${nbproject.dist.dir}/${nbproject.dist.file.name}

# list of product installation data files
# * ${product.data.length} - total number of the files
# * ${product.data.N.uri} - uri at which the installation data file is located
# * ${product.data.N.zip} - whether the data file is a zip archive which needs to 
#   be extracted or it is a file that should be used directly; 'true'/'false'
# * indices should start with 1

product.data.length=${product.data.length.${product.platforms}}
product.data.length.windows=1
product.data.length.windows-x64=1
product.data.length.linux=1
product.data.length.linux-x64=1

product.data.1.uri.prefix=${jdk.builds.host}/${jdk8.builds.path}/all/b${jdk.build.number}/bundles
product.data.1.uri.windows=${product.data.1.uri.prefix}/windows-i586/jdk-8u${jdk.update.number}-${jdk.ea.text}windows-i586.exe
product.data.1.uri.windows-x64=${product.data.1.uri.prefix}/windows-x64/jdk-8u${jdk.update.number}-${jdk.ea.text}windows-x64.exe
product.data.1.uri.linux=${product.data.1.uri.prefix}/linux-i586/jdk-8u${jdk.update.number}-${jdk.ea.text}linux-i586.tar.gz
product.data.1.uri.linux-x64=${product.data.1.uri.prefix}/linux-x64/jdk-8u${jdk.update.number}-${jdk.ea.text}linux-x64.tar.gz
product.data.1.uri=${product.data.1.uri.${product.platforms}}
product.data.1.zip=false
product.data.1.tar.windows=false
product.data.1.tar.windows-x64=false
product.data.1.tar.linux=true
product.data.1.tar.linux-x64=true
product.data.1.tar=${product.data.1.tar.${product.platforms}}
folder.name.unzipped=jdk1.${jdk.version.number}.0_${jdk.update.number.long}

# modificator for the required disk space parameter; the core value will be the
# sum of unzipped unstallation data files
# * the measurement unit is one byte
product.disk.space.modificator.windows=257000000
product.disk.space.modificator.windows-x64=257000000
product.disk.space.modificator.linux=235000000
product.disk.space.modificator.linux-x64=235000000
product.disk.space.modificator=${product.disk.space.modificator.${product.platforms}}


# product's requirements (i.e. other products that should be installed
# in order for this product to succesfully install and function)
# * ${product.requirements.length} - total number of the requirements
# * indices should start with 1
product.requirements.length=0
#product.requirements.1.uid=
#product.requirements.1.version-lower=
#product.requirements.1.version-upper=

# product's conflicts (i.e. other products that prevent this product from 
# functioning correctly, and thus cannot be installed together with it)
# * ${product.conflicts.length} - total number of the conflicts
# * indices should start with 1
product.conflicts.length=0
#product.conflicts.1.uid=
#product.conflicts.1.version-lower=
#product.conflicts.1.version-upper=

# other products that should be installed prior to this product; these 
# dependencies do not imply that the dependent product will be installed at 
# all, but if both the current and the dependent product are selected for 
# installation, the latter will be installed first
# * ${product.install-afters.length} - total number of the install-afters
# * indices should start with 1
#product.install-afters.length=
#product.install-afters.1.uid=

# additional product's properties; these will appear in the product's 
# descriptor and in the registry in the form of 
# <property name="[name]">value</property> tags.
# * ${product.properties.length} - total number of the properties
# * indices should start with 1
# * properties are not i18n compliant
product.properties.length=2
product.properties.1.name=installation.location
product.properties.1.value=$N{install}/jdk1.${jdk.version.number}.0_${jdk.update.number.long}
product.properties.2.name=installation.location.windows
product.properties.2.value.windows=$N{install}/Java/jdk1.${jdk.version.number}.0_${jdk.update.number.long}
product.properties.2.value.windows-x64=$N{install_x64}/Java/jdk1.${jdk.version.number}.0_${jdk.update.number.long}
product.properties.2.value=${product.properties.2.value.${product.platforms}}



# sources parameters; a search-and-replace will be run over the sources after 
# check-out, replacing [token] => [value]; regular expressions are not allowed
# * ${sources.params.length} - total number of the parameters
# * indices should start with 1
# * parameters are not i18n compliant
sources.params.length=5
sources.params.1.token={display-version}
sources.params.1.value=${jdk.version.number} Update ${jdk.update.number}
sources.params.2.token={jdk-installer-file}
sources.params.2.value.windows=jdk-${jdk.version.number}u${jdk.update.number}-windows-i586.exe
sources.params.2.value.windows-x64=jdk-${jdk.version.number}u${jdk.update.number}-windows-x64.exe
sources.params.2.value.linux=
sources.params.2.value.linux-x64=
sources.params.2.value=${sources.params.2.value.${product.platforms}}
sources.params.3.token={jdk-install-dir}
sources.params.3.value=${folder.name.unzipped}
sources.params.4.token={jdk-base-dir}
sources.params.4.value=jdk1.${jdk.version.number}.0_${jdk.update.number.long}.b${jdk.build.number}
