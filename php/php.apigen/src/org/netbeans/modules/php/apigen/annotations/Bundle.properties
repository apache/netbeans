# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

AbstractTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@abstract</p>\
<p>\
Document an abstract class, class variable or method.\
</p>\
<p>\
<code>@abstract</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
Use the <code>@abstract</code> tag to declare a method, class variable, or class that must be re-defined in a child class to be valid.\
</p>\
<p>\
The <code>@abstract</code> tag is only valid in PHP 4, PHP 5 has a keyword <code>abstract</code>.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Example of basic @abstract usage in a class.\n\
\ * \n\
\ * Use this if every single element of the class is abstract.\n\
\ * @abstract\n\
\ */\n\
class MyAbstractClass {\n\
\   function function1($baz) {\n\
\       ...\n\
\   }\n\
\   \n\
\   function function2() {\n\
\       ...\n\
\   }\n\
}\n\
</code></pre>

AccessTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@access</p>\
<p>\
Access control for an element. <code>@access</code> <code>private</code> prevents documentation of the following element (if enabled).\
</p>\
<p>\
<code>@access private|protected|public</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
<code>@access</code> controls <code>phpDocumentor</code>'s documentation of an element.\
</p>\
<p>\
If <code>@access</code> is <code>private</code>, the element will not be documented unless specified by command-line switch <code>--parseprivate</code>.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Function func1, public access is assumed.\n\
\ */\n\
function func1() {\n\
\    ...\n\
}\n\
\n\
/**\n\
\ * Function func2, access is private, will not be documented.\n\
\ * \n\
\ * @access private\n\
\ */\n\
function func2() {\n\
\    ...\n\
}\n\
\n\
/**\n\
\ * This is possible, but redundant.  An element has @access public by default.\n\
\ * \n\
\ * @access public\n\
\ */\n\
class Class1 {\n\
\    /**\n\
\     * All text in this DocBlock will be ignored, unless command-line switch or\n\
\     * setting in a user INI file enables documenting of private elements.\n\
\     * \n\
\     * @access private\n\
\     */\n\
\    var $privateVar;\n\
\n\
\    /**\n\
\     * Protected is allowed, but does absolutely nothing.  Use it to inform users\n\
\     * that an element should only be referenced by this and child classes, and not directly.\n\
\     * \n\
\     * @access protected\n\
\     */\n\
\n\
\    /**\n\
\     * This function is documented.\n\
\     */\n\
\    function publicMethod() {\n\
\        ...\n\
\    }\n\
}\n\
</code></pre>

AuthorTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@author</p>\
<p>\
Author of current element.\
</p>\
<p>\
<code>@author authorname <authoremail@example.com></code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
The <code>@author</code> tag is used to document the author of any element that can be documented (global variable, include, constant, \
function, define, class, variable, method, page). <code>phpDocumentor</code> will take any text between angle brackets \
(<code>&lt;</code> and <code>&gt;</code>) and try to parse it as an email address. If successful, it will be displayed with a <code>mailto</code> \
link in the page.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Page-Level DocBlock example.\n\
\ * Displays as Gregory Beaver cellog@php.net\n\
\ * , where underlined text is a "mailto:cellog@php.net" link\n\
\ * \n\
\ * @author Gregory Beaver <cellog@php.net>\n\
\ */\n\
\n\
/**\n\
\ * Function datafunction.\n\
\ * Another contributor authored this function.\n\
\ * \n\
\ * @author Joe Shmoe\n\
\ */\n\
function datafunction() {\n\
\    ...\n\
}\n\
</code></pre>

CategoryTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@category</p>\
<p>\
Specify a category to organize the documented element's package into.\
</p>\
<p>\
<code>@category categoryname</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
The <code>@category</code> tag is used to organize groups of packages together. This is directly applicable to the <code>XML:DocBook/peardoc2</code> Converter, and can be used by other converters. Other Converters packaged with <code>phpDocumentor</code> ignore the category, but this may change in future versions. It is also possible to dynamically specify category using the <code>-dc</code>, <code>--defaultcategoryname</code> command-line switch.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Page-Level DocBlock.\n\
\ *\n\
\ * @package MyPackage\n\
\ * @category mycategory\n\
\ */\n\
\n\
/**\n\
\ * @global array used for stuff\n\
\ */\n\
function mine() {\n\
\    global $baz;\n\
\    ...\n\
}\n\
</code></pre>

CopyrightTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@copyright</p>\
<p>\
Document Copyright information.\
</p>\
<p>\
<code>@copyright copyright information</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
The <code>@copyright</code> tag is used to document the copyright information of any element that can be documented (global variable, include, constant, function, define, class, variable, method, page). <code>phpDocumentor</code> will display the copyright string unaltered.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Page-Level DocBlock example.\n\
\ * \n\
\ * @author John Doe <cellog@php.net>\n\
\ * @copyright Copyright (c) 2012, John Doe\n\
\ */\n\
\n\
/**\n\
\ * Function dataFunction.\n\
\ */\n\
function dataFunction() {\n\
\    ...\n\
}\n\
</code></pre>

DeprecatedTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@deprecated</p>\
<p>\
Document elements that have been deprecated and should not be used as they may be removed at any time from a future version.\
</p>\
<p>\
<code>@deprecated version/info string</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
The <code>@deprecated</code> tag is used to document the deprecation version or other information of any element that can be documented except for page (global variable, include, constant, function, define, class, variable, method). If present, <code>phpDocumentor</code> will display the optional version/info string unaltered.\
</p>\
<p>\
Use <code>@deprecated</code> to notify users of deprecated elements that should not be used any longer.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @deprecated since version 2.0\n\
\ */\n\
function uselessFunction() {\n\
\    ...\n\
}\n\
\n\
/**\n\
\ * Also legal.\n\
\ *\n\
\ * @deprecated\n\
\ */\n\
class DummyClass {\n\
\    ...\n\
}\n\
</code></pre>

ExampleTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@example</p>\
<p>\
Include an external example file with syntax highlighting.\
</p>\
<p>\
<code>@example /path/to/example.php description</code><br />\
<code>@example relativepath/to/example.php description</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
The example tag can be used to parse an example file for syntax highlighting and linking to documentation. This versatile tag attempts to read the file from the full path specified, and will accept any path that http://www.php.net/fopen will accept. <code>phpDocumentor</code> checks the path to ensure that the file retrieved has a valid <code>.php</code> extension as defined in <code>phpDocumentor.ini</code>, and then opens the file. It will parse the file, and output syntax-highlighted source with line numbers, links to documentation and will then add a link to the documentation to that file.\
</p>\
<p>\
If given an absolute path, <code>phpDocumentor</code> will not search for the example file any further. If given a relative path (no leading c:\ or /) <code>phpDocumentor</code> searches for examples files first in the directory specified by the <code>-ed</code>, <code>--examplesdir</code> command-line, if present. As of <code>phpDocumentor</code> 1.2.1, it will next search for the file in an <code>examples/</code> subdirectory of the current file's directory. Otherwise, it will search for a subdirectory named <code>examples</code> in the top-level parsing directory, and if not found, in the top-level directory.\
</p>\
<p>\
The top-level parsing directory is simply the directory that every file parsed has in common.\
</p>\
<p>\
To do an inline code example, use the html tag &lt;code&gt; or the new inline <code>{@example}</code> tag.\
</p>\
<p>\
<code>@example</code> only works with PHP 4.3.0+ due to the use of the tokenizer extension, which was not stable prior to PHP 4.3.0. Go to http://www.php.net and download PHP 4.3.0 to use <code>@example</code>.\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * My function.\n\
\ *\n\
\ * Here is an inline example:\n\
\ * &lt;pre&gt;&lt;code&gt;\n\
\ * &lt;?php\n\
\ * echo strlen('6');\n\
\ * ?&gt;\n\
\ * &lt;/code&gt;&lt;/pre&gt;\n\
\ * @example /path/to/example.php How to use this function\n\
\ * @example anotherexample.inc This example is in the "examples" subdirectory\n\
\ */\n\
function mine() {\n\
\    ...\n\
}\n\
</code></pre>

FinalTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@final</p>\
<p>\
Document a class method that should never be overridden in a child class.\
</p>\
<p>\
<code>@final</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
Use the <code>@final</code> tag to declare a method that cannot be overridden in a child class.\
</p>\
<p>\
The <code>@final</code> tag is only valid in PHP 4, PHP 5 has a keyword <code>final</code>.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
 * Example of basic @final usage in a class.\n\
 */\n\
class MyClass {\n\
\   /**\n\
\    * Function1 should never be overridden.\n\
\    *\n\
\    * @final\n\
\    */\n\
\   function function1($baz) {\n\
\       ...\n\
\   }\n\
\n\
\   function function2() {\n\
\       ...\n\
\   }\n\
}\n\
</code></pre>

FilesourceTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@filesource</p>\
<p>\
Create a syntax-highlighted cross-referenced file containing source code of the current file and link to it.\
</p>\
<p>\
<code>@filesource</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
The <code>@filesource</code> tag can only be used in a page-level <code>DocBlock</code>, it will be ignored anywhere else. <code>phpDocumentor</code> parses the file source of the current file, and outputs syntax-highlighted source code with line numbers, links to documentation and then adds a link to the generated file in the documentation.\
</p>\
<p>\
The <code>@example</code> tag serves a similar purpose, but is designed to parse and create a link to an external example file.\
</p>\
<p>\
<code>@filesource</code> only works with PHP 4.3.0+ due to the use of the <code>tokenizer</code> extension, which was not stable prior to PHP 4.3.0. Go to http://www.php.net and download PHP 4.3.0 to use <code>@filesource</code>.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Contains several example classes that I want to parse but I\n\
\ * also want to show the full source\n\
\ *\n\
\ * @package mypackage\n\
\ * @subpackage example\n\
\ * @filesource\n\
\ */\n\
\n\
/**\n\
\ * This class does things\n\
\ *\n\
\ * @package mypackage\n\
\ * @subpackage example\n\
\ */\n\
class OneOfMany extends MainClass {\n\
\    ...\n\
}\n\
</code></pre>

GlobalTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@global</p>\
<p>\
Document a global variable, or its use in a function/method.\
</p>\
<p>\
<code>@global datatype $globalvariablename</code><br />\
<code>@global datatype description</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
Since there is no standard way to declare global variables, <code>phpDocumentor</code> requires that a <code>@global</code> tag be used in a <code>docblock</code> preceding a global variable's definition. To support previous usage of <code>@global</code>, there is an alternate syntax that applies to <code>DocBlocks</code> preceding a function, used to document usage of global variables. in other words, There are two usages of <code>@global</code>: definition and function usage.\
</p>\
<p>\
<code>phpDocumentor</code> will not attempt to automatically parse out any global variables. Only one <code>@global</code> tag is allowed per global variable <code>DocBlock</code>. A global variable <code>DocBlock</code> must be followed by the global variable's definition before any other element or <code>DocBlock</code> occurs in the source, or an error will be raised.\
</p>\
<p>\
<code>datatype</code> should be a valid PHP type or <code>mixed</code>.\
</p>\
<p>\
<code>$varname</code> should be the EXACT name of the global variable as it is declared in the source (use <code>@name</code> to change the name displayed by documentation).\
</p>\
<p>\
The function/method <code>@global</code> syntax is used to document usage of global variables in a function, and MUST NOT have a <code>$</code> starting the third word. The datatype will be ignored if a match is made between the declared global variable and a variable documented in the project.\
</p>\
<p>\
<code>phpDocumentor</code> will check to see if the type specified is the name of a class that has been parsed. If so, it will make a link to that class as the type instead of just the type.\
</p>\
<p>\
<code>phpDocumentor</code> will display the optional description unmodified.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>\
Here's an example of documenting the definition of a global variable:\
</p>\
<pre><code>\n\
/**\n\
\ * Example of incorrect @global declaration #1.\n\
\ *\n\
\ * @global bool $GLOBALS['baz']\n\
\ * @author blahblah\n\
\ * @version -6\n\
\ */\n\
include("file.ext");\n\
// error - element encountered before global variable declaration, docblock will apply to this include!\n\
$GLOBALS['baz'] = array('foo','bar');\n\
\n\
/**\n\
\ * Example of incorrect @global declaration #2.\n\
\ *\n\
\ * @global parserElement $_Element\n\
\ */\n\
\n\
/**\n\
\ * Error - this DocBlock occurs before the global variable definition and will apply to the function,\n\
\ * ignoring the global variable completely.\n\
\ */\n\
$_Element = new parserElement;\n\
\n\
function oopsie() {\n\
\    ...\n\
}\n\
\n\
/**\n\
\ * Example of correct @global declaration,\n\
\ * even with many irrelevant things in between.\n\
\ *\n\
\ * @global mixed $_GLOBALS["myvar"]\n\
\ */\n\
// this is OK\n\
if ($pre) {\n\
\    $thisstuff = 'is fine too';\n\
}\n\
$_GLOBALS["myvar"] = array( "this" => 'works just fine');\n\
\n\
/**\n\
\ * Example of using @name with @global\n\
\ * the @name tag *must* have a $ in the name, or an error will be raised.\n\
\ *\n\
\ * @global array $GLOBALS['neato']\n\
\ * @name $neato\n\
\ */\n\
$GLOBALS['neato'] = 'This variable\'s name is documented as $neato, and not as $GLOBALS[\'neato\']';\n\
</code></pre>\
<p>\
Here's an example of documenting the use of a global variable in a function/method:\
</p>\
<pre><code>\n\
/**\n\
\ * Used to showcase linking feature of function @global\n\
\ */\n\
class Test {\n\
\    ...\n\
}\n\
\n\
/**\n\
\ * @global test $GLOBALS['baz']\n\
\ * @name $bar\n\
\ */\n\
$GLOBALS['bar'] = new Test\n\
\n\
/**\n\
\ * Example of basic @global usage in a function\n\
\ * assume global variables "$foo" and "$bar" are already documented.\n\
\ *\n\
\ * @global bool used to control the weather\n\
\ * @global test used to calculate the division tables\n\
\ * @param bool $baz\n\
\ * @return mixed\n\
\ */\n\
function function1($baz) {\n\
\   global $foo, $bar;\n\
\   // note that this also works as:\n\
\   // global $foo;\n\
\   // global $bar;\n\
\   if ($baz) {\n\
\      $a = 5;\n\
\   } else {\n\
\      $a = array(1,4);\n\
\   }\n\
\   return $a;\n\
}\n\
</code></pre>

IgnoreTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@ignore</p>\
<p>\
Prevent documentation of an element.\
</p>\
<p>\
<code>@ignore</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
Use <code>@ignore</code> to prevent <code>phpDocumentor</code> from documenting an element, such as a duplicate element.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
if ($ostest) {\n\
\    /**\n\
\     * This define will either be 'Unix' or 'Windows'.\n\
\     */\n\
\    define("OS","Unix");\n\
} else {\n\
\    /**\n\
\     * @ignore\n\
\     */\n\
\    define("OS","Windows");\n\
}\n\
</code></pre>

InheritDocTag.documentation=<p style="font-weight: bold; font-size: 1.2em">inline {@inheritDoc}</p>\
<p>\
This inline tag is used to inherit a description from a parent class into child classes.\
</p>\
<p>\
<code>{@inheritDoc}</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Parent title.\n\
\ *\n\
\ * Parent Description.\n\
\ */\n\
class ParentClass\n\
{\n\
}\n\
\n\
/**\n\
\ * {@inheritdoc}\n\
\ */\n\
class ChildClass extends ParentClass\n\
{\n\
}\n\
</code></pre>

InternalTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@internal</p>\
<p>\
Mark documentation as private, internal to the software project.\
</p>\
<p>\
<code>@internal any information that should not be displayed in public documentation [unspecified format]</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
Use <code>@internal</code> to facilitate the creation of two sets of documentation, one for advanced developers or for internal company use, and the other for the general PHP public. Use this tag or its cousin, inline <code>{@internal}</code>.\
</p>\
<p>\
<code>@internal</code> responds to the command-line <code>-pp</code>, <code>--parseprivate</code>, as both <code>@internal</code> and <code>--parseprivate</code> share the same purpose. In both cases, the intent is to allow the creation of two sets of documentation, one for public use, and the other for a subset of developers, either the project developers or those who wish to extend the project. In essence, it allows the creation of both user-level and programmer-level documentation from the same source, and is one of <code>phpDocumentor</code>'s most useful features.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * This class does things.\n\
\ *\n\
\ * {@internal To access the company guidelines on modifying this class,\n\
\ * see {@link http://www.example.com Company Guidelines}, or contact\n\
\ * your supervisor}}}\n\
\ * Using this class can be very helpful for several reasons. etc. etc.\n\
\ *\n\
\ * @internal the class uses the private methods {@link _foo()} and\n\
\ * {@link _bar()} to do some wacky stuff\n\
\ */\n\
class DoesThings {\n\
\    ...\n\
}\n\
</code></pre>

LicenseTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@license</p>\
<p>\
Display a hyperlink to a <code>URL</code> for a license.\
</p>\
<p>\
<code>@license URL name of license</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
You may use the <code>@license</code> tag to document any element (include, page, class, function, define, method, variable).\
</p>\
<p>\
<code>URL</code> is any valid <code>Uniform Resource Locator</code> that points to the full text of a license. The description for the license is optional.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Displays <a href="http://opensource.org/licenses/gpl-license.php">GNU Public License</a>.\n\
\ *\n\
\ * @license http://opensource.org/licenses/gpl-license.php GNU Public License\n\
\ */\n\
class OpenSourceClass {\n\
\    ...\n\
}\n\
</code></pre>

LinkTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@link</p>\
<p>\
Display a hyperlink to a <code>URL</code> in the documentation.\
</p>\
<p>\
<code>@link URL link text</code><br />\
<code>@link URL, URL, URL...</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
You may use the <code>@link</code> tag to document any element (include, page, class, function, define, method, variable). The guidelines for giving the element name to <code>@link</code> are the same as outlined in the <code>@see</code> manual page.\
</p>\
<p>\
Unless linking to an element, <code>@link</code> assumes the arguments passed are fully-formed URLs. Generally speaking, if you want to link to an element's documentation, use <code>@see</code> or inline <code>{@link}</code>... you can use <code>@link</code>, but the other options are better.\
<code>URL</code> is any valid <code>Uniform Resource Locator</code> (http://www.example.com, telnet://example.com, ftp://ftp.example.com, mailto:email@example.com, etc.).\
</p>\
<p>\
Note that as of version 1.2.0, it is possible to specify a short description for the link to use as the link text instead of the <code>URL</code>.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Displays <a href="http://www.example.com">http://www.example.com</a>.\n\
\ *\n\
\ * @link http://www.example.com\n\
\ */\n\
define("TEST_CONSTANT",3);\n\
\n\
/**\n\
\ * Displays <a href="http://www.example.com">Hello</a>.\n\
\ *\n\
\ * @link http://www.example.com Hello\n\
\ */\n\
define("TEST_CONSTANT2",3);\n\
\n\
/**\n\
\ * You SHOULD use @see here instead of @link, but here's how it works:\n\
\ * displays <a href="./MyDocs/MyPackage/MyClass.html">MyClass</a>\n\
\ *\n\
\ * @link MyClass\n\
\ */\n\
define("TEST_CONSTANT3",3);\n\
</code></pre>

MethodTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@method</p>\
<p>\
"Magic" Method of a class.\
</p>\
<p>\
<code>@method returntype description</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
<code>@method</code> shows a "magic" method that is found inside the class.\
</p>\
<p>\
<code>returntype</code> should be a valid PHP type or <code>mixed</code>. <code>phpDocumentor</code> will display the optional description unmodified, and defaults to <code>void</code> if the <code>returntype</code> is not present.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Show off @method.\n\
\ *\n\
\ * @method int borp() borp(int $int1, int $int2) Multiply two integers.\n\
\ */\n\
class Magician {\n\
\    function __call($method, $params) {\n\
\        if ($method == 'borp') {\n\
\            if (count($params) == 2) {\n\
\                return $params[0] * $params[1];\n\
\            }\n\
\        }\n\
\    }\n\
}\n\
</code></pre>

NameTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@name</p>\
<p>\
Specify an alias to use for a procedural page or global variable in displayed documentation and linking.\
</p>\
<p>\
<code>@name $globalvariablename</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
<code>phpDocumentor</code> recognizes the <code>@name</code> tag in global variable <code>DocBlocks</code> (in conjunction with <code>@global</code>), and uses it to rename a global variable for documentation to make it more readable. A global variable name MUST begin with a dollar sign ($) or <code>phpDocumentor</code> will ignore the tag and raise an error.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Now, when @global is used in a function, it will link to $baz.\n\
\ *\n\
\ * @name $baz\n\
\ * @global array $GLOBALS['baz']\n\
\ */\n\
$GLOBALS['baz'] = array('foo','bar');\n\
\n\
/**\n\
\ * @global array used for stuff\n\
\ */\n\
function mine() {\n\
\    global $baz;\n\
}\n\
</code></pre>

PackageTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@package</p>\
<p>\
Specify package to group classes or functions and defines into.\
</p>\
<p>\
<code>@package packagename</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
<code>@package</code> can only be used to document procedural pages or classes.\
</p>\
<p>\
Packages are used to help you logically group related elements. You write classes to group related functions and data together, and <code>phpDocumentor</code> represents the contents of files (functions, defines, and includes) as "Procedural Pages." A package is used to group classes and procedural pages together in the same manner that a directory groups related files together.\
</p>\
<p>\
If found in a page-level <code>DocBlock</code>, packagename specifies the package that all functions, includes, and defines in the php file belong to. If found in a class-level <code>DocBlock</code>, <code>packagename</code> specifies the package that the class belongs to.\
</p>\
<p>\
If not present, a class's package is set to default, or the value of the <code>-dn</code> command-line switch, even if the page-level package is set to another value. This may be changed by the command-line option <code>-dn</code> or <code>--defaultpackagename</code>. PACKAGES MUST BE ONE WORD WITH NO SPACES OR NEWLINES CONTAINING ONLY LETTERS, DIGITS, and "_", "-", "[" or "]" <code>@package</code> groups php files together for documentation.\
</p>\
<p>\
There are two ways a <code>@package</code> tag is parsed:\
</p>\
page-level package (defines, functions, includes/requires)\
</p>\
<p>\
class-level package (class, all its variables and methods)\
</p>\
<p>\
If a file contains functions and defines, they will be packaged by a page-level <code>DocBlock</code>. A page-level <code>DocBlock</code> is a <code>DocBlock</code> at the top of a file that precedes another <code>DocBlock</code>. In other words, it is not paired with any <code>phpDocumentor</code> element (include, function, define, class, class function, class variable).\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>\
<code>phpDocumentor</code> parses a <code>DocBlock</code> as a page-level <code>DocBlock</code> if it precedes another <code>DocBlock</code> like this:\
</p>\
<pre><code>\n\
/**\n\
\ * Page-Level DocBlock example.\n\
\ * This DocBlock precedes another DocBlock and will be parsed as the page-level.\n\
\ * Put your @package and @subpackage tags here\n\
\ *\n\
\ * @package pagelevel_package\n\
\ */\n\
\n\
/**\n\
\ * Function bluh.\n\
\ */\n\
function bluh() {\n\
\    ...\n\
}\n\
</code></pre>\
<p>\
A page is documented as a procedural page if it is parsed, regardless of its content (NEW in 1.0).\
</p>\
<p>\
A class-level <code>DocBlock</code> is any <code>DocBlock</code> that precedes a class definition in a php file.\
</p>\
<pre><code>\n\
/**\n\
\ * Class Bluh.\n\
\ * Class-level DocBlock example.\n\
\ *\n\
\ * @package applies_to_bluh\n\
\ */\n\
class Bluh {\n\
\    /**\n\
\     * This variable is parsed as part of package applies_to_bluh.\n\
\     */\n\
\    var $foo;\n\
\n\
\    /**\n\
\     * So is this function.\n\
\     */\n\
\    function bar() {\n\
\        ...\n\
\    }\n\
}\n\
</code></pre>\
<p>\
If no <code>@package</code> tag is specified, the package named <code>default</code> will be used, with one major exception. If a class extends a parent class that has a <code>@package<code> tag, it will inherit the package from the parent class. This can be very useful in small projects. HOWEVER, it is highly recommended that a <code>@package</code> tag is used before every class that should have that package to avoid name collisions. What is a name collision? If you are documenting two related but separate packages, and both packages contain classes with the same name. For example, the tests package included with phpDocumentor contains several files used to verify the eradication of bugs from <code>phpDocumentor</code>. Several of these files contain classes with the same name as classes in <code>phpDocumentor</code>. <code>phpDocumentor</code> cannot determine the correct parent class automatically and will not inherit package at all to avoid a wrong guess. WE HIGHLY RECOMMEND THAT YOU USE @package IN THE DOCBLOCK OF EVERY CLASS OR PROCEDURAL PAGE YOU WISH TO BE IN A PACKAGE.\
</p>\
<p>\
Elements can also be grouped into subpackages using <code>@subpackage</code>.\
</p>\
<p>\
See also <code>@subpackage</code>.\
</p>

ParamTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@param</p>\
<p>\
Document a function parameter.\
</p>\
<p>\
<code>@param datatype $paramname description</code><br />\
<code>@param datatype1|datatype2 $paramname description</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
The <code>datatype</code> should be a valid PHP type (<code>int</code>, <code>string</code>, <code>bool</code>, etc), a class name for the type of object, or simply <code>mixed</code>. Further, you can list multiple datatypes for a single parameter by delimiting them with the pipe (e.g. <code>@param int|string $p1</code>). You may document parameters listed or any optional paramters that will be parsed by standard PHP functions <code>func_num_args()</code>/<code>get_func_arg()</code>. Recommended name format for parameters listed with <code>func_get_arg()</code> is:\
</p>\
<p>\
<code>$paramname</code> if there is only one parameter.\
</p>\
<p>\
<code>$paramname,...</code> if the number of parameters is unlimited.\
</p>\
<p>\
<code>phpDocumentor</code> will display the optional description unmodified.\
</p>\
<p>\
Note that the <code>$paramname,...</code> will be shown in the output docs in both the parameter listing AND the function signature. If you are not indicating in the actual code that the parameter is optional (via <code>$paramname = 'a default value'</code>), then you should mention in the parameter's description that the parameter is optional.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Example of basic @param usage.\n\
\ *\n\
\ * @param bool $baz\n\
\ */\n\
function function1($baz) {\n\
\   ...\n\
}\n\
</code></pre>

PropertyTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@property</p>\
<p>\
"Magic" Property of a class.\
</p>\
<p>\
<code>@property datatype $name description</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
<code>@property</code> shows a "magic" property variable that is found inside the class.\
</p>\
<p>\
<code>datatype</code> should be a valid PHP type or <code>mixed</code>. <code>phpDocumentor</code> will display the optional description unmodified, and defaults to <code>mixed</code> if the datatype is not present.\
</p>\
<p>\
The property is presumed to be available for both read and write operations. If the property is read-only, you should use the <code>@property-read</code> tag instead. If the property is write-only, use <code>@property-write</code>.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Show off @property, @property-read, @property-write.\n\
\ *\n\
\ * @property mixed $regular regular read/write property\n\
\ * @property-read int $foo the foo prop\n\
\ * @property-write string $bar the bar prop\n\
\ */\n\
class Magician {\n\
\    private $_thingy;\n\
\    private $_bar;\n\
\n\
\    function __get($var) {\n\
\        switch ($var) {\n\
\            case 'foo':\n\
\                return 45;\n\
\            case 'regular':\n\
\                return $this->_thingy;\n\
\        }\n\
\    }\n\
\n\
\    function __set($var, $val) {\n\
\        switch ($var) {\n\
\            case 'bar':\n\
\                $this->_bar = $val;\n\
\                break;\n\
\            case 'regular':\n\
\                if (is_string($val)) {\n\
\                    $this->_thingy = $val;\n\
\                }\n\
\        }\n\
\    }\n\
}\n\
</code></pre>\
<p>\
Using these "magic" tags will result in the tag info being listed in the "infomational" tag listing for the class itself. It does NOT generate actual "property" or "variable" entities in the document.\
</p>\
<p>\
In the example above, when using <code>PhpDocumentor</code> with the <code>HTML:Smarty:HandS</code> converter and the <code>--parseprivate on</code> setting, you'll see <code>$_thingy</code> and <code>$_bar</code> shown in the <code>Property Summary</code> listing of your class variables, but you will NOT see <code>$regular</code>, <code>$foo</code>, or <code>$bar</code> there, because the latter three are not explicitly declared variables in your code. You WILL see <code>$regular</code>, <code>$foo</code> and <code>$bar</code> in the class-level's <code>API Tags</code> listing, thanks to your <code>@property</code> tags in the class-level docblock.\
</p>

ReturnTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@return</p>\
<p>\
Specify the return type of a function or method.\
</p>\
<p>\
<code>@return datatype description</code><br />\
<code>@return datatype1|datatype2 description</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
The <code>@return</code> tag is used to document the return value of functions or methods. <code>@returns</code> is an alias for <code>@return</code> to support tag formats of other automatic documentors.\
</p>\
<p>\
The <code>datatype</code> should be a valid PHP type (<code>int</code>, <code>string</code>, <code>bool</code>, etc), a class name for the type of object returned, or simply <code>mixed</code>. If you want to explicitly show multiple possible return types, list them pipe-delimited without spaces (e.g. <code>@return int|string</code>). If a class name is used as the datatype in the <code>@return</code> tag, <code>phpDocumentor</code> will automatically create a link to that class's documentation. In addition, if a function returns multiple possible values, separate them using the | character, and <code>phpDocumentor</code> will parse out any class names in the return value. <code>phpDocumentor</code> will display the optional description unmodified.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Example of showing multiple possible return types.\n\
\ *\n\
\ * @return int|string Could be an int, could be a string.\n\
\ */\n\
function function2($foo) {\n\
\   ...\n\
}\n\
</code></pre>

SeeTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@see</p>\
<p>\
Display a link to the documentation for an element.\
</p>\
<p>\
<code>@see file.ext|elementname|class::methodname()|class::$variablename|functionname()|function functionname unlimited number of values separated by commas</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
The <code>@see</code> tag may be used to document any element (global variable, include, page, class, function, define, method, variable).\
</p>\
<p>\
<code>@see</code> only displays links to element documentation. If you want to display a hyperlink, use <code>@link</code> or inline <code>{@link}</code>.\
New in version 1.2: You can link to any defined function in the current php version using the function's name. This linking is done using the standard php function http://www.php.net/get_defined_functions, and so relies on the version of php that is used to execute <code>phpDocumentor</code>. A benefit of this method is that the function highlighting will automatically upgrade with a php upgrade without any change to the underlying code. You may also link directly to any portion of the php website using the fake package override <code>PHP_MANUAL</code> (as in <code>PHP_MANUAL#get_defined_functions</code>, or <code>PHP_MANUAL#support.php</code>)\
</p>\
<p>\
Along with inline <code>{@link}</code>, the <code>@see</code> tag is among the most useful features of <code>phpDocumentor</code>. With this tag, you can create a link to any element (except <code>include</code>/<code>require</code>) in the documentation with a very wide range of options. The <code>@see</code> parser can be told exactly where to look using some basic punctuation:\
</p>\
<p>\
<code>::</code> -- This is the class scope override. Use it to tell the <code>@see</code> parser which class to look in for the element specified, like <code>classname::methodname()</code> or <code>classname::$variablename</code>.\
</p>\
<p>\
<code>()</code> -- When present at the end of elementname, like <code>elementname()</code>, this tells the <code>@see</code> parser to search for a function or method.\
</p>\
<p>\
<code>$</code> -- When present at the beginning of elementname, like <code>$elementname</code>, this tells the <code>@see</code> parser to search for a variable in the current class.\
</p>\
<p>\
However, <code>@see</code> is also intelligent enough to recognize shorthand. If <code>@see</code> receives an elementname with no punctuation, it will search for an element in this order:\
</p>\
<p>\
is elementname the name of a class?\
</p>\
<p>\
is elementname the name of a procedural page? (file.ext)\
</p>\
<p>\
is elementname the name of a define?\
</p>\
<p>\
if the <code>DocBlock</code> containing the <code>@see</code> is in a class:\
</p>\
<p>\
is elementname a method?\
</p>\
<p>\
is elementname a variable?\
</p>\
<p>\
is elementname a function?\
</p>\
<p>\
<code>@see</code> parsing is slightly slower when passed an elementname with no punctuation, especially if the elementname is a function, so use it sparingly in large projects (500+ elements with <code>@see</code>s in their <code>DocBlocks</code>). The best use for punctuation-less elementname is in a project whose classnames are in flux.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Class 1.\n\
\ *\n\
\ * Example of use of the :: scope operator.\n\
\ *\n\
\ * @see subclass::method()\n\
\ */\n\
class MainClass {\n\
\n\
\    /**\n\
\     * Example of linking to same class, outputs main_class::parent_method().\n\
\     *\n\
\     * @see parent_method\n\
\     */\n\
\    var foo = 3;\n\
\n\
\    /**\n\
\     * Subclass inherits this method.\n\
\     * Example of a word which is either a constant or class name, in this case a classname.\n\
\     *\n\
\     * @see subclass\n\
\     * @see subclass::$foo\n\
\     */\n\
\    function parent_method() {\n\
\        if ($this->foo==9) die;\n\
\    }\n\
}\n\
\n\
/**\n\
\ * This class extends main_class.\n\
\ * Example of linking to a constant, and of putting more than one element on the same line.\n\
\ *\n\
\ * @see main_class, TEST_CONST\n\
\ */\n\
SubClass extends MainClass {\n\
\n\
\    /**\n\
\     * Example of same class lookup - see will look through parent hierarchy to\n\
\     * find the method in {@link main_class}\n\
\     * the above inline link tag will parse as main_class.\n\
\     *\n\
\     * @see parent_method()\n\
\     */\n\
\    var $foo = 9;\n\
}\n\
\n\
define("TEST_CONST","foobar");\n\
</code></pre>

SinceTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@since</p>\
<p>\
Document when (at which version) an element was first added to a package.\
</p>\
<p>\
<code>@since version/info string [unspecified format]</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
The <code>@since</code> tag may be used to document the release version of any element that can be documented (global variable, include, constant, function, define, class, variable, method, page). <code>phpDocumentor</code> will display the version/info string unaltered.\
</p>\
<p>\
Use <code>@since</code> to document revisions, as in "This function has been a part of this package since version 2.0".\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Page-level DocBlock.\n\
\ *\n\
\ * @package BigImportantProjectWithLotsofVersions\n\
\ * @version 72.5\n\
\ */\n\
\n\
/**\n\
\ * Function datafunction.\n\
\ *\n\
\ * @since Version 21.1\n\
\ */\n\
function datafunction() {\n\
\    ...\n\
}\n\
</code></pre>

StaticTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@static</p>\
<p>\
Document a static property or method.\
</p>\
<p>\
<code>@static</code>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
Use the <code>@static</code> tag to declare a variable or method to be static. Static elements can be called without reference to an instantiated class object, as in <code>class::variable</code> and <code>class::method()</code>.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Example of a class\n\
\ * with a single static variable\n\
\ * and method.\n\
\ */\n\
class MyClass {\n\
\n\
\    /**\n\
\     * A static variable.\n\
\     *\n\
\     * @static\n\
\     */\n\
\    public static $aStaticVar = 0;\n\
\n\
\    /**\n\
\     * Normal variable.\n\
\     */\n\
\    public $aNormalVar = 1;\n\
\n\
\    /**\n\
\     * A static function.\n\
\     *\n\
\     * @static\n\
\     */\n\
\    function myStaticFunction() {\n\
\        ...\n\
\    }\n\
\n\
\    /**\n\
\     * Normal function.\n\
\     */\n\
\    function myNormalFunction() {\n\
\        ...\n\
\    }\n\
}\n\
\n\
// example of usage of static methods\n\
MyClass::myStaticVar;\n\
MyClass::myStaticFunction();\n\
</code></pre>\
<p>\
Just using the <code>static</code> keyword in your code is enough for <code>PhpDocumentor</code> on PHP5 to recognize static variables and methods, and <code>PhpDocumentor</code> will mark them as static.\
</p>\
<p>\
However, using the <code>static</code> tag will also result in <code>PhpDocumentor</code> marking the variable or method as static, even if the PHP code does not use the <code>static</code> keyword. So, using the tag but not the keyword actually means your code behavior will not match your API doc... so handle with care. The good news is that using both the keyword and the tag will not result in a double "static" in the resulting doc.\
</p>\
<p>\
Ideally, the <code>static</code> keyword in your code is sufficient for the resulting docs to show your members are static. This tag appears to be a "helpful" tag for use in PHP4 code, allowing you to hint that you want the member to be treated as static, even if PHP4 doesn't have the ability to make it act that way. Most likely, you'll use this tag as a reminder that your intention with this member, once you move the code from PHP4 to PHP5, will be for that member to be static.\
</p>

StaticvarTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@staticvar</p>\
<p>\
Document a static variable's use in a function/method.\
</p>\
<p>\
<code>@staticvar datatype description</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
<code>datatype<c/ode> should be a valid PHP type or <code>mixed</code>.\
</p>\
<p>\
<code>phpDocumentor</code> will display the optional description unmodified.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Example of basic @staticvar usage in a function.\n\
\ *\n\
\ * @staticvar integer used to calculate the division tables\n\
\ * @staticvar array $bar is used to make me happy.  Note that $bar is part of the description\n\
\ * @param bool $baz\n\
\ * @return mixed\n\
\ */\n\
function function1($baz) {\n\
\   static $foo = 6,$bar = array();\n\
\   // note that this works as:\n\
\   // static $foo = 6;\n\
\   // static $bar = array();\n\
\   if ($baz) {\n\
\      $a = 5;\n\
\   } else {\n\
\      $a = array(1,4);\n\
\   }\n\
\   return $a;\n\
}\n\
</code></pre>

SubpackageTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@subpackage</p>\
<p>\
Specify sub-package to group classes or functions and defines into. Requires <code>@package</code> tag.\
</p>\
<p>\
<code>@subpackage subpackagename</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
<code>@subpackage</code> works with <code>@package</code> to group php files together for documentation.\
</p>\
<p>\
If found in a page-level <code>DocBlock</code>, specifies the sub-package that all functions and defines in the php file belong to. If found in a class-level <code>DocBlock</code>, specifies the sub-package that the class belongs to.\
</p>\
<p>\
If <code>@package</code> is not present in the same <code>DocBlock</code>, the <code>@subpackage</code> tag is ignored. A subpackage name must be one word with no spaces or newlines containing only letters, digits, and "_", "-", "[" or "]"\
A <code>@subpackage</code> tag is applied to documented elements in the same way that <code>@package</code> is applied.\
</p>\
<p>\
If a file contains functions and defines, they will be packaged by a page-level <code>DocBlock</code>. A page-level <code>DocBlock</code> is a <code>DocBlock</code> that is not paired with any <code>phpDocumentor</code> element (include, function, define, class, class function, class variable).\
</p>\
<p>\
Note: The <code>@subpackage</code> tag is intended to help categorize the elements that are in an actual <code>@package</code> value. Since PHP itself doesn't allow you to have two functions with the same name in the same script, <code>PhpDocumentor</code> also requires all names in an <code>@package</code> to be unique... meaning, <code>@subpackage</code> does not allow further "naming separation" inside that <code>@package</code>. What it does do is allow a level of visual grouping/separation of the elements inside that <code>@package</code>.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>\
<code>phpDocumentor</code> parses a <code>DocBlock</code> as a page-level <code>DocBlock</code> if it precedes another <code>DocBlock</code> like this:\
</p>\
<pre><code>\n\
/**\n\
\ * Page-Level DocBlock example.\n\
\ * This DocBlock precedes another DocBlock and will be parsed as the page-level.\n\
\ * Put your @package and @subpackage tags here.\n\
\ *\n\
\ * @package pagelevel_package\n\
\ * @subpackage data\n\
\ */\n\
function dataFunction() {\n\
\    ...\n\
}\n\
</code></pre>\
<p>\
A class-level <code>DocBlock</code> is any <code>DocBlock</code> that precedes a class definition in a php file.q\
</p>\
<pre><code>\n\
/**\n\
\ * class bluh\n\
\ * class-level DocBlock example.\n\
\ * @package applies_to_bluh\n\
\ * @subpackage bluh\n\
\ */\n\
class Bluh {\n\
\    /**\n\
\     * This variable is parsed as part of package applies_to_bluh, and subpackage bluh.\n\
\     */\n\
\    var $foo;\n\
\n\
\    /**\n\
\     * So is this function.\n\
\     */\n\
\    function bar() {\n\
\        ...\n\
\    }\n\
}\n\
</code></pre>

TodoTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@todo</p>\
<p>\
Document changes that will be made in the future.\
</p>\
<p>\
<code>@todo information string [unspecified format]</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
Use <code>@todo</code> to document planned changes to an element that have not been implemented. <code>phpDocumentor</code> will display the information string unaltered.\
</p>\
<p>\
The <code>@todo</code> tag may be used to document future changes to almost any element that can be documented (global variable, constant, function, define, class, variable, method, page). Since v1.3.0, <code>@todo</code> can no longer be used on an "include" element.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Page-level DocBlock.\n\
\ *\n\
\ * @package unfinished\n\
\ * @todo finish the functions on this page\n\
\ */\n\
\n\
/**\n\
\ * Function datafunction.\n\
\ *\n\
\ * @todo make it do something\n\
\ */\n\
function datafunction() {\n\
\    ...\n\
}\n\
</code></pre>

TutorialTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@tutorial</p>\
<p>\
Display a link to the documentation for a tutorial.\
</p>\
<p>\
<code>@tutorial&nbsp;package/ subpackage/ tutorialname.ext #section.subsection description</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
The <code>@tutorial</code> may be used to document any element (global variable, include, page, class, function, define, method, variable).\
</p>\
<p>\
<code>@tutorial</code> only displays links to tutorials/extended documentation. If you want to display a hyperlink or link to a documented element, use @see or <code>@link</code> or inline <code>{@link}</code>. \
Along with inline <code>{@tutorial}</code>, the <code>@tutorial</code> tag is among the most useful features of <code>phpDocumentor</code>. With this tag, you can create a link to any tutorial or extended documentation. The <code>@tutorial</code> parser can be told exactly where to look using a format similar to a <code>URI</code>:\
</p>\
<p>\
<code>package/</code> -- Preface to specify a tutorial in a specific package\
</p>\
<p>\
<code>subpackage/</code> -- Preface to specify a tutorial in a specific package/subpackage\
</p>\
<p>\
<code>#section</code> -- Link to a specific section of the documentation package/subpackage/tutorial.ext#section\
</p>\
<p>\
<code>.subsection</code> -- Link to a specific sub-section of the documentation package/subpackage/tutorial.ext#section.subsection\
</p>\
<p>\
However, <code>@tutorial</code>, like <code>@see</code>, is also intelligent enough to recognize shorthand. The search order for a tutorial is identical to what is specified in <code>@see</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * This will link to the phpDocumentor.pkg tutorial if it is unique, regardless\n\
\ * of its location.\n\
\ *\n\
\ * @tutorial phpDocumentor.pkg\n\
\ */\n\
class Test1 {\n\
\    ...\n\
}\n\
\n\
/**\n\
\ * This will link to the phpDocumentor.pkg tutorial if and only if it is in the\n\
\ * phpDocumentor package, any subpackage.\n\
\ *\n\
\ * @tutorial phpDocumentor/phpDocumentor.pkg\n\
\ */\n\
class Test2 {\n\
\    ...\n\
}\n\
\n\
/**\n\
\ * This will link to the phpDocumentor.pkg tutorial if and only if it is in the\n\
\ * phpDocumentor package, info subpackage.\n\
\ *\n\
\ * @tutorial phpDocumentor/info/phpDocumentor.pkg\n\
\ */\n\
class Test3 {\n\
\    ...\n\
}\n\
\n\
/**\n\
\ * This will link to the phpDocumentor.pkg tutorial, section1 and subsection one\n\
\ *\n\
\ * @tutorial phpDocumentor.pkg#section1, phpDocumentor.pkg#section1.subsection1\n\
\ */\n\
class Test4 {\n\
\    ...\n\
}\n\
</code></pre>

UsesTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@uses</p>\
<p>\
Display a link to the documentation for an element, and create a backlink in the other element's documentation to this.\
</p>\
<p>\
<code>@uses&nbsp;file.ext|elementname|class::methodname()|class::$variablename|functionname()|function functionname description of how the element is used</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
Since version 1.2.0beta3, the syntax for <code>@uses</code> has changed. It differs in that <code>@uses</code> now contains a description of how the element is used and does not allow a comma-delimited list of values any longer. \
The <code>@uses</code> tag may be used to document any element (global variable, include, page, class, function, define, method, variable).\
</p>\
<p>\
<code>@uses</code> only displays links to element documentation. If you want to display a hyperlink, use <code>@link</code> or inline <code>{@link}</code>.\
</p>\
<p>\
<code>@uses</code> is very similar to <code>@see</code>, see the documentation for <code>@see</code> for details on format and structure. The <code>@uses</code> tag differs from <code>@see</code> in two ways. <code>@see</code> is a one-way link, meaning the documentation containing a <code>@see</code> tag contains a link to other documentation. The <code>@uses</code> tag automatically creates a virtual <code>@usedby</code> tag in the other documentation that links to the documentation containing the <code>@uses</code> tag. In other words, it is exactly like <code>@see</code>, except a return link is added automatically.\
</p>\
<p>\
The other difference is that <code>@uses</code> only accepts one element to link to, and a description of that element.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Class 1.\n\
\ */\n\
class main_class {\n\
\    /**\n\
\     * @var integer \n\
\     */\n\
\    var foo = 3;\n\
\n\
\    /**\n\
\     * subclass inherits this method.\n\
\     * example of a word which is either a constant or class name,\n\
\     * in this case a classname\n\
\     *\n\
\     * @uses subclass sets a temporary variable\n\
\     * @uses subclass::$foo this is compared to TEST_CONST\n\
\     * @uses TEST_CONST compared to subclass::$foo, we die() if not found\n\
\     */\n\
\    function parent_method() {\n\
\        if ($this->foo==9) die;\n\
\        $test = new subclass;\n\
\        $a = $test->foo;\n\
\        if ($a == TEST_CONST) die;\n\
\    }\n\
}\n\
\n\
/**\n\
\ * This class extends main_class.\n\
\ */\n\
subclass extends main_class {\n\
\    /**\n\
\     * @var integer \n\
\     */\n\
\    var $foo = 9;\n\
}\n\
\n\
define("TEST_CONST","foobar");\n\
</code></pre>

VarTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@var</p>\
<p>\
Document the data type of a class variable.\
</p>\
<p>\
<code>@var&nbsp;datatype description</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
You may use the <code>@var</code> tag to document the data type of class variables.\
</p>\
<p>\
The <code>datatype</code> should be a valid PHP type (<code>int</code>, <code>string</code>, <code>bool</code>, etc), a class name for the type of object, or simply <code>mixed</code>. <code>phpDocumentor</code> will display the optional description unmodified, and defaults to <code>mixed</code> if the datatype is not present.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
class Class1 {\n\
\    /**\n\
\     * Example of documenting a variable's type.\n\
\     *\n\
\     * @var string \n\
\     */\n\
\    var $variable;\n\
\n\
\    /**\n\
\     * Example of documenting a variable's type.\n\
\     *\n\
\     * @var string Contains class1 information\n\
\     */\n\
\    var $variableWithDesc;\n\
\n\
\    /**\n\
\     * This variable is documented as type "mixed" since no @var tag is present.\n\
\     */\n\
\    var $mixedVariable;\n\
}\n\
</code></pre>

VersionTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@version</p>\
<p>\
Version of current element.\
</p>\
<p>\
<code>@version&nbsp;versionstring [unspecified format]</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>\
Documents the version of any element, including a page-level block.\
</p>\
<p>\
NEW v1.2 - <code>@version</code> is now inherited by child classes from a parent class, see inline <code>{@inheritdoc}</code>.\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Example of @version tag with CVS tag.\n\
\ *\n\
\ * @version $Id: tags.version.pkg,v 1.2 2006-04-29 04:08:27 cellog Exp $;\n\
\ */\n\
function datafunction() {\n\
\    ...\n\
}\n\
\n\
/**\n\
\ * Custom version string.\n\
\ *\n\
\ * @version customversionstring1.0\n\
\ */\n\
class Blah {\n\
\    ...\n\
}\n\
</code></pre>

ThrowsTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@throws</p>\
<p>\
Documents an exception which is thrown by the annotated method/function.\
</p>\
<p>\
<code>@throws&nbsp;Exception</code>\
</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * Example of @throws tag.\n\
\ *\n\
\ * @throws Exception\n\
\ */\n\
function dataFunction() {\n\
\    ...\n\
}\n\
\n\
/**\n\
\ * Example of @throws tag.\n\
\ *\n\
\ * @throws Exception\n\
\ */\n\
class Blah {\n\
\    ...\n\
}\n\
</code></pre>
