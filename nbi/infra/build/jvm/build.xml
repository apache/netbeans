<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->

<project name="bootstrap" default="all" basedir=".">
    
    <target name="all" depends="build"/>
    
    <target name="build" depends="init,prepare-jvm"/>
    
    <target name="prepare-jvm">
        <echo message="Platform : ${jvm.platform}"/>	
        <antcall target="prepare-jvm-additional">
            <param name="jvm.platform" value="${additional.jvm.platform}"/>
        </antcall>
        <antcall target="prepare-jvm-all">
            <param name="jvm.platform" value="${jvm.platform}"/>
        </antcall>
    </target>
    
    <target name="test-jvm">
        <property name="test.dir" value="${work.dir}/test"/>
        <mkdir dir="${test.dir}"/>
        
        <exec 
            executable="chmod" 
            failonerror="yes" 
            dir="${test.dir}">
            <arg value="+x"/>
            <arg value="${work.dir}/${jvm.dest.file}"/>
        </exec>
        <exec 
            executable="${work.dir}/${jvm.dest.file}" 
            failonerror="yes" 
            dir="${test.dir}"/>
        <antcall target="unpack-files">
            <param name="unpack.dir" value="${test.dir}"/>
        </antcall>
        <antcall target="check-jvm"/>
        <delete dir="${test.dir}"/>
    </target>
    
    <target name="check-jvm" depends="check-jvm-main,check-jvm-additional,check-create-classes-jsa"/>
    
    <target name="check-jvm-main">
        <antcall target="check-jvm-version">
            <param name="platform.dir" value=""/>
        </antcall>
    </target>
    <target name="check-jvm-additional" if="java.additional.dir">
        <antcall target="check-jvm-version">
            <param name="platform.dir" value="${java.additional.dir}"/>
        </antcall>
    </target>
    
    <target name="check-create-classes-jsa" if="make.shared.classes">
        <exec 
            executable="${test.dir}/bin/java" 
            failonerror="yes" 
            dir="${test.dir}"> 
            <arg value="-Xshare:dump"/>
        </exec>
    </target>
    
    <target name="check-jvm-version">	
        <exec 
            executable="${test.dir}/bin${platform.dir}/java" 
            failonerror="yes" 
            dir="${test.dir}"> 
            <arg value="-version"/>
        </exec>
        
        <exec 
            executable="${test.dir}/bin${platform.dir}/java" 
            failonerror="yes" 
            dir="${test.dir}"> 
            <arg value="-fullversion"/>
        </exec>	
    </target>
    <target name="prepare-jvm-additional" if="additional.jvm.platform">	
        <echo message="Platform (extra): ${additional.jvm.platform}"/>
	<property file="${conf.dir}/common.properties"/>
        <property file="${conf.dir}/${os.type}.properties"/>
        <antcall target="get-jvm"/>	
    </target>
    
    
    <target name="prepare-jvm-all">
	<property file="${conf.dir}/common.properties"/>
        <property file="${conf.dir}/${os.type}.properties"/>
        <antcall target="get-jvm"/>
        <antcall target="do.pack-files"/>
        <antcall target="create-zip-sfx"/>	
        <antcall target="test-jvm"/>
        <antcall target="release-jvm"/>
    </target>
    <target name="do.pack-files" unless="prepare.jdk.launcher">
        <antcall target="pack-files"/>
    </target>
    
    <target name="release-jvm">
        <copy 
             file="${work.dir}/${jvm.dest.file}"
             tofile="${dist.dir}/${jvm.dest.file}"/>
        <delete dir="${work.dir}" includeemptydirs="true"/>
	<echo message="JVM (${jvm.platform}): ${dist.dir}/${jvm.dest.file}"/>
    </target>
    <target name="untar-native" depends="untar-native-unix,untar-native-windows,post-untar-clean"/>

    <target name="post-untar-clean" if="is.windows">
	<delete>
            <fileset dir="${jvm.source.dir}">
	        <include name="**/*.pdb"/>
	        <include name="**/*.map"/>
	    </fileset>
        </delete>
    </target>

    <target name="untar-native-unix" unless="windows">
        <exec 
            executable="${tar.executable}" 
            dir="${jvm.source.dir}"
            failonerror="yes">
            <arg value="-${jvm.source.file.compression}xvf"/>
            <arg value="${cache.dir}/${jvm.file.name}"/>
        </exec>
    </target>
    
    <target name="untar-native-windows" if="windows">
        <untar 
            dest="${jvm.source.dir}"
            src="${cache.dir}/${jvm.file.name}"
            compression="${jvm.source.file.compression}"/>
    </target>
    
    <target name="get-jvm">
        <get
            src="${jvm.source.file}"
            dest="${cache.dir}/${jvm.file.name}"
            usetimestamp="true"/>
        <antcall target="untar-native"/>
    </target>
    
    <target name="pack-files">
        <echo message="Executing pack200 in ${jvm.source.dir}/${jvm.sub.dir}"/>
        <exec executable="${sh.executable}" failonerror="yes" dir="${jvm.source.dir}/${jvm.sub.dir}">
            <arg value="${scripts.dir}/pack200.sh"/>
        </exec>
    </target>
    <target name="unpack-files">
        <echo message="Executing unpack200 in ${unpack.dir}"/>
        <exec executable="${sh.executable}" failonerror="yes" dir="${unpack.dir}">
            <arg value="${scripts.dir}/unpack200.sh"/>
        </exec>
    </target>
    
    <target name="create-zip-sfx"> 
        <exec executable="${zip.executable}" failonerror="yes" dir="${jvm.source.dir}/${jvm.sub.dir}">
            <arg value="-r"/>
            <arg value="-y"/>
            <arg value="-9"/> 
            <arg value="${work.dir}/jvm.zip"/>
            <arg value="."/>
        </exec>
        <delete dir="${jvm.source.dir}"/>
        
        <concat destfile="${work.dir}/${jvm.dest.file}" binary="true">
            <fileset file="${unzip.sfx.file}"/>
            <fileset file="${work.dir}/jvm.zip"/>
        </concat>
        <delete file="${work.dir}/jvm.zip"/>
        <exec executable="${zip.executable}">
            <arg value="-A"/>
            <arg value="${work.dir}/${jvm.dest.file}"/>
        </exec>
    </target>
    
    <target name="-init">
        <tstamp>
            <format property="start.time" pattern="MM/dd/yyyy hh:mm:ss aa"/>
        </tstamp>
        
        <condition property="jvm.platform" value="${target.platform}">
            <and>
                <isset property="target.platform"/>
                <not>
                    <length string="${target.platform}" trim="true" length="0"/>
                </not>
            </and>
        </condition>
        
        <condition property="jvm.platform" value="windows-i586">
            <os family="windows" arch="x86"/>
        </condition>
        
        <condition property="jvm.platform" value="windows-amd64">
            <os family="windows" arch="amd64"/>
        </condition>
        
        <condition property="jvm.platform" value="solaris-i586">
            <and>
                <equals arg1="${os.name}" arg2="SunOS"/>
                <os arch="x86"/>
            </and>
        </condition>
        <condition property="jvm.platform" value="solaris-amd64">
            <and>
                <equals arg1="${os.name}" arg2="SunOS"/>
                <os arch="amd64"/>
            </and>
        </condition>
        <condition property="jvm.platform" value="solaris-sparcv9">
            <and>
                <equals arg1="${os.name}" arg2="SunOS"/>
                <os arch="sparcv9"/>
            </and>
        </condition>
        <condition property="jvm.platform" value="linux-i586">
            <and>
                <equals arg1="${os.name}" arg2="Linux"/>
                <os arch="i386"/>
            </and>
        </condition>
        <condition property="jvm.platform" value="linux-amd64">
            <and>
                <equals arg1="${os.name}" arg2="Linux"/>
                <os arch="amd64"/>
            </and>
        </condition>
        
        <condition property="java.additional.dir" value="/sparcv9">
            <equals arg1="${jvm.platform}" arg2="solaris-sparcv9"/>
        </condition>
        
        <condition property="java.additional.dir" value="/amd64">
            <or>
                <equals arg1="${jvm.platform}" arg2="solaris-amd64"/>
            </or>
        </condition>
        
        <condition property="unix">
            <not>
                <os family="windows"/>
            </not>
        </condition>
        
        <condition property="windows">
            <os family="windows" />
        </condition>
        <condition property="make-shared-classed">
            <or>
                <equals arg1="${jvm.platform}" arg2="solaris-i586"/>
                <equals arg1="${jvm.platform}" arg2="linux-i586"/>
                <equals arg1="${jvm.platform}" arg2="windows-i586"/>
            </or>
        </condition>
        <condition property="os.type" value="windows">
            <os family="windows"/>
        </condition>
        <condition property="os.type" value="linux">
            <equals arg1="${os.name}" arg2="Linux"/>
        </condition>
        <condition property="os.type" value="solaris">
            <equals arg1="${os.name}" arg2="SunOS"/>
        </condition>

        <condition property="is.windows" value="true">
            <os family="windows"/>
        </condition>
        
        <condition property="additional.jvm.platform" value="solaris-i586">
            <equals arg1="${jvm.platform}" arg2="solaris-amd64"/>
        </condition>	
        <condition property="additional.jvm.platform" value="solaris-sparc">
            <equals arg1="${jvm.platform}" arg2="solaris-sparcv9"/>
        </condition>	
        
    </target>
    
    <target name="init" depends="-init">
        <property name="work.dir" value="${basedir}/build/${jvm.platform}"/>
        <property name="jvm.source.dir" value="${work.dir}/jvm"/>
        <property name="cache.dir" value="${basedir}/cache"/>
        <property name="common.dist.dir" value="${basedir}/dist"/>
        <property name="dist.dir" value="${common.dist.dir}/${jvm.platform}"/>
	<property name="scripts.dir" value="${basedir}/scripts"/>
	<property name="conf.dir" value="${basedir}/conf"/>
        
        <delete dir="${work.dir}" includeemptydirs="true"/>
        <delete dir="${dist.dir}" includeemptydirs="true"/>
        
        <mkdir dir="${work.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${cache.dir}"/>
        <mkdir dir="${jvm.source.dir}"/>
    </target>
</project>
