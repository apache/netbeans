# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

NotBlankTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@NotBlank</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is not blank, defined as not equal to a blank string and also not equal to <code>null</code>. To force that a value is simply not equal to <code>null</code>, \
see the <code>NotNull</code> constraint.</p>\
\n\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;"><li>message</li></ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>NotBlank</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>NotBlankValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>If you wanted to ensure that the <code>firstName</code> property of an <code>Author</code> class were not blank, you could do the following:</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\NotBlank()\n\
\     */\n\
\    protected $firstName;\n\
}\n\
</code></pre>\n\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should not be blank</code></p>\
<p>This is the message that will be shown if the value is blank.</p>
BlankTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Blank</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is blank, defined as equal to a blank string or equal to <code>null</code>. To force that a value strictly be equal to <code>null</code>, \
see the <code>Null</code> constraint. To force that a value is not blank, see <code>NotBlank</code>.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;"><li>message</li></ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Blank</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>BlankValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>If, for some reason, you wanted to ensure that the <code>firstName</code> property of an <code>Author</code> class were blank, you could do the following:</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Blank()\n\
\     */\n\
\    protected $firstName;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be blank</code></p>\
<p>This is the message that will be shown if the value is not blank.</p>
NotNullTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@NotNull</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is not strictly equal to <code>null</code>. To ensure that a value is simply not blank (not a blank string), see the <code>NotBlank</code> constraint.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;"><li>message</li></ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>NotNull</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>NotNullValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>If you wanted to ensure that the <code>firstName</code> property of an <code>Author</code> class were not strictly equal to <code>null</code>, you would:</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\NotNull()\n\
\     */\n\
\    protected $firstName;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should not be null</code></p>\
<p>This is the message that will be shown if the value is <code>null</code>.</p>
NullTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Null</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is exactly equal to <code>null</code>. To force that a property is simply blank (blank string or <code>null</code>), \
see the <code>Blank</code> constraint. To ensure that a property is not <code>null</code>, see <code>NotNull</code>.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;"><li>message</li></ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Null</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>NullValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>If, for some reason, you wanted to ensure that the <code>firstName</code> property of an <code>Author</code> class exactly equal to <code>null</code>, you could do the following:</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Null()\n\
\     */\n\
\    protected $firstName;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be null</code></p>\
<p>This is the message that will be shown if the value is not <code>null</code>.</p>
TrueTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@True</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is <code>true</code>. Specifically, this checks to see if the value is exactly <code>true</code>, exactly the integer 1, or exactly the string "1". \
Also see <code>False</code>.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;"><li>message</li></ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>True</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>TrueValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>This constraint can be applied to properties (e.g. a <code>termsAccepted</code> property on a registration model) or to a "getter" method. It's most powerful in the latter case, \
where you can assert that a method returns a true value. For example, suppose you have the following method:</p>\
<pre><code>\n\
class Author {\n\
\    protected $token;\n\
\n\
\    public function isTokenValid() {\n\
\        return $this->token == $this->generateToken();\n\
\    }\n\
}\n\
</code></pre>\
<p>Then you can constrain this method with <code>True</code>.</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    protected $token;\n\
\n\
\    /**\n\
\     * @Assert\\True(message = "The token is invalid")\n\
\     */\n\
\    public function isTokenValid() {\n\
\        return $this->token == $this->generateToken();\n\
\    }\n\
}\n\
</code></pre>\
<p>If the <code>isTokenValid()</code> returns false, the validation will fail.</p>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be true</code></p>\
<p>This message is shown if the underlying data is not true.</p>
FalseTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@False</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is <code>false</code>. Specifically, this checks to see if the value is exactly <code>false</code>, exactly the integer 0, or exactly the string "0". \
Also see <code>True</code>.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;"><li>message</li></ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>False</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>FalseValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>The <code>False</code> constraint can be applied to a property or a "getter" method, but is most commonly useful in the latter case. For example, suppose that you want to \
guarantee that some state property is <i>not</i> in a dynamic <code>invalidStates</code> array. First, you'd create a "getter" method:</p>\
<pre><code>\n\
protected $state;\n\
\n\
protected $invalidStates = array();\n\
\n\
public function isStateInvalid() {\n\
    return in_array($this->state, $this->invalidStates);\n\
}\n\
</code></pre>\
<p>In this case, the underlying object is only valid if the <code>isStateInvalid</code> method returns <b>false</b>:</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\False()\n\
\     */\n\
\     public function isStateInvalid($message = "You've entered an invalid state.") {\n\
\        // ...\n\
\     }\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be false</code></p>\
<p>This message is shown if the underlying data is not false.</p>
TypeTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Type</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is of a specific data type. For example, if a variable should be an array, you can use this constraint with the array type option to validate this.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;"><li>type</li><li>message</li></ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Type</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>TypeValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Type(type="integer", message="The value {{ value }} is not a valid {{ type }}.")\n\
\     */\n\
\    protected $age;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">type</p>\
<p><strong>type</strong>: <code>string</code> [default option]</p>\
<p>This required option is the fully qualified class name or one of the PHP datatypes as determined by PHP's <code>is_</code> functions.</p>\
<ul>\
    <li>array</li>\
    <li>bool</li>\
    <li>callable</li>\
    <li>float</li>\
    <li>double</li>\
    <li>int</li>\
    <li>integer</li>\
    <li>long</li>\
    <li>null</li>\
    <li>numeric</li>\
    <li>object</li>\
    <li>real</li>\
    <li>resource</li>\
    <li>scalar</li>\
    <li>string</li>\
</ul>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be of type {{ type }}</code></p>\
<p>The message if the underlying data is not of the given type.</p>
EmailTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Email</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is a valid email address. The underlying value is cast to a string before being validated.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>message</li>\
            <li>checkMX</li>\
            <li>checkHost</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Email</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>EmailValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Email(\n\
\     *     message = "The email '{{ value }}' is not a valid email.",\n\
\     *     checkMX = true\n\
\     * )\n\
\     */\n\
\     protected $email;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value is not a valid email address</code></p>\
<p>This message is shown if the underlying data is not a valid email address.</p>\
<p style="font-weight: bold; font-style: italic">checkMX</p>\
<p><strong>type</strong>: <code>Boolean</code> <strong>default</strong>: <code>false</code></p>\
<p>If true, then the <code>checkdnsrr</code> PHP function will be used to check the validity of the MX record of the host of the given email.</p>\
<p style="font-weight: bold; font-style: italic">checkHost</p>\
<p style="font-style: italic">New in version 2.1: The <code>checkHost</code> option was added in Symfony 2.1</p>\
<p><strong>type</strong>: <code>Boolean</code> <strong>default</strong>: <code>false</code></p>\
<p>If true, then the <code>checkdnsrr</code> PHP function will be used to check the validity of the MX or the A or the AAAA record of the host of the given email.</p>
MinLengthTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@MinLength</p>\
<p style="font-style: italic">The <code>MinLength</code> constraint is deprecated since version 2.1 and will be removed in Symfony 2.3. \
Use <code>Length</code> with the <code>min</code> option instead.</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that the length of a string is at least as long as the given limit.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>limit</li>\
            <li>message</li>\
            <li>charset</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>MinLength</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>MinLengthValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Blog {\n\
\    /**\n\
\     * @Assert\\MinLength(\n\
\     *     limit=3,\n\
\     *     message="Your name must have at least {{ limit }} characters."\n\
\     * )\n\
\     */\n\
\    protected $summary;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">limit</p>\
<p><strong>type</strong>: <code>integer</code> [default option]</p>\
<p>This required option is the "min" value. Validation will fail if the length of the give string is <b>less</b> than this number.</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value is too short. It should have {{ limit }} characters or more</code></p>\
<p>The message that will be shown if the underlying string has a length that is shorter than the limit option.</p>\
<p style="font-weight: bold; font-style: italic">charset</p>\
<p><strong>type</strong>: <code>charset</code> <strong>default</strong>: <code>UTF-8</code></p>\
<p>If the PHP extension "mbstring" is installed, then the PHP function <code>mb_strlen</code> will be used to calculate the length of the string. \
The value of the <code>charset</code> option is passed as the second argument to that function.</p>
MaxLengthTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@MaxLength</p>\
<p style="font-style: italic">The <code>MaxLength</code> constraint is deprecated since version 2.1 and will be removed in Symfony 2.3. \
Use <code>Length</code> with the <code>min</code> option instead.</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that the length of a string is not larger than the given limit.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>limit</li>\
            <li>message</li>\
            <li>charset</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>MaxLength</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>MaxLengthValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Blog {\n\
\    /**\n\
\     * @Assert\\MaxLength(100)\n\
\     */\n\
\    protected $summary;\n\
}</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">limit</p>\
<p><strong>type</strong>: <code>integer</code> [default option]</p>\
<p>This required option is the "max" value. Validation will fail if the length of the give string is <b>greater</b> than this number.</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value is too long. It should have {{ limit }} characters or less</code></p>\
<p>The message that will be shown if the underlying string has a length that is longer than the limit option.</p>\
<p style="font-weight: bold; font-style: italic">charset</p>\
<p><strong>type</strong>: <code>charset</code> <strong>default</strong>: <code>UTF-8</code></p>\
<p>If the PHP extension "mbstring" is installed, then the PHP function <code>mb_strlen</code> will be used to calculate the length of the string. \
The value of the <code>charset</code> option is passed as the second argument to that function.</p>
LengthTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Length</p>\
<p style="font-style: italic">New in version 2.1: The <code>Length</code> constraint was added in Symfony 2.1.</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a given string length is between some minimum and maximum value.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>min</li>\
            <li>max</li>\
            <li>charset</li>\
            <li>minMessage</li>\
            <li>maxMessage</li>\
            <li>exactMessage</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Length</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>LengthValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>To verify that the <code>firstName</code> field length of a class is between "2" and "50", you might add the following:</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Participant {\n\
\    /**\n\
\     * @Assert\\Length(\n\
\     *      min = "2",\n\
\     *      max = "50",\n\
\     *      minMessage = "Your first name must be at least {{ limit }} characters length",\n\
\     *      maxMessage = "Your first name cannot be longer than than {{ limit }} characters length"\n\
\     * )\n\
\     */\n\
\     protected $firstName;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">min</p>\
<p><strong>type</strong>: <code>integer</code> [default option]</p>\
<p>This required option is the "min" length value. Validation will fail if the given value's length is <b>less</b> than this min value.</p>\
<p style="font-weight: bold; font-style: italic">max</p>\
<p><strong>type</strong>: <code>integer</code> [default option]</p>\
<p>This required option is the "max" length value. Validation will fail if the given value's length is <b>greater</b> than this max value.</p>\
<p><strong>type</strong>: <code>charset</code> <strong>default</strong>: <code>UTF-8</code></p>\
<p>The charset to be used when computing value's length. The <code>grapheme_strlen</code> PHP function is used if available. If not, the the <code>mb_strlen</code> PHP function \
is used if available. If neither are available, the <code>strlen</code> PHP function is used.</p>\
<p style="font-weight: bold; font-style: italic">minMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value is too short. It should have {{ limit }} characters or more.</code></p>\
<p>The message that will be shown if the underlying value's length is less than the <code>min</code> option.</p>\
<p style="font-weight: bold; font-style: italic">maxMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value is too long. It should have {{ limit }} characters or less.</code></p>\
<p>The message that will be shown if the underlying value's length is more than the <code>max</code> option.</p>\
<p style="font-weight: bold; font-style: italic">exactMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should have exactly {{ limit }} characters.</code></p>\
<p>The message that will be shown if <code>min</code> and <code>max</code> values are equal and the underlying value's length is not exactly this value.</p>
UrlTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Url</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is a valid URL string.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>message</li>\
            <li>protocols</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Url</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>UrlValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p></p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Url()\n\
\     */\n\
\     protected $bioUrl;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value is not a valid URL</code></p>\
<p>This message is shown if the URL is invalid.</p>\
<p style="font-weight: bold; font-style: italic">protocols</p>\
<p><strong>type</strong>: <code>array</code> <strong>default</strong>: <code>array('http', 'https')</code></p>\
<p>The protocols that will be considered to be valid. For example, if you also needed <code>ftp://</code> type URLs to be valid, you'd redefine the <code>protocols</code> array, \
listing <code>http</code>, <code>https</code>, and also <code>ftp</code>.</p>
RegexTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Regex</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value matches a regular expression.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>pattern</li>\
            <li>match</li>\
            <li>message</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Regex</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>RegexValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>Suppose you have a <code>description</code> field and you want to verify that it begins with a valid word character. The regular expression to test for this would be <code>/^\w+/</code>, \
indicating that you're looking for at least one or more word characters at the beginning of your string:</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Regex("/^\w+/")\n\
\     */\n\
\    protected $description;\n\
}\n\
</code></pre>\
<p>Alternatively, you can set the <code>match</code> option to <code>false</code> in order to assert that a given string does <i>not</i> match. \
In the following example, you'll assert that the <code>firstName</code> field does not contain any numbers and give it a custom message:</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Regex(\n\
\     *     pattern="/\d/",\n\
\     *     match=false,\n\
\     *     message="Your name cannot contain a number"\n\
\     * )\n\
\     */\n\
\    protected $firstName;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">pattern</p>\
<p><strong>type</strong>: <code>string</code> [default option]</p>\
<p>This required option is the regular expression pattern that the input will be matched against. By default, this validator will fail if the input string does <i>not</i> match \
this regular expression (via the <code>preg_match</code> PHP function). However, if <code>match</code> is set to <code>false</code>, then validation will fail if the input string <i>does</i> \
match this pattern.</p>\
<p style="font-weight: bold; font-style: italic">match</p>\
<p><strong>type</strong>: <code>Boolean</code> <strong>default</strong>: <code>true</code></p>\
<p>If <code>true</code> (or not set), this validator will pass if the given string matches the given pattern regular expression. However, when this option is set to <code>false</code>, \
the opposite will occur: validation will pass only if the given string does <b>not</b> match the pattern regular expression.</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value is not valid</code></p>\
<p>This is the message that will be shown if this validator fails.</p>
IpTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Ip</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is a valid IP address. By default, this will validate the value as IPv4, but a number of different options exist to validate as IPv6 and many other combinations.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>version</li>\
            <li>message</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Ip</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>IpValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Ip\n\
\     */\n\
\     protected $ipAddress;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">version</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>4</code></p>\
<p>This determines exactly how the ip address is validated and can take one of a variety of different values:</p>\
<p><strong>All ranges</strong></p>\
<ul>\
<li><code>4</code> - Validates for IPv4 addresses</li>\
<li><code>6</code> - Validates for IPv6 addresses</li>\
<li><code>all</code> - Validates all IP formats</li>\
</ul>\
<p><strong>No private ranges</strong></p>\
<ul>\
<li><code>4_no_priv</code> - Validates for IPv4 but without private IP ranges</li>\
<li><code>6_no_priv</code> - Validates for IPv6 but without private IP ranges</li>\
<li><code>all_no_priv</code> - Validates for all IP formats but without private IP ranges</li>\
</ul>\
<p><strong>No reserved ranges</strong></p>\
<ul>\
<li><code>4_no_res</code> - Validates for IPv4 but without reserved IP ranges</li>\
<li><code>6_no_res</code> - Validates for IPv6 but without reserved IP ranges</li>\
<li><code>all_no_res</code> - Validates for all IP formats but without reserved IP ranges</li>\
</ul>\
<p><strong>Only public ranges</strong></p>\
<ul>\
<li><code>4_public</code> - Validates for IPv4 but without private and reserved ranges</li>\
<li><code>6_public</code> - Validates for IPv6 but without private and reserved ranges</li>\
<li><code>all_public</code> - Validates for all IP formats but without private and reserved ranges</li>\
</ul>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This is not a valid IP address</code></p>\
<p>This message is shown if the string is not a valid IP address.</p>
MaxTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Max</p>\
<p style="font-style: italic">The <code>Max</code> constraint is deprecated since version 2.1 and will be removed in Symfony 2.3. Use <code>Range</code> with the <code>max</code> option instead.</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a given number is less than some maximum number.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>limit</li>\
            <li>message</li>\
            <li>invalidMessage</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Max</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>MaxValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>To verify that the "age" field of a class is not greater than "50", you might add the following:</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Participant {\n\
\    /**\n\
\     * @Assert\\Max(limit = 50, message = "You must be 50 or under to enter.")\n\
\     */\n\
\     protected $age;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">limit</p>\
<p><strong>type</strong>: <code>integer</code> [default option]</p>\
<p>This required option is the "max" value. Validation will fail if the given value is <b>greater</b> than this max value.</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be {{ limit }} or less</code></p>\
<p>The message that will be shown if the underlying value is greater than the <code>limit</code> option.</p>\
<p style="font-weight: bold; font-style: italic">invalidMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be a valid number</code></p>\
<p>The message that will be shown if the underlying value is not a number (per the <code>is_numeric</code> PHP function).</p>
MinTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Min</p>\
<p style="font-style: italic">The <code>Min</code> constraint is deprecated since version 2.1 and will be removed in Symfony 2.3. Use <code>Range</code> with the <code>min</code> option instead.</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a given number is <i>greater</i> than some minimum number.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>limit</li>\
            <li>message</li>\
            <li>invalidMessage</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Min</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>MinValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>To verify that the "age" field of a class is "18" or greater, you might add the following:</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Participant {\n\
\    /**\n\
\     * @Assert\\Min(limit = "18", message = "You must be 18 or older to enter")\n\
\     */\n\
\     protected $age;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">limit</p>\
<p><strong>type</strong>: <code>integer</code> [default option]</p>\
<p>This required option is the "min" value. Validation will fail if the given value is <b>less</b> than this min value.</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be {{ limit }} or more</code></p>\
<p>The message that will be shown if the underlying value is less than the <code>limit</code> option.</p>\
<p style="font-weight: bold; font-style: italic">invalidMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be a valid number</code></p>\
<p>The message that will be shown if the underlying value is not a number (per the <code>is_numeric</code> PHP function).</p>
RangeTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Range</p>\
<p style="font-style: italic">New in version 2.1: The <code>Range</code> constraint was added in Symfony 2.1.</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a given number is <i>between</i> some minimum and maximum number.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>min</li>\
            <li>max</li>\
            <li>minMessage</li>\
            <li>maxMessage</li>\
            <li>invalidMessage</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Range</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>RangeValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>To verify that the "height" field of a class is between "120" and "180", you might add the following:</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Participant {\n\
\    /**\n\
\     * @Assert\\Range(\n\
\     *      min = 120,\n\
\     *      max = 180,\n\
\     *      minMessage = "You must be at least 120cm tall to enter",\n\
\     *      maxMessage = "You cannot be taller than 180cm to enter"\n\
\     * )\n\
\     */\n\
\     protected $height;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">min</p>\
<p><strong>type</strong>: <code>integer</code> [default option]</p>\
<p>This required option is the "min" value. Validation will fail if the given value is <b>less</b> than this min value.</p>\
<p style="font-weight: bold; font-style: italic">max</p>\
<p><strong>type</strong>: <code>integer</code> [default option]</p>\
<p>This required option is the "max" value. Validation will fail if the given value is <b>greater</b> than this max value.</p>\
<p style="font-weight: bold; font-style: italic">minMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be {{ limit }} or more.</code></p>\
<p>The message that will be shown if the underlying value is less than the <code>min</code> option.</p>\
<p style="font-weight: bold; font-style: italic">maxMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be {{ limit }} or less.</code></p>\
<p>The message that will be shown if the underlying value is more than the <code>max</code> option.</p>\
<p style="font-weight: bold; font-style: italic">invalidMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be a valid number</code></p>\
<p>The message that will be shown if the underlying value is not a number (per the <code>is_numeric</code> PHP function).</p>
DateTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Date</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is a valid date, meaning either a <code>DateTime</code> object or a string (or an object that can be cast into a string) that follows a valid YYYY-MM-DD format.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>message</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Date</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>DateValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Date()\n\
\     */\n\
\     protected $birthday;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value is not a valid date</code></p>\
<p>This message is shown if the underlying data is not a valid date.</p>
DateTimeTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@DateTime</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is a valid "datetime", meaning either a <code>DateTime</code> object or a string (or an object that can be cast into a string) \
that follows a valid YYYY-MM-DD HH:MM:SS format.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>message</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>DateTime</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>DateTimeValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\DateTime()\n\
\     */\n\
\     protected $createdAt;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value is not a valid datetime</code></p>\
<p>This message is shown if the underlying data is not a valid datetime.</p>
TimeTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Time</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is a valid time, meaning either a <code>DateTime</code> object or a string (or an object that can be cast into a string) that follows a valid "HH:MM:SS" format.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>message</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Time</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>TimeValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>Suppose you have an Event class, with a <code>startsAt</code> field that is the time of the day when the event starts:</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Event {\n\
\    /**\n\
\     * @Assert\\Time()\n\
\     */\n\
\     protected $startsAt;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value is not a valid time</code></p>\
<p>This message is shown if the underlying data is not a valid time.</p>
ChoiceTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Choice</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>This constraint is used to ensure that the given value is one of a given set of <i>valid</i> choices. It can also be used to validate that each item in an array of items is one of those valid choices.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>choices</li>\
            <li>callback</li>\
            <li>multiple</li>\
            <li>min</li>\
            <li>max</li>\
            <li>message</li>\
            <li>multipleMessage</li>\
            <li>minMessage</li>\
            <li>maxMessage</li>\
            <li>strict</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Choice</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>ChoiceValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>The basic idea of this constraint is that you supply it with an array of valid values (this can be done in several ways) and it validates \
that the value of the given property exists in that array.</p>\
<p>If your valid choice list is simple, you can pass them in directly via the <code>choices</code> option:</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Choice(choices = {"male", "female"}, message = "Choose a valid gender.")\n\
\     */\n\
\    protected $gender;\n\
}\n\
</code></pre>\
<p>You can also use a callback function to specify your options. This is useful if you want to keep your choices in some central location so that, for example, \
you can easily access those choices for validation or for building a select form element. You can pass the name of this method to the <code>callback</code> option of \
the <code>Choice</code> constraint.</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Choice(callback = "getGenders")\n\
\     */\n\
\    protected $gender;\n\
\n\
\    public static function getGenders() {\n\
\        return array('male', 'female');\n\
\    }\n\
}\n\
</code></pre>\
<p>If the static callback is stored in a different class, for example <code>Util</code>, you can pass the class name and the method as an array.</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Choice(callback = {"Util", "getGenders"})\n\
\     */\n\
\    protected $gender;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">choices</p>\
<p><strong>type</strong>: <code>array</code> [default option]</p>\
<p>A required option (unless <code>callback</code> is specified) - this is the array of options that should be considered in the valid set. The input value will be matched against this array.</p>\
<p style="font-weight: bold; font-style: italic">callback</p>\
<p><strong>type</strong>: <code>string|array|Closure</code></p>\
<p>This is a callback method that can be used instead of the <code>choices</code> option to return the choices array.</p>\
<p style="font-weight: bold; font-style: italic">multiple</p>\
<p><strong>type</strong>: <code>Boolean</code> <strong>default</strong>: <code>false</code></p>\
<p>If this option is true, the input value is expected to be an array instead of a single, scalar value. The constraint will check that each value of the input array can be found \
in the array of valid choices. If even one of the input values cannot be found, the validation will fail.</p>\
<p style="font-weight: bold; font-style: italic">min</p>\
<p><strong>type</strong>: <code>integer</code></p>\
<p>If the <code>multiple</code> option is true, then you can use the <code>min</code> option to force at least XX number of values to be selected. For example, if <code>min</code> is 3, \
but the input array only contains 2 valid items, the validation will fail.</p>\
<p style="font-weight: bold; font-style: italic">max</p>\
<p><strong>type</strong>: <code>integer</code></p>\
<p>If the <code>multiple</code> option is true, then you can use the <code>max</code> option to force no more than XX number of values to be selected. For example, if <code>max</code> is 3, \
but the input array contains 4 valid items, the validation will fail.</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>The value you selected is not a valid choice</code></p>\
<p>This is the message that you will receive if the <code>multiple</code> option is set to <code>false</code>, and the underlying value is not in the valid array of choices.</p>\
<p style="font-weight: bold; font-style: italic">multipleMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>One or more of the given values is invalid</code></p>\
<p>This is the message that you will receive if the <code>multiple</code> option is set to <code>true</code>, and one of the values on the underlying array being checked is not \
in the array of valid choices.</p>\
<p style="font-weight: bold; font-style: italic">minMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>You must select at least {{ limit }} choices</code></p>\
<p>This is the validation error message that's displayed when the user chooses too few choices per the <code>min</code> option.</p>\
<p style="font-weight: bold; font-style: italic">maxMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>You must select at most {{ limit }} choices</code></p>\
<p>This is the validation error message that's displayed when the user chooses too many options per the <code>max</code> option.</p>\
<p style="font-weight: bold; font-style: italic">strict</p>\
<p><strong>type</strong>: <code>Boolean</code> <strong>default</strong>: <code>false</code></p>\
<p>If <code>true</code>, the validator will also check the type of the input value. Specifically, this value is passed to as the third argument \
to the PHP <code>in_array</code> method when checking to see if a value is in the valid choices array.</p>
CollectionTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Collection</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>This constraint is used when the underlying data is a collection (i.e. an array or an object that implements <code>Traversable</code> and <code>ArrayAccess</code>), \
but you'd like to validate different keys of that collection in different ways. For example, you might validate the <code>email</code> key using the <code>Email</code> constraint \
and the <code>inventory</code> key of the collection with the <code>Range</code> constraint.</p>\
<p>This constraint can also make sure that certain collection keys are present and that extra keys are not present.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>fields</li>\
            <li>allowExtraFields</li>\
            <li>extraFieldsMessage</li>\
            <li>allowMissingFields</li>\
            <li>missingFieldsMessage</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Collection</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>CollectionValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>The <code>Collection</code> constraint allows you to validate the different keys of a collection individually. To validate that the <code>personal_email</code> element \
of the <code>profileData</code> array property is a valid email address and that the <code>short_bio</code> element is not blank but is no longer than 100 characters in length, \
you would do the following:</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Collection(\n\
\     *     fields = {\n\
\     *         "personal_email" = @Assert\\Email,\n\
\     *         "short_bio" = {\n\
\     *             @Assert\\NotBlank(),\n\
\     *             @Assert\\Length(\n\
\     *                 max = 100,\n\
\     *                 maxMessage = "Your bio is too long!"\n\
\     *             )\n\
\     *         }\n\
\     *     },\n\
\     *     allowMissingFields = true\n\
\     * )\n\
\     */\n\
\     protected $profileData = array(\n\
\         'personal_email',\n\
\         'short_bio',\n\
\     );\n\
\n\
\    public function setProfileData($key, $value) {\n\
\        $this->profileData[$key] = $value;\n\
\    }\n\
}\n\
</code></pre>\
<p>By default, this constraint validates more than simply whether or not the individual fields in the collection pass their assigned constraints. In fact, \
if any keys of a collection are missing or if there are any unrecognized keys in the collection, validation errors will be thrown.</p>\
<p>If you would like to allow for keys to be absent from the collection or if you would like "extra" keys to be allowed in the collection, you can modify the <code>allowMissingFields</code> \
and <code>allowExtraFields</code> options respectively. In the above example, the <code>allowMissingFields</code> option was set to <code>true</code>, meaning that if either of \
the <code>personal_email</code> or <code>short_bio</code> elements were missing from the <code>$personalData</code> property, no validation error would occur.</p>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">fields</p>\
<p><strong>type</strong>: <code>array</code> [default option]</p>\
<p>This option is required, and is an associative array defining all of the keys in the collection and, for each key, exactly which validator(s) should be executed against \
that element of the collection.</p>\
<p style="font-weight: bold; font-style: italic">allowExtraFields</p>\
<p><strong>type</strong>: <code>Boolean</code> <strong>default</strong>: <code>false</code></p>\
<p>If this option is set to <code>false</code> and the underlying collection contains one or more elements that are not included in the <code>fields</code> option, a validation error \
will be returned. If set to <code>true</code>, extra fields are ok.</p>\
<p style="font-weight: bold; font-style: italic">extraFieldsMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>The fields {{ fields }} were not expected</code></p>\
<p>The message shown if <code>allowExtraFields</code> is false and an extra field is detected.</p>\
<p style="font-weight: bold; font-style: italic">allowMissingFields</p>\
<p><strong>type</strong>: <code>Boolean</code> <strong>default</strong>: <code>false</code></p>\
<p>If this option is set to <code>false</code> and one or more fields from the <code>fields</code> option are not present in the underlying collection, a validation error will be returned. \
If set to <code>true</code>, it's ok if some fields in the <code>fields</code> option are not present in the underlying collection.</p>\
<p style="font-weight: bold; font-style: italic">missingFieldsMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>The fields {{ fields }} are missing</code></p>\
<p>The message shown if <code>allowMissingFields</code> is false and one or more fields are missing from the underlying collection.</p>
CountTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Count</p>\
<p style="font-style: italic">New in version 2.1: The <code>Count</code> constraint was added in Symfony 2.1.</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a given collection's (i.e. an array or an object that implements Countable) element count is <i>between</i> some minimum and maximum value.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>min</li>\
            <li>max</li>\
            <li>minMessage</li>\
            <li>maxMessage</li>\
            <li>exactMessage</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Count</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>CountValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>To verify that the <code>emails</code> array field contains between 1 and 5 elements you might add the following:</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Participant {\n\
\    /**\n\
\     * @Assert\\Count(\n\
\     *      min = "1",\n\
\     *      max = "5",\n\
\     *      minMessage = "You must specify at least one email",\n\
\     *      maxMessage = "You cannot specify more than {{ limit }} emails"\n\
\     * )\n\
\     */\n\
\     protected $emails = array();\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">min</p>\
<p><strong>type</strong>: <code>integer</code> [default option]</p>\
<p>This required option is the "min" count value. Validation will fail if the given collection elements count is <b>less</b> than this min value.</p>\
<p style="font-weight: bold; font-style: italic">max</p>\
<p><strong>type</strong>: <code>integer</code> [default option]</p>\
<p>This required option is the "max" count value. Validation will fail if the given collection elements count is <b>greater</b> than this max value.</p>\
<p style="font-weight: bold; font-style: italic">minMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This collection should contain {{ limit }} elements or more.</code></p>\
<p>The message that will be shown if the underlying collection elements count is less than the <code>min</code> option.</p>\
<p style="font-weight: bold; font-style: italic">maxMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This collection should contain {{ limit }} elements or less.</code></p>\
<p>The message that will be shown if the underlying collection elements count is more than the <code>max</code> option.</p>\
<p style="font-weight: bold; font-style: italic">exactMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This collection should contain exactly {{ limit }} elements.</code></p>\
<p>The message that will be shown if <code>min</code> and <code>max</code> values are equal and the underlying collection elements count is not exactly this value.</p>
UniqueEntityTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@UniqueEntity</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a particular field (or fields) in a Doctrine entity is (are) unique. This is commonly used, for example, to prevent a new user to register \
using an email address that already exists in the system.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>class</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>fields</li>\
            <li>message</li>\
            <li>em</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>UniqueEntity</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>UniqueEntityValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>Suppose you have an <code>AcmeUserBundle</code> bundle with a <code>User</code> entity that has an <code>email</code> field. You can use the <code>UniqueEntity</code> constraint \
to guarantee that the <code>email</code> field remains unique between all of the constraints in your user table:</p>\
<pre><code>\n\
namespace Acme\\UserBundle\\Entity;\n\
\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
use Doctrine\\ORM\\Mapping as ORM;\n\
\n\
// DON'T forget this use statement!!!\n\
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;\n\
\n\
/**\n\
 * @ORM\\Entity\n\
 * @UniqueEntity("email")\n\
 */\n\
class Author {\n\
\    /**\n\
\     * @var string $email\n\
\     *\n\
\     * @ORM\\Column(name="email", type="string", length=255, unique=true)\n\
\     * @Assert\\Email()\n\
\     */\n\
\    protected $email;\n\
\n\
\    // ...\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">fields</p>\
<p><strong>type</strong>: <code>array | string</code> [default option]</p>\
<p>This required option is the field (or list of fields) on which this entity should be unique. For example, if you specified both the <code>email</code> and <code>name</code> field \
in a single <code>UniqueEntity</code> constraint, then it would enforce that the combination value where unique (e.g. two users could have the same email, as long as they don't have \
the same name also).</p>\
<p>If you need to require two fields to be individually unique (e.g. a unique <code>email</code> and a unique <code>username</code>), you use two <code>UniqueEntity</code> entries, \
each with a single field.</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value is already used.</code></p>\
<p>The message that's displayed when this constraint fails.</p>\
<p style="font-weight: bold; font-style: italic">em</p>\
<p><strong>type</strong>: <code>string</code></p>\
<p>The name of the entity manager to use for making the query to determine the uniqueness. If it's left blank, the correct entity manager will determined for this class. For that reason, \
this option should probably not need to be used.</p>
LanguageTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Language</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is a valid language code.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>message</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Language</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>LanguageValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class User {\n\
\    /**\n\
\     * @Assert\\Language\n\
\     */\n\
\     protected $preferredLanguage;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value is not a valid language</code></p>\
<p>This message is shown if the string is not a valid language code.</p>
LocaleTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Locale</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is a valid locale.</p>\
<p>The "value" for each locale is either the two letter ISO639-1 language code (e.g. fr), or the language code followed by an underscore (_), then the ISO3166 country code \
(e.g. fr_FR for French/France).</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>message</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Locale</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>LocaleValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class User {\n\
\    /**\n\
\     * @Assert\\Locale\n\
\     */\n\
\     protected $locale;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value is not a valid locale</code></p>\
<p>This message is shown if the string is not a valid locale.</p>
CountryTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Country</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is a valid two-letter country code.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>message</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Country</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>CountryValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class User {\n\
\    /**\n\
\     * @Assert\\Country\n\
\     */\n\
\     protected $country;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value is not a valid country</code></p>\
<p>This message is shown if the string is not a valid country code.</p>
FileTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@File</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Validates that a value is a valid "file", which can be one of the following:\
<ul>\
<li>A string (or object with a <code>__toString()</code> method) path to an existing file;</li>\
<li>A valid <code>File</code> object (including objects of class <code>UploadedFile</code>).</li>\
</ul>\
This constraint is commonly used in forms with the <code>file</code> form type.\
</p>\
<p style="font-style: italic">If the file you're validating is an image, try the <code>Image</code> constraint.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>maxSize</li>\
            <li>mimeTypes</li>\
            <li>maxSizeMessage</li>\
            <li>mimeTypesMessage</li>\
            <li>notFoundMessage</li>\
            <li>notReadableMessage</li>\
            <li>uploadIniSizeErrorMessage</li>\
            <li>uploadFormSizeErrorMessage</li>\
            <li>uploadErrorMessage</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>File</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>FileValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>This constraint is most commonly used on a property that will be rendered in a form as a file form type. For example, suppose you're creating an author form where you can upload a "bio" PDF \
for the author. In your form, the <code>bioFile</code> property would be a file type. To guarantee that the <code>bioFile</code> <code>File</code> object is valid, and that it is \
below a certain file size and a valid PDF, add the following:</p>\
<pre><code>\n\
use Symfony\\Component\\HttpFoundation\\File\\File;\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\File(\n\
\     *     maxSize = "1024k",\n\
\     *     mimeTypes = {"application/pdf", "application/x-pdf"},\n\
\     *     mimeTypesMessage = "Please upload a valid PDF"\n\
\     * )\n\
\     */\n\
\    protected $bioFile;\n\
}\n\
</code></pre>\
<p>The <code>bioFile</code> property is validated to guarantee that it is a real file. Its size and mime type are also validated because the appropriate options have been specified.</p>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">maxSize</p>\
<p><strong>type</strong>: <code>mixed</code></p>\
<p>If set, the size of the underlying file must be below this file size in order to be valid. The size of the file can be given in one of the following formats:\
<ul>\
<li><b>bytes</b>: To specify the <code>maxSize</code> in bytes, pass a value that is entirely numeric (e.g. <code>4096</code>);</li>\
<li><b>kilobytes</b>: To specify the <code>maxSize</code> in kilobytes, pass a number and suffix it with a lowercase "k" (e.g. <code>200k</code>);</li>\
<li><b>megabytes</b>: To specify the <code>maxSize</code> in megabytes, pass a number and suffix it with a capital "M" (e.g. <code>4M</code>).</li>\
</ul>\
</p>\
<p style="font-weight: bold; font-style: italic">mimeTypes</p>\
<p><strong>type</strong>: <code>array | string</code></p>\
<p>If set, the validator will check that the mime type of the underlying file is equal to the given mime type (if a string) or exists in the collection of given mime types (if an array).</p>\
<p>You can find a list of existing mime types on the IANA website.</p>\
<p style="font-weight: bold; font-style: italic">maxSizeMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>The file is too large ({{ size }}). Allowed maximum size is {{ limit }}</code></p>\
<p>The message displayed if the file is larger than the <code>maxSize</code> option.</p>\
<p style="font-weight: bold; font-style: italic">mimeTypesMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>The mime type of the file is invalid ({{ type }}). Allowed mime types are {{ types }}</code></p>\
<p>The message displayed if the mime type of the file is not a valid mime type per the <code>mimeTypes</code> option.</p>\
<p style="font-weight: bold; font-style: italic">notFoundMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>The file could not be found</code></p>\
<p>The message displayed if no file can be found at the given path. This error is only likely if the underlying value is a string path, as a <code>File</code> object cannot be constructed \
with an invalid file path.</p>\
<p style="font-weight: bold; font-style: italic">notReadableMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>The file is not readable</code></p>\
<p>The message displayed if the file exists, but the PHP <code>is_readable</code> function fails when passed the path to the file.</p>\
<p style="font-weight: bold; font-style: italic">uploadIniSizeErrorMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>The file is too large. Allowed maximum size is {{ limit }}</code></p>\
<p>The message that is displayed if the uploaded file is larger than the <code>upload_max_filesize</code> PHP.ini setting.</p>\
<p style="font-weight: bold; font-style: italic">uploadFormSizeErrorMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>The file is too large</code></p>\
<p>The message that is displayed if the uploaded file is larger than allowed by the HTML file input field.</p>\
<p style="font-weight: bold; font-style: italic">uploadErrorMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>The file could not be uploaded</code></p>\
<p>The message that is displayed if the uploaded file could not be uploaded for some unknown reason, such as the file upload failed or it couldn't be written to disk.</p>
ImageTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Image</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>Image</code> constraint works exactly like the <code>File</code> constraint, except that its <code>mimeTypes</code> and <code>mimeTypesMessage</code> options are automatically \
setup to work for image files specifically.</p>\
<p>Additionally, as of Symfony 2.1, it has options so you can validate against the width and height of the image.</p>\
<p>See the <code>File</code> constraint for the bulk of the documentation on this constraint.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>mimeTypes</li>\
            <li>minWidth</li>\
            <li>maxWidth</li>\
            <li>maxHeight</li>\
            <li>minHeight</li>\
            <li>mimeTypesMessage</li>\
            <li>sizeNotDetectedMessage</li>\
            <li>maxWidthMessage</li>\
            <li>minWidthMessage</li>\
            <li>maxHeightMessage</li>\
            <li>minHeightMessage</li>\
            <li>See <code>File</code> for inherited options</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>File</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>FileValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>This constraint is most commonly used on a property that will be rendered in a form as a file form type. For example, suppose you're creating an author form where you can upload a "headshot" \
image for the author. In your form, the <code>headshot</code> property would be a <code>file</code> type. To guarantee that the <code>headshot</code> <code>File</code> object is a valid image \
and that it is between a certain size, add the following:</p>\
<pre><code>\n\
use Symfony\\Component\\HttpFoundation\\File\\File;\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\Image(\n\
\     *     minWidth = 200,\n\
\     *     maxWidth = 400,\n\
\     *     minHeight = 200,\n\
\     *     maxHeight = 400\n\
\     * )\n\
\     */\n\
\    protected $headshot;\n\
}\n\
</code></pre>\
<p>The <code>headshot</code> property is validated to guarantee that it is a real image and that it is between a certain width and height.</p>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p>This constraint shares all of its options with the <code>File</code> constraint. It does, however, modify two of the default option values and add several other options.</p>\
<p style="font-weight: bold; font-style: italic">mimeTypes</p>\
<p><strong>type</strong>: <code>array | string</code> <strong>default</strong>: <code>image/*</code></p>\
<p>You can find a list of existing mime types on the IANA website.</p>\
<p style="font-weight: bold; font-style: italic">mimeTypesMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This file is not a valid image</code></p>\
<p style="font-weight: bold; font-style: italic">New in version 2.1: All of the min/max width/height options are new to Symfony 2.1.</p>\
<p style="font-weight: bold; font-style: italic">minWidth</p>\
<p><strong>type</strong>: <code>integer</code></p>\
<p>If set, the width of the image file must be greater than or equal to this value in pixels.</p>\
<p style="font-weight: bold; font-style: italic">maxWidth</p>\
<p><strong>type</strong>: <code>integer</code></p>\
<p>If set, the width of the image file must be less than or equal to this value in pixels.</p>\
<p style="font-weight: bold; font-style: italic">minHeight</p>\
<p><strong>type</strong>: <code>integer</code></p>\
<p>If set, the height of the image file must be greater than or equal to this value in pixels.</p>\
<p style="font-weight: bold; font-style: italic">maxHeight</p>\
<p><strong>type</strong>: <code>integer</code></p>\
<p>If set, the height of the image file must be less than or equal to this value in pixels.</p>\
<p style="font-weight: bold; font-style: italic">sizeNotDetectedMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>The size of the image could not be detected</code></p>\
<p>If the system is unable to determine the size of the image, this error will be displayed. This will only occur when at least one of the four size constraint options has been set.</p>\
<p style="font-weight: bold; font-style: italic">maxWidthMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>The image width is too big ({{ width }}px). Allowed maximum width is {{ max_width }}px</code></p>\
<p>The error message if the width of the image exceeds <code>maxWidth</code>.</p>\
<p style="font-weight: bold; font-style: italic">minWidthMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>The image width is too small ({{ width }}px). Minimum width expected is {{ min_width }}px</code></p>\
<p>The error message if the width of the image is less than <code>minWidth</code>.</p>\
<p style="font-weight: bold; font-style: italic">maxHeightMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>The image height is too big ({{ height }}px). Allowed maximum height is {{ max_height }}px</code></p>\
<p>The error message if the height of the image exceeds <code>maxHeight</code>.</p>\
<p style="font-weight: bold; font-style: italic">minHeightMessage</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>The image height is too small ({{ height }}px). Minimum height expected is {{ min_height }}px</code></p>\
<p>The error message if the height of the image is less than <code>minHeight</code>.</p>
CallbackTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Callback</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The purpose of the Callback assertion is to let you create completely custom validation rules and to assign any validation errors to specific fields on your object. If you're using validation \
with forms, this means that you can make these custom errors display next to a specific field, instead of simply at the top of your form.</p>\
<p>This process works by specifying one or more <i>callback</i> methods, each of which will be called during the validation process. Each of those methods can do anything, including creating \
and assigning validation errors.</p>\
<p style="font-style: italic">A callback method itself doesn't <i>fail</i> or return any value. Instead, as you'll see in the example, a callback method has the ability to directly add \
validator "violations".</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>class</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>methods</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Callback</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>CallbackValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>The callback method is passed a special <code>ExecutionContext</code> object. You can set "violations" directly on this object and determine to which field those errors should be attributed:</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
/**\n\
\ * @Assert\\Callback(methods={"isAuthorValid"})\n\
\ */\n\
class Author {\n\
\    // ...\n\
\    private $firstName;\n\
\n\
\    public function isAuthorValid(ExecutionContext $context) {\n\
\        // somehow you have an array of "fake names"\n\
\        $fakeNames = array();\n\
\n\
\        // check if the name is actually a fake name\n\
\        if (in_array($this->getFirstName(), $fakeNames)) {\n\
\            $context->addViolationAtSubPath('firstname', 'This name sounds totally fake!', array(), null);\n\
\        }\n\
\    }\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">methods</p>\
<p><strong>type</strong>: <code>array</code> <strong>default</strong>: <code>array()</code> [default option]</p>\
<p>This is an array of the methods that should be executed during the validation process. Each method can be one of the following formats:</p>\
<ol>\
<li><p><strong>String method name</strong></p>\
<blockquote><p>If the name of a method is a simple string (e.g. <code>isAuthorValid</code>), that method will be called on the same object that's being validated and the <code>ExecutionContext</code> \
will be the only argument (see the above example).</p></blockquote>\
</li>\
<li><p><strong>Static array callback</strong></p>\
<blockquote><p>Each method can also be specified as a standard array callback:</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
/**\n\
\ * @Assert\\Callback(methods={\n\
\ *     { "Acme\\BlogBundle\\MyStaticValidatorClass", "isAuthorValid"}\n\
\ * })\n\
\ */\n\
class Author {\n\
}\n\
</code></pre>\
<p>In this case, the static method <code>isAuthorValid</code> will be called on the <code>Acme\\BlogBundle\\MyStaticValidatorClass</code> class. It's passed both the original object being \
validated (e.g. <code>Author</code>) as well as the <code>ExecutionContext</code>:</p>\
<pre><code>\n\
namespace Acme\\BlogBundle;\n\
\n\
use Symfony\\Component\\Validator\\ExecutionContext;\n\
use Acme\\BlogBundle\\Entity\\Author;\n\
\n\
class MyStaticValidatorClass {\n\
\    static public function isAuthorValid(Author $author, ExecutionContext $context) {\n\
\        // ...\n\
\    }\n\
}\n\
</code></pre>\
<p>If you specify your <code>Callback</code> constraint via PHP, then you also have the option to make your callback either a PHP closure or a non-static callback. It is <i>not</i> currently \
possible, however, to specify a service as a constraint. To validate using a service, you should create a custom validation constraint and add that new constraint to your class.</p>
AllTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@All</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>When applied to an array (or <code>Traversable</code> object), this constraint allows you to apply a collection of constraints to each element of the array.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>constraints</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>All</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>AllValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>Suppose that you have an array of strings, and you want to validate each entry in that array:</p>\
<pre><code>\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class User {\n\
\    /**\n\
\     * @Assert\\All({\n\
\     *     @Assert\\NotBlank\n\
\     *     @Assert\\Length(min = "5"),\n\
\     * })\n\
\     */\n\
\     protected $favoriteColors = array();\n\
}\n\
</code></pre>\
<p>Now, each entry in the <code>favoriteColors</code> array will be validated to not be blank and to be at least 5 characters long.</p>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">constraints</p>\
<p><strong>type</strong>: <code>array</code> [default option]</p>\
<p>This required option is the array of validation constraints that you want to apply to each element of the underlying array.</p>
UserPasswordTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@UserPassword</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p style="font-style: italic">New in version 2.1: This constraint is new in version 2.1.</p>\
<p>This validates that an input value is equal to the current authenticated user's password. This is useful in a form where a user can change his password, but needs to enter his old password for security.</p>\
<p style="font-style: italic">This should <b>not</b> be used to validate a login form, since this is done automatically by the security system.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>message</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>UserPassword</code></td>\
</tr>\
<tr>\
    <td>Validator</td>\
    <td><code>UserPasswordValidator</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>Suppose you have a PasswordChange class, that's used in a form where the user can change his password by entering his old password and a new password. This constraint will validate that \
the old password matches the user's current password:</p>\
<pre><code>\n\
use Symfony\\Component\\Security\\Core\\Validator\\Constraint as SecurityAssert;\n\
\n\
class ChangePassword {\n\
\    /**\n\
\     * @SecurityAssert\\UserPassword(\n\
\     *     message = "Wrong value for your current password"\n\
\     * )\n\
\     */\n\
\     protected $oldPassword;\n\
}\n\
</code></pre>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">message</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>This value should be the user current password</code></p>\
<p>This is the message that's displayed when the underlying string does <i>not</i> match the current user's password.</p>
ValidTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Valid</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>This constraint is used to enable validation on objects that are embedded as properties on an object being validated. This allows you to validate an object and all sub-objects \
associated with it.</p>\
<table border="0">\
<tr>\
    <td>Applies to</td>\
    <td>property or method</td>\
</tr>\
<tr>\
    <td valign="top">Options</td>\
    <td><ul style="margin:0 0 0 10px;">\
            <li>traverse</li>\
        </ul></td>\
</tr>\
<tr>\
    <td>Class</td>\
    <td><code>Type</code></td>\
</tr>\
</table>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<p>In the following example, create two classes <code>Author</code> and <code>Address</code> that both have constraints on their properties. Furthermore, <code>Author</code> stores \
an <code>Address</code> instance in the <code>address</code> property.</p>\
<pre><code>\n\
// src/Acme/HelloBundle/Entity/Address.php\n\
namespace Acme\\HelloBundle\\Entity;\n\
\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Address {\n\
\    /**\n\
\     * @Assert\\NotBlank()\n\
\     */\n\
\    protected $street;\n\
\n\
\    /**\n\
\     * @Assert\\NotBlank\n\
\     * @Assert\\Length(max = "5")\n\
\     */\n\
\    protected $zipCode;\n\
}\n\
\n\
// src/Acme/HelloBundle/Entity/Author.php\n\
namespace Acme\\HelloBundle\Entity;\n\
\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    /**\n\
\     * @Assert\\NotBlank\n\
\     * @Assert\\Length(min = "4")\n\
\     */\n\
\    protected $firstName;\n\
\n\
\    /**\n\
\     * @Assert\\NotBlank\n\
\     */\n\
\    protected $lastName;\n\
\n\
\    protected $address;\n\
}\n\
</code></pre>\
<p>With this mapping, it is possible to successfully validate an author with an invalid address. To prevent that, add the <code>Valid</code> constraint to the <code>address</code> property.</p>\
<pre><code>\n\
// src/Acme/HelloBundle/Author.php\n\
use Symfony\\Component\\Validator\\Constraints as Assert;\n\
\n\
class Author {\n\
\    /* ... */\n\
\n\
\    /**\n\
\     * @Assert\\Valid\n\
\     */\n\
\    protected $address;\n\
}\n\
</code></pre>\
<p>If you validate an author with an invalid address now, you can see that the validation of the Address fields failed.</p>\
<p>AcmeHelloBundleAuthor.address.zipCode: This value is too long. It should have 5 characters or less</p>\
<p style="font-weight: bold; font-size: 1.1em">Options</p>\
<p style="font-weight: bold; font-style: italic">traverse</p>\
<p><strong>type</strong>: <code>string</code> <strong>default</strong>: <code>true</code></p>\
<p>If this constraint is applied to a property that holds an array of objects, then each object in that array will be validated only if this option is set to <code>true</code>.</p>
