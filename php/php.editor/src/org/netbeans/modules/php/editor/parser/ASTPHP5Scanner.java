/* The following code was generated by JFlex 1.4.3 on 22/03/27 21:36 */

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.netbeans.modules.php.editor.parser;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import org.netbeans.modules.php.editor.parser.astnodes.*;
import org.netbeans.modules.web.common.api.ByteStack;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP2", "UUF_UNUSED_FIELD"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/03/27 21:36 from the specification file
 * <tt>/home/junichi11/NetBeansProjects/netbeans/php/php.editor/tools/ASTPHP5Scanner.flex</tt>
 */
public class ASTPHP5Scanner implements Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_DOCBLOCK = 28;
  public static final int ST_END_HEREDOC = 12;
  public static final int ST_DOUBLE_QUOTES = 4;
  public static final int ST_LOOKING_FOR_VARNAME = 22;
  public static final int ST_LOOKING_FOR_PROPERTY = 20;
  public static final int ST_IN_SHORT_ECHO = 32;
  public static final int ST_END_NOWDOC = 18;
  public static final int ST_COMMENT = 26;
  public static final int ST_ONE_LINE_COMMENT = 30;
  public static final int ST_HALTED_COMPILER = 34;
  public static final int ST_START_NOWDOC = 16;
  public static final int ST_VAR_OFFSET = 24;
  public static final int ST_IN_SCRIPTING = 2;
  public static final int ST_HEREDOC = 8;
  public static final int YYINITIAL = 0;
  public static final int ST_NOWDOC = 14;
  public static final int ST_START_HEREDOC = 10;
  public static final int ST_BACKQUOTE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
    16, 16, 17, 17
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\21\1\20\2\0\1\22\22\0\1\21\1\66\1\24\1\43"+
    "\1\23\1\72\1\73\1\104\1\62\1\63\1\70\1\5\1\76\1\55"+
    "\1\3\1\71\1\6\1\12\10\1\1\60\1\27\1\67\1\30\1\56"+
    "\1\57\1\101\1\10\1\11\1\37\1\33\1\4\1\34\1\53\1\50"+
    "\1\31\1\64\1\52\1\46\1\47\1\35\1\40\1\54\1\65\1\42"+
    "\1\41\1\32\1\36\1\61\1\51\1\7\1\45\1\15\1\44\1\17"+
    "\1\77\1\75\1\2\1\25\1\10\1\11\1\37\1\33\1\4\1\34"+
    "\1\53\1\50\1\31\1\64\1\52\1\46\1\47\1\35\1\40\1\54"+
    "\1\65\1\42\1\103\1\32\1\36\1\61\1\51\1\7\1\45\1\15"+
    "\1\26\1\74\1\102\1\100\1\14\52\15\1\15\12\15\1\15\4\15"+
    "\1\15\5\15\27\15\1\15\37\15\1\15\10\15\u01c2\13\4\0\14\13"+
    "\16\0\5\13\7\0\1\13\1\0\1\13\201\0\5\13\1\0\2\13"+
    "\2\0\4\13\10\0\1\13\1\0\3\13\1\0\1\13\1\0\24\13"+
    "\1\0\123\13\1\0\213\13\10\0\236\13\11\0\46\13\2\0\1\13"+
    "\7\0\47\13\110\0\33\13\5\0\3\13\55\0\53\13\25\0\12\16"+
    "\4\0\2\13\1\0\143\13\1\0\1\13\17\0\2\13\7\0\2\13"+
    "\12\16\3\13\2\0\1\13\20\0\1\13\1\0\36\13\35\0\131\13"+
    "\13\0\1\13\16\0\12\16\41\13\11\0\2\13\4\0\1\13\5\0"+
    "\26\13\4\0\1\13\11\0\1\13\3\0\1\13\27\0\31\13\107\0"+
    "\1\13\1\0\13\13\127\0\66\13\3\0\1\13\22\0\1\13\7\0"+
    "\12\13\4\0\12\16\1\0\7\13\1\0\7\13\5\0\10\13\2\0"+
    "\2\13\2\0\26\13\1\0\7\13\1\0\1\13\3\0\4\13\3\0"+
    "\1\13\20\0\1\13\15\0\2\13\1\0\3\13\4\0\12\16\2\13"+
    "\23\0\6\13\4\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13"+
    "\1\0\2\13\1\0\2\13\37\0\4\13\1\0\1\13\7\0\12\16"+
    "\2\0\3\13\20\0\11\13\1\0\3\13\1\0\26\13\1\0\7\13"+
    "\1\0\2\13\1\0\5\13\3\0\1\13\22\0\1\13\17\0\2\13"+
    "\4\0\12\16\25\0\10\13\2\0\2\13\2\0\26\13\1\0\7\13"+
    "\1\0\2\13\1\0\5\13\3\0\1\13\36\0\2\13\1\0\3\13"+
    "\4\0\12\16\1\0\1\13\21\0\1\13\1\0\6\13\3\0\3\13"+
    "\1\0\4\13\3\0\2\13\1\0\1\13\1\0\2\13\3\0\2\13"+
    "\3\0\3\13\3\0\14\13\26\0\1\13\25\0\12\16\25\0\10\13"+
    "\1\0\3\13\1\0\27\13\1\0\12\13\1\0\5\13\3\0\1\13"+
    "\32\0\2\13\6\0\2\13\4\0\12\16\25\0\10\13\1\0\3\13"+
    "\1\0\27\13\1\0\12\13\1\0\5\13\3\0\1\13\40\0\1\13"+
    "\1\0\2\13\4\0\12\16\1\0\2\13\22\0\10\13\1\0\3\13"+
    "\1\0\51\13\2\0\1\13\20\0\1\13\21\0\2\13\4\0\12\16"+
    "\12\0\6\13\5\0\22\13\3\0\30\13\1\0\11\13\1\0\1\13"+
    "\2\0\7\13\72\0\60\13\1\0\2\13\14\0\7\13\11\0\12\16"+
    "\47\0\2\13\1\0\1\13\2\0\2\13\1\0\1\13\2\0\1\13"+
    "\6\0\4\13\1\0\7\13\1\0\3\13\1\0\1\13\1\0\1\13"+
    "\2\0\2\13\1\0\4\13\1\0\2\13\11\0\1\13\2\0\5\13"+
    "\1\0\1\13\11\0\12\16\2\0\4\13\40\0\1\13\37\0\12\16"+
    "\26\0\10\13\1\0\44\13\33\0\5\13\163\0\53\13\24\0\1\13"+
    "\12\16\6\0\6\13\4\0\4\13\3\0\1\13\3\0\2\13\7\0"+
    "\3\13\4\0\15\13\14\0\1\13\1\0\12\16\6\0\46\13\1\0"+
    "\1\13\5\0\1\13\2\0\53\13\1\0\u014d\13\1\0\4\13\2\0"+
    "\7\13\1\0\1\13\1\0\4\13\2\0\51\13\1\0\4\13\2\0"+
    "\41\13\1\0\4\13\2\0\7\13\1\0\1\13\1\0\4\13\2\0"+
    "\17\13\1\0\71\13\1\0\4\13\2\0\103\13\45\0\20\13\20\0"+
    "\125\13\14\0\u026c\13\2\0\21\13\1\0\32\13\5\0\113\13\25\0"+
    "\15\13\1\0\4\13\16\0\22\13\16\0\22\13\16\0\15\13\1\0"+
    "\3\13\17\0\64\13\43\0\1\13\4\0\1\13\3\0\12\16\46\0"+
    "\12\16\6\0\130\13\10\0\51\13\1\0\1\13\5\0\106\13\12\0"+
    "\35\13\51\0\12\16\36\13\2\0\5\13\13\0\54\13\25\0\7\13"+
    "\10\0\12\16\46\0\27\13\11\0\65\13\53\0\12\16\6\0\12\16"+
    "\15\0\1\13\135\0\57\13\21\0\7\13\4\0\12\16\51\0\36\13"+
    "\15\0\2\13\12\16\54\13\32\0\44\13\34\0\12\16\3\0\3\13"+
    "\12\16\44\13\153\0\4\13\1\0\4\13\3\0\2\13\11\0\300\13"+
    "\100\0\u0116\13\2\0\6\13\2\0\46\13\2\0\6\13\2\0\10\13"+
    "\1\0\1\13\1\0\1\13\1\0\1\13\1\0\37\13\2\0\65\13"+
    "\1\0\7\13\1\0\1\13\3\0\3\13\1\0\7\13\3\0\4\13"+
    "\2\0\6\13\4\0\15\13\5\0\3\13\1\0\7\13\164\0\1\13"+
    "\15\0\1\13\20\0\15\13\145\0\1\13\4\0\1\13\2\0\12\13"+
    "\1\0\1\13\3\0\5\13\6\0\1\13\1\0\1\13\1\0\1\13"+
    "\1\0\4\13\1\0\13\13\2\0\4\13\5\0\5\13\4\0\1\13"+
    "\64\0\2\13\u0a7b\0\57\13\1\0\57\13\1\0\205\13\6\0\4\13"+
    "\3\0\2\13\14\0\46\13\1\0\1\13\5\0\1\13\2\0\70\13"+
    "\7\0\1\13\20\0\27\13\11\0\7\13\1\0\7\13\1\0\7\13"+
    "\1\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13"+
    "\120\0\1\13\u01d5\0\2\13\52\0\5\13\5\0\2\13\4\0\126\13"+
    "\6\0\3\13\1\0\132\13\1\0\4\13\5\0\51\13\3\0\136\13"+
    "\21\0\33\13\65\0\20\13\u0200\0\u19b6\13\112\0\u51cd\13\63\0\u048d\13"+
    "\103\0\56\13\2\0\u010d\13\3\0\20\13\12\16\2\13\24\0\57\13"+
    "\20\0\31\13\10\0\106\13\61\0\11\13\2\0\147\13\2\0\4\13"+
    "\1\0\4\13\14\0\13\13\115\0\12\13\1\0\3\13\1\0\4\13"+
    "\1\0\27\13\35\0\64\13\16\0\62\13\34\0\12\16\30\0\6\13"+
    "\3\0\1\13\4\0\12\16\34\13\12\0\27\13\31\0\35\13\7\0"+
    "\57\13\34\0\1\13\12\16\46\0\51\13\27\0\3\13\1\0\10\13"+
    "\4\0\12\16\6\0\27\13\3\0\1\13\5\0\60\13\1\0\1\13"+
    "\3\0\2\13\2\0\5\13\2\0\1\13\1\0\1\13\30\0\3\13"+
    "\2\0\13\13\7\0\3\13\14\0\6\13\2\0\6\13\2\0\6\13"+
    "\11\0\7\13\1\0\7\13\221\0\43\13\15\0\12\16\6\0\u2ba4\13"+
    "\14\0\27\13\4\0\61\13\u2104\0\u016e\13\2\0\152\13\46\0\7\13"+
    "\14\0\5\13\5\0\1\13\1\0\12\13\1\0\15\13\1\0\5\13"+
    "\1\0\1\13\1\0\2\13\1\0\2\13\1\0\154\13\41\0\u016b\13"+
    "\22\0\100\13\2\0\66\13\50\0\14\13\164\0\5\13\1\0\207\13"+
    "\23\0\12\16\7\0\32\13\6\0\32\13\13\0\131\13\3\0\6\13"+
    "\2\0\6\13\2\0\6\13\2\0\3\13\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\22\0\2\1\1\2\1\3\1\4\1\5\1\4\1\6"+
    "\1\3\4\4\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\12\4\1\17\1\20\6\4\1\21\1\22"+
    "\1\23\1\24\1\4\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\2\1\44\2\2\1\45\1\2\1\46"+
    "\2\2\1\47\1\2\1\50\1\2\2\50\2\51\3\52"+
    "\1\53\1\2\1\54\1\2\2\54\3\55\1\56\1\2"+
    "\1\57\1\60\2\57\1\61\1\62\1\63\1\5\1\6"+
    "\1\63\1\64\1\65\1\66\1\67\1\16\1\21\1\22"+
    "\1\23\1\24\1\25\1\27\1\30\1\31\1\32\1\33"+
    "\1\70\1\35\1\36\1\71\1\72\1\73\1\74\2\2"+
    "\3\75\2\74\1\76\1\1\1\0\1\77\1\100\1\1"+
    "\1\0\1\101\1\0\1\4\1\101\1\0\1\102\6\4"+
    "\1\103\1\104\2\0\3\4\1\105\2\4\2\0\1\106"+
    "\3\0\1\107\1\0\1\110\1\111\1\112\7\4\1\113"+
    "\1\4\1\114\11\4\1\115\3\4\1\116\10\4\1\117"+
    "\1\120\1\121\1\122\1\123\1\0\1\124\1\125\1\126"+
    "\1\4\12\0\1\127\1\130\1\127\1\131\1\0\1\132"+
    "\1\133\1\134\1\135\1\17\1\136\1\137\2\0\1\140"+
    "\1\141\1\142\1\143\1\144\1\145\4\0\2\106\2\146"+
    "\1\147\1\150\1\146\3\0\1\106\3\151\3\0\1\152"+
    "\1\0\2\153\1\0\1\53\3\0\1\154\1\0\1\54"+
    "\2\155\1\0\1\56\1\0\1\156\2\0\1\157\2\0"+
    "\1\160\2\0\1\161\1\162\1\163\2\0\1\101\1\0"+
    "\10\4\1\0\1\164\10\4\2\101\1\165\1\4\1\166"+
    "\2\4\1\0\1\167\6\4\1\170\3\4\1\171\2\4"+
    "\1\172\1\173\2\4\1\174\24\4\1\175\1\176\2\124"+
    "\1\177\1\200\12\0\1\201\1\202\1\203\2\0\1\204"+
    "\1\0\1\205\1\0\2\137\1\0\1\206\1\0\1\206"+
    "\1\44\1\206\1\46\1\207\1\0\1\210\1\0\1\152"+
    "\1\154\1\211\2\157\1\212\2\0\20\4\1\213\1\214"+
    "\1\4\1\215\23\4\1\216\13\4\1\217\2\4\1\220"+
    "\5\4\17\0\1\221\3\0\1\44\1\46\1\207\2\0"+
    "\12\4\1\222\4\4\1\0\1\4\1\223\1\4\1\224"+
    "\1\225\4\4\1\226\1\4\1\227\1\230\3\4\1\231"+
    "\3\4\1\232\1\233\2\4\1\234\1\235\1\236\5\4"+
    "\1\237\1\240\1\241\2\4\1\242\2\4\5\0\1\243"+
    "\6\0\2\244\5\0\3\245\2\246\1\0\13\4\1\247"+
    "\2\4\3\250\1\251\7\4\1\252\7\4\1\253\1\254"+
    "\1\4\1\255\1\4\1\0\1\256\1\257\2\4\4\0"+
    "\1\260\5\0\1\261\6\0\1\4\1\262\7\4\1\263"+
    "\4\4\2\0\2\4\1\264\3\4\1\265\1\266\1\267"+
    "\1\4\1\270\4\4\1\271\1\0\1\272\1\4\1\273"+
    "\3\0\1\274\1\0\2\275\4\0\1\4\1\276\3\4"+
    "\1\277\5\4\1\300\2\0\1\301\5\4\1\302\1\4"+
    "\1\303\1\304\1\305\1\4\1\0\1\4\1\306\1\307"+
    "\5\0\1\310\2\4\1\311\4\4\1\312\2\0\1\313"+
    "\1\4\1\314\2\4\1\315\1\4\1\0\1\316\5\0"+
    "\2\4\1\317\1\4\1\320\1\321\2\0\1\4\1\322"+
    "\1\323\1\4\1\324\10\0\3\4\2\0\2\4\7\0"+
    "\1\325\2\4\1\326\1\0\1\327\1\330\2\0\1\331"+
    "\1\0\1\332\1\4\6\0\1\4\2\0\1\333\1\0"+
    "\1\4\7\0\1\334\7\0\1\77\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[833];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633"+
    "\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\u0564"+
    "\0\u085b\0\u08a0\0\u08e5\0\u0564\0\u0564\0\u0564\0\u092a\0\u096f"+
    "\0\u09b4\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97"+
    "\0\u0bdc\0\u0c21\0\u0564\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a"+
    "\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0564"+
    "\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185"+
    "\0\u0564\0\u0564\0\u0564\0\u0564\0\u0564\0\u11ca\0\u120f\0\u1254"+
    "\0\u1299\0\u0564\0\u12de\0\u1323\0\u1368\0\u13ad\0\u0564\0\u13f2"+
    "\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b\0\u1590\0\u0564\0\u15d5"+
    "\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u0564"+
    "\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u0564\0\u1911\0\u1956\0\u199b"+
    "\0\u0564\0\u19e0\0\u1a25\0\u0564\0\u0564\0\u1a6a\0\u0564\0\u0564"+
    "\0\u0564\0\u0564\0\u0564\0\u0564\0\u0564\0\u0564\0\u0564\0\u0564"+
    "\0\u0564\0\u0564\0\u0564\0\u0564\0\u0564\0\u0564\0\u0564\0\u0564"+
    "\0\u0564\0\u0564\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u0564"+
    "\0\u1c08\0\u0564\0\u1c4d\0\u0564\0\u0495\0\u1c92\0\u1cd7\0\u1d1c"+
    "\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u0564"+
    "\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u0564\0\u0564"+
    "\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u0816\0\u223b\0\u2280"+
    "\0\u22c5\0\u11ca\0\u230a\0\u08e5\0\u234f\0\u2394\0\u0564\0\u23d9"+
    "\0\u241e\0\u0564\0\u0816\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577"+
    "\0\u25bc\0\u2601\0\u0816\0\u2646\0\u0816\0\u268b\0\u26d0\0\u2715"+
    "\0\u275a\0\u279f\0\u27e4\0\u2829\0\u286e\0\u28b3\0\u0816\0\u28f8"+
    "\0\u293d\0\u2982\0\u0564\0\u29c7\0\u2a0c\0\u2a51\0\u2a96\0\u2adb"+
    "\0\u2b20\0\u2b65\0\u2baa\0\u0564\0\u0564\0\u0564\0\u0564\0\u2bef"+
    "\0\u2c34\0\u2c79\0\u2cbe\0\u0564\0\u2d03\0\u2d48\0\u2d8d\0\u0f5d"+
    "\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5"+
    "\0\u2ffa\0\u0564\0\u303f\0\u3084\0\u0564\0\u30c9\0\u0564\0\u310e"+
    "\0\u0564\0\u0564\0\u3153\0\u3198\0\u31dd\0\u0564\0\u0564\0\u0564"+
    "\0\u0564\0\u0564\0\u0564\0\u3222\0\u1254\0\u3267\0\u32ac\0\u32f1"+
    "\0\u3336\0\u3267\0\u0564\0\u0564\0\u0564\0\u32ac\0\u1368\0\u337b"+
    "\0\u33c0\0\u3405\0\u337b\0\u0564\0\u33c0\0\u344a\0\u348f\0\u34d4"+
    "\0\u3519\0\u355e\0\u15d5\0\u0564\0\u161a\0\u0564\0\u16a4\0\u172e"+
    "\0\u16e9\0\u35a3\0\u35e8\0\u362d\0\u17fd\0\u0564\0\u1842\0\u0564"+
    "\0\u18cc\0\u0564\0\u3672\0\u36b7\0\u36fc\0\u3741\0\u3786\0\u0564"+
    "\0\u1b39\0\u37cb\0\u0564\0\u0564\0\u0564\0\u3810\0\u3855\0\u389a"+
    "\0\u38df\0\u3924\0\u3969\0\u39ae\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2"+
    "\0\u3b07\0\u3b4c\0\u0564\0\u3b91\0\u3bd6\0\u3c1b\0\u3c60\0\u3ca5"+
    "\0\u3cea\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe\0\u0816\0\u3e43\0\u0816"+
    "\0\u3e88\0\u3ecd\0\u3f12\0\u0564\0\u3f57\0\u3f9c\0\u3fe1\0\u4026"+
    "\0\u406b\0\u40b0\0\u0816\0\u40f5\0\u413a\0\u417f\0\u0816\0\u41c4"+
    "\0\u4209\0\u424e\0\u0816\0\u4293\0\u42d8\0\u0816\0\u431d\0\u4362"+
    "\0\u43a7\0\u43ec\0\u4431\0\u4476\0\u44bb\0\u4500\0\u4545\0\u458a"+
    "\0\u45cf\0\u4614\0\u4659\0\u469e\0\u46e3\0\u4728\0\u476d\0\u47b2"+
    "\0\u47f7\0\u483c\0\u0564\0\u0564\0\u0564\0\u4881\0\u0564\0\u0816"+
    "\0\u48c6\0\u490b\0\u4950\0\u4995\0\u49da\0\u4a1f\0\u4a64\0\u4aa9"+
    "\0\u4aee\0\u4b33\0\u0564\0\u0564\0\u0564\0\u4b78\0\u4bbd\0\u0564"+
    "\0\u4c02\0\u4c47\0\u4c8c\0\u0564\0\u4cd1\0\u4d16\0\u0564\0\u4d5b"+
    "\0\u120f\0\u4da0\0\u1323\0\u4de5\0\u4e2a\0\u4e6f\0\u0564\0\u4eb4"+
    "\0\u0564\0\u0564\0\u0564\0\u4ef9\0\u4f3e\0\u0564\0\u4f83\0\u4fc8"+
    "\0\u500d\0\u5052\0\u5097\0\u50dc\0\u5121\0\u5166\0\u51ab\0\u51f0"+
    "\0\u5235\0\u527a\0\u52bf\0\u5304\0\u5349\0\u538e\0\u53d3\0\u5418"+
    "\0\u0816\0\u545d\0\u54a2\0\u0816\0\u54e7\0\u552c\0\u5571\0\u55b6"+
    "\0\u55fb\0\u5640\0\u5685\0\u56ca\0\u570f\0\u5754\0\u5799\0\u57de"+
    "\0\u5823\0\u5868\0\u58ad\0\u58f2\0\u5937\0\u597c\0\u59c1\0\u0816"+
    "\0\u5a06\0\u5a4b\0\u5a90\0\u5ad5\0\u5b1a\0\u5b5f\0\u5ba4\0\u5be9"+
    "\0\u5c2e\0\u5c73\0\u5cb8\0\u0816\0\u5cfd\0\u5d42\0\u0816\0\u5d87"+
    "\0\u5dcc\0\u5e11\0\u5e56\0\u5e9b\0\u5ee0\0\u5f25\0\u5f6a\0\u5faf"+
    "\0\u5ff4\0\u6039\0\u607e\0\u60c3\0\u6108\0\u614d\0\u6192\0\u61d7"+
    "\0\u621c\0\u6261\0\u62a6\0\u0564\0\u62eb\0\u6330\0\u6375\0\u63ba"+
    "\0\u63ff\0\u0564\0\u6444\0\u6489\0\u64ce\0\u6513\0\u6558\0\u659d"+
    "\0\u65e2\0\u6627\0\u666c\0\u66b1\0\u66f6\0\u673b\0\u0816\0\u6780"+
    "\0\u67c5\0\u680a\0\u684f\0\u6894\0\u68d9\0\u0816\0\u691e\0\u0816"+
    "\0\u0816\0\u6963\0\u69a8\0\u69ed\0\u6a32\0\u0816\0\u6a77\0\u0816"+
    "\0\u0816\0\u6abc\0\u6b01\0\u6b46\0\u6b8b\0\u6bd0\0\u6c15\0\u6c5a"+
    "\0\u0816\0\u0816\0\u6c9f\0\u6ce4\0\u0816\0\u0816\0\u0816\0\u6d29"+
    "\0\u6d6e\0\u6db3\0\u6df8\0\u6e3d\0\u6e82\0\u0816\0\u0816\0\u6ec7"+
    "\0\u6f0c\0\u0816\0\u6f51\0\u6f96\0\u6fdb\0\u7020\0\u7065\0\u70aa"+
    "\0\u70ef\0\u0564\0\u7134\0\u7179\0\u71be\0\u7203\0\u7248\0\u728d"+
    "\0\u0564\0\u72d2\0\u7317\0\u735c\0\u73a1\0\u73e6\0\u742b\0\u0564"+
    "\0\u120f\0\u1323\0\u0564\0\u7470\0\u74b5\0\u74fa\0\u753f\0\u7584"+
    "\0\u75c9\0\u760e\0\u7653\0\u7698\0\u76dd\0\u7722\0\u7767\0\u77ac"+
    "\0\u77f1\0\u7836\0\u787b\0\u0564\0\u78c0\0\u7905\0\u0816\0\u794a"+
    "\0\u798f\0\u79d4\0\u7a19\0\u7a5e\0\u7aa3\0\u7ae8\0\u0816\0\u7b2d"+
    "\0\u7b72\0\u7bb7\0\u7bfc\0\u7c41\0\u7c86\0\u7ccb\0\u0816\0\u0816"+
    "\0\u7d10\0\u0816\0\u7d55\0\u7d9a\0\u0816\0\u0816\0\u7ddf\0\u7e24"+
    "\0\u7e69\0\u7eae\0\u7ef3\0\u7f38\0\u0564\0\u7f7d\0\u7fc2\0\u8007"+
    "\0\u804c\0\u8091\0\u0564\0\u80d6\0\u811b\0\u8160\0\u81a5\0\u81ea"+
    "\0\u822f\0\u8274\0\u0816\0\u82b9\0\u82fe\0\u8343\0\u8388\0\u83cd"+
    "\0\u8412\0\u8457\0\u0816\0\u849c\0\u84e1\0\u8526\0\u856b\0\u85b0"+
    "\0\u85f5\0\u863a\0\u867f\0\u86c4\0\u8709\0\u874e\0\u8793\0\u0816"+
    "\0\u0816\0\u0816\0\u87d8\0\u0816\0\u881d\0\u8862\0\u88a7\0\u88ec"+
    "\0\u8931\0\u8976\0\u0816\0\u89bb\0\u0564\0\u8a00\0\u8a45\0\u8a8a"+
    "\0\u0564\0\u8acf\0\u0564\0\u8b14\0\u8b59\0\u8b9e\0\u8be3\0\u8c28"+
    "\0\u8c6d\0\u0816\0\u8cb2\0\u8cf7\0\u8d3c\0\u0816\0\u8d81\0\u8dc6"+
    "\0\u8e0b\0\u8e50\0\u8e95\0\u0816\0\u8eda\0\u8f1f\0\u0816\0\u8f64"+
    "\0\u8fa9\0\u8fee\0\u9033\0\u9078\0\u0816\0\u90bd\0\u0816\0\u0816"+
    "\0\u0816\0\u9102\0\u9147\0\u918c\0\u0564\0\u0564\0\u91d1\0\u9216"+
    "\0\u925b\0\u92a0\0\u92e5\0\u0816\0\u932a\0\u936f\0\u0816\0\u93b4"+
    "\0\u93f9\0\u943e\0\u9483\0\u0816\0\u94c8\0\u950d\0\u0816\0\u9552"+
    "\0\u0816\0\u9597\0\u95dc\0\u0816\0\u9621\0\u9666\0\u0816\0\u96ab"+
    "\0\u96f0\0\u9735\0\u977a\0\u97bf\0\u9804\0\u9849\0\u0816\0\u988e"+
    "\0\u0816\0\u0816\0\u98d3\0\u9918\0\u995d\0\u0816\0\u0816\0\u99a2"+
    "\0\u0564\0\u99e7\0\u9a2c\0\u9a71\0\u9ab6\0\u9afb\0\u9b40\0\u9b85"+
    "\0\u9bca\0\u9c0f\0\u9c54\0\u9c99\0\u9cde\0\u9d23\0\u9d68\0\u9dad"+
    "\0\u9df2\0\u9e37\0\u9e7c\0\u9ec1\0\u9f06\0\u9f4b\0\u9f90\0\u0816"+
    "\0\u9fd5\0\ua01a\0\u0564\0\ua05f\0\u0816\0\u0816\0\ua0a4\0\ua0e9"+
    "\0\u0564\0\ua12e\0\u0816\0\ua173\0\ua1b8\0\ua1fd\0\ua242\0\ua287"+
    "\0\ua2cc\0\ua311\0\ua356\0\ua39b\0\ua3e0\0\ua1fd\0\ua425\0\ua46a"+
    "\0\ua4af\0\ua4f4\0\ua539\0\ua57e\0\ua5c3\0\ua608\0\ua64d\0\u0564"+
    "\0\ua692\0\ua6d7\0\ua71c\0\ua761\0\ua7a6\0\ua7eb\0\ua830\0\u0564"+
    "\0\ua875";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[833];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\67\23\1\24\15\23\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\26\3\37\1\25"+
    "\1\40\3\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\37"+
    "\1\67\1\37\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\2\37\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\1\115\1\60\1\116\17\117\1\120\3\117\1\121\1\122"+
    "\1\117\1\123\56\117\17\124\1\125\3\124\1\126\1\124"+
    "\1\127\1\130\56\124\17\131\1\132\1\133\1\131\1\134"+
    "\1\135\2\131\1\136\56\131\2\137\1\140\1\137\1\140"+
    "\2\137\3\140\1\137\3\140\3\137\1\141\7\137\12\140"+
    "\2\137\10\140\4\137\1\140\2\137\2\140\15\137\1\140"+
    "\1\137\2\25\1\142\1\25\1\142\2\25\3\142\1\25"+
    "\3\142\3\25\1\143\7\25\12\142\2\25\10\142\4\25"+
    "\1\142\2\25\2\142\15\25\1\142\1\25\2\144\1\145"+
    "\1\144\1\145\2\144\3\145\2\144\2\145\2\144\1\146"+
    "\1\144\1\147\6\144\12\145\2\144\10\145\4\144\1\145"+
    "\2\144\2\145\15\144\1\145\1\144\2\150\1\151\1\150"+
    "\1\151\2\150\3\151\1\150\3\151\3\150\1\152\7\150"+
    "\12\151\2\150\10\151\4\150\1\151\2\150\2\151\15\150"+
    "\1\151\1\150\2\25\1\153\1\25\1\153\2\25\3\153"+
    "\1\25\3\153\3\25\1\154\7\25\12\153\2\25\10\153"+
    "\4\25\1\153\2\25\2\153\15\25\1\153\1\25\2\155"+
    "\1\156\1\155\1\156\2\155\3\156\1\155\3\156\2\155"+
    "\3\41\6\155\12\156\2\155\10\156\1\157\1\155\1\160"+
    "\1\155\1\156\2\155\2\156\15\155\1\156\1\155\2\161"+
    "\1\162\1\161\1\162\2\161\3\162\1\161\3\162\13\161"+
    "\12\162\2\161\10\162\4\161\1\162\2\161\2\162\15\161"+
    "\1\162\1\161\1\25\1\163\1\37\1\164\1\37\1\165"+
    "\1\166\3\37\1\163\3\37\1\25\4\167\1\42\1\170"+
    "\1\171\1\172\1\46\1\173\12\37\1\167\1\63\10\37"+
    "\1\174\1\175\1\176\1\177\1\37\1\200\1\100\2\37"+
    "\1\201\1\202\1\203\1\204\1\205\1\206\1\207\1\210"+
    "\1\111\1\211\1\113\1\114\1\212\1\37\1\167\70\213"+
    "\1\214\14\213\70\215\1\216\14\215\20\217\1\220\1\217"+
    "\1\221\33\217\1\222\1\223\12\217\1\223\12\217\30\0"+
    "\1\224\54\0\105\225\67\23\1\226\74\23\1\227\7\23"+
    "\1\0\2\23\1\230\10\23\1\231\1\23\106\0\1\26"+
    "\1\232\1\233\1\234\1\0\1\26\3\0\1\26\73\0"+
    "\1\37\1\235\1\0\1\37\1\0\11\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\1\236\1\0\1\237\2\0\1\236\3\0\1\236"+
    "\15\0\1\240\55\0\2\37\1\0\1\37\1\0\1\37"+
    "\1\241\7\37\12\0\4\37\1\242\1\37\1\243\3\37"+
    "\2\0\1\37\1\244\1\245\5\37\4\0\1\246\2\0"+
    "\2\37\15\0\1\37\6\0\1\247\22\0\1\250\55\0"+
    "\1\26\1\232\1\233\1\234\1\0\1\26\1\251\1\0"+
    "\1\252\1\26\73\0\2\37\1\0\1\37\1\0\11\37"+
    "\12\0\7\37\1\253\2\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\3\37\1\254\5\37\12\0\4\37\1\255\3\37"+
    "\1\256\1\257\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\256\2\0\2\37\1\0\1\37\1\0\11\37"+
    "\5\0\1\43\4\0\11\37\1\260\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\1\0\1\261\13\0\1\37\1\262"+
    "\1\0\2\37\1\0\1\37\1\0\11\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\21\0\3\41\64\0\1\263\1\0\1\263\2\0\3\263"+
    "\1\0\3\263\13\0\12\263\2\0\10\263\4\0\1\263"+
    "\2\0\2\263\15\0\1\263\1\0\17\264\1\265\3\264"+
    "\1\266\1\267\1\264\1\270\56\264\30\0\1\271\25\0"+
    "\1\272\27\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\3\37\1\273\1\274\3\37\1\275\1\37\2\0\2\37"+
    "\1\276\5\37\4\0\1\37\2\0\2\37\15\0\1\275"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\11\37"+
    "\1\277\2\0\3\37\1\300\4\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\301\1\0"+
    "\11\37\12\0\1\302\6\37\1\303\2\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\1\304\3\37\1\305"+
    "\1\306\1\37\1\307\2\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\310"+
    "\1\0\2\37\1\311\6\37\12\0\12\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\4\37\1\312\3\37"+
    "\1\313\1\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\313\2\0\2\37\1\0\1\37\1\0\2\37"+
    "\1\314\6\37\12\0\7\37\1\315\2\37\2\0\1\37"+
    "\1\316\6\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\11\37"+
    "\1\317\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\1\37\1\320\10\37\2\0\4\37\1\321\3\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\322\1\0\11\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\45\0\1\323\41\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\1\324\11\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\1\325"+
    "\11\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\2\37\1\326"+
    "\6\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\12\37\2\0\3\37\1\327\4\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\7\37\1\330\2\37\2\0"+
    "\1\37\1\331\6\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\5\37\1\332\3\37\1\333\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\31\0\1\334\24\0\1\335"+
    "\1\336\56\0\1\337\25\0\1\340\103\0\1\341\1\342"+
    "\1\343\105\0\1\344\25\0\2\37\1\0\1\37\1\0"+
    "\2\37\1\345\6\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\11\0\1\346\1\347"+
    "\7\0\1\350\7\0\1\351\1\0\1\352\1\353\1\0"+
    "\1\354\1\0\1\355\1\356\1\357\40\0\1\356\31\0"+
    "\1\360\104\0\1\361\25\0\1\362\10\0\1\363\1\0"+
    "\1\364\43\0\1\365\37\0\1\366\44\0\1\367\37\0"+
    "\1\370\1\371\43\0\1\372\25\0\1\373\31\0\1\374"+
    "\15\0\1\375\1\0\1\376\4\0\1\377\42\0\1\u0100"+
    "\41\0\1\u0101\43\0\1\u0102\40\0\1\u0103\54\0\17\262"+
    "\1\u0104\64\262\1\267\17\117\1\u0105\3\117\1\u0106\1\0"+
    "\1\117\1\u0107\165\117\1\u0108\1\117\1\u0108\2\117\3\u0108"+
    "\1\117\1\u0109\2\u0108\1\117\1\u0105\3\117\1\u010a\1\u010b"+
    "\1\117\1\u010c\2\117\12\u0108\2\117\10\u0108\4\117\1\u0108"+
    "\2\117\2\u0108\15\117\1\u0108\20\117\1\u0105\3\117\1\u010d"+
    "\1\u010b\1\117\1\u010e\56\117\17\124\1\u010f\3\124\1\u0110"+
    "\1\124\1\0\1\u0111\165\124\1\u0108\1\124\1\u0108\2\124"+
    "\3\u0108\1\124\1\u0112\2\u0108\1\124\1\u010f\3\124\1\u0113"+
    "\1\124\1\u0114\1\u010c\2\124\12\u0108\2\124\10\u0108\4\124"+
    "\1\u0108\2\124\2\u0108\15\124\1\u0108\20\124\1\u010f\3\124"+
    "\1\u010d\1\124\1\u0114\1\u0115\56\124\17\131\1\u0116\1\0"+
    "\1\131\1\0\1\u0117\2\131\1\u0118\165\131\1\u0119\1\131"+
    "\1\u0119\2\131\3\u0119\1\131\3\u0119\1\131\1\u0116\1\0"+
    "\1\133\1\0\1\u0117\2\131\1\u0118\2\131\12\u0119\2\131"+
    "\10\u0119\4\131\1\u0119\2\131\2\u0119\15\131\1\u0119\3\131"+
    "\1\u0119\1\131\1\u0119\2\131\3\u0119\1\131\3\u0119\1\131"+
    "\1\u0116\1\u011a\1\133\1\0\1\u0117\2\131\1\u0118\2\131"+
    "\12\u0119\2\131\10\u0119\4\131\1\u0119\2\131\2\u0119\15\131"+
    "\1\u0119\1\131\2\0\1\u0108\1\0\1\u0108\2\0\3\u0108"+
    "\1\0\3\u0108\10\0\1\u010c\2\0\12\u0108\2\0\10\u0108"+
    "\4\0\1\u0108\2\0\2\u0108\15\0\1\u0108\24\0\1\u010d"+
    "\61\0\20\u011b\1\u011c\1\u011b\1\u011c\62\u011b\2\0\1\u011b"+
    "\1\0\1\u011b\2\0\3\u011b\1\0\3\u011b\3\0\1\u011d"+
    "\7\0\12\u011b\2\0\10\u011b\4\0\1\u011b\2\0\2\u011b"+
    "\15\0\1\u011b\2\0\2\142\1\0\1\142\1\0\11\142"+
    "\10\0\1\u011e\1\0\12\142\2\0\10\142\4\0\1\142"+
    "\2\0\2\142\15\0\1\142\3\0\1\142\1\0\1\142"+
    "\2\0\3\142\1\0\3\142\3\0\1\u011f\7\0\12\142"+
    "\2\0\10\142\4\0\1\142\2\0\2\142\15\0\1\142"+
    "\1\0\20\144\1\0\1\144\1\0\63\144\2\u0120\1\144"+
    "\1\u0120\1\144\5\u0120\1\144\2\u0120\2\144\1\0\1\144"+
    "\1\0\4\144\1\u0121\1\144\12\u0120\2\144\10\u0120\4\144"+
    "\1\u0120\2\144\2\u0120\15\144\1\u0120\3\144\1\u0122\1\144"+
    "\1\u0122\2\144\3\u0122\1\144\3\u0122\2\144\1\u0123\1\u0124"+
    "\1\u0123\6\144\12\u0122\2\144\10\u0122\4\144\1\u0122\2\144"+
    "\2\u0122\15\144\1\u0122\3\144\1\u0122\1\144\1\u0122\2\144"+
    "\3\u0122\1\144\3\u0122\2\144\1\146\1\u0124\1\u0123\6\144"+
    "\12\u0122\2\144\10\u0122\4\144\1\u0122\2\144\2\u0122\15\144"+
    "\1\u0122\1\144\20\u0125\1\u0126\1\u0125\1\u0126\62\u0125\2\0"+
    "\1\u0125\1\0\1\u0125\2\0\3\u0125\1\0\3\u0125\3\0"+
    "\1\u0127\7\0\12\u0125\2\0\10\u0125\4\0\1\u0125\2\0"+
    "\2\u0125\15\0\1\u0125\2\0\2\153\1\0\1\153\1\0"+
    "\11\153\10\0\1\u0128\1\0\12\153\2\0\10\153\4\0"+
    "\1\153\2\0\2\153\15\0\1\153\3\0\1\153\1\0"+
    "\1\153\2\0\3\153\1\0\3\153\3\0\1\u0129\7\0"+
    "\12\153\2\0\10\153\4\0\1\153\2\0\2\153\15\0"+
    "\1\153\2\0\2\156\1\0\1\156\1\0\11\156\12\0"+
    "\12\156\2\0\10\156\4\0\1\156\2\0\2\156\15\0"+
    "\1\156\57\0\1\u012a\103\0\1\u012b\30\0\2\162\1\0"+
    "\1\162\1\0\11\162\12\0\12\162\2\0\10\162\4\0"+
    "\1\162\2\0\2\162\15\0\1\162\2\0\1\163\1\u012c"+
    "\3\0\1\163\3\0\1\163\73\0\1\u012d\1\u012c\3\0"+
    "\1\u012d\1\u012e\1\0\1\u012f\1\u012d\72\0\70\213\1\0"+
    "\14\213\71\0\1\u0130\13\0\70\u0131\1\u0132\104\u0131\1\u0132"+
    "\1\u0133\13\u0131\20\217\1\220\1\217\1\221\33\217\2\220"+
    "\12\217\1\220\12\217\20\0\1\220\142\0\1\u0134\26\0"+
    "\57\23\1\0\7\23\1\0\2\23\1\0\10\23\1\0"+
    "\1\23\30\0\1\u0135\23\0\1\u0136\60\0\1\u0135\113\0"+
    "\1\u0137\46\0\1\26\4\0\1\26\3\0\1\26\73\0"+
    "\1\236\2\0\1\234\1\0\1\236\3\0\1\236\73\0"+
    "\1\u0138\3\0\1\u0139\1\u0138\3\0\1\u0138\42\0\1\u0139"+
    "\30\0\2\37\1\0\1\37\1\0\11\37\12\0\1\37"+
    "\1\u013a\1\u013b\1\u013c\1\u013d\1\37\1\u013e\3\37\2\0"+
    "\1\37\1\u013f\1\u0140\1\u0141\4\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\1\236\1\u0142\1\0\1\234"+
    "\1\0\1\236\3\0\1\236\75\0\1\u0143\102\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\1\u0144\1\u0145\10\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\2\37"+
    "\1\u0146\2\37\1\u0147\4\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\12\37\2\0\3\37\1\u0148\4\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\10\37\1\u0149\1\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\u0149"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\12\37"+
    "\2\0\7\37\1\u014a\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\2\37\1\u014b"+
    "\6\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\1\u014c\2\0\1\u014c\1\0"+
    "\1\u014c\1\0\3\u014c\20\0\2\u014c\2\0\1\u014c\53\0"+
    "\1\u014d\3\0\1\u014d\73\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\11\37\1\u014e\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\10\37\1\u014f\1\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\u014f\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\2\37\1\u0150\7\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\11\37"+
    "\1\u0151\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\u0152\1\0\11\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\70\0\1\u0153\16\0\2\263\1\0\1\263\1\0"+
    "\11\263\12\0\12\263\2\0\10\263\4\0\1\263\2\0"+
    "\2\263\15\0\1\263\1\0\107\264\1\0\1\264\1\0"+
    "\2\264\3\0\2\264\2\0\1\264\1\265\3\264\1\266"+
    "\1\267\1\264\1\0\2\264\12\0\2\264\10\0\4\264"+
    "\1\0\2\264\2\0\15\264\1\0\20\264\1\265\3\264"+
    "\1\0\1\267\1\264\1\270\56\264\30\0\1\u0154\55\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\1\37\1\u0155"+
    "\4\37\1\u0156\1\37\1\u0157\1\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\u0157\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\10\37\1\u0158\1\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\u0158\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\12\37\2\0"+
    "\7\37\1\u0159\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\2\37\1\u015a\6\37"+
    "\12\0\12\37\2\0\1\u015b\7\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\11\37\1\u015c\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\3\37\1\u015d\2\37\1\u015e\3\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\u015f\1\0\11\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\4\37"+
    "\1\u0160\5\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\11\37"+
    "\12\0\4\37\1\u0161\5\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\11\37\1\u0162\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\12\37\2\0\4\37\1\u0163"+
    "\3\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\12\37\2\0"+
    "\2\37\1\u0164\5\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\10\37\1\u0165\1\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\u0165\2\0\2\37\1\0\1\u0166\1\0"+
    "\11\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\1\37\1\u0167\6\37\1\u0168\1\37\2\0"+
    "\1\37\1\u0169\6\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\u0168\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\4\37\1\u016a\5\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\2\37\1\u016b\6\37\12\0\7\37\1\u016c\2\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\2\37\1\u016d\6\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\1\u016e\11\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\2\37"+
    "\1\u016f\6\37\12\0\1\37\1\u0170\10\37\2\0\10\37"+
    "\4\0\1\37\2\0\1\37\1\u0171\15\0\1\37\2\0"+
    "\2\37\1\0\1\u0172\1\0\11\37\12\0\12\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\10\37\1\u0173"+
    "\1\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\u0173\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\1\37\1\u0174\10\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\1\u0175\11\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\1\37\1\u0176\10\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\7\37\1\u0177\2\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\3\37\1\u0178\5\37"+
    "\12\0\12\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\11\37"+
    "\12\0\1\u0179\6\37\1\u017a\2\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\31\0\1\u017b\132\0"+
    "\1\u017c\46\0\1\u017d\1\0\1\u017e\112\0\1\u017f\55\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\11\37\1\u0180"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\43\0\1\u0181\73\0\1\u0182\6\0\1\u0183\101\0\1\u0184"+
    "\107\0\1\u0185\112\0\1\u0186\73\0\1\u0187\60\0\1\u0188"+
    "\125\0\1\u0189\56\0\1\u018a\130\0\1\u018b\132\0\1\u018c"+
    "\56\0\1\u018d\36\0\1\u018e\56\0\1\u018f\41\0\1\u018f"+
    "\31\0\1\u0190\74\0\3\u0191\45\0\1\u0192\10\0\1\u0193"+
    "\23\0\1\u0194\1\0\1\u0195\65\0\1\u0196\104\0\1\374"+
    "\15\0\1\375\1\0\1\376\61\0\105\262\2\117\1\0"+
    "\1\117\1\0\2\117\3\0\2\117\2\0\1\117\1\u0105"+
    "\3\117\1\u010a\1\u010b\1\117\1\0\2\117\12\0\2\117"+
    "\10\0\4\117\1\0\2\117\2\0\15\117\1\0\20\117"+
    "\1\u0105\3\117\1\0\1\u010b\1\117\1\u010e\56\117\1\0"+
    "\2\u0108\1\0\1\u0108\1\0\11\u0108\12\0\12\u0108\1\0"+
    "\1\u0197\10\u0108\1\u0198\3\0\1\u0108\2\0\2\u0108\15\0"+
    "\1\u0108\1\0\1\117\2\u0109\1\117\1\u0109\1\117\11\u0109"+
    "\1\u0105\3\117\1\u0106\1\0\1\117\1\u0107\2\117\12\u0109"+
    "\1\117\1\u0199\10\u0109\1\u019a\3\117\1\u0109\2\117\2\u0109"+
    "\15\117\1\u0109\1\117\2\124\1\0\1\124\1\0\2\124"+
    "\3\0\2\124\2\0\1\124\1\u010f\3\124\1\u0113\1\124"+
    "\1\u0114\1\0\2\124\12\0\2\124\10\0\4\124\1\0"+
    "\2\124\2\0\15\124\1\0\20\124\1\u010f\3\124\1\0"+
    "\1\124\1\u0114\1\u0115\57\124\2\u0112\1\124\1\u0112\1\124"+
    "\11\u0112\1\u010f\3\124\1\u0110\1\124\1\0\1\u0111\2\124"+
    "\12\u0112\1\124\1\u019b\10\u0112\1\u019c\3\124\1\u0112\2\124"+
    "\2\u0112\15\124\1\u0112\1\124\20\131\1\0\1\131\1\0"+
    "\64\131\1\u019d\1\131\1\u019d\2\131\3\u019d\2\131\2\u019d"+
    "\1\131\1\u0116\1\0\1\131\1\0\1\u019e\2\131\1\u019f"+
    "\2\131\12\u019d\2\131\10\u019d\4\131\1\u019d\2\131\2\u019d"+
    "\15\131\1\u019d\20\131\1\u0116\1\0\1\131\1\0\1\u019f"+
    "\2\131\1\u01a0\56\131\20\u0119\1\u01a1\1\u0119\1\u01a1\62\u0119"+
    "\2\0\1\u0119\1\0\1\u0119\2\0\3\u0119\1\0\3\u0119"+
    "\3\0\1\u011a\7\0\12\u0119\2\0\10\u0119\4\0\1\u0119"+
    "\2\0\2\u0119\15\0\1\u0119\1\0\20\u0122\1\u01a2\1\u0122"+
    "\1\u01a2\62\u0122\2\144\1\u0120\1\144\1\u0120\2\144\3\u0120"+
    "\2\144\2\u0120\2\144\1\u0123\1\144\1\u0123\6\144\12\u0120"+
    "\2\144\10\u0120\4\144\1\u0120\2\144\2\u0120\15\144\1\u0120"+
    "\3\144\1\u0122\1\144\1\u0122\2\144\3\u0122\1\144\3\u0122"+
    "\2\144\1\0\1\u0124\1\0\6\144\12\u0122\2\144\10\u0122"+
    "\4\144\1\u0122\2\144\2\u0122\15\144\1\u0122\1\144\56\0"+
    "\1\u01a3\27\0\1\u012d\4\0\1\u012d\3\0\1\u012d\73\0"+
    "\1\u012d\1\u012c\3\0\1\u012d\3\0\1\u012d\73\0\1\u01a4"+
    "\2\0\1\u01a4\1\0\1\u01a4\1\0\3\u01a4\20\0\2\u01a4"+
    "\2\0\1\u01a4\53\0\1\u01a5\3\0\1\u01a5\72\0\70\u0131"+
    "\1\u0132\1\u01a6\13\u0131\50\0\1\u01a7\76\0\1\u01a8\43\0"+
    "\1\u0138\1\u0139\3\0\1\u0138\3\0\1\u0138\73\0\1\u0138"+
    "\4\0\1\u0138\3\0\1\u0138\73\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\11\37\1\u01a9\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\1\u01aa\11\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\1\u01ab\4\37\1\u01ac"+
    "\4\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\2\37\1\u01ad"+
    "\6\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\12\37\2\0\1\37\1\u01ae\6\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\1\u01af\11\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\u01b0\1\0\11\37\12\0\12\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\2\37\1\u01b1\6\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\1\236\4\0\1\236\3\0\1\236\73\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\1\37\1\u015f\10\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\u01b2\1\0\11\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\1\u01b3"+
    "\1\37\1\u01b4\1\u01b5\4\37\1\u01b6\1\37\2\0\4\37"+
    "\1\u01b7\3\37\4\0\1\37\2\0\2\37\15\0\1\u01b6"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\12\37"+
    "\2\0\2\37\1\u01b8\5\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\11\37"+
    "\12\0\7\37\1\u01b9\2\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\u01ba"+
    "\1\0\11\37\12\0\12\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\1\37\1\u01bb\10\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\12\37\2\0\1\37"+
    "\1\u01bc\6\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\1\u014c\1\251\1\0\1\u014c\1\0\1\u014c\1\0"+
    "\3\u014c\20\0\2\u014c\2\0\1\u014c\47\0\1\252\3\0"+
    "\1\u014d\3\0\1\u014d\73\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\1\37\1\u01bd\10\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\2\37\1\u01be\6\37\12\0\12\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\2\37\1\u01bf\6\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\70\0\1\u018e\16\0\2\37\1\0\1\u01c0\1\0"+
    "\11\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\12\37\2\0\1\37\1\u01c1\6\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\1\37\1\u01c2\10\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\u01c3\1\0\11\37\12\0\12\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\12\37\2\0"+
    "\1\37\1\u01c4\6\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\1\u01c5\11\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\11\37"+
    "\12\0\7\37\1\u01c6\2\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\2\37\1\u01c7\6\37\12\0\1\u01c8\11\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\12\37\2\0"+
    "\1\37\1\u01c9\6\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\2\37\1\u01ca"+
    "\6\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\6\37\1\u01cb\3\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\u01cc\1\0\11\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\u01cd\1\0\11\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\u01ce\1\0\11\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\6\37\1\u01cf\3\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\u01d0\1\0\11\37\12\0\12\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\12\37\2\0"+
    "\1\37\1\u01d1\6\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\1\37\1\u01d2\6\37\1\u01d3\1\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\u01d3\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\10\37\1\u01d4\1\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\u01d4\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\4\37\1\u01d5"+
    "\5\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\1\37\1\u01d6\10\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\1\37\1\u01d7\10\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\2\37\1\u01d8\7\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\5\37\1\u01d9"+
    "\4\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\5\37\1\u01da\4\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\12\37\2\0\1\37\1\u01db\6\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\1\37\1\u01dc\10\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\6\37\1\u01dd"+
    "\3\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\12\37\2\0\1\37\1\u01de\6\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\7\37\1\u01df\2\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\3\37\1\u01e0\5\37\12\0\12\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\12\37\2\0"+
    "\1\37\1\u01e1\6\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\4\37\1\u01e2\5\37\2\0\10\37\4\0\1\u01e3\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\1\37\1\u01e4\10\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\21\0\1\u017d\126\0"+
    "\1\u01e5\77\0\1\u01e6\107\0\1\u01e7\76\0\1\u01e8\110\0"+
    "\1\u01e9\106\0\1\u01ea\105\0\1\u01eb\41\0\1\u01eb\65\0"+
    "\1\u01ec\62\0\1\u01ed\52\0\1\u01ee\76\0\1\u01ef\1\0"+
    "\1\u01ef\2\0\3\u01ef\1\0\3\u01ef\3\0\1\u018e\2\0"+
    "\1\u01f0\4\0\12\u01ef\2\0\10\u01ef\4\0\1\u01ef\2\0"+
    "\2\u01ef\15\0\1\u01ef\1\u01f1\37\0\1\u01f2\65\0\3\u0191"+
    "\56\0\1\u0193\23\0\3\u01f3\46\0\1\u01f4\7\0\1\u01f5"+
    "\64\0\1\u01f6\43\0\1\u0194\67\0\1\376\157\0\1\u01f7"+
    "\26\0\17\117\1\u0105\3\117\1\u0106\1\0\1\117\1\u0107"+
    "\27\117\1\u01f8\26\117\17\124\1\u010f\3\124\1\u0110\1\124"+
    "\1\0\1\u0111\27\124\1\u01f9\26\124\1\0\2\u019d\1\0"+
    "\1\u019d\1\0\11\u019d\12\0\12\u019d\1\0\1\u01fa\10\u019d"+
    "\4\0\1\u019d\2\0\2\u019d\15\0\1\u019d\1\0\2\131"+
    "\1\0\1\131\1\0\2\131\3\0\2\131\2\0\1\131"+
    "\1\u0116\1\0\1\131\1\0\1\u019e\2\131\1\0\2\131"+
    "\12\0\2\131\10\0\4\131\1\0\2\131\2\0\15\131"+
    "\1\0\20\131\1\u0116\1\0\1\131\2\0\2\131\1\u01a0"+
    "\56\131\1\0\1\u01a4\1\u012e\1\0\1\u01a4\1\0\1\u01a4"+
    "\1\0\3\u01a4\20\0\2\u01a4\2\0\1\u01a4\47\0\1\u012f"+
    "\3\0\1\u01a5\3\0\1\u01a5\146\0\1\u01fb\61\0\1\u01fc"+
    "\54\0\2\37\1\0\1\37\1\0\2\37\1\u01fd\6\37"+
    "\12\0\12\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\11\37"+
    "\12\0\11\37\1\u01fe\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\12\37\2\0\1\37\1\u01ff\6\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\4\37\1\u0200\5\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\12\37\2\0"+
    "\2\37\1\u0201\5\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\2\37\1\u0202"+
    "\6\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\4\37\1\u0203\5\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\1\37\1\u0204\10\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\12\37\2\0"+
    "\1\37\1\u0205\6\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\4\37\1\u0206\5\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\3\37\1\u0207\6\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\u0208\1\0\11\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\7\37\1\u0209\2\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\12\37\2\0"+
    "\4\37\1\u020a\3\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\12\37\2\0\3\37\1\u020b\4\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\1\0\3\u020c\6\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\1\u020d\11\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\12\37\2\0\1\u020e"+
    "\7\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\11\37\1\u020f"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\12\37"+
    "\2\0\1\u0210\7\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\12\37\2\0\5\37\1\u0211\2\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\11\37\1\u0212\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\5\37\1\u0213\4\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\u0214\1\0\2\37\1\u0215\6\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\1\37"+
    "\1\u0216\10\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\u0217\1\0\11\37"+
    "\12\0\12\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\11\37"+
    "\12\0\1\37\1\u0218\10\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\12\37\2\0\4\37\1\u0219\3\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\5\37\1\u021a\4\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\4\37"+
    "\1\u021b\5\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\2\37"+
    "\1\u021c\6\37\12\0\12\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\12\37\2\0\1\37\1\u021d\6\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\1\37\1\u021e\10\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\2\37\1\u021f\6\37"+
    "\12\0\12\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\11\37"+
    "\12\0\10\37\1\u0220\1\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\u0220\2\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\1\37\1\u0221\10\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\12\37\2\0\3\37"+
    "\1\u0222\4\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\2\37\1\u0223\6\37"+
    "\12\0\12\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\11\37"+
    "\12\0\1\u0224\11\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\1\37\1\u0225\10\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\10\37\1\u0226\1\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\u0226\2\0"+
    "\2\37\1\0\1\u0227\1\0\11\37\12\0\12\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\1\u0228\11\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\6\37"+
    "\1\u0229\3\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\11\37"+
    "\12\0\7\37\1\u022a\2\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\11\37\1\u022b\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\1\u022c\11\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\2\37\1\u022d\7\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\12\37"+
    "\2\0\3\37\1\u022e\4\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\u022f\1\0\11\37"+
    "\12\0\12\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\2\37"+
    "\1\u0230\6\37\12\0\12\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\1\u0231\11\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\1\37\1\u0232\10\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\2\37\1\u0233\6\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\u0234\1\0\11\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\11\0\1\u0235\104\0\1\u0236\142\0\1\u0237\42\0"+
    "\1\u0238\14\0\1\u0239\41\0\1\u023a\32\0\1\u023b\103\0"+
    "\1\u023c\100\0\1\u023d\104\0\1\u023e\131\0\1\u023f\121\0"+
    "\1\u0240\37\0\2\u01ef\1\0\1\u01ef\1\0\11\u01ef\1\0"+
    "\1\u0241\1\0\1\u0242\6\0\12\u01ef\2\0\10\u01ef\4\0"+
    "\1\u01ef\2\0\2\u01ef\15\0\1\u01ef\3\0\1\u0243\1\0"+
    "\1\u0243\2\0\3\u0243\1\0\3\u0243\13\0\12\u0243\2\0"+
    "\10\u0243\4\0\1\u0243\2\0\2\u0243\15\0\1\u0243\3\0"+
    "\1\u0244\1\0\1\u0244\2\0\3\u0244\1\0\3\u0244\13\0"+
    "\12\u0244\2\0\10\u0244\4\0\1\u0244\2\0\2\u0244\15\0"+
    "\1\u0244\43\0\1\u0245\62\0\3\u01f3\56\0\1\u01f5\64\0"+
    "\1\u0246\33\0\1\u0247\76\0\1\u0248\1\0\1\u0248\2\0"+
    "\3\u0248\2\0\2\u0248\13\0\12\u0248\2\0\10\u0248\4\0"+
    "\1\u0248\2\0\2\u0248\15\0\1\u0248\1\0\2\117\1\u0249"+
    "\1\117\1\u0249\2\117\3\u0249\2\117\2\u0249\1\117\1\u0105"+
    "\3\117\1\u0106\1\0\1\117\1\u0107\2\117\12\u0249\2\117"+
    "\10\u0249\4\117\1\u0249\2\117\2\u0249\15\117\1\u0249\1\117"+
    "\2\124\1\u024a\1\124\1\u024a\2\124\3\u024a\2\124\2\u024a"+
    "\1\124\1\u010f\3\124\1\u0110\1\124\1\0\1\u0111\2\124"+
    "\12\u024a\2\124\10\u024a\4\124\1\u024a\2\124\2\u024a\15\124"+
    "\1\u024a\1\124\20\0\2\u024b\1\u024c\136\0\1\u024d\31\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\1\u024e\11\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\1\37\1\u024f\1\0\1\37\1\0\11\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\u0250\1\0\11\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\6\37\1\u0251\3\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\u0252\1\0"+
    "\11\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\10\37\1\u0253\1\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\u0253\2\0\2\37\1\0"+
    "\1\u0254\1\0\11\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\12\37\2\0\3\37\1\u0255"+
    "\4\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\1\37\1\u0256"+
    "\10\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\2\37\1\u0257\7\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\6\37\1\u0258\3\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\11\37\1\u0259\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\1\u025a\11\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\1\u025b\11\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\3\0\1\u025c\1\0\1\u025d\2\0\3\u025c\3\0\1\u025c"+
    "\2\0\3\u020c\6\0\1\u025e\11\u025c\2\0\10\u025c\4\0"+
    "\1\u025c\2\0\2\u025c\15\0\1\u025c\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\3\37\1\u025f\6\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\2\37\1\u0260\6\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\3\37\1\u0261\6\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\2\37\1\u0262\7\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\2\37\1\u0263\6\37\12\0\12\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\4\37\1\u0264"+
    "\5\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\12\37\2\0\2\37\1\u0265\5\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\12\37\2\0\1\37\1\u0266\6\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\u0267\1\0\11\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\11\37\1\u0268\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\12\37\2\0\1\37"+
    "\1\u0269\6\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\1\u026a"+
    "\11\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\6\37\1\u026b\3\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\12\37\2\0\7\37\1\u026c\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\3\37\1\u026d\5\37\12\0\12\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\4\37\1\u026e\5\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\6\37"+
    "\1\u026f\3\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\11\37"+
    "\12\0\12\37\2\0\3\37\1\u0270\4\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\4\37\1\u0271\5\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\4\37\1\u0272\5\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\11\37"+
    "\1\u0273\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\1\0"+
    "\3\u0274\6\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\12\37\2\0\1\37\1\u0275\6\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\6\37\1\u0276\3\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\1\37\1\u0277"+
    "\10\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\6\37\1\u0278\3\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\46\0\1\u0279\101\0\1\u027a\46\0"+
    "\1\u027b\14\0\1\u027c\41\0\1\u027d\74\0\1\u027e\52\0"+
    "\1\u0239\41\0\1\u023a\67\0\1\u027f\70\0\1\u0240\104\0"+
    "\1\u0280\111\0\1\u0281\102\0\1\u0282\70\0\1\u0240\41\0"+
    "\1\u0283\41\0\1\u0241\65\0\2\u0243\1\0\1\u0243\1\0"+
    "\11\u0243\5\0\1\u0284\4\0\12\u0243\2\0\10\u0243\4\0"+
    "\1\u0243\2\0\2\u0243\15\0\1\u0243\2\0\2\u0244\1\0"+
    "\1\u0244\1\0\11\u0244\12\0\12\u0244\2\0\10\u0244\4\0"+
    "\1\u0244\2\0\2\u0244\15\0\1\u0244\1\u0285\31\0\1\u0286"+
    "\63\0\1\u0287\136\0\1\u0288\62\0\1\u024b\116\0\1\u0289"+
    "\53\0\2\37\1\0\1\37\1\0\11\37\12\0\1\37"+
    "\1\u028a\10\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\1\37\1\u028b\1\0\1\37\1\0"+
    "\11\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\1\37\1\u028c\1\0\1\37"+
    "\1\0\11\37\12\0\12\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\1\37\1\u028d\10\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\10\37\1\u028e\1\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\u028e"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\10\37"+
    "\1\u028f\1\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\u028f\2\0\1\37\1\u0290\1\0\1\37\1\0"+
    "\11\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\7\37\1\u0291\2\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\1\37\1\u0292"+
    "\1\0\1\37\1\0\11\37\12\0\12\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\10\37\1\u0293\1\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\u0293"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\12\37"+
    "\2\0\1\37\1\u0294\6\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\u0295\1\0\11\37"+
    "\12\0\12\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\11\37"+
    "\12\0\1\37\1\u0296\10\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\12\37\2\0\1\37\1\u0297\6\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\10\0\1\u0298"+
    "\144\0\1\u0299\36\0\2\37\1\0\1\37\1\0\11\37"+
    "\12\0\6\37\1\u029a\3\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\2\37\1\u029b\6\37\12\0\12\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\u029c\1\0\11\37\12\0\12\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\2\37\1\u029d\7\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\6\37"+
    "\1\u029e\3\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\u029f\1\0\11\37"+
    "\12\0\12\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\11\37"+
    "\12\0\1\37\1\u02a0\10\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\u02a1"+
    "\1\0\11\37\12\0\12\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\12\37\2\0\1\u02a2\7\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\7\37\1\u02a3\2\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\12\37\2\0"+
    "\3\37\1\u02a4\4\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\2\37\1\u02a5"+
    "\6\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\12\37\2\0\1\37\1\u02a6\6\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\5\37\1\u02a7\4\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\12\37\2\0"+
    "\1\37\1\u02a8\6\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\u02a9\1\0\11\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\21\0\3\u0274\11\0\1\u02aa\51\0\2\37\1\0"+
    "\1\u02ab\1\0\11\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\1\37\1\u02ac\10\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\22\0"+
    "\1\u0279\41\0\1\u02ad\66\0\1\u02ae\47\0\1\u02af\115\0"+
    "\1\u027c\41\0\1\u027d\25\0\1\u02b0\104\0\1\u0240\121\0"+
    "\1\u0280\41\0\1\u02b1\53\0\1\u02b2\125\0\1\u02ae\51\0"+
    "\1\u0241\1\0\1\u0242\102\0\1\u02b3\1\0\1\u02b4\136\0"+
    "\1\u02b5\72\0\1\u02b6\62\0\3\u02b7\102\0\3\u02b8\63\0"+
    "\1\37\1\u02b9\1\0\1\37\1\0\11\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\1\37\1\u02ba\1\0\1\37\1\0\11\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\1\u02bb\11\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\11\37"+
    "\12\0\12\37\2\0\7\37\1\u02bc\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\1\37\1\u02bd\1\0\1\37"+
    "\1\0\11\37\12\0\12\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\1\37\1\u02be\1\0"+
    "\1\37\1\0\11\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\2\37\1\u02bf\7\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\6\37\1\u02c0"+
    "\3\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\2\37\1\u02c1"+
    "\6\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\2\37\1\u02c2\6\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\6\37\1\u02c3\3\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\u02c4\1\0\11\37\12\0\12\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\33\0"+
    "\1\u02c5\126\0\1\u02c6\31\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\1\37\1\u02c7\10\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\6\37\1\u02c8\3\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\1\37\1\u02c9\1\0\1\37\1\0\11\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\7\37"+
    "\1\u02ca\2\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\u02cb\1\0\11\37"+
    "\12\0\12\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\11\37"+
    "\12\0\4\37\1\u02cc\5\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\4\37\1\u02cd\5\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\6\37\1\u02ce\3\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\u02cf\1\0\11\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\u02d0\1\0\11\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\12\37"+
    "\2\0\1\u02d1\7\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\1\37\1\u02d2\1\0\1\37\1\0\11\37"+
    "\12\0\12\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\43\0\1\u02d3\43\0\2\37\1\0\1\u02d4"+
    "\1\0\11\37\12\0\12\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\22\0\1\u02ae\41\0\1\u02d5"+
    "\56\0\1\u027c\111\0\1\u0239\63\0\1\u02b2\41\0\1\u02d6"+
    "\41\0\1\u02b3\116\0\1\u02d7\72\0\3\u02d8\64\0\1\u02d9"+
    "\1\0\1\u02d9\2\0\3\u02d9\1\0\3\u02d9\2\0\3\u02b7"+
    "\1\u02da\5\0\12\u02d9\2\0\10\u02d9\4\0\1\u02d9\2\0"+
    "\2\u02d9\15\0\1\u02d9\21\0\3\u02b8\23\0\1\u02db\37\0"+
    "\1\37\1\u02dc\1\0\1\37\1\0\11\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\7\37"+
    "\1\u02dd\2\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\2\37"+
    "\1\u02de\6\37\12\0\12\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\1\37\1\u02df\1\0"+
    "\1\37\1\0\11\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\1\37\1\u02e0"+
    "\1\0\1\37\1\0\11\37\12\0\12\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\7\37\1\u02e1\2\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\11\37"+
    "\1\u02e2\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\6\37\1\u02e3\3\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\12\37\2\0\3\37\1\u02e4\4\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\5\0\1\u02e5\146\0"+
    "\1\u02e6\37\0\2\37\1\0\1\u02e7\1\0\11\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\7\37\1\u02e8\2\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\3\37\1\u02e9\6\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\7\37\1\u02ea\2\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\1\37\1\u02eb"+
    "\10\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\u02ec\1\0\11\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\7\37\1\u02ed\2\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\41\0\1\u02ee\45\0\2\37\1\0"+
    "\1\37\1\0\11\37\12\0\2\37\1\u02ef\7\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\21\0"+
    "\3\u02d7\33\0\1\342\30\0\1\u02f0\1\0\1\u02f0\2\0"+
    "\3\u02f0\1\0\3\u02f0\1\0\1\u02f1\3\u02d8\6\0\12\u02f0"+
    "\2\0\10\u02f0\4\0\1\u02f0\2\0\2\u02f0\15\0\1\u02f0"+
    "\2\0\2\u02d9\1\0\1\u02d9\1\0\11\u02d9\1\0\3\u02f2"+
    "\6\0\12\u02d9\1\0\1\u02f3\10\u02d9\4\0\1\u02d9\2\0"+
    "\2\u02d9\15\0\1\u02d9\3\0\1\u02d9\1\0\1\u02d9\2\0"+
    "\3\u02d9\1\0\3\u02d9\13\0\12\u02d9\2\0\10\u02d9\4\0"+
    "\1\u02d9\2\0\2\u02d9\15\0\1\u02d9\11\0\1\u02f4\75\0"+
    "\2\37\1\0\1\37\1\0\11\37\12\0\4\37\1\u02f5"+
    "\5\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\6\37\1\u02f6\3\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\1\37\1\u02f7\1\0\1\37"+
    "\1\0\11\37\12\0\12\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\12\37\2\0\2\37\1\u02f8\5\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\u02f9\1\0\11\37\12\0\12\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\12\37\2\0\3\37"+
    "\1\u02fa\4\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\36\0\1\u02fb\53\0\1\u02fc\101\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\4\37\1\u02fd\5\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\11\37\12\0\3\37\1\u02fe\6\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\11\37\12\0\10\37"+
    "\1\u02ff\1\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\u02ff\2\0\2\37\1\0\1\37\1\0\11\37"+
    "\12\0\4\37\1\u0300\5\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\50\0\1\u0301\36\0\2\u02f0"+
    "\1\0\1\u02f0\1\0\11\u02f0\1\u02f1\3\u0302\6\0\12\u02f0"+
    "\1\0\1\u0303\10\u02f0\4\0\1\u02f0\2\0\2\u02f0\6\0"+
    "\1\u0304\6\0\1\u02f0\3\0\1\u02f0\1\0\1\u02f0\2\0"+
    "\3\u02f0\1\0\3\u02f0\13\0\12\u02f0\2\0\10\u02f0\4\0"+
    "\1\u02f0\2\0\2\u02f0\15\0\1\u02f0\3\0\1\u0305\1\0"+
    "\1\u0305\2\0\3\u0305\1\0\3\u0305\1\0\1\u0306\3\u02f2"+
    "\6\0\12\u0305\2\0\10\u0305\4\0\1\u0305\2\0\2\u0305"+
    "\15\0\1\u0305\3\0\1\u0307\1\0\1\u0307\2\0\3\u0307"+
    "\1\0\3\u0307\6\0\1\u02f3\4\0\12\u0307\2\0\10\u0307"+
    "\4\0\1\u0307\2\0\2\u0307\11\0\1\u0308\3\0\1\u0307"+
    "\1\u02f3\35\0\1\u0309\50\0\1\37\1\u030a\1\0\1\37"+
    "\1\0\11\37\12\0\12\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\u030b"+
    "\1\0\11\37\12\0\12\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\12\37\2\0\7\37\1\u030c\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\34\0\1\u030d\120\0"+
    "\1\u030e\36\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\6\37\1\u030f\3\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\6\37\1\u0310\3\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\21\0\3\u0302\1\u0311"+
    "\160\0\1\u0312\7\0\1\u02f0\1\0\1\u02f0\2\0\3\u02f0"+
    "\1\0\3\u02f0\1\0\1\u02f1\11\0\12\u02f0\2\0\10\u02f0"+
    "\4\0\1\u02f0\2\0\2\u02f0\15\0\1\u02f0\2\0\2\u0305"+
    "\1\0\1\u0305\1\0\11\u0305\1\u0306\3\u0313\6\0\12\u0305"+
    "\1\0\1\u0314\10\u0305\4\0\1\u0305\2\0\2\u0305\2\0"+
    "\1\u0315\3\0\1\u0316\6\0\1\u0305\3\0\1\u0305\1\0"+
    "\1\u0305\2\0\3\u0305\1\0\3\u0305\13\0\12\u0305\2\0"+
    "\10\u0305\4\0\1\u0305\2\0\2\u0305\15\0\1\u0305\2\0"+
    "\2\u0307\1\0\1\u0307\1\0\11\u0307\5\0\1\u02f3\4\0"+
    "\12\u0307\2\0\10\u0307\4\0\1\u0307\2\0\2\u0307\11\0"+
    "\1\u0308\3\0\1\u0307\1\u02f3\20\0\3\u02f2\21\0\1\u02f3"+
    "\113\0\1\u0317\32\0\1\37\1\u0318\1\0\1\37\1\0"+
    "\11\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\1\37\1\u0319\1\0\1\37"+
    "\1\0\11\37\12\0\12\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\11\37\12\0\1\u031a\11\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\42\0\1\u031b\41\0"+
    "\1\u031b\5\0\1\u031c\101\0\2\37\1\0\1\u031d\1\0"+
    "\11\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\u031e\1\0"+
    "\11\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\3\0\1\u031f\1\0\1\u031f\2\0"+
    "\3\u031f\1\0\3\u031f\13\0\12\u031f\2\0\10\u031f\4\0"+
    "\1\u031f\2\0\2\u031f\15\0\1\u031f\21\0\3\u0302\21\0"+
    "\1\u0303\27\0\1\u0304\30\0\3\u0313\45\0\1\u0315\113\0"+
    "\1\u0320\76\0\1\u0321\15\0\1\u0305\1\0\1\u0305\2\0"+
    "\3\u0305\1\0\3\u0305\1\0\1\u0306\11\0\12\u0305\2\0"+
    "\10\u0305\4\0\1\u0305\2\0\2\u0305\15\0\1\u0305\37\0"+
    "\1\u0322\47\0\1\37\1\u0323\1\0\1\37\1\0\11\37"+
    "\12\0\12\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\11\37"+
    "\12\0\12\37\2\0\1\37\1\u0324\6\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\36\0\1\u0325\47\0\1\u0326"+
    "\2\u031f\1\u0326\1\u031f\1\u0326\11\u031f\1\u0326\3\u0327\6\u0326"+
    "\12\u031f\1\u0326\1\u0328\10\u031f\4\u0326\1\u031f\2\u0326\2\u031f"+
    "\2\u0326\1\u0329\12\u0326\1\u031f\1\u0326\20\0\3\u0313\21\0"+
    "\1\u0314\23\0\1\u0315\3\0\1\u0316\20\0\1\u032a\75\0"+
    "\2\37\1\0\1\u032b\1\0\11\37\12\0\12\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\33\0"+
    "\1\u030d\52\0\20\u0326\1\0\1\u0326\1\0\45\u0326\1\u0329"+
    "\34\u0326\3\u0327\45\u0326\1\u0329\16\u0326\1\u032c\1\u0326\1\u032c"+
    "\2\u0326\3\u032c\1\u0326\3\u032c\2\u0326\1\0\1\u0326\1\0"+
    "\1\u0326\1\u0328\4\u0326\12\u032c\2\u0326\10\u032c\4\u0326\1\u032c"+
    "\2\u0326\2\u032c\2\u0326\1\u0329\6\u0326\1\u032d\3\u0326\1\u032c"+
    "\1\u0328\20\u0326\1\0\1\u0326\1\0\45\u0326\1\u0329\1\u032e"+
    "\13\u0326\53\0\1\u032f\32\0\2\37\1\0\1\37\1\0"+
    "\11\37\12\0\11\37\1\u0330\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\1\0\1\u0326\2\u032c\1\u0326"+
    "\1\u032c\1\u0326\11\u032c\1\u0326\1\0\1\u0326\1\0\1\u0326"+
    "\1\u0328\4\u0326\12\u032c\2\u0326\10\u032c\4\u0326\1\u032c\2\u0326"+
    "\2\u032c\2\u0326\1\u0329\6\u0326\1\u032d\3\u0326\1\u032c\1\u0328"+
    "\20\u0326\3\u0327\21\u0326\1\u0328\23\u0326\1\u0329\14\u0326\4\0"+
    "\1\u0331\101\0\2\37\1\0\1\37\1\0\11\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\1\u0332\1\0\2\37"+
    "\15\0\1\37\21\0\3\u0331\5\0\1\u0333\137\0\1\u0334"+
    "\41\0\3\u0333\1\0\1\u0335\27\0\1\u0336\27\0\1\u0337"+
    "\27\0\1\u0338\131\0\1\u0339\100\0\1\u033a\110\0\1\u033b"+
    "\100\0\1\u033c\110\0\1\u033d\100\0\1\u033e\110\0\1\u033f"+
    "\50\0\3\u033d\33\0\1\u0340\102\0\1\u0341\54\0\1\u033d"+
    "\164\0\1\u033d";

  private static int [] zzUnpackTrans() {
    int [] result = new int[43194];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\22\0\2\1\1\11\12\1\1\11\3\1\3\11\14\1"+
    "\1\11\14\1\1\11\10\1\5\11\4\1\1\11\4\1"+
    "\1\11\7\1\1\11\10\1\1\11\4\1\1\11\3\1"+
    "\1\11\2\1\2\11\1\1\24\11\5\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\11\6\1\2\11\2\0\6\1"+
    "\2\0\1\1\3\0\1\11\1\0\1\1\1\11\30\1"+
    "\1\11\10\1\4\11\1\1\1\0\2\1\1\11\1\1"+
    "\12\0\2\1\1\11\1\1\1\0\1\11\1\1\1\11"+
    "\1\1\2\11\1\1\2\0\6\11\4\0\3\1\3\11"+
    "\1\1\3\0\2\1\1\11\1\1\3\0\1\1\1\0"+
    "\1\1\1\11\1\0\1\11\3\0\1\1\1\0\2\1"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\1\2\0"+
    "\1\11\2\0\3\11\2\0\1\1\1\0\10\1\1\0"+
    "\1\11\17\1\1\0\1\11\46\1\3\11\1\1\1\11"+
    "\1\1\12\0\3\11\2\0\1\11\1\0\1\1\1\0"+
    "\1\11\1\1\1\0\1\11\1\0\5\1\1\0\1\11"+
    "\1\0\3\11\2\1\1\11\2\0\74\1\17\0\1\11"+
    "\3\0\2\1\1\11\2\0\17\1\1\0\50\1\5\0"+
    "\1\11\6\0\1\11\1\1\5\0\1\11\2\1\1\11"+
    "\1\1\1\0\16\1\1\11\27\1\1\0\4\1\4\0"+
    "\1\11\5\0\1\11\6\0\16\1\2\0\20\1\1\0"+
    "\2\1\1\11\3\0\1\11\1\0\1\11\1\1\4\0"+
    "\14\1\2\0\14\1\1\0\1\1\2\11\5\0\11\1"+
    "\2\0\7\1\1\0\1\1\5\0\6\1\2\0\4\1"+
    "\1\11\10\0\3\1\2\0\2\1\7\0\3\1\1\11"+
    "\1\0\2\1\2\0\1\11\1\0\2\1\6\0\1\1"+
    "\2\0\1\1\1\0\1\1\7\0\1\11\7\0\1\11"+
    "\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[833];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private final List commentList = new ArrayList();
    private String heredoc = null;
    private int heredocBodyStart = -1;
    private int heredocBodyLength = 0;
    private final StringBuilder heredocBody = new StringBuilder();
    private String nowdoc = null;
    private int nowdoc_len  = 0;
    private int nowdocBodyStart = -1;
    private int nowdocBodyLength = 0;
    private final StringBuilder nowdocBody = new StringBuilder();
    private String comment = null;
    private boolean asp_tags = false;
    private boolean short_tags_allowed = true;
    private ByteStack stack = new ByteStack();
    private char yy_old_buffer[] = new char[ZZ_BUFFERSIZE];
    private int yy_old_pushbackPos;
    protected int commentStartPosition;
    private int whitespaceEndPosition;
    private boolean isEndedPhp;
    private final PHPDocCommentParser docParser = new PHPDocCommentParser();
    private final PHPVarCommentParser varParser = new PHPVarCommentParser();

    public ASTPHP5Scanner(java.io.Reader in, boolean short_tags_allowed, boolean asp_tags_allowed) {
        this(in);
        this.asp_tags = asp_tags_allowed;
        this.short_tags_allowed = short_tags_allowed;
    }
    //private AST ast;

    private int bracket = 0;

    /**
     * Returns balance beween '{' and '}'. If it's equesl 0,
     * then number of '{' == number of '}', if > 0 then '{' > '}' and
     * if return number < 0 then '{' < '}'
     */
    public int getCurlyBalance() {
        return bracket;
    }

    public int getWhitespaceEndPosition() {
        return whitespaceEndPosition;
    }

    public boolean isEndedPhp() {
        return isEndedPhp;
    }

    public boolean useAspTagsAsPhp() {
        return asp_tags;
    }

    public void reset(java.io.Reader reader) {
        yyreset(reader);
    }

    public void setState(int state) {
        yybegin(state);
    }

    public int getState() {
        return yystate();
    }

    public void setInScriptingState() {
        yybegin(ST_IN_SCRIPTING);
    }

    public void resetCommentList() {
        commentList.clear();
    }

    public List getCommentList() {
        return commentList;
    }

    protected void addComment(Comment.Type type) {
        int leftPosition = getTokenStartPosition();
        //System.out.println("#####AddCommnet start: " + commentStartPosition + " end: " + (leftPosition + getTokenLength()) + ", type: " + type);
        Comment comm;
        if (type == Comment.Type.TYPE_PHPDOC) {
            comm = docParser.parse(commentStartPosition, leftPosition + getTokenLength(),  comment);
            comment = null;
        }
        else if(type == Comment.Type.TYPE_VARTYPE) {
            comm = varParser.parse(commentStartPosition, leftPosition + getTokenLength(),  comment);
            comment = null;
            if (comm == null) {
                comm = new Comment(commentStartPosition, leftPosition + getTokenLength(), /*ast,*/ type);
            }
        }
        else {
            comm = new Comment(commentStartPosition, leftPosition + getTokenLength(), /*ast,*/ type);
        }
        commentList.add(comm);
    }

    public void setUseAspTagsAsPhp(boolean useAspTagsAsPhp) {
        asp_tags = useAspTagsAsPhp;
    }

    private void pushState(int state) {
        stack.push(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.pop());
    }

    public int getCurrentLine() {
        return yyline;
    }

    protected int getTokenStartPosition() {
        return zzStartRead - zzPushbackPos;
    }

    protected int getTokenLength() {
        return zzMarkedPos - zzStartRead;
    }

    public int getLength() {
        return zzEndRead - zzPushbackPos;
    }

    private void handleCommentStart() {
        commentStartPosition = getTokenStartPosition();
    }

    private void handleLineCommentEnd() {
        addComment(Comment.Type.TYPE_SINGLE_LINE);
    }

    private void handleMultilineCommentEnd() {
        addComment(Comment.Type.TYPE_MULTILINE);
    }

    private void handlePHPDocEnd() {
        addComment(Comment.Type.TYPE_PHPDOC);
    }

    private void handleVarComment() {
        commentStartPosition = getTokenStartPosition();
        addComment(Comment.Type.TYPE_VARTYPE);
    }

    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    private Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        Symbol symbol = new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
        return symbol;
    }

    private void updateNowdocBodyInfo() {
        if (nowdocBodyStart == -1) {
            nowdocBodyStart = getTokenStartPosition();
        }
        nowdocBody.append(yytext());
        nowdocBodyLength += getTokenLength();
    }

    private Symbol createFullNowdocBodySymbol() {
        Symbol symbol = new Symbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE, nowdocBodyStart, nowdocBodyStart + nowdocBodyLength);
        symbol.value = nowdocBody.toString();
        return symbol;
    }

    private void updateHeredocBodyInfo() {
        if (heredocBodyStart == -1) {
            heredocBodyStart = getTokenStartPosition();
        }
        heredocBody.append(yytext());
        heredocBodyLength += getTokenLength();
    }

    private void resetHeredocBodyInfo() {
        heredocBodyStart = -1;
        heredocBodyLength = 0;
        heredocBody.delete(0, heredocBody.length());
    }

    private Symbol createFullHeredocBodySymbol() {
        Symbol symbol = new Symbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE, heredocBodyStart, heredocBodyStart + heredocBodyLength);
        symbol.value = heredocBody.toString();
        resetHeredocBodyInfo();
        return symbol;
    }

    private boolean isLabelChar(char c) {
        return c == '_'
                || (c >= 'a' && c <= 'z')
                || (c >= 'A' && c <= 'Z')
                || (c >= 0x7f && c <= 0xff);
    }

    private boolean isEndHereOrNowdoc(String hereOrNowdoc) {
        // check whether ID exists
        String trimedText = yytext().trim();
        boolean isEnd = false;
        if (trimedText.startsWith(hereOrNowdoc)) {
            if (trimedText.length() == hereOrNowdoc.length()) {
                isEnd = true;
            } else if (trimedText.length() > hereOrNowdoc.length()
                    && !isLabelChar(trimedText.charAt(hereOrNowdoc.length()))) {
                // e.g.
                // $test = <<< END
                // ENDING
                // END
                isEnd = true;
            }
        }
        return isEnd;
    }

    public int[] getParamenters(){
        return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline};
    }

    private boolean parsePHPDoc(){
        /*final IDocumentorLexer documentorLexer = getDocumentorLexer(zzReader);
        if(documentorLexer == null){
            return false;
        }
        yypushback(zzMarkedPos - zzStartRead);
        int[] parameters = getParamenters();
        documentorLexer.reset(zzReader, zzBuffer, parameters);
        Object phpDocBlock = documentorLexer.parse();
        commentList.add(phpDocBlock);
        reset(zzReader, documentorLexer.getBuffer(), documentorLexer.getParamenters());*/

        //System.out.println("#######ParsePHPDoc()");
        //return true;
        return false;
    }


    /*protected IDocumentorLexer getDocumentorLexer(java.io.Reader  reader) {
        return null;
    }*/

    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
        this.zzReader = reader;
        this.zzBuffer = buffer;
        this.zzMarkedPos = parameters[0];
        this.zzPushbackPos = parameters[1];
        this.zzCurrentPos = parameters[2];
        this.zzStartRead = parameters[3];
        this.zzEndRead = parameters[4];
        this.yyline = parameters[5];
        this.yychar = this.zzStartRead - this.zzPushbackPos;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ASTPHP5Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ASTPHP5Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1774) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    /*if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }*/
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 60:
          { //    yymore();
          }
        case 221: break;
        case 219:
          { comment = yytext();
    handleVarComment();
          }
        case 222: break;
        case 203:
          { return createFullSymbol(ASTPHP5Symbols.T_INTERFACE);
          }
        case 223: break;
        case 164:
          { int removeChars = (yytext().charAt(0) == 'b')?4:3;
    heredoc = yytext().substring(removeChars).trim();    // for 'b<<<' or '<<<'
    if (heredoc.charAt(0) == '"') {
        heredoc = heredoc.substring(1, heredoc.length()-1);
    }
    yybegin(ST_START_HEREDOC);
    return createSymbol(ASTPHP5Symbols.T_START_HEREDOC);
          }
        case 224: break;
        case 29:
          { return createSymbol(ASTPHP5Symbols.T_OR);
          }
        case 225: break;
        case 168:
          { yypushback(yylength() - 4); // 4: enum length
    return createFullSymbol(ASTPHP5Symbols.T_ENUM);
          }
        case 226: break;
        case 162:
          { return createFullSymbol(ASTPHP5Symbols.T_PRINT);
          }
        case 227: break;
        case 188:
          { return createSymbol(ASTPHP5Symbols.T_UNSET_CAST);
          }
        case 228: break;
        case 1:
          { return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
          }
        case 229: break;
        case 24:
          { return createSymbol(ASTPHP5Symbols.T_RGREATER);
          }
        case 230: break;
        case 174:
          { return createFullSymbol(ASTPHP5Symbols.T_GLOBAL);
          }
        case 231: break;
        case 25:
          { return createSymbol(ASTPHP5Symbols.T_TIMES);
          }
        case 232: break;
        case 115:
          { String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?')) {
        yypushback(1);
        yybegin(ST_IN_SHORT_ECHO);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 233: break;
        case 79:
          { return createSymbol(ASTPHP5Symbols.T_MINUS_EQUAL);
          }
        case 234: break;
        case 100:
          { return createSymbol(ASTPHP5Symbols.T_BOOLEAN_OR);
          }
        case 235: break;
        case 12:
          { pushState(ST_IN_SCRIPTING);
    bracket++;
    return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
          }
        case 236: break;
        case 46:
          { /* <ST_END_NOWDOC>{LABEL}";"?[\n\r] */
    nowdoc=null;
    nowdoc_len=0;
    nowdocBody.delete(0, nowdocBody.length());
    nowdocBodyStart = -1;
    nowdocBodyLength = 0;
    yybegin(ST_IN_SCRIPTING);
    int back = 0;
    if (yytext().charAt(yylength() - 1)==';') {
        back++;
    }
    yypushback(back);
    return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
          }
        case 237: break;
        case 22:
          { return createSymbol(ASTPHP5Symbols.T_CLOSE_PARENTHESE);
          }
        case 238: break;
        case 47:
          { yypushback(yylength());
    popState();
          }
        case 239: break;
        case 23:
          { return createSymbol(ASTPHP5Symbols.T_NOT);
          }
        case 240: break;
        case 19:
          { return createSymbol(ASTPHP5Symbols.T_QUESTION_MARK);
          }
        case 241: break;
        case 128:
          { return createFullSymbol(ASTPHP5Symbols.T_VAR);
          }
        case 242: break;
        case 57:
          { popState();
    return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
          }
        case 243: break;
        case 213:
          { return createFullSymbol(ASTPHP5Symbols.T_FUNC_C);
          }
        case 244: break;
        case 151:
          { return createFullSymbol(ASTPHP5Symbols.T_TRAIT);
          }
        case 245: break;
        case 171:
          { return createFullSymbol(ASTPHP5Symbols.T_STATIC);
          }
        case 246: break;
        case 141:
          { return createFullSymbol(ASTPHP5Symbols.T_EVAL);
          }
        case 247: break;
        case 173:
          { return createFullSymbol(ASTPHP5Symbols.T_RETURN);
          }
        case 248: break;
        case 154:
          { return createFullSymbol(ASTPHP5Symbols.T_UNSET);
          }
        case 249: break;
        case 133:
          { if (!parsePHPDoc()) {
        handleCommentStart();
        yybegin(ST_DOCBLOCK);
    }
          }
        case 250: break;
        case 28:
          { return createSymbol(ASTPHP5Symbols.T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG);
          }
        case 251: break;
        case 92:
          { return createSymbol(ASTPHP5Symbols.T_DIV_EQUAL);
          }
        case 252: break;
        case 48:
          { popState();
    return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 253: break;
        case 209:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDFOREACH);
          }
        case 254: break;
        case 207:
          { return createFullSymbol(ASTPHP5Symbols.T_METHOD_C);
          }
        case 255: break;
        case 38:
          { /*<ST_BACKQUOTE>{BACKQUOTE_CHARS}+*/
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 256: break;
        case 183:
          { return createFullSymbol(ASTPHP5Symbols.T_FINALLY);
          }
        case 257: break;
        case 78:
          { return createSymbol(ASTPHP5Symbols.T_ATTRIBUTE);
          }
        case 258: break;
        case 105:
          { yypushback(1);
    /*<ST_BACKQUOTE>{BACKQUOTE_CHARS}*("{""{"+|"$""$"+|(("{"+|"$"+)[`]))*/
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 259: break;
        case 88:
          { return createSymbol(ASTPHP5Symbols.T_IS_SMALLER_OR_EQUAL);
          }
        case 260: break;
        case 127:
          { return createSymbol(ASTPHP5Symbols.T_COALESCE_EQUAL);
          }
        case 261: break;
        case 71:
          { return createFullSymbol(ASTPHP5Symbols.T_CONSTANT_ENCAPSED_STRING);
          }
        case 262: break;
        case 118:
          { return createFullSymbol(ASTPHP5Symbols.T_LOGICAL_AND);
          }
        case 263: break;
        case 156:
          { return createFullSymbol(ASTPHP5Symbols.T_CONST);
          }
        case 264: break;
        case 144:
          { return createFullSymbol(ASTPHP5Symbols.T_GOTO);
          }
        case 265: break;
        case 126:
          { pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ASTPHP5Symbols.T_NULLSAFE_OBJECT_OPERATOR);
          }
        case 266: break;
        case 121:
          { return createFullSymbol(ASTPHP5Symbols.T_EXIT);
          }
        case 267: break;
        case 37:
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 268: break;
        case 136:
          { /* <ST_HEREDOC> {HEREDOC_CHARS}("{$" | "${") */
        yypushback(2);
        updateHeredocBodyInfo();
        return createFullHeredocBodySymbol();
          }
        case 269: break;
        case 195:
          { return createFullSymbol(ASTPHP5Symbols.T_CALLABLE);
          }
        case 270: break;
        case 129:
          { return createSymbol(ASTPHP5Symbols.T_IS_NOT_IDENTICAL);
          }
        case 271: break;
        case 42:
          { yypushback(1);
    yybegin(ST_HEREDOC);
          }
        case 272: break;
        case 170:
          { /* not a keyword, hust for recognize constans.*/
    return createFullSymbol(ASTPHP5Symbols.T_DEFINE);
          }
        case 273: break;
        case 45:
          { yypushback(1);
    yybegin(ST_NOWDOC);
          }
        case 274: break;
        case 99:
          { return createSymbol(ASTPHP5Symbols.T_OR_EQUAL);
          }
        case 275: break;
        case 149:
          { return createFullSymbol(ASTPHP5Symbols.T_BREAK);
          }
        case 276: break;
        case 106:
          { /* {NEWLINE}{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\n\r]? */
        int trailingNewLineLength = 1;
        int labelLength = yylength() - trailingNewLineLength;
        int back = trailingNewLineLength;

        if (yytext().charAt(labelLength-1) == ';') {
           labelLength--;
           back++;
        }

        if (isEndHereOrNowdoc(heredoc)) {
            int indexOfHeredocId = yytext().indexOf(heredoc);
            back += labelLength - indexOfHeredocId;
            yypushback(back);
            yybegin(ST_END_HEREDOC);
        } else {
            // handle variable
            char previousChar = ' ';
            int indexOfVariable = -1;
            for (int i = 0; i < yylength(); i++) {
                char currentChar = yytext().charAt(i);
                if (currentChar == '$' && previousChar == '{') {
                    indexOfVariable = i - 1;
                    break;
                }
                if (currentChar == '$' && previousChar != '\\') {
                    indexOfVariable = i;
                    break;
                }
                previousChar = currentChar;
            }

            if (indexOfVariable == -1) {
                yypushback(trailingNewLineLength);
            } else {
                yypushback(yylength() - indexOfVariable);
                updateHeredocBodyInfo();
                return createFullHeredocBodySymbol();
            }
        }
        updateHeredocBodyInfo();
        if (yystate() == ST_END_HEREDOC) {
            return createFullHeredocBodySymbol();
        }
          }
        case 277: break;
        case 62:
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_ECHO);
          }
        case 278: break;
        case 172:
          { return createFullSymbol(ASTPHP5Symbols.T_SWITCH);
          }
        case 279: break;
        case 36:
          { /*<ST_DOUBLE_QUOTES>{DOUBLE_QUOTES_CHARS}+*/
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 280: break;
        case 33:
          { return createSymbol(ASTPHP5Symbols.T_TILDA);
          }
        case 281: break;
        case 74:
          { return createFullSymbol(ASTPHP5Symbols.T_IF);
          }
        case 282: break;
        case 185:
          { return createFullSymbol(ASTPHP5Symbols.T_REQUIRE);
          }
        case 283: break;
        case 20:
          { return createSymbol(ASTPHP5Symbols.T_NEKUDOTAIM);
          }
        case 284: break;
        case 160:
          { return createFullSymbol(ASTPHP5Symbols.T_MATCH);
          }
        case 285: break;
        case 56:
          { return createSymbol(ASTPHP5Symbols.T_REFERENCE);
          }
        case 286: break;
        case 93:
          { handleCommentStart();
    yybegin(ST_COMMENT);
          }
        case 287: break;
        case 205:
          { return createFullSymbol(ASTPHP5Symbols.T_NAMESPACE);
          }
        case 288: break;
        case 211:
          { return createFullSymbol(ASTPHP5Symbols.T_IMPLEMENTS);
          }
        case 289: break;
        case 159:
          { return createFullSymbol(ASTPHP5Symbols.T_YIELD);
          }
        case 290: break;
        case 17:
          { return createSymbol(ASTPHP5Symbols.T_MINUS);
          }
        case 291: break;
        case 44:
          { /* <ST_NOWDOC>{NOWDOC_CHARS}|{NEWLINE} */
        updateNowdocBodyInfo();
          }
        case 292: break;
        case 201:
          { return createFullSymbol(ASTPHP5Symbols.T_CLASS_C);
          }
        case 293: break;
        case 218:
          { return createFullSymbol(ASTPHP5Symbols.T_NS_C);
          }
        case 294: break;
        case 163:
          { return createSymbol(ASTPHP5Symbols.T_INT_CAST);
          }
        case 295: break;
        case 113:
          { handlePHPDocEnd();
    yybegin(ST_IN_SCRIPTING);
          }
        case 296: break;
        case 169:
          { return createFullSymbol(ASTPHP5Symbols.T_ELSEIF);
          }
        case 297: break;
        case 85:
          { return createSymbol(ASTPHP5Symbols.T_COALESCE);
          }
        case 298: break;
        case 208:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDDECLARE);
          }
        case 299: break;
        case 80:
          { return createSymbol(ASTPHP5Symbols.T_DEC);
          }
        case 300: break;
        case 102:
          { yypushback(1);
    /*<ST_DOUBLE_QUOTES>{DOUBLE_QUOTES_CHARS}*("{""{"+|"$""$"+|(("{"+|"$"+)[\"]))*/
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 301: break;
        case 193:
          { return createFullSymbol(ASTPHP5Symbols.T_ABSTRACT);
          }
        case 302: break;
        case 140:
          { return createFullSymbol(ASTPHP5Symbols.T_ELSE);
          }
        case 303: break;
        case 204:
          { return createFullSymbol(ASTPHP5Symbols.T_INSTEADOF);
          }
        case 304: break;
        case 81:
          { pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
          }
        case 305: break;
        case 13:
          { return createSymbol(ASTPHP5Symbols.T_SEMICOLON);
          }
        case 306: break;
        case 2:
          { // do nothing
          }
        case 307: break;
        case 50:
          { popState();
    pushState(ST_IN_SCRIPTING);
    return createFullSymbol(ASTPHP5Symbols.T_STRING_VARNAME);
          }
        case 308: break;
        case 18:
          { return createSymbol(ASTPHP5Symbols.T_LGREATER);
          }
        case 309: break;
        case 143:
          { return createFullSymbol(ASTPHP5Symbols.T_LIST);
          }
        case 310: break;
        case 112:
          { handleMultilineCommentEnd();
    yybegin(ST_IN_SCRIPTING);
          }
        case 311: break;
        case 134:
          { yypushback(1);
    pushState(ST_VAR_OFFSET);
    return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 312: break;
        case 167:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDFOR);
          }
        case 313: break;
        case 3:
          { return createFullSymbol(ASTPHP5Symbols.T_LNUMBER);
          }
        case 314: break;
        case 41:
          { /* <ST_HEREDOC> "$" | "{" */
        updateHeredocBodyInfo();
          }
        case 315: break;
        case 145:
          { handleCommentStart();
          }
        case 316: break;
        case 148:
          { return createFullSymbol(ASTPHP5Symbols.T_ARRAY);
          }
        case 317: break;
        case 139:
          { return createFullSymbol(ASTPHP5Symbols.T_ECHO);
          }
        case 318: break;
        case 51:
          { return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
          }
        case 319: break;
        case 97:
          { return createSymbol(ASTPHP5Symbols.T_AND_EQUAL);
          }
        case 320: break;
        case 55:
          { bracket++; return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
          }
        case 321: break;
        case 152:
          { return createFullSymbol(ASTPHP5Symbols.T_THROW);
          }
        case 322: break;
        case 135:
          { /* <ST_HEREDOC> {HEREDOC_CHARS}"$"{LABEL}"["? */
        String text = yytext();
        int lastIndexOfDollar = text.lastIndexOf('$');
        yypushback(text.length() - lastIndexOfDollar);
        updateHeredocBodyInfo();
        return createFullHeredocBodySymbol();
          }
        case 323: break;
        case 161:
          { return createFullSymbol(ASTPHP5Symbols.T_WHILE);
          }
        case 324: break;
        case 202:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDSWITCH);
          }
        case 325: break;
        case 64:
          { if (asp_tags) {
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
        //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 326: break;
        case 187:
          { return createSymbol(ASTPHP5Symbols.T_ARRAY_CAST);
          }
        case 327: break;
        case 104:
          { pushState(ST_IN_SCRIPTING);
    yypushback(yylength()-1);
    bracket++;
    return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN_WITH_DOLAR);
          }
        case 328: break;
        case 181:
          { return createFullSymbol(ASTPHP5Symbols.T_DEFAULT);
          }
        case 329: break;
        case 177:
          { return createSymbol(ASTPHP5Symbols.T_DOUBLE_CAST);
          }
        case 330: break;
        case 11:
          { yybegin(ST_BACKQUOTE);
    return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 331: break;
        case 16:
          { return createSymbol(ASTPHP5Symbols.T_OPEN_RECT);
          }
        case 332: break;
        case 155:
          { return createFullSymbol(ASTPHP5Symbols.T_CATCH);
          }
        case 333: break;
        case 108:
          { /* <ST_NOWDOC>{NEWLINE}{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\r\n]? */
        if (isEndHereOrNowdoc(nowdoc)) {
            String yytext = yytext();
            int newlineLength = yytext.startsWith("\r\n") ? 2 : 1;
            int back = yylength() - newlineLength;
            yypushback(back);
            updateNowdocBodyInfo();
            yybegin(ST_END_NOWDOC);
            if (nowdocBodyLength > 0) {
                return createFullNowdocBodySymbol();
            }
        } else {
            yypushback(1);
            updateNowdocBodyInfo();
        }
          }
        case 334: break;
        case 61:
          { String yytext = yytext();
    switch (yytext.charAt(yytext.length() - 1)) {
        case '?':
        case '%':
        case '>':
            yypushback(1);
            break;
        default:
            handleLineCommentEnd();
            yybegin(ST_IN_SCRIPTING);
    }
//    yymore();
          }
        case 335: break;
        case 103:
          { pushState(ST_LOOKING_FOR_VARNAME);
    return createSymbol(ASTPHP5Symbols.T_DOLLAR_OPEN_CURLY_BRACES);
          }
        case 336: break;
        case 35:
          { /* This is a temporary fix which is dependant on flex and it's implementation */
    if (!stack.isEmpty()) {
        popState();
    }
    bracket--;
    return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
          }
        case 337: break;
        case 137:
          { return createSymbol(ASTPHP5Symbols.T_NULLSAFE_OBJECT_OPERATOR);
          }
        case 338: break;
        case 94:
          { return createSymbol(ASTPHP5Symbols.T_MOD_EQUAL);
          }
        case 339: break;
        case 26:
          { return createSymbol(ASTPHP5Symbols.T_DIV);
          }
        case 340: break;
        case 107:
          { /* <ST_START_HEREDOC>{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\n\r]? */
    int trailingNewLineLength = 1;
    int labelLength = yylength() - trailingNewLineLength;
    int back = trailingNewLineLength;
    String yytext = yytext();

    if (yytext.charAt(labelLength - 1) == ';') {
        labelLength--;
        back++;
    }

    if (isEndHereOrNowdoc(heredoc)) {
        int indexOfHeredocId = yytext().indexOf(heredoc);
        back += labelLength - indexOfHeredocId;
        yypushback(back);
        yybegin(ST_END_HEREDOC);
    } else {
        yypushback(yylength());
        yybegin(ST_HEREDOC);
    }
          }
        case 341: break;
        case 32:
          { return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
          }
        case 342: break;
        case 130:
          { return createSymbol(ASTPHP5Symbols.T_SPACESHIP);
          }
        case 343: break;
        case 6:
          { return createSymbol(ASTPHP5Symbols.T_PLUS);
          }
        case 344: break;
        case 157:
          { return createFullSymbol(ASTPHP5Symbols.T_CLASS);
          }
        case 345: break;
        case 122:
          { return createFullSymbol(ASTPHP5Symbols.T_FOR);
          }
        case 346: break;
        case 165:
          { yypushback(3);
    pushState(ST_LOOKING_FOR_PROPERTY);
    return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 347: break;
        case 82:
          { return createSymbol(ASTPHP5Symbols.T_IS_GREATER_OR_EQUAL);
          }
        case 348: break;
        case 75:
          { return createFullSymbol(ASTPHP5Symbols.T_DO);
          }
        case 349: break;
        case 98:
          { return createSymbol(ASTPHP5Symbols.T_BOOLEAN_AND);
          }
        case 350: break;
        case 40:
          { /* <ST_HEREDOC> {HEREDOC_CHARS} */
        int indexOfNewline = yytext().indexOf("\r");
        if (indexOfNewline == -1) {
            indexOfNewline = yytext().indexOf("\n");
        }
        if (indexOfNewline > 0) {
            // if index equals 0, don't pushback (infinite loop)
            yypushback(yylength() - indexOfNewline);
        }
        updateHeredocBodyInfo();
          }
        case 351: break;
        case 4:
          { return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 352: break;
        case 180:
          { return createFullSymbol(ASTPHP5Symbols.T_INCLUDE);
          }
        case 353: break;
        case 5:
          { return createSymbol(ASTPHP5Symbols.T_NEKUDA);
          }
        case 354: break;
        case 146:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDIF);
          }
        case 355: break;
        case 123:
          { return createFullSymbol(ASTPHP5Symbols.T_NEW);
          }
        case 356: break;
        case 58:
          { bracket--; return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
          }
        case 357: break;
        case 210:
          { return createFullSymbol(ASTPHP5Symbols.T_INSTANCEOF);
          }
        case 358: break;
        case 49:
          { yypushback(yylength());
    popState();
    pushState(ST_IN_SCRIPTING);
          }
        case 359: break;
        case 166:
          { isEndedPhp = false;
    whitespaceEndPosition = getTokenStartPosition() + yylength();
    yybegin(ST_IN_SCRIPTING);
    //return T_OPEN_TAG;
    //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
          }
        case 360: break;
        case 68:
          { return createSymbol(ASTPHP5Symbols.T_PLUS_EQUAL);
          }
        case 361: break;
        case 76:
          { // PHP 7.4 Arrow Functions 2.0
    // https://wiki.php.net/rfc/arrow_functions_v2
    return createFullSymbol(ASTPHP5Symbols.T_FN);
          }
        case 362: break;
        case 8:
          { whitespaceEndPosition = getTokenStartPosition() + yylength();
          }
        case 363: break;
        case 186:
          { return createFullSymbol(ASTPHP5Symbols.T_PRIVATE);
          }
        case 364: break;
        case 216:
          { return createFullSymbol(ASTPHP5Symbols.T_REQUIRE_ONCE);
          }
        case 365: break;
        case 214:
          { yypushback(yylength() - 4); // 4: enum length
    return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 366: break;
        case 184:
          { return createFullSymbol(ASTPHP5Symbols.T_FOREACH);
          }
        case 367: break;
        case 158:
          { return createFullSymbol(ASTPHP5Symbols.T_CLONE);
          }
        case 368: break;
        case 150:
          { return createFullSymbol(ASTPHP5Symbols.T_ISSET);
          }
        case 369: break;
        case 21:
          { return createSymbol(ASTPHP5Symbols.T_OPEN_PARENTHESE);
          }
        case 370: break;
        case 175:
          { return createFullSymbol(ASTPHP5Symbols.T_PUBLIC);
          }
        case 371: break;
        case 15:
          { handleCommentStart();
    yybegin(ST_ONE_LINE_COMMENT);
//    yymore();
          }
        case 372: break;
        case 125:
          { return createSymbol(ASTPHP5Symbols.T_SR_EQUAL);
          }
        case 373: break;
        case 63:
          { if (short_tags_allowed || yylength()>2) { /* yyleng>2 means it's not <? but <script> */
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
        //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 374: break;
        case 147:
          { return createFullSymbol(ASTPHP5Symbols.T_EMPTY);
          }
        case 375: break;
        case 220:
          { yybegin(ST_HALTED_COMPILER);
    return createSymbol(ASTPHP5Symbols.T_HALT_COMPILER);
          }
        case 376: break;
        case 87:
          { return createSymbol(ASTPHP5Symbols.T_IS_NOT_EQUAL);
          }
        case 377: break;
        case 90:
          { return createSymbol(ASTPHP5Symbols.T_MUL_EQUAL);
          }
        case 378: break;
        case 96:
          { yypushback(yylength() - 1);
    return createSymbol(ASTPHP5Symbols.T_REFERENCE);
          }
        case 379: break;
        case 109:
          { /* <ST_START_NOWDOC>{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\r\n]? */
    // there is no [\r\n] if it is the last line
    // i.e. not [\r\n] but EOF, so check not [\r\n] but [\r\n]?
    if (isEndHereOrNowdoc(nowdoc)) {
        int indexOfNowdocId = yytext().indexOf(nowdoc);
        int back = yylength() - indexOfNowdocId - nowdoc.length();
        yypushback(back);
        nowdoc = null;
        nowdoc_len = 0;
        nowdocBody.delete(0, nowdocBody.length());
        nowdocBodyStart = -1;
        nowdocBodyLength = 0;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
    } else {
        yypushback(1); // [\r\n] length
        yybegin(ST_NOWDOC);
        updateNowdocBodyInfo();
    }
          }
        case 380: break;
        case 131:
          { return createSymbol(ASTPHP5Symbols.T_SL_EQUAL);
          }
        case 381: break;
        case 120:
          { return createFullSymbol(ASTPHP5Symbols.T_TRY);
          }
        case 382: break;
        case 153:
          { return createFullSymbol(ASTPHP5Symbols.T_FINAL);
          }
        case 383: break;
        case 199:
          { return createSymbol(ASTPHP5Symbols.T_OBJECT_CAST);
          }
        case 384: break;
        case 176:
          { return createSymbol(ASTPHP5Symbols.T_BOOL_CAST);
          }
        case 385: break;
        case 39:
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 386: break;
        case 7:
          { return createSymbol(ASTPHP5Symbols.T_NS_SEPARATOR);
          }
        case 387: break;
        case 114:
          { if (asp_tags || yytext().charAt(0)!='%') { /* asp comment? */
        isEndedPhp = true;
        handleLineCommentEnd();
        yypushback(yylength());
        yybegin(ST_IN_SCRIPTING);
        //return T_COMMENT;
    }
          }
        case 388: break;
        case 198:
          { return createSymbol(ASTPHP5Symbols.T_STRING_CAST);
          }
        case 389: break;
        case 117:
          { return createFullSymbol(ASTPHP5Symbols.T_LOGICAL_XOR);
          }
        case 390: break;
        case 65:
          { return createFullSymbol(ASTPHP5Symbols.T_DNUMBER);
          }
        case 391: break;
        case 27:
          { return createSymbol(ASTPHP5Symbols.T_PRECENT);
          }
        case 392: break;
        case 217:
          { comment = yytext();
    handleVarComment();
    // if we want to handle the var comment in  ast, then return the T_VAR_Comment symbol
    // but it needs some changes in parser grammar. see issue #154967
    //return createFullSymbol(ASTPHP5Symbols.T_VAR_COMMENT);
          }
        case 393: break;
        case 84:
          { isEndedPhp = true;
    yybegin(YYINITIAL);
    return createSymbol(ASTPHP5Symbols.T_SEMICOLON);  /* implicit ';' at php-end tag */
          }
        case 394: break;
        case 95:
          { if (asp_tags) {
        yybegin(YYINITIAL);
        return createSymbol(ASTPHP5Symbols.T_SEMICOLON);  /* implicit ';' at php-end tag */
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 395: break;
        case 194:
          { return createFullSymbol(ASTPHP5Symbols.T_FUNCTION);
          }
        case 396: break;
        case 192:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDWHILE);
          }
        case 397: break;
        case 30:
          { return createSymbol(ASTPHP5Symbols.T_KOVA);
          }
        case 398: break;
        case 43:
          { /* <ST_END_HEREDOC>{TABS_AND_SPACES}{LABEL}";"? */
    heredoc=null;
    resetHeredocBodyInfo();
    yybegin(ST_IN_SCRIPTING);
    int back = 0;
    // mark just the label
    if (yytext().charAt(yylength() - 1)==';') {
        back++;
    }
    yypushback(back);
    return createSymbol(ASTPHP5Symbols.T_END_HEREDOC);
          }
        case 399: break;
        case 10:
          { yybegin(ST_DOUBLE_QUOTES);
    return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 400: break;
        case 196:
          { return createFullSymbol(ASTPHP5Symbols.T_CONTINUE);
          }
        case 401: break;
        case 119:
          { return createSymbol(ASTPHP5Symbols.T_IS_IDENTICAL);
          }
        case 402: break;
        case 73:
          { return createSymbol(ASTPHP5Symbols.T_DOUBLE_ARROW);
          }
        case 403: break;
        case 138:
          { int len = yylength();
    yypushback(2); // go back to mark end of comment in the next token
    comment = yytext();
          }
        case 404: break;
        case 200:
          { return createFullSymbol(ASTPHP5Symbols.T_TRAIT_C);
          }
        case 405: break;
        case 86:
          { return createSymbol(ASTPHP5Symbols.T_PAAMAYIM_NEKUDOTAYIM);
          }
        case 406: break;
        case 124:
          { return createFullSymbol(ASTPHP5Symbols.T_USE);
          }
        case 407: break;
        case 83:
          { return createSymbol(ASTPHP5Symbols.T_SR);
          }
        case 408: break;
        case 14:
          { return createSymbol(ASTPHP5Symbols.T_EQUAL);
          }
        case 409: break;
        case 31:
          { return createSymbol(ASTPHP5Symbols.T_COMMA);
          }
        case 410: break;
        case 178:
          { return createFullSymbol(ASTPHP5Symbols.T_DIR);
          }
        case 411: break;
        case 206:
          { return createFullSymbol(ASTPHP5Symbols.T_PROTECTED);
          }
        case 412: break;
        case 52:
          { yypushback(1);
    popState();
    /*<ST_VAR_OFFSET>[ \n\r\t\\'#]*/
    return createSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 413: break;
        case 66:
          { return createSymbol(ASTPHP5Symbols.T_CONCAT_EQUAL);
          }
        case 414: break;
        case 111:
          { /* treat numbers (almost) as strings inside encapsulated strings */
    return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
          }
        case 415: break;
        case 9:
          { return createSymbol(ASTPHP5Symbols.T_DOLLAR);
          }
        case 416: break;
        case 67:
          { return createSymbol(ASTPHP5Symbols.T_INC);
          }
        case 417: break;
        case 77:
          { return createFullSymbol(ASTPHP5Symbols.T_LOGICAL_OR);
          }
        case 418: break;
        case 197:
          { return createFullSymbol(ASTPHP5Symbols.T_READONLY);
          }
        case 419: break;
        case 89:
          { return createSymbol(ASTPHP5Symbols.T_SL);
          }
        case 420: break;
        case 69:
          { return createFullSymbol(ASTPHP5Symbols.T_AS);
          }
        case 421: break;
        case 215:
          { return createFullSymbol(ASTPHP5Symbols.T_INCLUDE_ONCE);
          }
        case 422: break;
        case 132:
          { return createSymbol(ASTPHP5Symbols.T_POW_EQUAL);
          }
        case 423: break;
        case 72:
          { return createSymbol(ASTPHP5Symbols.T_IS_EQUAL);
          }
        case 424: break;
        case 34:
          { return createSymbol(ASTPHP5Symbols.T_AT);
          }
        case 425: break;
        case 53:
          { return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 426: break;
        case 191:
          { return createFullSymbol(ASTPHP5Symbols.T_LINE);
          }
        case 427: break;
        case 189:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    /* 3 is <<<, 2 is quotes, 1 is newline */
    nowdoc_len = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        nowdoc_len--;
    }
    // first quate
    startString++;
    nowdoc = yytext().substring(startString,nowdoc_len+startString);
    yybegin(ST_START_NOWDOC);
    return createSymbol(ASTPHP5Symbols.T_START_NOWDOC);
          }
        case 428: break;
        case 179:
          { return createFullSymbol(ASTPHP5Symbols.T_EXTENDS);
          }
        case 429: break;
        case 70:
          { return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 430: break;
        case 212:
          { return createSymbol(ASTPHP5Symbols.T_YIELD_FROM);
          }
        case 431: break;
        case 182:
          { return createFullSymbol(ASTPHP5Symbols.T_DECLARE);
          }
        case 432: break;
        case 101:
          { return createSymbol(ASTPHP5Symbols.T_XOR_EQUAL);
          }
        case 433: break;
        case 91:
          { return createSymbol(ASTPHP5Symbols.T_POW);
          }
        case 434: break;
        case 142:
          { return createFullSymbol(ASTPHP5Symbols.T_CASE);
          }
        case 435: break;
        case 190:
          { return createFullSymbol(ASTPHP5Symbols.T_FILE);
          }
        case 436: break;
        case 110:
          { return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
          }
        case 437: break;
        case 116:
          { return createSymbol(ASTPHP5Symbols.T_ELLIPSIS);
          }
        case 438: break;
        case 54:
          { return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 439: break;
        case 59:
          {
          }
        case 440: break;
        default:
          if (zzInput == YYEOF && (zzStartRead == zzCurrentPos || zzLexicalState == ST_DOCBLOCK)) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case ST_DOCBLOCK: {
              if (yytext().length() > 0) {
        yypushback(1);  // backup eof
        comment = yytext();
    }
    else {
        return createSymbol(ASTPHP5Symbols.EOF);
    }
            }
            case 834: break;
            default:
              {     return createSymbol(ASTPHP5Symbols.EOF);
 }
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
