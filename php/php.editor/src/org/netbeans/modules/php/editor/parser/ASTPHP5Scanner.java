/* The following code was generated by JFlex 1.4.3 on 20/10/21 16:29 */

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.netbeans.modules.php.editor.parser;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import org.netbeans.modules.php.editor.parser.astnodes.*;
import org.netbeans.modules.web.common.api.ByteStack;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP2", "UUF_UNUSED_FIELD"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20/10/21 16:29 from the specification file
 * <tt>/home/junichi11/NetBeansProjects/netbeans/php/php.editor/tools/ASTPHP5Scanner.flex</tt>
 */
public class ASTPHP5Scanner implements Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_DOCBLOCK = 28;
  public static final int ST_END_HEREDOC = 12;
  public static final int ST_DOUBLE_QUOTES = 4;
  public static final int ST_LOOKING_FOR_VARNAME = 22;
  public static final int ST_LOOKING_FOR_PROPERTY = 20;
  public static final int ST_IN_SHORT_ECHO = 32;
  public static final int ST_END_NOWDOC = 18;
  public static final int ST_COMMENT = 26;
  public static final int ST_ONE_LINE_COMMENT = 30;
  public static final int ST_HALTED_COMPILER = 34;
  public static final int ST_START_NOWDOC = 16;
  public static final int ST_VAR_OFFSET = 24;
  public static final int ST_IN_SCRIPTING = 2;
  public static final int ST_HEREDOC = 8;
  public static final int YYINITIAL = 0;
  public static final int ST_NOWDOC = 14;
  public static final int ST_START_HEREDOC = 10;
  public static final int ST_BACKQUOTE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
    16, 16, 17, 17
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\20\1\17\2\0\1\21\22\0\1\20\1\65\1\23\1\42"+
    "\1\22\1\71\1\72\1\103\1\61\1\62\1\67\1\5\1\75\1\54"+
    "\1\3\1\70\1\6\1\12\10\1\1\57\1\26\1\66\1\27\1\55"+
    "\1\56\1\100\1\10\1\11\1\36\1\32\1\4\1\33\1\52\1\47"+
    "\1\30\1\63\1\51\1\45\1\46\1\34\1\37\1\53\1\64\1\41"+
    "\1\40\1\31\1\35\1\60\1\50\1\7\1\44\1\14\1\43\1\16"+
    "\1\76\1\74\1\2\1\24\1\10\1\11\1\36\1\32\1\4\1\33"+
    "\1\52\1\47\1\30\1\63\1\51\1\45\1\46\1\34\1\37\1\53"+
    "\1\64\1\41\1\102\1\31\1\35\1\60\1\50\1\7\1\44\1\14"+
    "\1\25\1\73\1\101\1\77\53\14\1\14\12\14\1\14\4\14\1\14"+
    "\5\14\27\14\1\14\37\14\1\14\10\14\u01c2\13\4\0\14\13\16\0"+
    "\5\13\7\0\1\13\1\0\1\13\201\0\5\13\1\0\2\13\2\0"+
    "\4\13\10\0\1\13\1\0\3\13\1\0\1\13\1\0\24\13\1\0"+
    "\123\13\1\0\213\13\10\0\236\13\11\0\46\13\2\0\1\13\7\0"+
    "\47\13\110\0\33\13\5\0\3\13\55\0\53\13\25\0\12\15\4\0"+
    "\2\13\1\0\143\13\1\0\1\13\17\0\2\13\7\0\2\13\12\15"+
    "\3\13\2\0\1\13\20\0\1\13\1\0\36\13\35\0\131\13\13\0"+
    "\1\13\16\0\12\15\41\13\11\0\2\13\4\0\1\13\5\0\26\13"+
    "\4\0\1\13\11\0\1\13\3\0\1\13\27\0\31\13\107\0\1\13"+
    "\1\0\13\13\127\0\66\13\3\0\1\13\22\0\1\13\7\0\12\13"+
    "\4\0\12\15\1\0\7\13\1\0\7\13\5\0\10\13\2\0\2\13"+
    "\2\0\26\13\1\0\7\13\1\0\1\13\3\0\4\13\3\0\1\13"+
    "\20\0\1\13\15\0\2\13\1\0\3\13\4\0\12\15\2\13\23\0"+
    "\6\13\4\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13\1\0"+
    "\2\13\1\0\2\13\37\0\4\13\1\0\1\13\7\0\12\15\2\0"+
    "\3\13\20\0\11\13\1\0\3\13\1\0\26\13\1\0\7\13\1\0"+
    "\2\13\1\0\5\13\3\0\1\13\22\0\1\13\17\0\2\13\4\0"+
    "\12\15\25\0\10\13\2\0\2\13\2\0\26\13\1\0\7\13\1\0"+
    "\2\13\1\0\5\13\3\0\1\13\36\0\2\13\1\0\3\13\4\0"+
    "\12\15\1\0\1\13\21\0\1\13\1\0\6\13\3\0\3\13\1\0"+
    "\4\13\3\0\2\13\1\0\1\13\1\0\2\13\3\0\2\13\3\0"+
    "\3\13\3\0\14\13\26\0\1\13\25\0\12\15\25\0\10\13\1\0"+
    "\3\13\1\0\27\13\1\0\12\13\1\0\5\13\3\0\1\13\32\0"+
    "\2\13\6\0\2\13\4\0\12\15\25\0\10\13\1\0\3\13\1\0"+
    "\27\13\1\0\12\13\1\0\5\13\3\0\1\13\40\0\1\13\1\0"+
    "\2\13\4\0\12\15\1\0\2\13\22\0\10\13\1\0\3\13\1\0"+
    "\51\13\2\0\1\13\20\0\1\13\21\0\2\13\4\0\12\15\12\0"+
    "\6\13\5\0\22\13\3\0\30\13\1\0\11\13\1\0\1\13\2\0"+
    "\7\13\72\0\60\13\1\0\2\13\14\0\7\13\11\0\12\15\47\0"+
    "\2\13\1\0\1\13\2\0\2\13\1\0\1\13\2\0\1\13\6\0"+
    "\4\13\1\0\7\13\1\0\3\13\1\0\1\13\1\0\1\13\2\0"+
    "\2\13\1\0\4\13\1\0\2\13\11\0\1\13\2\0\5\13\1\0"+
    "\1\13\11\0\12\15\2\0\4\13\40\0\1\13\37\0\12\15\26\0"+
    "\10\13\1\0\44\13\33\0\5\13\163\0\53\13\24\0\1\13\12\15"+
    "\6\0\6\13\4\0\4\13\3\0\1\13\3\0\2\13\7\0\3\13"+
    "\4\0\15\13\14\0\1\13\1\0\12\15\6\0\46\13\1\0\1\13"+
    "\5\0\1\13\2\0\53\13\1\0\u014d\13\1\0\4\13\2\0\7\13"+
    "\1\0\1\13\1\0\4\13\2\0\51\13\1\0\4\13\2\0\41\13"+
    "\1\0\4\13\2\0\7\13\1\0\1\13\1\0\4\13\2\0\17\13"+
    "\1\0\71\13\1\0\4\13\2\0\103\13\45\0\20\13\20\0\125\13"+
    "\14\0\u026c\13\2\0\21\13\1\0\32\13\5\0\113\13\25\0\15\13"+
    "\1\0\4\13\16\0\22\13\16\0\22\13\16\0\15\13\1\0\3\13"+
    "\17\0\64\13\43\0\1\13\4\0\1\13\3\0\12\15\46\0\12\15"+
    "\6\0\130\13\10\0\51\13\1\0\1\13\5\0\106\13\12\0\35\13"+
    "\51\0\12\15\36\13\2\0\5\13\13\0\54\13\25\0\7\13\10\0"+
    "\12\15\46\0\27\13\11\0\65\13\53\0\12\15\6\0\12\15\15\0"+
    "\1\13\135\0\57\13\21\0\7\13\4\0\12\15\51\0\36\13\15\0"+
    "\2\13\12\15\54\13\32\0\44\13\34\0\12\15\3\0\3\13\12\15"+
    "\44\13\153\0\4\13\1\0\4\13\3\0\2\13\11\0\300\13\100\0"+
    "\u0116\13\2\0\6\13\2\0\46\13\2\0\6\13\2\0\10\13\1\0"+
    "\1\13\1\0\1\13\1\0\1\13\1\0\37\13\2\0\65\13\1\0"+
    "\7\13\1\0\1\13\3\0\3\13\1\0\7\13\3\0\4\13\2\0"+
    "\6\13\4\0\15\13\5\0\3\13\1\0\7\13\164\0\1\13\15\0"+
    "\1\13\20\0\15\13\145\0\1\13\4\0\1\13\2\0\12\13\1\0"+
    "\1\13\3\0\5\13\6\0\1\13\1\0\1\13\1\0\1\13\1\0"+
    "\4\13\1\0\13\13\2\0\4\13\5\0\5\13\4\0\1\13\64\0"+
    "\2\13\u0a7b\0\57\13\1\0\57\13\1\0\205\13\6\0\4\13\3\0"+
    "\2\13\14\0\46\13\1\0\1\13\5\0\1\13\2\0\70\13\7\0"+
    "\1\13\20\0\27\13\11\0\7\13\1\0\7\13\1\0\7\13\1\0"+
    "\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13\120\0"+
    "\1\13\u01d5\0\2\13\52\0\5\13\5\0\2\13\4\0\126\13\6\0"+
    "\3\13\1\0\132\13\1\0\4\13\5\0\51\13\3\0\136\13\21\0"+
    "\33\13\65\0\20\13\u0200\0\u19b6\13\112\0\u51cd\13\63\0\u048d\13\103\0"+
    "\56\13\2\0\u010d\13\3\0\20\13\12\15\2\13\24\0\57\13\20\0"+
    "\31\13\10\0\106\13\61\0\11\13\2\0\147\13\2\0\4\13\1\0"+
    "\4\13\14\0\13\13\115\0\12\13\1\0\3\13\1\0\4\13\1\0"+
    "\27\13\35\0\64\13\16\0\62\13\34\0\12\15\30\0\6\13\3\0"+
    "\1\13\4\0\12\15\34\13\12\0\27\13\31\0\35\13\7\0\57\13"+
    "\34\0\1\13\12\15\46\0\51\13\27\0\3\13\1\0\10\13\4\0"+
    "\12\15\6\0\27\13\3\0\1\13\5\0\60\13\1\0\1\13\3\0"+
    "\2\13\2\0\5\13\2\0\1\13\1\0\1\13\30\0\3\13\2\0"+
    "\13\13\7\0\3\13\14\0\6\13\2\0\6\13\2\0\6\13\11\0"+
    "\7\13\1\0\7\13\221\0\43\13\15\0\12\15\6\0\u2ba4\13\14\0"+
    "\27\13\4\0\61\13\u2104\0\u016e\13\2\0\152\13\46\0\7\13\14\0"+
    "\5\13\5\0\1\13\1\0\12\13\1\0\15\13\1\0\5\13\1\0"+
    "\1\13\1\0\2\13\1\0\2\13\1\0\154\13\41\0\u016b\13\22\0"+
    "\100\13\2\0\66\13\50\0\14\13\164\0\5\13\1\0\207\13\23\0"+
    "\12\15\7\0\32\13\6\0\32\13\13\0\131\13\3\0\6\13\2\0"+
    "\6\13\2\0\6\13\2\0\3\13\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\22\0\2\1\1\2\1\3\1\4\1\5\1\4\1\6"+
    "\1\3\4\4\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\12\4\1\17\1\20\6\4\1\21\1\22"+
    "\1\23\1\24\1\4\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\2\1\44\2\2\1\45\1\2\1\46"+
    "\2\2\1\47\1\2\1\50\1\2\2\50\2\51\3\52"+
    "\1\53\1\2\1\54\1\2\2\54\3\55\1\56\1\2"+
    "\1\57\1\60\2\57\1\61\1\62\1\63\1\5\1\6"+
    "\1\63\1\64\1\65\1\66\1\67\1\16\1\21\1\22"+
    "\1\23\1\24\1\25\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\70\1\71\1\72\1\73\2\2"+
    "\3\74\2\73\1\75\1\1\1\0\1\76\1\77\1\1"+
    "\1\0\1\100\1\0\1\4\1\100\1\0\1\101\6\4"+
    "\1\102\1\103\2\0\3\4\1\104\2\4\2\0\1\105"+
    "\3\0\1\106\1\0\1\107\1\110\1\111\7\4\1\112"+
    "\1\4\1\113\11\4\1\114\3\4\1\115\10\4\1\116"+
    "\1\117\1\120\1\121\1\122\1\0\1\123\1\124\1\125"+
    "\1\4\12\0\1\126\1\127\1\126\1\130\1\0\1\131"+
    "\1\132\1\133\1\134\1\17\1\135\1\136\1\137\1\140"+
    "\1\141\1\142\1\143\4\0\2\105\2\144\1\145\1\146"+
    "\1\144\3\0\1\105\3\147\3\0\1\150\1\0\2\151"+
    "\1\0\1\53\3\0\1\152\1\0\1\54\2\153\1\0"+
    "\1\56\1\0\1\154\2\0\1\155\2\0\1\156\2\0"+
    "\1\157\1\160\1\161\2\0\1\100\1\0\10\4\1\0"+
    "\1\162\7\4\2\100\1\163\1\4\1\164\2\4\1\0"+
    "\1\165\6\4\1\166\3\4\1\167\2\4\1\170\1\171"+
    "\2\4\1\172\23\4\1\173\1\174\2\123\1\175\1\176"+
    "\12\0\1\177\1\200\1\201\2\0\1\202\1\0\1\203"+
    "\1\0\2\136\1\204\1\0\1\204\1\44\1\204\1\46"+
    "\1\205\1\0\1\206\1\0\1\150\1\152\1\207\2\155"+
    "\1\210\2\0\17\4\1\211\1\212\1\4\1\213\23\4"+
    "\1\214\12\4\1\215\2\4\1\216\5\4\17\0\1\217"+
    "\3\0\1\44\1\46\1\205\2\0\12\4\1\220\5\4"+
    "\1\221\1\4\1\222\1\223\4\4\1\224\1\4\1\225"+
    "\1\226\3\4\1\227\3\4\1\230\1\231\2\4\1\232"+
    "\1\233\1\234\4\4\1\235\1\236\1\237\2\4\1\240"+
    "\2\4\5\0\1\241\6\0\2\242\5\0\3\243\2\244"+
    "\1\0\13\4\1\245\2\4\1\246\7\4\1\247\7\4"+
    "\1\250\1\251\1\252\1\4\1\0\1\253\1\254\2\4"+
    "\4\0\1\255\5\0\1\256\6\0\1\4\1\257\7\4"+
    "\1\260\6\4\1\261\3\4\1\262\1\263\1\264\1\4"+
    "\1\265\3\4\1\266\1\0\1\267\1\4\1\270\3\0"+
    "\1\271\1\0\2\272\4\0\1\4\1\273\3\4\1\274"+
    "\5\4\1\275\1\276\5\4\1\277\1\4\1\300\1\301"+
    "\1\4\1\0\1\4\1\302\1\303\5\0\1\304\2\4"+
    "\1\305\4\4\1\306\1\307\1\4\1\310\2\4\1\311"+
    "\1\4\1\0\1\312\5\0\2\4\1\313\1\4\1\314"+
    "\1\315\1\4\1\316\1\317\1\4\1\320\10\0\5\4"+
    "\7\0\1\321\2\4\1\322\1\323\2\0\1\324\1\0"+
    "\1\325\1\4\5\0\1\4\2\0\1\326\1\0\1\4"+
    "\7\0\1\327\7\0\1\76\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[804];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u0550"+
    "\0\u083c\0\u0880\0\u08c4\0\u0550\0\u0550\0\u0550\0\u0908\0\u094c"+
    "\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c"+
    "\0\u0bb0\0\u0bf4\0\u0550\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48"+
    "\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0550"+
    "\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144"+
    "\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550\0\u1188\0\u11cc\0\u1210"+
    "\0\u1254\0\u0550\0\u1298\0\u12dc\0\u1320\0\u1364\0\u0550\0\u13a8"+
    "\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u0550\0\u1584"+
    "\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760\0\u0550"+
    "\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u0550\0\u18b4\0\u18f8\0\u193c"+
    "\0\u0550\0\u1980\0\u19c4\0\u0550\0\u0550\0\u1a08\0\u0550\0\u0550"+
    "\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550"+
    "\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550"+
    "\0\u0550\0\u0550\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u0550"+
    "\0\u1ba0\0\u0550\0\u1be4\0\u0550\0\u0484\0\u1c28\0\u1c6c\0\u1cb0"+
    "\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u0550"+
    "\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u0550\0\u0550"+
    "\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u07f8\0\u21bc\0\u2200"+
    "\0\u2244\0\u1188\0\u2288\0\u08c4\0\u22cc\0\u2310\0\u0550\0\u2354"+
    "\0\u2398\0\u0550\0\u07f8\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec"+
    "\0\u2530\0\u2574\0\u07f8\0\u25b8\0\u07f8\0\u25fc\0\u2640\0\u2684"+
    "\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8\0\u281c\0\u07f8\0\u2860"+
    "\0\u28a4\0\u28e8\0\u0550\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c"+
    "\0\u2a80\0\u2ac4\0\u2b08\0\u0550\0\u0550\0\u0550\0\u0550\0\u2b4c"+
    "\0\u2b90\0\u2bd4\0\u2c18\0\u0550\0\u2c5c\0\u2ca0\0\u2ce4\0\u0f24"+
    "\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04"+
    "\0\u2f48\0\u0550\0\u2f8c\0\u2fd0\0\u0550\0\u3014\0\u0550\0\u3058"+
    "\0\u0550\0\u0550\0\u309c\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550"+
    "\0\u30e0\0\u1210\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3124\0\u0550"+
    "\0\u0550\0\u0550\0\u3168\0\u1320\0\u3234\0\u3278\0\u32bc\0\u3234"+
    "\0\u0550\0\u3278\0\u3300\0\u3344\0\u3388\0\u33cc\0\u3410\0\u1584"+
    "\0\u0550\0\u15c8\0\u0550\0\u1650\0\u16d8\0\u1694\0\u3454\0\u3498"+
    "\0\u34dc\0\u17a4\0\u0550\0\u17e8\0\u0550\0\u1870\0\u0550\0\u3520"+
    "\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u0550\0\u1ad4\0\u3674\0\u0550"+
    "\0\u0550\0\u0550\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u380c"+
    "\0\u3850\0\u3894\0\u38d8\0\u391c\0\u3960\0\u39a4\0\u39e8\0\u0550"+
    "\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4\0\u3c08"+
    "\0\u3c4c\0\u07f8\0\u3c90\0\u07f8\0\u3cd4\0\u3d18\0\u3d5c\0\u0550"+
    "\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4\0\u07f8\0\u3f38"+
    "\0\u3f7c\0\u3fc0\0\u07f8\0\u4004\0\u4048\0\u408c\0\u07f8\0\u40d0"+
    "\0\u4114\0\u07f8\0\u4158\0\u419c\0\u41e0\0\u4224\0\u4268\0\u42ac"+
    "\0\u42f0\0\u4334\0\u4378\0\u43bc\0\u4400\0\u4444\0\u4488\0\u44cc"+
    "\0\u4510\0\u4554\0\u4598\0\u45dc\0\u4620\0\u0550\0\u0550\0\u0550"+
    "\0\u4664\0\u0550\0\u07f8\0\u46a8\0\u46ec\0\u4730\0\u4774\0\u47b8"+
    "\0\u47fc\0\u4840\0\u4884\0\u48c8\0\u490c\0\u0550\0\u0550\0\u0550"+
    "\0\u4950\0\u4994\0\u0550\0\u49d8\0\u4a1c\0\u4a60\0\u0550\0\u4aa4"+
    "\0\u0550\0\u4ae8\0\u11cc\0\u4b2c\0\u12dc\0\u4b70\0\u4bb4\0\u4bf8"+
    "\0\u0550\0\u4c3c\0\u0550\0\u0550\0\u0550\0\u4c80\0\u4cc4\0\u0550"+
    "\0\u4d08\0\u4d4c\0\u4d90\0\u4dd4\0\u4e18\0\u4e5c\0\u4ea0\0\u4ee4"+
    "\0\u4f28\0\u4f6c\0\u4fb0\0\u4ff4\0\u5038\0\u507c\0\u50c0\0\u5104"+
    "\0\u5148\0\u07f8\0\u518c\0\u51d0\0\u07f8\0\u5214\0\u5258\0\u529c"+
    "\0\u52e0\0\u5324\0\u5368\0\u53ac\0\u53f0\0\u5434\0\u5478\0\u54bc"+
    "\0\u5500\0\u5544\0\u5588\0\u55cc\0\u5610\0\u5654\0\u5698\0\u56dc"+
    "\0\u07f8\0\u5720\0\u5764\0\u57a8\0\u57ec\0\u5830\0\u5874\0\u58b8"+
    "\0\u58fc\0\u5940\0\u5984\0\u07f8\0\u59c8\0\u5a0c\0\u07f8\0\u5a50"+
    "\0\u5a94\0\u5ad8\0\u5b1c\0\u5b60\0\u5ba4\0\u5be8\0\u5c2c\0\u5c70"+
    "\0\u5cb4\0\u5cf8\0\u5d3c\0\u5d80\0\u5dc4\0\u5e08\0\u5e4c\0\u5e90"+
    "\0\u5ed4\0\u5f18\0\u5f5c\0\u0550\0\u5fa0\0\u5fe4\0\u6028\0\u606c"+
    "\0\u60b0\0\u0550\0\u60f4\0\u6138\0\u617c\0\u61c0\0\u6204\0\u6248"+
    "\0\u628c\0\u62d0\0\u6314\0\u6358\0\u639c\0\u63e0\0\u07f8\0\u6424"+
    "\0\u6468\0\u64ac\0\u64f0\0\u6534\0\u07f8\0\u6578\0\u07f8\0\u07f8"+
    "\0\u65bc\0\u6600\0\u6644\0\u6688\0\u07f8\0\u66cc\0\u07f8\0\u07f8"+
    "\0\u6710\0\u6754\0\u6798\0\u67dc\0\u6820\0\u6864\0\u68a8\0\u07f8"+
    "\0\u07f8\0\u68ec\0\u6930\0\u07f8\0\u07f8\0\u07f8\0\u6974\0\u69b8"+
    "\0\u69fc\0\u6a40\0\u6a84\0\u07f8\0\u07f8\0\u6ac8\0\u6b0c\0\u07f8"+
    "\0\u6b50\0\u6b94\0\u6bd8\0\u6c1c\0\u6c60\0\u6ca4\0\u6ce8\0\u0550"+
    "\0\u6d2c\0\u6d70\0\u6db4\0\u6df8\0\u6e3c\0\u6e80\0\u0550\0\u6ec4"+
    "\0\u6f08\0\u6f4c\0\u6f90\0\u6fd4\0\u7018\0\u0550\0\u11cc\0\u12dc"+
    "\0\u0550\0\u705c\0\u70a0\0\u70e4\0\u7128\0\u716c\0\u71b0\0\u71f4"+
    "\0\u7238\0\u727c\0\u72c0\0\u7304\0\u7348\0\u738c\0\u73d0\0\u7414"+
    "\0\u7458\0\u07f8\0\u749c\0\u74e0\0\u7524\0\u7568\0\u75ac\0\u75f0"+
    "\0\u7634\0\u07f8\0\u7678\0\u76bc\0\u7700\0\u7744\0\u7788\0\u77cc"+
    "\0\u7810\0\u07f8\0\u07f8\0\u07f8\0\u7854\0\u7898\0\u07f8\0\u07f8"+
    "\0\u78dc\0\u7920\0\u7964\0\u79a8\0\u79ec\0\u7a30\0\u0550\0\u7a74"+
    "\0\u7ab8\0\u7afc\0\u7b40\0\u7b84\0\u0550\0\u7bc8\0\u7c0c\0\u7c50"+
    "\0\u7c94\0\u7cd8\0\u7d1c\0\u7d60\0\u07f8\0\u7da4\0\u7de8\0\u7e2c"+
    "\0\u7e70\0\u7eb4\0\u7ef8\0\u7f3c\0\u07f8\0\u7f80\0\u7fc4\0\u8008"+
    "\0\u804c\0\u8090\0\u80d4\0\u8118\0\u815c\0\u81a0\0\u81e4\0\u07f8"+
    "\0\u07f8\0\u07f8\0\u8228\0\u07f8\0\u826c\0\u82b0\0\u82f4\0\u8338"+
    "\0\u837c\0\u07f8\0\u83c0\0\u0550\0\u8404\0\u8448\0\u848c\0\u0550"+
    "\0\u84d0\0\u0550\0\u8514\0\u8558\0\u859c\0\u85e0\0\u8624\0\u8668"+
    "\0\u07f8\0\u86ac\0\u86f0\0\u8734\0\u07f8\0\u8778\0\u87bc\0\u8800"+
    "\0\u8844\0\u8888\0\u07f8\0\u07f8\0\u88cc\0\u8910\0\u8954\0\u8998"+
    "\0\u89dc\0\u07f8\0\u8a20\0\u07f8\0\u07f8\0\u8a64\0\u8aa8\0\u8aec"+
    "\0\u0550\0\u0550\0\u8b30\0\u8b74\0\u8bb8\0\u8bfc\0\u8c40\0\u07f8"+
    "\0\u8c84\0\u8cc8\0\u07f8\0\u8d0c\0\u8d50\0\u8d94\0\u8dd8\0\u07f8"+
    "\0\u07f8\0\u8e1c\0\u07f8\0\u8e60\0\u8ea4\0\u07f8\0\u8ee8\0\u8f2c"+
    "\0\u07f8\0\u8f70\0\u8fb4\0\u8ff8\0\u903c\0\u9080\0\u90c4\0\u9108"+
    "\0\u07f8\0\u914c\0\u07f8\0\u07f8\0\u9190\0\u07f8\0\u07f8\0\u91d4"+
    "\0\u0550\0\u9218\0\u925c\0\u92a0\0\u92e4\0\u9328\0\u936c\0\u93b0"+
    "\0\u93f4\0\u9438\0\u947c\0\u94c0\0\u9504\0\u9548\0\u958c\0\u95d0"+
    "\0\u9614\0\u9658\0\u969c\0\u96e0\0\u9724\0\u07f8\0\u9768\0\u97ac"+
    "\0\u07f8\0\u07f8\0\u97f0\0\u9834\0\u0550\0\u9878\0\u07f8\0\u98bc"+
    "\0\u9900\0\u9944\0\u9988\0\u99cc\0\u9a10\0\u9a54\0\u9a98\0\u9adc"+
    "\0\u9900\0\u9b20\0\u9b64\0\u9ba8\0\u9bec\0\u9c30\0\u9c74\0\u9cb8"+
    "\0\u9cfc\0\u9d40\0\u0550\0\u9d84\0\u9dc8\0\u9e0c\0\u9e50\0\u9e94"+
    "\0\u9ed8\0\u9f1c\0\u0550\0\u9f60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[804];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\66\23\1\24\15\23\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\26\2\37\1\25"+
    "\1\40\3\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\37"+
    "\1\67\1\37\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\2\37\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\1\115\1\60\1\116\16\117\1\120\3\117\1\121\1\122"+
    "\1\117\1\123\56\117\16\124\1\125\3\124\1\126\1\124"+
    "\1\127\1\130\56\124\16\131\1\132\1\133\1\131\1\134"+
    "\1\135\2\131\1\136\56\131\2\137\1\140\1\137\1\140"+
    "\2\137\3\140\1\137\2\140\3\137\1\141\7\137\12\140"+
    "\2\137\10\140\4\137\1\140\2\137\2\140\15\137\1\140"+
    "\1\137\2\25\1\142\1\25\1\142\2\25\3\142\1\25"+
    "\2\142\3\25\1\143\7\25\12\142\2\25\10\142\4\25"+
    "\1\142\2\25\2\142\15\25\1\142\1\25\2\144\1\145"+
    "\1\144\1\145\2\144\3\145\2\144\1\145\2\144\1\146"+
    "\1\144\1\147\6\144\12\145\2\144\10\145\4\144\1\145"+
    "\2\144\2\145\15\144\1\145\1\144\2\150\1\151\1\150"+
    "\1\151\2\150\3\151\1\150\2\151\3\150\1\152\7\150"+
    "\12\151\2\150\10\151\4\150\1\151\2\150\2\151\15\150"+
    "\1\151\1\150\2\25\1\153\1\25\1\153\2\25\3\153"+
    "\1\25\2\153\3\25\1\154\7\25\12\153\2\25\10\153"+
    "\4\25\1\153\2\25\2\153\15\25\1\153\1\25\2\155"+
    "\1\156\1\155\1\156\2\155\3\156\1\155\2\156\2\155"+
    "\3\41\6\155\12\156\2\155\10\156\1\157\1\155\1\160"+
    "\1\155\1\156\2\155\2\156\15\155\1\156\1\155\2\161"+
    "\1\162\1\161\1\162\2\161\3\162\1\161\2\162\13\161"+
    "\12\162\2\161\10\162\4\161\1\162\2\161\2\162\15\161"+
    "\1\162\1\161\1\25\1\163\1\37\1\164\1\37\1\165"+
    "\1\166\3\37\1\163\2\37\1\25\4\167\1\42\1\170"+
    "\1\171\1\172\1\46\1\173\12\37\1\167\1\63\10\37"+
    "\1\174\1\175\1\176\1\177\1\37\1\200\1\100\2\37"+
    "\1\201\1\202\1\203\1\204\1\205\1\206\1\207\1\210"+
    "\1\111\1\211\1\113\1\114\1\212\1\37\1\167\67\213"+
    "\1\214\14\213\67\215\1\216\14\215\17\217\1\220\1\217"+
    "\1\221\33\217\1\222\1\223\12\217\1\223\12\217\27\0"+
    "\1\224\54\0\104\225\66\23\1\226\73\23\1\227\7\23"+
    "\1\0\2\23\1\230\10\23\1\231\1\23\105\0\1\26"+
    "\1\232\1\233\1\234\1\0\1\26\3\0\1\26\72\0"+
    "\1\37\1\235\1\0\1\37\1\0\10\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\1\236\1\0\1\237\2\0\1\236\3\0\1\236"+
    "\14\0\1\240\55\0\2\37\1\0\1\37\1\0\1\37"+
    "\1\241\6\37\12\0\4\37\1\242\1\37\1\243\3\37"+
    "\2\0\1\37\1\244\1\245\5\37\4\0\1\246\2\0"+
    "\2\37\15\0\1\37\6\0\1\247\21\0\1\250\55\0"+
    "\1\26\1\232\1\233\1\234\1\0\1\26\1\251\1\0"+
    "\1\252\1\26\72\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\7\37\1\253\2\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\3\37\1\254\4\37\12\0\4\37\1\255\3\37"+
    "\1\256\1\257\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\256\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\5\0\1\43\4\0\11\37\1\260\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\1\0\1\261\13\0\1\37\1\262"+
    "\1\0\2\37\1\0\1\37\1\0\10\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\20\0\3\41\64\0\1\263\1\0\1\263\2\0\3\263"+
    "\1\0\2\263\13\0\12\263\2\0\10\263\4\0\1\263"+
    "\2\0\2\263\15\0\1\263\1\0\16\264\1\265\3\264"+
    "\1\266\1\267\1\264\1\270\56\264\27\0\1\271\25\0"+
    "\1\272\27\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\3\37\1\273\1\274\3\37\1\275\1\37\2\0\2\37"+
    "\1\276\5\37\4\0\1\37\2\0\2\37\15\0\1\275"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\11\37"+
    "\1\277\2\0\3\37\1\300\4\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\301\1\0"+
    "\10\37\12\0\1\302\6\37\1\303\2\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\10\37\12\0\1\304\3\37\1\305"+
    "\1\306\1\37\1\307\2\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\310"+
    "\1\0\2\37\1\311\5\37\12\0\12\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\10\37\12\0\4\37\1\312\3\37"+
    "\1\313\1\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\313\2\0\2\37\1\0\1\37\1\0\2\37"+
    "\1\314\5\37\12\0\7\37\1\315\2\37\2\0\1\37"+
    "\1\316\6\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\11\37"+
    "\1\317\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\1\37\1\320\10\37\2\0\4\37\1\321\3\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\322\1\0\10\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\44\0\1\323\41\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\1\324\11\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\1\325"+
    "\11\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\2\37\1\326"+
    "\5\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\12\37\2\0\3\37\1\327\4\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\7\37\1\330\2\37\2\0"+
    "\1\37\1\331\6\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\5\37\1\332\3\37\1\333\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\30\0\1\334\24\0\1\335"+
    "\1\336\55\0\1\337\25\0\1\340\102\0\1\341\1\342"+
    "\1\343\104\0\1\344\25\0\2\37\1\0\1\37\1\0"+
    "\2\37\1\345\5\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\11\0\1\346\1\347"+
    "\6\0\1\350\7\0\1\351\1\0\1\352\1\353\1\0"+
    "\1\354\1\0\1\355\1\356\1\357\40\0\1\356\30\0"+
    "\1\360\103\0\1\361\25\0\1\362\10\0\1\363\1\0"+
    "\1\364\42\0\1\365\37\0\1\366\43\0\1\367\37\0"+
    "\1\370\1\371\42\0\1\372\25\0\1\373\55\0\1\374"+
    "\42\0\1\375\40\0\1\376\43\0\1\377\37\0\1\u0100"+
    "\54\0\16\262\1\u0101\64\262\1\267\16\117\1\u0102\3\117"+
    "\1\u0103\1\0\1\117\1\u0104\164\117\1\u0105\1\117\1\u0105"+
    "\2\117\3\u0105\1\117\1\u0106\1\u0105\1\117\1\u0102\3\117"+
    "\1\u0107\1\u0108\1\117\1\u0109\2\117\12\u0105\2\117\10\u0105"+
    "\4\117\1\u0105\2\117\2\u0105\15\117\1\u0105\17\117\1\u0102"+
    "\3\117\1\u010a\1\u0108\1\117\1\u010b\56\117\16\124\1\u010c"+
    "\3\124\1\u010d\1\124\1\0\1\u010e\164\124\1\u0105\1\124"+
    "\1\u0105\2\124\3\u0105\1\124\1\u010f\1\u0105\1\124\1\u010c"+
    "\3\124\1\u0110\1\124\1\u0111\1\u0109\2\124\12\u0105\2\124"+
    "\10\u0105\4\124\1\u0105\2\124\2\u0105\15\124\1\u0105\17\124"+
    "\1\u010c\3\124\1\u010a\1\124\1\u0111\1\u0112\56\124\16\131"+
    "\1\u0113\1\0\1\131\1\0\1\u0114\2\131\1\u0115\164\131"+
    "\1\u0116\1\131\1\u0116\2\131\3\u0116\1\131\2\u0116\1\131"+
    "\1\u0113\1\0\1\133\1\0\1\u0114\2\131\1\u0115\2\131"+
    "\12\u0116\2\131\10\u0116\4\131\1\u0116\2\131\2\u0116\15\131"+
    "\1\u0116\3\131\1\u0116\1\131\1\u0116\2\131\3\u0116\1\131"+
    "\2\u0116\1\131\1\u0113\1\u0117\1\133\1\0\1\u0114\2\131"+
    "\1\u0115\2\131\12\u0116\2\131\10\u0116\4\131\1\u0116\2\131"+
    "\2\u0116\15\131\1\u0116\1\131\2\0\1\u0105\1\0\1\u0105"+
    "\2\0\3\u0105\1\0\2\u0105\10\0\1\u0109\2\0\12\u0105"+
    "\2\0\10\u0105\4\0\1\u0105\2\0\2\u0105\15\0\1\u0105"+
    "\23\0\1\u010a\61\0\17\u0118\1\u0119\1\u0118\1\u0119\62\u0118"+
    "\2\0\1\u0118\1\0\1\u0118\2\0\3\u0118\1\0\2\u0118"+
    "\3\0\1\u011a\7\0\12\u0118\2\0\10\u0118\4\0\1\u0118"+
    "\2\0\2\u0118\15\0\1\u0118\2\0\2\142\1\0\1\142"+
    "\1\0\10\142\10\0\1\u011b\1\0\12\142\2\0\10\142"+
    "\4\0\1\142\2\0\2\142\15\0\1\142\3\0\1\142"+
    "\1\0\1\142\2\0\3\142\1\0\2\142\3\0\1\u011c"+
    "\7\0\12\142\2\0\10\142\4\0\1\142\2\0\2\142"+
    "\15\0\1\142\1\0\17\144\1\0\1\144\1\0\63\144"+
    "\2\u011d\1\144\1\u011d\1\144\5\u011d\1\144\1\u011d\2\144"+
    "\1\0\1\144\1\0\4\144\1\u011e\1\144\12\u011d\2\144"+
    "\10\u011d\4\144\1\u011d\2\144\2\u011d\15\144\1\u011d\3\144"+
    "\1\u011f\1\144\1\u011f\2\144\3\u011f\1\144\2\u011f\2\144"+
    "\1\u0120\1\u0121\1\u0120\6\144\12\u011f\2\144\10\u011f\4\144"+
    "\1\u011f\2\144\2\u011f\15\144\1\u011f\3\144\1\u011f\1\144"+
    "\1\u011f\2\144\3\u011f\1\144\2\u011f\2\144\1\146\1\u0121"+
    "\1\u0120\6\144\12\u011f\2\144\10\u011f\4\144\1\u011f\2\144"+
    "\2\u011f\15\144\1\u011f\1\144\17\u0122\1\u0123\1\u0122\1\u0123"+
    "\62\u0122\2\0\1\u0122\1\0\1\u0122\2\0\3\u0122\1\0"+
    "\2\u0122\3\0\1\u0124\7\0\12\u0122\2\0\10\u0122\4\0"+
    "\1\u0122\2\0\2\u0122\15\0\1\u0122\2\0\2\153\1\0"+
    "\1\153\1\0\10\153\10\0\1\u0125\1\0\12\153\2\0"+
    "\10\153\4\0\1\153\2\0\2\153\15\0\1\153\3\0"+
    "\1\153\1\0\1\153\2\0\3\153\1\0\2\153\3\0"+
    "\1\u0126\7\0\12\153\2\0\10\153\4\0\1\153\2\0"+
    "\2\153\15\0\1\153\2\0\2\156\1\0\1\156\1\0"+
    "\10\156\12\0\12\156\2\0\10\156\4\0\1\156\2\0"+
    "\2\156\15\0\1\156\56\0\1\u0127\102\0\1\u0128\30\0"+
    "\2\162\1\0\1\162\1\0\10\162\12\0\12\162\2\0"+
    "\10\162\4\0\1\162\2\0\2\162\15\0\1\162\2\0"+
    "\1\163\1\u0129\3\0\1\163\3\0\1\163\72\0\1\u012a"+
    "\1\u0129\3\0\1\u012a\1\u012b\1\0\1\u012c\1\u012a\71\0"+
    "\67\213\1\0\14\213\70\0\1\u012d\13\0\67\u012e\1\u012f"+
    "\103\u012e\1\u012f\1\u0130\13\u012e\17\217\1\220\1\217\1\221"+
    "\33\217\2\220\12\217\1\220\12\217\17\0\1\220\141\0"+
    "\1\u0131\26\0\56\23\1\0\7\23\1\0\2\23\1\0"+
    "\10\23\1\0\1\23\27\0\1\u0132\23\0\1\u0133\57\0"+
    "\1\u0132\112\0\1\u0134\46\0\1\26\4\0\1\26\3\0"+
    "\1\26\72\0\1\236\2\0\1\234\1\0\1\236\3\0"+
    "\1\236\72\0\1\u0135\3\0\1\u0136\1\u0135\3\0\1\u0135"+
    "\41\0\1\u0136\30\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\1\37\1\u0137\1\u0138\1\u0139\1\u013a\1\37\1\u013b"+
    "\3\37\2\0\1\37\1\u013c\1\u013d\1\u013e\4\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\1\236\1\u013f"+
    "\1\0\1\234\1\0\1\236\3\0\1\236\74\0\1\u0140"+
    "\101\0\2\37\1\0\1\37\1\0\10\37\12\0\1\u0141"+
    "\1\u0142\10\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\2\37\1\u0143\7\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\10\37\12\0\12\37\2\0\3\37\1\u0144\4\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\10\37\12\0\10\37\1\u0145\1\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\u0145"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\12\37"+
    "\2\0\7\37\1\u0146\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\2\37\1\u0147"+
    "\5\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\1\u0148\2\0\1\u0148\1\0"+
    "\1\u0148\1\0\3\u0148\17\0\2\u0148\2\0\1\u0148\53\0"+
    "\1\u0149\3\0\1\u0149\72\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\11\37\1\u014a\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\10\37\12\0\10\37\1\u014b\1\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\u014b\2\0\2\37"+
    "\1\0\1\37\1\0\10\37\12\0\2\37\1\u014c\7\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\11\37"+
    "\1\u014d\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\u014e\1\0\10\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\67\0\1\u014f\16\0\2\263\1\0\1\263\1\0"+
    "\10\263\12\0\12\263\2\0\10\263\4\0\1\263\2\0"+
    "\2\263\15\0\1\263\1\0\106\264\1\0\1\264\1\0"+
    "\2\264\3\0\2\264\1\0\1\264\1\265\3\264\1\266"+
    "\1\267\1\264\1\0\2\264\12\0\2\264\10\0\4\264"+
    "\1\0\2\264\2\0\15\264\1\0\17\264\1\265\3\264"+
    "\1\0\1\267\1\264\1\270\56\264\27\0\1\u0150\55\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\1\37\1\u0151"+
    "\4\37\1\u0152\1\37\1\u0153\1\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\u0153\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\10\37\1\u0154\1\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\u0154\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\12\37\2\0"+
    "\7\37\1\u0155\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\2\37\1\u0156\5\37"+
    "\12\0\12\37\2\0\1\u0157\7\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\11\37\1\u0158\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\10\37\12\0\3\37\1\u0159\2\37\1\u015a\3\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\u015b\1\0\10\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\4\37"+
    "\1\u015c\5\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\4\37\1\u015d\5\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\10\37\12\0\11\37\1\u015e\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\12\37\2\0\4\37\1\u015f"+
    "\3\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\12\37\2\0"+
    "\2\37\1\u0160\5\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\10\37\1\u0161\1\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\u0161\2\0\2\37\1\0\1\u0162\1\0"+
    "\10\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\1\37\1\u0163\6\37\1\u0164\1\37\2\0"+
    "\1\37\1\u0165\6\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\u0164\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\4\37\1\u0166\5\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\2\37\1\u0167\5\37\12\0\7\37\1\u0168\2\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\2\37\1\u0169\5\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\1\u016a\11\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\1\37\1\u016b\10\37\2\0\10\37\4\0\1\37"+
    "\2\0\1\37\1\u016c\15\0\1\37\2\0\2\37\1\0"+
    "\1\u016d\1\0\10\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\10\37\1\u016e\1\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\u016e\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\1\37\1\u016f"+
    "\10\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\1\u0170\11\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\1\37\1\u0171\10\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\10\37\12\0\7\37\1\u0172\2\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\3\37\1\u0173\4\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\1\u0174"+
    "\6\37\1\u0175\2\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\30\0\1\u0176\131\0\1\u0177\45\0"+
    "\1\u0178\1\0\1\u0179\111\0\1\u017a\55\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\11\37\1\u017b\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\42\0\1\u017c"+
    "\72\0\1\u017d\6\0\1\u017e\100\0\1\u017f\106\0\1\u0180"+
    "\111\0\1\u0181\72\0\1\u0182\60\0\1\u0183\123\0\1\u0184"+
    "\56\0\1\u0185\126\0\1\u0186\131\0\1\u0187\55\0\1\u0188"+
    "\36\0\1\u0189\55\0\1\u018a\41\0\1\u018a\30\0\1\u018b"+
    "\73\0\3\u018c\45\0\1\u018d\10\0\1\u018e\22\0\1\u018f"+
    "\1\0\1\u0190\62\0\104\262\2\117\1\0\1\117\1\0"+
    "\2\117\3\0\2\117\1\0\1\117\1\u0102\3\117\1\u0107"+
    "\1\u0108\1\117\1\0\2\117\12\0\2\117\10\0\4\117"+
    "\1\0\2\117\2\0\15\117\1\0\17\117\1\u0102\3\117"+
    "\1\0\1\u0108\1\117\1\u010b\56\117\1\0\2\u0105\1\0"+
    "\1\u0105\1\0\10\u0105\12\0\12\u0105\1\0\1\u0191\10\u0105"+
    "\1\u0192\3\0\1\u0105\2\0\2\u0105\15\0\1\u0105\1\0"+
    "\1\117\2\u0106\1\117\1\u0106\1\117\10\u0106\1\u0102\3\117"+
    "\1\u0103\1\0\1\117\1\u0104\2\117\12\u0106\1\117\1\u0193"+
    "\10\u0106\1\u0194\3\117\1\u0106\2\117\2\u0106\15\117\1\u0106"+
    "\1\117\2\124\1\0\1\124\1\0\2\124\3\0\2\124"+
    "\1\0\1\124\1\u010c\3\124\1\u0110\1\124\1\u0111\1\0"+
    "\2\124\12\0\2\124\10\0\4\124\1\0\2\124\2\0"+
    "\15\124\1\0\17\124\1\u010c\3\124\1\0\1\124\1\u0111"+
    "\1\u0112\57\124\2\u010f\1\124\1\u010f\1\124\10\u010f\1\u010c"+
    "\3\124\1\u010d\1\124\1\0\1\u010e\2\124\12\u010f\1\124"+
    "\1\u0195\10\u010f\1\u0196\3\124\1\u010f\2\124\2\u010f\15\124"+
    "\1\u010f\1\124\17\131\1\0\1\131\1\0\64\131\1\u0197"+
    "\1\131\1\u0197\2\131\3\u0197\2\131\1\u0197\1\131\1\u0113"+
    "\1\0\1\131\1\0\1\u0198\2\131\1\u0199\2\131\12\u0197"+
    "\2\131\10\u0197\4\131\1\u0197\2\131\2\u0197\15\131\1\u0197"+
    "\17\131\1\u0113\1\0\1\131\1\0\1\u0199\2\131\1\u019a"+
    "\56\131\17\u0116\1\u019b\1\u0116\1\u019b\62\u0116\2\0\1\u0116"+
    "\1\0\1\u0116\2\0\3\u0116\1\0\2\u0116\3\0\1\u0117"+
    "\7\0\12\u0116\2\0\10\u0116\4\0\1\u0116\2\0\2\u0116"+
    "\15\0\1\u0116\1\0\17\u011f\1\u019c\1\u011f\1\u019c\62\u011f"+
    "\2\144\1\u011d\1\144\1\u011d\2\144\3\u011d\2\144\1\u011d"+
    "\2\144\1\u0120\1\144\1\u0120\6\144\12\u011d\2\144\10\u011d"+
    "\4\144\1\u011d\2\144\2\u011d\15\144\1\u011d\3\144\1\u011f"+
    "\1\144\1\u011f\2\144\3\u011f\1\144\2\u011f\2\144\1\0"+
    "\1\u0121\1\0\6\144\12\u011f\2\144\10\u011f\4\144\1\u011f"+
    "\2\144\2\u011f\15\144\1\u011f\1\144\55\0\1\u019d\27\0"+
    "\1\u012a\4\0\1\u012a\3\0\1\u012a\72\0\1\u012a\1\u0129"+
    "\3\0\1\u012a\3\0\1\u012a\72\0\1\u019e\2\0\1\u019e"+
    "\1\0\1\u019e\1\0\3\u019e\17\0\2\u019e\2\0\1\u019e"+
    "\53\0\1\u019f\3\0\1\u019f\71\0\67\u012e\1\u012f\1\u01a0"+
    "\13\u012e\47\0\1\u01a1\75\0\1\u01a2\43\0\1\u0135\1\u0136"+
    "\3\0\1\u0135\3\0\1\u0135\72\0\1\u0135\4\0\1\u0135"+
    "\3\0\1\u0135\72\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\11\37\1\u01a3\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\1\u01a4\11\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\10\37\12\0\1\u01a5\4\37\1\u01a6\4\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\2\37\1\u01a7\5\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\12\37\2\0\1\37\1\u01a8\6\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\1\u01a9\11\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\u01aa"+
    "\1\0\10\37\12\0\12\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\2\37\1\u01ab\5\37\12\0\12\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\1\236"+
    "\4\0\1\236\3\0\1\236\72\0\2\37\1\0\1\37"+
    "\1\0\10\37\12\0\1\37\1\u015b\10\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\u01ac\1\0\10\37\12\0\12\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\10\37\12\0\1\u01ad\1\37\1\u01ae"+
    "\1\u01af\4\37\1\u01b0\1\37\2\0\4\37\1\u01b1\3\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\u01b0\2\0\2\37"+
    "\1\0\1\37\1\0\10\37\12\0\7\37\1\u01b2\2\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\u01b3\1\0\10\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\1\37"+
    "\1\u01b4\10\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\12\37\2\0\1\37\1\u01b5\6\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\1\u0148\1\251\1\0"+
    "\1\u0148\1\0\1\u0148\1\0\3\u0148\17\0\2\u0148\2\0"+
    "\1\u0148\47\0\1\252\3\0\1\u0149\3\0\1\u0149\72\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\1\37\1\u01b6"+
    "\10\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\2\37\1\u01b7"+
    "\5\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\2\37\1\u01b8\5\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\67\0\1\u0189\16\0"+
    "\2\37\1\0\1\u01b9\1\0\10\37\12\0\12\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\12\37\2\0"+
    "\1\37\1\u01ba\6\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\1\37\1\u01bb\10\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\u01bc\1\0"+
    "\10\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\12\37\2\0\1\37\1\u01bd\6\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\1\u01be\11\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\10\37\12\0\7\37\1\u01bf\2\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\2\37\1\u01c0\5\37"+
    "\12\0\1\u01c1\11\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\12\37\2\0\1\37\1\u01c2\6\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\2\37\1\u01c3\5\37\12\0\12\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\6\37\1\u01c4"+
    "\3\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\u01c5\1\0\10\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\u01c6\1\0\10\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\u01c7\1\0\10\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\6\37\1\u01c8\3\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\u01c9\1\0"+
    "\10\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\12\37\2\0\1\37\1\u01ca\6\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\1\37\1\u01cb\6\37\1\u01cc"+
    "\1\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\u01cc\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\10\37\1\u01cd\1\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\u01cd\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\4\37\1\u01ce\5\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\1\37\1\u01cf\10\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\1\37\1\u01d0"+
    "\10\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\5\37\1\u01d1\4\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\5\37\1\u01d2\4\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\12\37\2\0\1\37\1\u01d3"+
    "\6\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\1\37\1\u01d4"+
    "\10\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\6\37\1\u01d5\3\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\12\37\2\0\1\37\1\u01d6\6\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\7\37\1\u01d7\2\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\3\37\1\u01d8\4\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\12\37\2\0\1\37\1\u01d9\6\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\4\37\1\u01da\5\37\2\0\10\37\4\0"+
    "\1\u01db\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\1\37\1\u01dc\10\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\20\0"+
    "\1\u0178\125\0\1\u01dd\76\0\1\u01de\106\0\1\u01df\75\0"+
    "\1\u01e0\107\0\1\u01e1\105\0\1\u01e2\104\0\1\u01e3\41\0"+
    "\1\u01e3\64\0\1\u01e4\61\0\1\u01e5\52\0\1\u01e6\75\0"+
    "\1\u01e7\1\0\1\u01e7\2\0\3\u01e7\1\0\2\u01e7\3\0"+
    "\1\u0189\2\0\1\u01e8\4\0\12\u01e7\2\0\10\u01e7\4\0"+
    "\1\u01e7\2\0\2\u01e7\15\0\1\u01e7\1\u01e9\36\0\1\u01ea"+
    "\64\0\3\u018c\56\0\1\u018e\22\0\3\u01eb\46\0\1\u01ec"+
    "\7\0\1\u01ed\63\0\1\u01ee\42\0\1\u018f\141\0\1\u01ef"+
    "\26\0\16\117\1\u0102\3\117\1\u0103\1\0\1\117\1\u0104"+
    "\27\117\1\u01f0\26\117\16\124\1\u010c\3\124\1\u010d\1\124"+
    "\1\0\1\u010e\27\124\1\u01f1\26\124\1\0\2\u0197\1\0"+
    "\1\u0197\1\0\10\u0197\12\0\12\u0197\1\0\1\u01f2\10\u0197"+
    "\4\0\1\u0197\2\0\2\u0197\15\0\1\u0197\1\0\2\131"+
    "\1\0\1\131\1\0\2\131\3\0\2\131\1\0\1\131"+
    "\1\u0113\1\0\1\131\1\0\1\u0198\2\131\1\0\2\131"+
    "\12\0\2\131\10\0\4\131\1\0\2\131\2\0\15\131"+
    "\1\0\17\131\1\u0113\1\0\1\131\2\0\2\131\1\u019a"+
    "\56\131\1\0\1\u019e\1\u012b\1\0\1\u019e\1\0\1\u019e"+
    "\1\0\3\u019e\17\0\2\u019e\2\0\1\u019e\47\0\1\u012c"+
    "\3\0\1\u019f\3\0\1\u019f\144\0\1\u01f3\60\0\1\u01f4"+
    "\54\0\2\37\1\0\1\37\1\0\2\37\1\u01f5\5\37"+
    "\12\0\12\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\11\37\1\u01f6\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\12\37\2\0\1\37\1\u01f7\6\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\4\37\1\u01f8\5\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\12\37\2\0"+
    "\2\37\1\u01f9\5\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\2\37\1\u01fa"+
    "\5\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\4\37\1\u01fb\5\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\1\37\1\u01fc\10\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\12\37\2\0"+
    "\1\37\1\u01fd\6\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\4\37\1\u01fe\5\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\3\37\1\u01ff\6\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\u0200\1\0\10\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\7\37\1\u0201\2\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\12\37\2\0"+
    "\4\37\1\u0202\3\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\12\37\2\0\3\37\1\u0203\4\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\1\u0204\11\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\10\37\12\0\12\37\2\0\1\u0205\7\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\11\37\1\u0206\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\10\37\12\0\12\37\2\0\1\u0207"+
    "\7\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\12\37\2\0"+
    "\5\37\1\u0208\2\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\11\37\1\u0209\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\5\37\1\u020a\4\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\u020b"+
    "\1\0\2\37\1\u020c\5\37\12\0\12\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\10\37\12\0\1\37\1\u020d\10\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\u020e\1\0\10\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\1\37"+
    "\1\u020f\10\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\12\37\2\0\4\37\1\u0210\3\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\10\37\12\0\5\37\1\u0211\4\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\10\37\12\0\4\37\1\u0212\5\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\2\37\1\u0213\5\37"+
    "\12\0\12\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\12\37\2\0\1\37\1\u0214\6\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\10\37\12\0\1\37\1\u0215\10\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\2\37\1\u0216\5\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\10\37"+
    "\1\u0217\1\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\u0217\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\1\37\1\u0218\10\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\10\37\12\0\12\37\2\0\3\37\1\u0219\4\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\2\37\1\u021a\5\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\1\u021b"+
    "\11\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\1\37\1\u021c\10\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\10\37\1\u021d\1\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\u021d\2\0\2\37\1\0"+
    "\1\u021e\1\0\10\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\1\u021f\11\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\10\37\12\0\6\37\1\u0220\3\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\11\37"+
    "\1\u0221\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\1\u0222\11\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\2\37\1\u0223\7\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\10\37\12\0\12\37\2\0\3\37\1\u0224\4\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\u0225\1\0\10\37\12\0\12\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\2\37\1\u0226\5\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\1\u0227"+
    "\11\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\1\37\1\u0228\10\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\2\37\1\u0229\5\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\u022a\1\0\10\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\11\0\1\u022b\103\0"+
    "\1\u022c\140\0\1\u022d\42\0\1\u022e\13\0\1\u022f\41\0"+
    "\1\u0230\32\0\1\u0231\102\0\1\u0232\77\0\1\u0233\103\0"+
    "\1\u0234\127\0\1\u0235\120\0\1\u0236\37\0\2\u01e7\1\0"+
    "\1\u01e7\1\0\10\u01e7\1\0\1\u0237\1\0\1\u0238\6\0"+
    "\12\u01e7\2\0\10\u01e7\4\0\1\u01e7\2\0\2\u01e7\15\0"+
    "\1\u01e7\3\0\1\u0239\1\0\1\u0239\2\0\3\u0239\1\0"+
    "\2\u0239\13\0\12\u0239\2\0\10\u0239\4\0\1\u0239\2\0"+
    "\2\u0239\15\0\1\u0239\3\0\1\u023a\1\0\1\u023a\2\0"+
    "\3\u023a\1\0\2\u023a\13\0\12\u023a\2\0\10\u023a\4\0"+
    "\1\u023a\2\0\2\u023a\15\0\1\u023a\42\0\1\u023b\61\0"+
    "\3\u01eb\56\0\1\u01ed\63\0\1\u023c\33\0\1\u023d\75\0"+
    "\1\u023e\1\0\1\u023e\2\0\3\u023e\2\0\1\u023e\13\0"+
    "\12\u023e\2\0\10\u023e\4\0\1\u023e\2\0\2\u023e\15\0"+
    "\1\u023e\1\0\2\117\1\u023f\1\117\1\u023f\2\117\3\u023f"+
    "\2\117\1\u023f\1\117\1\u0102\3\117\1\u0103\1\0\1\117"+
    "\1\u0104\2\117\12\u023f\2\117\10\u023f\4\117\1\u023f\2\117"+
    "\2\u023f\15\117\1\u023f\1\117\2\124\1\u0240\1\124\1\u0240"+
    "\2\124\3\u0240\2\124\1\u0240\1\124\1\u010c\3\124\1\u010d"+
    "\1\124\1\0\1\u010e\2\124\12\u0240\2\124\10\u0240\4\124"+
    "\1\u0240\2\124\2\u0240\15\124\1\u0240\1\124\17\0\2\u0241"+
    "\1\u0242\135\0\1\u0243\31\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\1\u0244\11\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\1\37\1\u0245\1\0"+
    "\1\37\1\0\10\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\u0246\1\0\10\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\6\37\1\u0247\3\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\u0248\1\0\10\37\12\0\12\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\10\37\1\u0249"+
    "\1\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\u0249\2\0\2\37\1\0\1\u024a\1\0\10\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\12\37\2\0\3\37\1\u024b\4\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\1\37\1\u024c\10\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\2\37\1\u024d\7\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\6\37\1\u024e"+
    "\3\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\11\37\1\u024f\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\1\u0250\11\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\1\u0251\11\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\10\37\12\0\3\37\1\u0252\6\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\2\37\1\u0253\5\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\3\37"+
    "\1\u0254\6\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\2\37\1\u0255\7\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\2\37\1\u0256\5\37\12\0\12\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\10\37\12\0\4\37\1\u0257\5\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\12\37"+
    "\2\0\2\37\1\u0258\5\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\12\37\2\0\1\37\1\u0259\6\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\u025a"+
    "\1\0\10\37\12\0\12\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\10\37\12\0\11\37\1\u025b\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\12\37\2\0\1\37\1\u025c"+
    "\6\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\1\u025d\11\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\6\37"+
    "\1\u025e\3\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\12\37\2\0\7\37\1\u025f\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\3\37\1\u0260\4\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\4\37\1\u0261\5\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\6\37\1\u0262"+
    "\3\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\12\37\2\0\3\37\1\u0263\4\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\4\37\1\u0264\5\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\11\37\1\u0265\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\10\37\1\0\3\u0266\6\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\12\37"+
    "\2\0\1\37\1\u0267\6\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\6\37\1\u0268\3\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\10\37\12\0\1\37\1\u0269\10\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\10\37\12\0\6\37\1\u026a\3\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\45\0\1\u026b\100\0\1\u026c\46\0\1\u026d\13\0\1\u026e"+
    "\41\0\1\u026f\73\0\1\u0270\51\0\1\u022f\41\0\1\u0230"+
    "\66\0\1\u0271\67\0\1\u0236\103\0\1\u0272\110\0\1\u0273"+
    "\101\0\1\u0274\67\0\1\u0236\41\0\1\u0275\40\0\1\u0237"+
    "\65\0\2\u0239\1\0\1\u0239\1\0\10\u0239\5\0\1\u0276"+
    "\4\0\12\u0239\2\0\10\u0239\4\0\1\u0239\2\0\2\u0239"+
    "\15\0\1\u0239\2\0\2\u023a\1\0\1\u023a\1\0\10\u023a"+
    "\12\0\12\u023a\2\0\10\u023a\4\0\1\u023a\2\0\2\u023a"+
    "\15\0\1\u023a\1\u0277\30\0\1\u0278\63\0\1\u0279\134\0"+
    "\1\u027a\61\0\1\u0241\115\0\1\u027b\53\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\1\37\1\u027c\10\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\1\37\1\u027d\1\0\1\37\1\0\10\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\1\37\1\u027e\1\0\1\37\1\0\10\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\1\37\1\u027f\10\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\10\37\1\u0280\1\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\u0280\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\10\37\1\u0281\1\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\u0281\2\0"+
    "\1\37\1\u0282\1\0\1\37\1\0\10\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\7\37"+
    "\1\u0283\2\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\1\37\1\u0284\1\0\1\37\1\0"+
    "\10\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\10\37\1\u0285\1\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\u0285\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\12\37\2\0\1\37\1\u0286"+
    "\6\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\u0287\1\0\10\37\12\0\12\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\1\37\1\u0288"+
    "\10\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\12\37\2\0\1\37\1\u0289\6\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\6\37\1\u028a\3\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\2\37\1\u028b\5\37\12\0\12\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\u028c\1\0\10\37\12\0\12\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\2\37\1\u028d"+
    "\7\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\6\37\1\u028e\3\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\u028f\1\0"+
    "\10\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\1\37\1\u0290\10\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\u0291\1\0\10\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\12\37\2\0\1\u0292\7\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\10\37\12\0\7\37\1\u0293\2\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\12\37"+
    "\2\0\3\37\1\u0294\4\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\2\37"+
    "\1\u0295\5\37\12\0\12\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\10\37\12\0\12\37\2\0\1\37\1\u0296\6\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\10\37\12\0\5\37\1\u0297\4\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\u0298\1\0\10\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\20\0\3\u0266\11\0\1\u0299\51\0\2\37\1\0\1\u029a"+
    "\1\0\10\37\12\0\12\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\10\37\12\0\1\37\1\u029b\10\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\21\0\1\u026b"+
    "\41\0\1\u029c\65\0\1\u029d\47\0\1\u029e\113\0\1\u026e"+
    "\41\0\1\u026f\25\0\1\u029f\103\0\1\u0236\117\0\1\u0272"+
    "\41\0\1\u02a0\52\0\1\u02a1\124\0\1\u029d\50\0\1\u0237"+
    "\1\0\1\u0238\101\0\1\u02a2\1\0\1\u02a3\135\0\1\u02a4"+
    "\71\0\1\u02a5\61\0\3\u02a6\101\0\3\u02a7\63\0\1\37"+
    "\1\u02a8\1\0\1\37\1\0\10\37\12\0\12\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\1\37\1\u02a9\1\0\1\37\1\0\10\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\1\u02aa"+
    "\11\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\12\37\2\0\7\37\1\u02ab\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\1\37\1\u02ac\1\0\1\37\1\0"+
    "\10\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\1\37\1\u02ad\1\0\1\37"+
    "\1\0\10\37\12\0\12\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\10\37\12\0\2\37\1\u02ae\7\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\10\37\12\0\6\37\1\u02af\3\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\2\37\1\u02b0\5\37"+
    "\12\0\12\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\2\37"+
    "\1\u02b1\5\37\12\0\12\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\10\37\12\0\6\37\1\u02b2\3\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\u02b3\1\0\10\37\12\0\12\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\10\37\12\0\1\37\1\u02b4\10\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\6\37"+
    "\1\u02b5\3\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\1\37\1\u02b6\1\0\1\37\1\0"+
    "\10\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\7\37\1\u02b7\2\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\u02b8\1\0\10\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\4\37\1\u02b9\5\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\4\37\1\u02ba"+
    "\5\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\6\37\1\u02bb\3\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\u02bc\1\0"+
    "\10\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\u02bd\1\0"+
    "\10\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\1\37\1\u02be\1\0\1\37"+
    "\1\0\10\37\12\0\12\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\42\0\1\u02bf\43\0\2\37"+
    "\1\0\1\u02c0\1\0\10\37\12\0\12\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\21\0\1\u029d"+
    "\41\0\1\u02c1\55\0\1\u026e\110\0\1\u022f\62\0\1\u02a1"+
    "\41\0\1\u02c2\40\0\1\u02a2\115\0\1\u02c3\71\0\3\u02c4"+
    "\64\0\1\u02c5\1\0\1\u02c5\2\0\3\u02c5\1\0\2\u02c5"+
    "\2\0\3\u02a6\1\u02c6\5\0\12\u02c5\2\0\10\u02c5\4\0"+
    "\1\u02c5\2\0\2\u02c5\15\0\1\u02c5\20\0\3\u02a7\23\0"+
    "\1\u02c7\37\0\1\37\1\u02c8\1\0\1\37\1\0\10\37"+
    "\12\0\12\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\7\37\1\u02c9\2\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\2\37\1\u02ca\5\37\12\0\12\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\1\37"+
    "\1\u02cb\1\0\1\37\1\0\10\37\12\0\12\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\1\37\1\u02cc\1\0\1\37\1\0\10\37\12\0\12\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\7\37"+
    "\1\u02cd\2\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\11\37\1\u02ce\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\6\37\1\u02cf\3\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\12\37\2\0\3\37\1\u02d0"+
    "\4\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\u02d1\1\0\10\37\12\0\12\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\7\37\1\u02d2"+
    "\2\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\3\37\1\u02d3\6\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\7\37\1\u02d4\2\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\2\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\1\37\1\u02d5\10\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\u02d6\1\0\10\37\12\0\12\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\7\37\1\u02d7"+
    "\2\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\40\0\1\u02d8\45\0\2\37\1\0\1\37\1\0"+
    "\10\37\12\0\2\37\1\u02d9\7\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\20\0\3\u02c3\33\0"+
    "\1\342\30\0\1\u02da\1\0\1\u02da\2\0\3\u02da\1\0"+
    "\2\u02da\1\0\1\u02db\3\u02c4\6\0\12\u02da\2\0\10\u02da"+
    "\4\0\1\u02da\2\0\2\u02da\15\0\1\u02da\2\0\2\u02c5"+
    "\1\0\1\u02c5\1\0\10\u02c5\1\0\3\u02dc\6\0\12\u02c5"+
    "\1\0\1\u02dd\10\u02c5\4\0\1\u02c5\2\0\2\u02c5\15\0"+
    "\1\u02c5\3\0\1\u02c5\1\0\1\u02c5\2\0\3\u02c5\1\0"+
    "\2\u02c5\13\0\12\u02c5\2\0\10\u02c5\4\0\1\u02c5\2\0"+
    "\2\u02c5\15\0\1\u02c5\11\0\1\u02de\74\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\4\37\1\u02df\5\37\2\0"+
    "\10\37\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\6\37\1\u02e0"+
    "\3\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\1\37\1\u02e1\1\0\1\37\1\0\10\37"+
    "\12\0\12\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\12\37\2\0\2\37\1\u02e2\5\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\u02e3"+
    "\1\0\10\37\12\0\12\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\2\0\2\37\1\0\1\37"+
    "\1\0\10\37\12\0\12\37\2\0\3\37\1\u02e4\4\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\10\37\12\0\4\37\1\u02e5\5\37"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\0\10\37\12\0\3\37"+
    "\1\u02e6\6\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\10\37\1\u02e7\1\37\2\0\10\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\u02e7\2\0\2\37\1\0\1\37"+
    "\1\0\10\37\12\0\4\37\1\u02e8\5\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\47\0\1\u02e9"+
    "\36\0\2\u02da\1\0\1\u02da\1\0\10\u02da\1\u02db\3\u02ea"+
    "\6\0\12\u02da\1\0\1\u02eb\10\u02da\4\0\1\u02da\2\0"+
    "\2\u02da\6\0\1\u02ec\6\0\1\u02da\3\0\1\u02da\1\0"+
    "\1\u02da\2\0\3\u02da\1\0\2\u02da\13\0\12\u02da\2\0"+
    "\10\u02da\4\0\1\u02da\2\0\2\u02da\15\0\1\u02da\3\0"+
    "\1\u02ed\1\0\1\u02ed\2\0\3\u02ed\1\0\2\u02ed\1\0"+
    "\1\u02ee\3\u02dc\6\0\12\u02ed\2\0\10\u02ed\4\0\1\u02ed"+
    "\2\0\2\u02ed\15\0\1\u02ed\3\0\1\u02ef\1\0\1\u02ef"+
    "\2\0\3\u02ef\1\0\2\u02ef\6\0\1\u02dd\4\0\12\u02ef"+
    "\2\0\10\u02ef\4\0\1\u02ef\2\0\2\u02ef\11\0\1\u02f0"+
    "\3\0\1\u02ef\1\u02dd\34\0\1\u02f1\50\0\1\37\1\u02f2"+
    "\1\0\1\37\1\0\10\37\12\0\12\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\u02f3\1\0\10\37\12\0\12\37\2\0\10\37"+
    "\4\0\1\37\2\0\2\37\15\0\1\37\2\0\2\37"+
    "\1\0\1\37\1\0\10\37\12\0\12\37\2\0\7\37"+
    "\1\u02f4\4\0\1\37\2\0\2\37\15\0\1\37\2\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\6\37\1\u02f5"+
    "\3\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\0\10\37\12\0"+
    "\6\37\1\u02f6\3\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\20\0\3\u02ea\1\u02f7\157\0\1\u02f8"+
    "\7\0\1\u02da\1\0\1\u02da\2\0\3\u02da\1\0\2\u02da"+
    "\1\0\1\u02db\11\0\12\u02da\2\0\10\u02da\4\0\1\u02da"+
    "\2\0\2\u02da\15\0\1\u02da\2\0\2\u02ed\1\0\1\u02ed"+
    "\1\0\10\u02ed\1\u02ee\3\u02f9\6\0\12\u02ed\1\0\1\u02fa"+
    "\10\u02ed\4\0\1\u02ed\2\0\2\u02ed\2\0\1\u02fb\3\0"+
    "\1\u02fc\6\0\1\u02ed\3\0\1\u02ed\1\0\1\u02ed\2\0"+
    "\3\u02ed\1\0\2\u02ed\13\0\12\u02ed\2\0\10\u02ed\4\0"+
    "\1\u02ed\2\0\2\u02ed\15\0\1\u02ed\2\0\2\u02ef\1\0"+
    "\1\u02ef\1\0\10\u02ef\5\0\1\u02dd\4\0\12\u02ef\2\0"+
    "\10\u02ef\4\0\1\u02ef\2\0\2\u02ef\11\0\1\u02f0\3\0"+
    "\1\u02ef\1\u02dd\17\0\3\u02dc\21\0\1\u02dd\112\0\1\u02fd"+
    "\32\0\1\37\1\u02fe\1\0\1\37\1\0\10\37\12\0"+
    "\12\37\2\0\10\37\4\0\1\37\2\0\2\37\15\0"+
    "\1\37\2\0\1\37\1\u02ff\1\0\1\37\1\0\10\37"+
    "\12\0\12\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\1\u0300\11\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\u0301\1\0"+
    "\10\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\2\0\2\37\1\0\1\u0302\1\0"+
    "\10\37\12\0\12\37\2\0\10\37\4\0\1\37\2\0"+
    "\2\37\15\0\1\37\3\0\1\u0303\1\0\1\u0303\2\0"+
    "\3\u0303\1\0\2\u0303\13\0\12\u0303\2\0\10\u0303\4\0"+
    "\1\u0303\2\0\2\u0303\15\0\1\u0303\20\0\3\u02ea\21\0"+
    "\1\u02eb\27\0\1\u02ec\27\0\3\u02f9\45\0\1\u02fb\112\0"+
    "\1\u0304\75\0\1\u0305\15\0\1\u02ed\1\0\1\u02ed\2\0"+
    "\3\u02ed\1\0\2\u02ed\1\0\1\u02ee\11\0\12\u02ed\2\0"+
    "\10\u02ed\4\0\1\u02ed\2\0\2\u02ed\15\0\1\u02ed\36\0"+
    "\1\u0306\47\0\1\37\1\u0307\1\0\1\37\1\0\10\37"+
    "\12\0\12\37\2\0\10\37\4\0\1\37\2\0\2\37"+
    "\15\0\1\37\2\0\2\37\1\0\1\37\1\0\10\37"+
    "\12\0\12\37\2\0\1\37\1\u0308\6\37\4\0\1\37"+
    "\2\0\2\37\15\0\1\37\1\0\1\u0309\2\u0303\1\u0309"+
    "\1\u0303\1\u0309\10\u0303\1\u0309\3\u030a\6\u0309\12\u0303\1\u0309"+
    "\1\u030b\10\u0303\4\u0309\1\u0303\2\u0309\2\u0303\2\u0309\1\u030c"+
    "\12\u0309\1\u0303\1\u0309\17\0\3\u02f9\21\0\1\u02fa\23\0"+
    "\1\u02fb\3\0\1\u02fc\20\0\1\u030d\74\0\2\37\1\0"+
    "\1\u030e\1\0\10\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\2\0\2\37\15\0\1\37\1\0\17\u0309\1\0"+
    "\1\u0309\1\0\45\u0309\1\u030c\33\u0309\3\u030a\45\u0309\1\u030c"+
    "\16\u0309\1\u030f\1\u0309\1\u030f\2\u0309\3\u030f\1\u0309\2\u030f"+
    "\2\u0309\1\0\1\u0309\1\0\1\u0309\1\u030b\4\u0309\12\u030f"+
    "\2\u0309\10\u030f\4\u0309\1\u030f\2\u0309\2\u030f\2\u0309\1\u030c"+
    "\6\u0309\1\u0310\3\u0309\1\u030f\1\u030b\17\u0309\1\0\1\u0309"+
    "\1\0\45\u0309\1\u030c\1\u0311\13\u0309\52\0\1\u0312\32\0"+
    "\2\37\1\0\1\37\1\0\10\37\12\0\11\37\1\u0313"+
    "\2\0\10\37\4\0\1\37\2\0\2\37\15\0\1\37"+
    "\1\0\1\u0309\2\u030f\1\u0309\1\u030f\1\u0309\10\u030f\1\u0309"+
    "\1\0\1\u0309\1\0\1\u0309\1\u030b\4\u0309\12\u030f\2\u0309"+
    "\10\u030f\4\u0309\1\u030f\2\u0309\2\u030f\2\u0309\1\u030c\6\u0309"+
    "\1\u0310\3\u0309\1\u030f\1\u030b\17\u0309\3\u030a\21\u0309\1\u030b"+
    "\23\u0309\1\u030c\14\u0309\4\0\1\u0314\100\0\2\37\1\0"+
    "\1\37\1\0\10\37\12\0\12\37\2\0\10\37\4\0"+
    "\1\37\1\u0315\1\0\2\37\15\0\1\37\20\0\3\u0314"+
    "\5\0\1\u0316\136\0\1\u0317\40\0\3\u0316\1\0\1\u0318"+
    "\27\0\1\u0319\27\0\1\u031a\26\0\1\u031b\130\0\1\u031c"+
    "\77\0\1\u031d\107\0\1\u031e\77\0\1\u031f\107\0\1\u0320"+
    "\77\0\1\u0321\107\0\1\u0322\47\0\3\u0320\33\0\1\u0323"+
    "\101\0\1\u0324\53\0\1\u0320\163\0\1\u0320";

  private static int [] zzUnpackTrans() {
    int [] result = new int[40868];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\22\0\2\1\1\11\12\1\1\11\3\1\3\11\14\1"+
    "\1\11\14\1\1\11\10\1\5\11\4\1\1\11\4\1"+
    "\1\11\7\1\1\11\10\1\1\11\4\1\1\11\3\1"+
    "\1\11\2\1\2\11\1\1\24\11\5\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\11\6\1\2\11\2\0\6\1"+
    "\2\0\1\1\3\0\1\11\1\0\1\1\1\11\30\1"+
    "\1\11\10\1\4\11\1\1\1\0\2\1\1\11\1\1"+
    "\12\0\2\1\1\11\1\1\1\0\1\11\1\1\1\11"+
    "\1\1\2\11\1\1\5\11\4\0\3\1\3\11\1\1"+
    "\3\0\2\1\1\11\1\1\3\0\1\1\1\0\1\1"+
    "\1\11\1\0\1\11\3\0\1\1\1\0\2\1\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\1\2\0\1\11"+
    "\2\0\3\11\2\0\1\1\1\0\10\1\1\0\1\11"+
    "\16\1\1\0\1\11\45\1\3\11\1\1\1\11\1\1"+
    "\12\0\3\11\2\0\1\11\1\0\1\1\1\0\1\11"+
    "\1\1\1\11\1\0\5\1\1\0\1\11\1\0\3\11"+
    "\2\1\1\11\2\0\72\1\17\0\1\11\3\0\2\1"+
    "\1\11\2\0\66\1\5\0\1\11\6\0\1\11\1\1"+
    "\5\0\1\11\2\1\1\11\1\1\1\0\42\1\1\0"+
    "\4\1\4\0\1\11\5\0\1\11\6\0\35\1\1\0"+
    "\2\1\1\11\3\0\1\11\1\0\1\11\1\1\4\0"+
    "\27\1\1\0\1\1\2\11\5\0\20\1\1\0\1\1"+
    "\5\0\12\1\1\11\10\0\5\1\7\0\5\1\2\0"+
    "\1\11\1\0\2\1\5\0\1\1\2\0\1\1\1\0"+
    "\1\1\7\0\1\11\7\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[804];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private final List commentList = new ArrayList();
    private String heredoc = null;
    private int heredocBodyStart = -1;
    private int heredocBodyLength = 0;
    private final StringBuilder heredocBody = new StringBuilder();
    private String nowdoc = null;
    private int nowdoc_len  = 0;
    private int nowdocBodyStart = -1;
    private int nowdocBodyLength = 0;
    private final StringBuilder nowdocBody = new StringBuilder();
    private String comment = null;
    private boolean asp_tags = false;
    private boolean short_tags_allowed = true;
    private ByteStack stack = new ByteStack();
    private char yy_old_buffer[] = new char[ZZ_BUFFERSIZE];
    private int yy_old_pushbackPos;
    protected int commentStartPosition;
    private int whitespaceEndPosition;
    private boolean isEndedPhp;
    private final PHPDocCommentParser docParser = new PHPDocCommentParser();
    private final PHPVarCommentParser varParser = new PHPVarCommentParser();

    public ASTPHP5Scanner(java.io.Reader in, boolean short_tags_allowed, boolean asp_tags_allowed) {
        this(in);
        this.asp_tags = asp_tags_allowed;
        this.short_tags_allowed = short_tags_allowed;
    }
    //private AST ast;

    private int bracket = 0;

    /**
     * Returns balance beween '{' and '}'. If it's equesl 0,
     * then number of '{' == number of '}', if > 0 then '{' > '}' and
     * if return number < 0 then '{' < '}'
     */
    public int getCurlyBalance() {
        return bracket;
    }

    public int getWhitespaceEndPosition() {
        return whitespaceEndPosition;
    }

    public boolean isEndedPhp() {
        return isEndedPhp;
    }

    public boolean useAspTagsAsPhp() {
        return asp_tags;
    }

    public void reset(java.io.Reader reader) {
        yyreset(reader);
    }

    public void setState(int state) {
        yybegin(state);
    }

    public int getState() {
        return yystate();
    }

    public void setInScriptingState() {
        yybegin(ST_IN_SCRIPTING);
    }

    public void resetCommentList() {
        commentList.clear();
    }

    public List getCommentList() {
        return commentList;
    }

    protected void addComment(Comment.Type type) {
        int leftPosition = getTokenStartPosition();
        //System.out.println("#####AddCommnet start: " + commentStartPosition + " end: " + (leftPosition + getTokenLength()) + ", type: " + type);
        Comment comm;
        if (type == Comment.Type.TYPE_PHPDOC) {
            comm = docParser.parse(commentStartPosition, leftPosition + getTokenLength(),  comment);
            comment = null;
        }
        else if(type == Comment.Type.TYPE_VARTYPE) {
            comm = varParser.parse(commentStartPosition, leftPosition + getTokenLength(),  comment);
            comment = null;
            if (comm == null) {
                comm = new Comment(commentStartPosition, leftPosition + getTokenLength(), /*ast,*/ type);
            }
        }
        else {
            comm = new Comment(commentStartPosition, leftPosition + getTokenLength(), /*ast,*/ type);
        }
        commentList.add(comm);
    }

    public void setUseAspTagsAsPhp(boolean useAspTagsAsPhp) {
        asp_tags = useAspTagsAsPhp;
    }

    private void pushState(int state) {
        stack.push(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.pop());
    }

    public int getCurrentLine() {
        return yyline;
    }

    protected int getTokenStartPosition() {
        return zzStartRead - zzPushbackPos;
    }

    protected int getTokenLength() {
        return zzMarkedPos - zzStartRead;
    }

    public int getLength() {
        return zzEndRead - zzPushbackPos;
    }

    private void handleCommentStart() {
        commentStartPosition = getTokenStartPosition();
    }

    private void handleLineCommentEnd() {
        addComment(Comment.Type.TYPE_SINGLE_LINE);
    }

    private void handleMultilineCommentEnd() {
        addComment(Comment.Type.TYPE_MULTILINE);
    }

    private void handlePHPDocEnd() {
        addComment(Comment.Type.TYPE_PHPDOC);
    }

    private void handleVarComment() {
        commentStartPosition = getTokenStartPosition();
        addComment(Comment.Type.TYPE_VARTYPE);
    }

    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    private Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        Symbol symbol = new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
        return symbol;
    }

    private void updateNowdocBodyInfo() {
        if (nowdocBodyStart == -1) {
            nowdocBodyStart = getTokenStartPosition();
        }
        nowdocBody.append(yytext());
        nowdocBodyLength += getTokenLength();
    }

    private Symbol createFullNowdocBodySymbol() {
        Symbol symbol = new Symbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE, nowdocBodyStart, nowdocBodyStart + nowdocBodyLength);
        symbol.value = nowdocBody.toString();
        return symbol;
    }

    private void updateHeredocBodyInfo() {
        if (heredocBodyStart == -1) {
            heredocBodyStart = getTokenStartPosition();
        }
        heredocBody.append(yytext());
        heredocBodyLength += getTokenLength();
    }

    private void resetHeredocBodyInfo() {
        heredocBodyStart = -1;
        heredocBodyLength = 0;
        heredocBody.delete(0, heredocBody.length());
    }

    private Symbol createFullHeredocBodySymbol() {
        Symbol symbol = new Symbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE, heredocBodyStart, heredocBodyStart + heredocBodyLength);
        symbol.value = heredocBody.toString();
        resetHeredocBodyInfo();
        return symbol;
    }

    private boolean isLabelChar(char c) {
        return c == '_'
                || (c >= 'a' && c <= 'z')
                || (c >= 'A' && c <= 'Z')
                || (c >= 0x7f && c <= 0xff);
    }

    private boolean isEndHereOrNowdoc(String hereOrNowdoc) {
        // check whether ID exists
        String trimedText = yytext().trim();
        boolean isEnd = false;
        if (trimedText.startsWith(hereOrNowdoc)) {
            if (trimedText.length() == hereOrNowdoc.length()) {
                isEnd = true;
            } else if (trimedText.length() > hereOrNowdoc.length()
                    && !isLabelChar(trimedText.charAt(hereOrNowdoc.length()))) {
                // e.g.
                // $test = <<< END
                // ENDING
                // END
                isEnd = true;
            }
        }
        return isEnd;
    }

    public int[] getParamenters(){
        return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline};
    }

    private boolean parsePHPDoc(){
        /*final IDocumentorLexer documentorLexer = getDocumentorLexer(zzReader);
        if(documentorLexer == null){
            return false;
        }
        yypushback(zzMarkedPos - zzStartRead);
        int[] parameters = getParamenters();
        documentorLexer.reset(zzReader, zzBuffer, parameters);
        Object phpDocBlock = documentorLexer.parse();
        commentList.add(phpDocBlock);
        reset(zzReader, documentorLexer.getBuffer(), documentorLexer.getParamenters());*/

        //System.out.println("#######ParsePHPDoc()");
        //return true;
        return false;
    }


    /*protected IDocumentorLexer getDocumentorLexer(java.io.Reader  reader) {
        return null;
    }*/

    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
        this.zzReader = reader;
        this.zzBuffer = buffer;
        this.zzMarkedPos = parameters[0];
        this.zzPushbackPos = parameters[1];
        this.zzCurrentPos = parameters[2];
        this.zzStartRead = parameters[3];
        this.zzEndRead = parameters[4];
        this.yyline = parameters[5];
        this.yychar = this.zzStartRead - this.zzPushbackPos;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ASTPHP5Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ASTPHP5Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1772) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    /*if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }*/
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 59:
          { //    yymore();
          }
        case 216: break;
        case 214:
          { comment = yytext();
    handleVarComment();
          }
        case 217: break;
        case 199:
          { return createFullSymbol(ASTPHP5Symbols.T_INTERFACE);
          }
        case 218: break;
        case 162:
          { int removeChars = (yytext().charAt(0) == 'b')?4:3;
    heredoc = yytext().substring(removeChars).trim();    // for 'b<<<' or '<<<'
    if (heredoc.charAt(0) == '"') {
        heredoc = heredoc.substring(1, heredoc.length()-1);
    }
    yybegin(ST_START_HEREDOC);
    return createSymbol(ASTPHP5Symbols.T_START_HEREDOC);
          }
        case 219: break;
        case 29:
          { return createSymbol(ASTPHP5Symbols.T_OR);
          }
        case 220: break;
        case 160:
          { return createFullSymbol(ASTPHP5Symbols.T_PRINT);
          }
        case 221: break;
        case 185:
          { return createSymbol(ASTPHP5Symbols.T_UNSET_CAST);
          }
        case 222: break;
        case 1:
          { return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
          }
        case 223: break;
        case 24:
          { return createSymbol(ASTPHP5Symbols.T_RGREATER);
          }
        case 224: break;
        case 171:
          { return createFullSymbol(ASTPHP5Symbols.T_GLOBAL);
          }
        case 225: break;
        case 25:
          { return createSymbol(ASTPHP5Symbols.T_TIMES);
          }
        case 226: break;
        case 113:
          { String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?')) {
        yypushback(1);
        yybegin(ST_IN_SHORT_ECHO);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 227: break;
        case 78:
          { return createSymbol(ASTPHP5Symbols.T_MINUS_EQUAL);
          }
        case 228: break;
        case 98:
          { return createSymbol(ASTPHP5Symbols.T_BOOLEAN_OR);
          }
        case 229: break;
        case 12:
          { pushState(ST_IN_SCRIPTING);
    bracket++;
    return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
          }
        case 230: break;
        case 46:
          { /* <ST_END_NOWDOC>{LABEL}";"?[\n\r] */
    nowdoc=null;
    nowdoc_len=0;
    nowdocBody.delete(0, nowdocBody.length());
    nowdocBodyStart = -1;
    nowdocBodyLength = 0;
    yybegin(ST_IN_SCRIPTING);
    int back = 0;
    if (yytext().charAt(yylength() - 1)==';') {
        back++;
    }
    yypushback(back);
    return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
          }
        case 231: break;
        case 22:
          { return createSymbol(ASTPHP5Symbols.T_CLOSE_PARENTHESE);
          }
        case 232: break;
        case 47:
          { yypushback(yylength());
    popState();
          }
        case 233: break;
        case 23:
          { return createSymbol(ASTPHP5Symbols.T_NOT);
          }
        case 234: break;
        case 19:
          { return createSymbol(ASTPHP5Symbols.T_QUESTION_MARK);
          }
        case 235: break;
        case 126:
          { return createFullSymbol(ASTPHP5Symbols.T_VAR);
          }
        case 236: break;
        case 56:
          { popState();
    return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
          }
        case 237: break;
        case 209:
          { return createFullSymbol(ASTPHP5Symbols.T_FUNC_C);
          }
        case 238: break;
        case 149:
          { return createFullSymbol(ASTPHP5Symbols.T_TRAIT);
          }
        case 239: break;
        case 168:
          { return createFullSymbol(ASTPHP5Symbols.T_STATIC);
          }
        case 240: break;
        case 139:
          { return createFullSymbol(ASTPHP5Symbols.T_EVAL);
          }
        case 241: break;
        case 170:
          { return createFullSymbol(ASTPHP5Symbols.T_RETURN);
          }
        case 242: break;
        case 152:
          { return createFullSymbol(ASTPHP5Symbols.T_UNSET);
          }
        case 243: break;
        case 131:
          { if (!parsePHPDoc()) {
        handleCommentStart();
        yybegin(ST_DOCBLOCK);
    }
          }
        case 244: break;
        case 91:
          { return createSymbol(ASTPHP5Symbols.T_DIV_EQUAL);
          }
        case 245: break;
        case 48:
          { popState();
    return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 246: break;
        case 205:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDFOREACH);
          }
        case 247: break;
        case 203:
          { return createFullSymbol(ASTPHP5Symbols.T_METHOD_C);
          }
        case 248: break;
        case 38:
          { /*<ST_BACKQUOTE>{BACKQUOTE_CHARS}+*/
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 249: break;
        case 180:
          { return createFullSymbol(ASTPHP5Symbols.T_FINALLY);
          }
        case 250: break;
        case 77:
          { return createSymbol(ASTPHP5Symbols.T_ATTRIBUTE);
          }
        case 251: break;
        case 103:
          { yypushback(1);
    /*<ST_BACKQUOTE>{BACKQUOTE_CHARS}*("{""{"+|"$""$"+|(("{"+|"$"+)[`]))*/
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 252: break;
        case 87:
          { return createSymbol(ASTPHP5Symbols.T_IS_SMALLER_OR_EQUAL);
          }
        case 253: break;
        case 125:
          { return createSymbol(ASTPHP5Symbols.T_COALESCE_EQUAL);
          }
        case 254: break;
        case 70:
          { return createFullSymbol(ASTPHP5Symbols.T_CONSTANT_ENCAPSED_STRING);
          }
        case 255: break;
        case 116:
          { return createFullSymbol(ASTPHP5Symbols.T_LOGICAL_AND);
          }
        case 256: break;
        case 154:
          { return createFullSymbol(ASTPHP5Symbols.T_CONST);
          }
        case 257: break;
        case 142:
          { return createFullSymbol(ASTPHP5Symbols.T_GOTO);
          }
        case 258: break;
        case 124:
          { pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ASTPHP5Symbols.T_NULLSAFE_OBJECT_OPERATOR);
          }
        case 259: break;
        case 119:
          { return createFullSymbol(ASTPHP5Symbols.T_EXIT);
          }
        case 260: break;
        case 37:
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 261: break;
        case 134:
          { /* <ST_HEREDOC> {HEREDOC_CHARS}("{$" | "${") */
        yypushback(2);
        updateHeredocBodyInfo();
        return createFullHeredocBodySymbol();
          }
        case 262: break;
        case 192:
          { return createFullSymbol(ASTPHP5Symbols.T_CALLABLE);
          }
        case 263: break;
        case 127:
          { return createSymbol(ASTPHP5Symbols.T_IS_NOT_IDENTICAL);
          }
        case 264: break;
        case 42:
          { yypushback(1);
    yybegin(ST_HEREDOC);
          }
        case 265: break;
        case 167:
          { /* not a keyword, hust for recognize constans.*/
    return createFullSymbol(ASTPHP5Symbols.T_DEFINE);
          }
        case 266: break;
        case 45:
          { yypushback(1);
    yybegin(ST_NOWDOC);
          }
        case 267: break;
        case 97:
          { return createSymbol(ASTPHP5Symbols.T_OR_EQUAL);
          }
        case 268: break;
        case 147:
          { return createFullSymbol(ASTPHP5Symbols.T_BREAK);
          }
        case 269: break;
        case 104:
          { /* {NEWLINE}{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\n\r]? */
        int trailingNewLineLength = 1;
        int labelLength = yylength() - trailingNewLineLength;
        int back = trailingNewLineLength;

        if (yytext().charAt(labelLength-1) == ';') {
           labelLength--;
           back++;
        }

        if (isEndHereOrNowdoc(heredoc)) {
            int indexOfHeredocId = yytext().indexOf(heredoc);
            back += labelLength - indexOfHeredocId;
            yypushback(back);
            yybegin(ST_END_HEREDOC);
        } else {
            // handle variable
            char previousChar = ' ';
            int indexOfVariable = -1;
            for (int i = 0; i < yylength(); i++) {
                char currentChar = yytext().charAt(i);
                if (currentChar == '$' && previousChar == '{') {
                    indexOfVariable = i - 1;
                    break;
                }
                if (currentChar == '$' && previousChar != '\\') {
                    indexOfVariable = i;
                    break;
                }
                previousChar = currentChar;
            }

            if (indexOfVariable == -1) {
                yypushback(trailingNewLineLength);
            } else {
                yypushback(yylength() - indexOfVariable);
                updateHeredocBodyInfo();
                return createFullHeredocBodySymbol();
            }
        }
        updateHeredocBodyInfo();
        if (yystate() == ST_END_HEREDOC) {
            return createFullHeredocBodySymbol();
        }
          }
        case 270: break;
        case 61:
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_ECHO);
          }
        case 271: break;
        case 169:
          { return createFullSymbol(ASTPHP5Symbols.T_SWITCH);
          }
        case 272: break;
        case 36:
          { /*<ST_DOUBLE_QUOTES>{DOUBLE_QUOTES_CHARS}+*/
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 273: break;
        case 33:
          { return createSymbol(ASTPHP5Symbols.T_TILDA);
          }
        case 274: break;
        case 73:
          { return createFullSymbol(ASTPHP5Symbols.T_IF);
          }
        case 275: break;
        case 182:
          { return createFullSymbol(ASTPHP5Symbols.T_REQUIRE);
          }
        case 276: break;
        case 20:
          { return createSymbol(ASTPHP5Symbols.T_NEKUDOTAIM);
          }
        case 277: break;
        case 158:
          { return createFullSymbol(ASTPHP5Symbols.T_MATCH);
          }
        case 278: break;
        case 28:
          { return createSymbol(ASTPHP5Symbols.T_REFERENCE);
          }
        case 279: break;
        case 92:
          { handleCommentStart();
    yybegin(ST_COMMENT);
          }
        case 280: break;
        case 201:
          { return createFullSymbol(ASTPHP5Symbols.T_NAMESPACE);
          }
        case 281: break;
        case 207:
          { return createFullSymbol(ASTPHP5Symbols.T_IMPLEMENTS);
          }
        case 282: break;
        case 157:
          { return createFullSymbol(ASTPHP5Symbols.T_YIELD);
          }
        case 283: break;
        case 17:
          { return createSymbol(ASTPHP5Symbols.T_MINUS);
          }
        case 284: break;
        case 44:
          { /* <ST_NOWDOC>{NOWDOC_CHARS}|{NEWLINE} */
        updateNowdocBodyInfo();
          }
        case 285: break;
        case 197:
          { return createFullSymbol(ASTPHP5Symbols.T_CLASS_C);
          }
        case 286: break;
        case 213:
          { return createFullSymbol(ASTPHP5Symbols.T_NS_C);
          }
        case 287: break;
        case 161:
          { return createSymbol(ASTPHP5Symbols.T_INT_CAST);
          }
        case 288: break;
        case 111:
          { handlePHPDocEnd();
    yybegin(ST_IN_SCRIPTING);
          }
        case 289: break;
        case 166:
          { return createFullSymbol(ASTPHP5Symbols.T_ELSEIF);
          }
        case 290: break;
        case 84:
          { return createSymbol(ASTPHP5Symbols.T_COALESCE);
          }
        case 291: break;
        case 204:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDDECLARE);
          }
        case 292: break;
        case 79:
          { return createSymbol(ASTPHP5Symbols.T_DEC);
          }
        case 293: break;
        case 100:
          { yypushback(1);
    /*<ST_DOUBLE_QUOTES>{DOUBLE_QUOTES_CHARS}*("{""{"+|"$""$"+|(("{"+|"$"+)[\"]))*/
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 294: break;
        case 190:
          { return createFullSymbol(ASTPHP5Symbols.T_ABSTRACT);
          }
        case 295: break;
        case 138:
          { return createFullSymbol(ASTPHP5Symbols.T_ELSE);
          }
        case 296: break;
        case 200:
          { return createFullSymbol(ASTPHP5Symbols.T_INSTEADOF);
          }
        case 297: break;
        case 80:
          { pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
          }
        case 298: break;
        case 13:
          { return createSymbol(ASTPHP5Symbols.T_SEMICOLON);
          }
        case 299: break;
        case 2:
          { // do nothing
          }
        case 300: break;
        case 50:
          { popState();
    pushState(ST_IN_SCRIPTING);
    return createFullSymbol(ASTPHP5Symbols.T_STRING_VARNAME);
          }
        case 301: break;
        case 18:
          { return createSymbol(ASTPHP5Symbols.T_LGREATER);
          }
        case 302: break;
        case 141:
          { return createFullSymbol(ASTPHP5Symbols.T_LIST);
          }
        case 303: break;
        case 110:
          { handleMultilineCommentEnd();
    yybegin(ST_IN_SCRIPTING);
          }
        case 304: break;
        case 132:
          { yypushback(1);
    pushState(ST_VAR_OFFSET);
    return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 305: break;
        case 165:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDFOR);
          }
        case 306: break;
        case 3:
          { return createFullSymbol(ASTPHP5Symbols.T_LNUMBER);
          }
        case 307: break;
        case 41:
          { /* <ST_HEREDOC> "$" | "{" */
        updateHeredocBodyInfo();
          }
        case 308: break;
        case 143:
          { handleCommentStart();
          }
        case 309: break;
        case 146:
          { return createFullSymbol(ASTPHP5Symbols.T_ARRAY);
          }
        case 310: break;
        case 137:
          { return createFullSymbol(ASTPHP5Symbols.T_ECHO);
          }
        case 311: break;
        case 51:
          { return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
          }
        case 312: break;
        case 95:
          { return createSymbol(ASTPHP5Symbols.T_AND_EQUAL);
          }
        case 313: break;
        case 55:
          { bracket++; return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
          }
        case 314: break;
        case 150:
          { return createFullSymbol(ASTPHP5Symbols.T_THROW);
          }
        case 315: break;
        case 133:
          { /* <ST_HEREDOC> {HEREDOC_CHARS}"$"{LABEL}"["? */
        String text = yytext();
        int lastIndexOfDollar = text.lastIndexOf('$');
        yypushback(text.length() - lastIndexOfDollar);
        updateHeredocBodyInfo();
        return createFullHeredocBodySymbol();
          }
        case 316: break;
        case 159:
          { return createFullSymbol(ASTPHP5Symbols.T_WHILE);
          }
        case 317: break;
        case 198:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDSWITCH);
          }
        case 318: break;
        case 63:
          { if (asp_tags) {
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
        //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 319: break;
        case 184:
          { return createSymbol(ASTPHP5Symbols.T_ARRAY_CAST);
          }
        case 320: break;
        case 102:
          { pushState(ST_IN_SCRIPTING);
    yypushback(yylength()-1);
    bracket++;
    return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN_WITH_DOLAR);
          }
        case 321: break;
        case 178:
          { return createFullSymbol(ASTPHP5Symbols.T_DEFAULT);
          }
        case 322: break;
        case 174:
          { return createSymbol(ASTPHP5Symbols.T_DOUBLE_CAST);
          }
        case 323: break;
        case 11:
          { yybegin(ST_BACKQUOTE);
    return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 324: break;
        case 16:
          { return createSymbol(ASTPHP5Symbols.T_OPEN_RECT);
          }
        case 325: break;
        case 153:
          { return createFullSymbol(ASTPHP5Symbols.T_CATCH);
          }
        case 326: break;
        case 106:
          { /* <ST_NOWDOC>{NEWLINE}{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\r\n]? */
        if (isEndHereOrNowdoc(nowdoc)) {
            String yytext = yytext();
            int newlineLength = yytext.startsWith("\r\n") ? 2 : 1;
            int back = yylength() - newlineLength;
            yypushback(back);
            updateNowdocBodyInfo();
            yybegin(ST_END_NOWDOC);
            if (nowdocBodyLength > 0) {
                return createFullNowdocBodySymbol();
            }
        } else {
            yypushback(1);
            updateNowdocBodyInfo();
        }
          }
        case 327: break;
        case 60:
          { String yytext = yytext();
    switch (yytext.charAt(yytext.length() - 1)) {
        case '?':
        case '%':
        case '>':
            yypushback(1);
            break;
        default:
            handleLineCommentEnd();
            yybegin(ST_IN_SCRIPTING);
    }
//    yymore();
          }
        case 328: break;
        case 101:
          { pushState(ST_LOOKING_FOR_VARNAME);
    return createSymbol(ASTPHP5Symbols.T_DOLLAR_OPEN_CURLY_BRACES);
          }
        case 329: break;
        case 35:
          { /* This is a temporary fix which is dependant on flex and it's implementation */
    if (!stack.isEmpty()) {
        popState();
    }
    bracket--;
    return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
          }
        case 330: break;
        case 135:
          { return createSymbol(ASTPHP5Symbols.T_NULLSAFE_OBJECT_OPERATOR);
          }
        case 331: break;
        case 93:
          { return createSymbol(ASTPHP5Symbols.T_MOD_EQUAL);
          }
        case 332: break;
        case 26:
          { return createSymbol(ASTPHP5Symbols.T_DIV);
          }
        case 333: break;
        case 105:
          { /* <ST_START_HEREDOC>{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\n\r]? */
    int trailingNewLineLength = 1;
    int labelLength = yylength() - trailingNewLineLength;
    int back = trailingNewLineLength;
    String yytext = yytext();

    if (yytext.charAt(labelLength - 1) == ';') {
        labelLength--;
        back++;
    }

    if (isEndHereOrNowdoc(heredoc)) {
        int indexOfHeredocId = yytext().indexOf(heredoc);
        back += labelLength - indexOfHeredocId;
        yypushback(back);
        yybegin(ST_END_HEREDOC);
    } else {
        yypushback(yylength());
        yybegin(ST_HEREDOC);
    }
          }
        case 334: break;
        case 32:
          { return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
          }
        case 335: break;
        case 128:
          { return createSymbol(ASTPHP5Symbols.T_SPACESHIP);
          }
        case 336: break;
        case 6:
          { return createSymbol(ASTPHP5Symbols.T_PLUS);
          }
        case 337: break;
        case 155:
          { return createFullSymbol(ASTPHP5Symbols.T_CLASS);
          }
        case 338: break;
        case 120:
          { return createFullSymbol(ASTPHP5Symbols.T_FOR);
          }
        case 339: break;
        case 163:
          { yypushback(3);
    pushState(ST_LOOKING_FOR_PROPERTY);
    return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 340: break;
        case 81:
          { return createSymbol(ASTPHP5Symbols.T_IS_GREATER_OR_EQUAL);
          }
        case 341: break;
        case 74:
          { return createFullSymbol(ASTPHP5Symbols.T_DO);
          }
        case 342: break;
        case 96:
          { return createSymbol(ASTPHP5Symbols.T_BOOLEAN_AND);
          }
        case 343: break;
        case 40:
          { /* <ST_HEREDOC> {HEREDOC_CHARS} */
        int indexOfNewline = yytext().indexOf("\r");
        if (indexOfNewline == -1) {
            indexOfNewline = yytext().indexOf("\n");
        }
        if (indexOfNewline > 0) {
            // if index equals 0, don't pushback (infinite loop)
            yypushback(yylength() - indexOfNewline);
        }
        updateHeredocBodyInfo();
          }
        case 344: break;
        case 4:
          { return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 345: break;
        case 177:
          { return createFullSymbol(ASTPHP5Symbols.T_INCLUDE);
          }
        case 346: break;
        case 5:
          { return createSymbol(ASTPHP5Symbols.T_NEKUDA);
          }
        case 347: break;
        case 144:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDIF);
          }
        case 348: break;
        case 121:
          { return createFullSymbol(ASTPHP5Symbols.T_NEW);
          }
        case 349: break;
        case 57:
          { bracket--; return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
          }
        case 350: break;
        case 206:
          { return createFullSymbol(ASTPHP5Symbols.T_INSTANCEOF);
          }
        case 351: break;
        case 49:
          { yypushback(yylength());
    popState();
    pushState(ST_IN_SCRIPTING);
          }
        case 352: break;
        case 164:
          { isEndedPhp = false;
    whitespaceEndPosition = getTokenStartPosition() + yylength();
    yybegin(ST_IN_SCRIPTING);
    //return T_OPEN_TAG;
    //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
          }
        case 353: break;
        case 67:
          { return createSymbol(ASTPHP5Symbols.T_PLUS_EQUAL);
          }
        case 354: break;
        case 75:
          { // PHP 7.4 Arrow Functions 2.0
    // https://wiki.php.net/rfc/arrow_functions_v2
    return createFullSymbol(ASTPHP5Symbols.T_FN);
          }
        case 355: break;
        case 8:
          { whitespaceEndPosition = getTokenStartPosition() + yylength();
          }
        case 356: break;
        case 183:
          { return createFullSymbol(ASTPHP5Symbols.T_PRIVATE);
          }
        case 357: break;
        case 211:
          { return createFullSymbol(ASTPHP5Symbols.T_REQUIRE_ONCE);
          }
        case 358: break;
        case 181:
          { return createFullSymbol(ASTPHP5Symbols.T_FOREACH);
          }
        case 359: break;
        case 156:
          { return createFullSymbol(ASTPHP5Symbols.T_CLONE);
          }
        case 360: break;
        case 148:
          { return createFullSymbol(ASTPHP5Symbols.T_ISSET);
          }
        case 361: break;
        case 21:
          { return createSymbol(ASTPHP5Symbols.T_OPEN_PARENTHESE);
          }
        case 362: break;
        case 172:
          { return createFullSymbol(ASTPHP5Symbols.T_PUBLIC);
          }
        case 363: break;
        case 15:
          { handleCommentStart();
    yybegin(ST_ONE_LINE_COMMENT);
//    yymore();
          }
        case 364: break;
        case 123:
          { return createSymbol(ASTPHP5Symbols.T_SR_EQUAL);
          }
        case 365: break;
        case 62:
          { if (short_tags_allowed || yylength()>2) { /* yyleng>2 means it's not <? but <script> */
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
        //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 366: break;
        case 145:
          { return createFullSymbol(ASTPHP5Symbols.T_EMPTY);
          }
        case 367: break;
        case 215:
          { yybegin(ST_HALTED_COMPILER);
    return createSymbol(ASTPHP5Symbols.T_HALT_COMPILER);
          }
        case 368: break;
        case 86:
          { return createSymbol(ASTPHP5Symbols.T_IS_NOT_EQUAL);
          }
        case 369: break;
        case 89:
          { return createSymbol(ASTPHP5Symbols.T_MUL_EQUAL);
          }
        case 370: break;
        case 107:
          { /* <ST_START_NOWDOC>{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\r\n]? */
    // there is no [\r\n] if it is the last line
    // i.e. not [\r\n] but EOF, so check not [\r\n] but [\r\n]?
    if (isEndHereOrNowdoc(nowdoc)) {
        int indexOfNowdocId = yytext().indexOf(nowdoc);
        int back = yylength() - indexOfNowdocId - nowdoc.length();
        yypushback(back);
        nowdoc = null;
        nowdoc_len = 0;
        nowdocBody.delete(0, nowdocBody.length());
        nowdocBodyStart = -1;
        nowdocBodyLength = 0;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
    } else {
        yypushback(1); // [\r\n] length
        yybegin(ST_NOWDOC);
        updateNowdocBodyInfo();
    }
          }
        case 371: break;
        case 129:
          { return createSymbol(ASTPHP5Symbols.T_SL_EQUAL);
          }
        case 372: break;
        case 118:
          { return createFullSymbol(ASTPHP5Symbols.T_TRY);
          }
        case 373: break;
        case 151:
          { return createFullSymbol(ASTPHP5Symbols.T_FINAL);
          }
        case 374: break;
        case 195:
          { return createSymbol(ASTPHP5Symbols.T_OBJECT_CAST);
          }
        case 375: break;
        case 173:
          { return createSymbol(ASTPHP5Symbols.T_BOOL_CAST);
          }
        case 376: break;
        case 39:
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 377: break;
        case 7:
          { return createSymbol(ASTPHP5Symbols.T_NS_SEPARATOR);
          }
        case 378: break;
        case 112:
          { if (asp_tags || yytext().charAt(0)!='%') { /* asp comment? */
        isEndedPhp = true;
        handleLineCommentEnd();
        yypushback(yylength());
        yybegin(ST_IN_SCRIPTING);
        //return T_COMMENT;
    }
          }
        case 379: break;
        case 194:
          { return createSymbol(ASTPHP5Symbols.T_STRING_CAST);
          }
        case 380: break;
        case 115:
          { return createFullSymbol(ASTPHP5Symbols.T_LOGICAL_XOR);
          }
        case 381: break;
        case 64:
          { return createFullSymbol(ASTPHP5Symbols.T_DNUMBER);
          }
        case 382: break;
        case 27:
          { return createSymbol(ASTPHP5Symbols.T_PRECENT);
          }
        case 383: break;
        case 212:
          { comment = yytext();
    handleVarComment();
    // if we want to handle the var comment in  ast, then return the T_VAR_Comment symbol
    // but it needs some changes in parser grammar. see issue #154967
    //return createFullSymbol(ASTPHP5Symbols.T_VAR_COMMENT);
          }
        case 384: break;
        case 83:
          { isEndedPhp = true;
    yybegin(YYINITIAL);
    return createSymbol(ASTPHP5Symbols.T_SEMICOLON);  /* implicit ';' at php-end tag */
          }
        case 385: break;
        case 94:
          { if (asp_tags) {
        yybegin(YYINITIAL);
        return createSymbol(ASTPHP5Symbols.T_SEMICOLON);  /* implicit ';' at php-end tag */
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 386: break;
        case 191:
          { return createFullSymbol(ASTPHP5Symbols.T_FUNCTION);
          }
        case 387: break;
        case 189:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDWHILE);
          }
        case 388: break;
        case 30:
          { return createSymbol(ASTPHP5Symbols.T_KOVA);
          }
        case 389: break;
        case 43:
          { /* <ST_END_HEREDOC>{TABS_AND_SPACES}{LABEL}";"? */
    heredoc=null;
    resetHeredocBodyInfo();
    yybegin(ST_IN_SCRIPTING);
    int back = 0;
    // mark just the label
    if (yytext().charAt(yylength() - 1)==';') {
        back++;
    }
    yypushback(back);
    return createSymbol(ASTPHP5Symbols.T_END_HEREDOC);
          }
        case 390: break;
        case 10:
          { yybegin(ST_DOUBLE_QUOTES);
    return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 391: break;
        case 193:
          { return createFullSymbol(ASTPHP5Symbols.T_CONTINUE);
          }
        case 392: break;
        case 117:
          { return createSymbol(ASTPHP5Symbols.T_IS_IDENTICAL);
          }
        case 393: break;
        case 72:
          { return createSymbol(ASTPHP5Symbols.T_DOUBLE_ARROW);
          }
        case 394: break;
        case 136:
          { int len = yylength();
    yypushback(2); // go back to mark end of comment in the next token
    comment = yytext();
          }
        case 395: break;
        case 196:
          { return createFullSymbol(ASTPHP5Symbols.T_TRAIT_C);
          }
        case 396: break;
        case 85:
          { return createSymbol(ASTPHP5Symbols.T_PAAMAYIM_NEKUDOTAYIM);
          }
        case 397: break;
        case 122:
          { return createFullSymbol(ASTPHP5Symbols.T_USE);
          }
        case 398: break;
        case 82:
          { return createSymbol(ASTPHP5Symbols.T_SR);
          }
        case 399: break;
        case 14:
          { return createSymbol(ASTPHP5Symbols.T_EQUAL);
          }
        case 400: break;
        case 31:
          { return createSymbol(ASTPHP5Symbols.T_COMMA);
          }
        case 401: break;
        case 175:
          { return createFullSymbol(ASTPHP5Symbols.T_DIR);
          }
        case 402: break;
        case 202:
          { return createFullSymbol(ASTPHP5Symbols.T_PROTECTED);
          }
        case 403: break;
        case 52:
          { yypushback(1);
    popState();
    /*<ST_VAR_OFFSET>[ \n\r\t\\'#]*/
    return createSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 404: break;
        case 65:
          { return createSymbol(ASTPHP5Symbols.T_CONCAT_EQUAL);
          }
        case 405: break;
        case 109:
          { /* treat numbers (almost) as strings inside encapsulated strings */
    return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
          }
        case 406: break;
        case 9:
          { return createSymbol(ASTPHP5Symbols.T_DOLLAR);
          }
        case 407: break;
        case 66:
          { return createSymbol(ASTPHP5Symbols.T_INC);
          }
        case 408: break;
        case 76:
          { return createFullSymbol(ASTPHP5Symbols.T_LOGICAL_OR);
          }
        case 409: break;
        case 88:
          { return createSymbol(ASTPHP5Symbols.T_SL);
          }
        case 410: break;
        case 68:
          { return createFullSymbol(ASTPHP5Symbols.T_AS);
          }
        case 411: break;
        case 210:
          { return createFullSymbol(ASTPHP5Symbols.T_INCLUDE_ONCE);
          }
        case 412: break;
        case 130:
          { return createSymbol(ASTPHP5Symbols.T_POW_EQUAL);
          }
        case 413: break;
        case 71:
          { return createSymbol(ASTPHP5Symbols.T_IS_EQUAL);
          }
        case 414: break;
        case 34:
          { return createSymbol(ASTPHP5Symbols.T_AT);
          }
        case 415: break;
        case 53:
          { return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 416: break;
        case 188:
          { return createFullSymbol(ASTPHP5Symbols.T_LINE);
          }
        case 417: break;
        case 186:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    /* 3 is <<<, 2 is quotes, 1 is newline */
    nowdoc_len = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        nowdoc_len--;
    }
    // first quate
    startString++;
    nowdoc = yytext().substring(startString,nowdoc_len+startString);
    yybegin(ST_START_NOWDOC);
    return createSymbol(ASTPHP5Symbols.T_START_NOWDOC);
          }
        case 418: break;
        case 176:
          { return createFullSymbol(ASTPHP5Symbols.T_EXTENDS);
          }
        case 419: break;
        case 69:
          { return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 420: break;
        case 208:
          { return createSymbol(ASTPHP5Symbols.T_YIELD_FROM);
          }
        case 421: break;
        case 179:
          { return createFullSymbol(ASTPHP5Symbols.T_DECLARE);
          }
        case 422: break;
        case 99:
          { return createSymbol(ASTPHP5Symbols.T_XOR_EQUAL);
          }
        case 423: break;
        case 90:
          { return createSymbol(ASTPHP5Symbols.T_POW);
          }
        case 424: break;
        case 140:
          { return createFullSymbol(ASTPHP5Symbols.T_CASE);
          }
        case 425: break;
        case 187:
          { return createFullSymbol(ASTPHP5Symbols.T_FILE);
          }
        case 426: break;
        case 108:
          { return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
          }
        case 427: break;
        case 114:
          { return createSymbol(ASTPHP5Symbols.T_ELLIPSIS);
          }
        case 428: break;
        case 54:
          { return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 429: break;
        case 58:
          {
          }
        case 430: break;
        default:
          if (zzInput == YYEOF && (zzStartRead == zzCurrentPos || zzLexicalState == ST_DOCBLOCK)) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case ST_DOCBLOCK: {
              if (yytext().length() > 0) {
        yypushback(1);  // backup eof
        comment = yytext();
    }
    else {
        return createSymbol(ASTPHP5Symbols.EOF);
    }
            }
            case 805: break;
            default:
              {     return createSymbol(ASTPHP5Symbols.EOF);
 }
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
