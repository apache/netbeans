# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

ColumnTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Column</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Marks an annotated instance variable as "persistent". It has to be inside the instance variables <code>PHP</code> <code>DocBlock</code> comment. \
Any value hold inside this variable will be saved to and loaded from the database as part of the lifecycle of the instance variables entity-class.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Required attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>type</code></b></td>\
    <td>Name of the <code>Doctrine</code> <code>Type</code> which is converted between <code>PHP</code> and Database representation.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Optional attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>name</code></b></td>\
    <td>By default the property name is used for the database column name also, however the <code>name</code> attribute allows you to determine the column name.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>length</code></b></td>\
    <td>Used by the "string" type to determine its maximum length in the database. <code>Doctrine</code> does not validate the length of a string values for you.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>precision</code></b></td>\
    <td>The precision for a decimal (exact numeric) column (applies only for decimal column).</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>scale</code></b></td>\
    <td>The scale for a decimal (exact numeric) column (applies only for decimal column).</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>unique</code></b></td>\
    <td>Boolean value to determine if the value of the column should be unique across all rows of the underlying entities table.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>nullable</code></b></td>\
    <td>Determines if <code>NULL</code> values allowed for this column.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>columnDefinition</code></b></td>\
    <td><code>DDL</code> <code>SQL</code> snippet that starts after the column name and specifies the complete (non-portable!) column definition. \
This attribute allows to make use of advanced <code>RMDBS</code> features. However you should make careful use of this feature and the consequences. \
<code>SchemaTool</code> will not detect changes on the column correctly anymore if you use <code>columnDefinition</code>.</td>\
</tr>\
</table>\n\
<p>Additionally you should remember that the <code>type</code> attribute still handles the conversion between <code>PHP</code> and Database values. If you use this attribute on a column \
that is used for joins between tables you should also take a look at <code>@JoinColumn</code>.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Column(type="string", length=32, unique=true, nullable=false)\n\
\ */\n\
protected $username;\n\
\n\
/**\n\
\ * @Column(type="string", columnDefinition="CHAR(2) NOT NULL")\n\
\ */\n\
protected $country;\n\
\n\
/**\n\
\ * @Column(type="decimal", precision=2, scale=1)\n\
\ */\n\
protected $height;\n\
</code></pre>
ChangeTrackingPolicyTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@ChangeTrackingPolicy</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>ChangeTrackingPolicy</code> annotation allows to specify how the <code>Doctrine 2</code> <code>UnitOfWork</code> should detect changes in properties \
of entities during flush. By default each entity is checked according to a deferred implicit strategy, which means upon flush <code>UnitOfWork</code> compares all the properties \
of an entity to a previously stored snapshot. This works out of the box, however you might want to tweak the flush performance where using another change \
tracking policy is an interesting option.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Entity\n\
\ * @ChangeTrackingPolicy("DEFERRED_IMPLICIT")\n\
\ * @ChangeTrackingPolicy("DEFERRED_EXPLICIT")\n\
\ * @ChangeTrackingPolicy("NOTIFY")\n\
\ */\n\
class User {}\n\
</code></pre>
DiscriminatorColumnTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@DiscriminatorColumn</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>This annotation is a required annotation for the topmost/super class of an inheritance hierarchy. It specifies the details \
of the column which saves the name of the class, which the entity is actually instantiated as.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Required attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>name</code></b></td>\
    <td>The column name of the discriminator. This name is also used during array hydration as key to specify the class-name.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Optional attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>type</code></b></td>\
    <td>By default this is <code>string</code>.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>length</code></b></td>\
    <td>By default this is <code>255</code>.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\
/**\n\
\ * @Entity\n\
\ * @InheritanceType("JOINED")\n\
\ * @DiscriminatorColumn(name="discr", type="string")\n\
\ * @DiscriminatorMap({"person" = "Person", "employee" = "Employee"})\n\
\ */\n\
class Person {\n\
\    // ...\n\
}\n\
</code></pre>
DiscriminatorMapTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@DiscriminatorMap</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>DiscriminatorMap</code> is a required annotation on the top-most/super class in an inheritance hierarchy. It takes an array as only argument \
which defines which class should be saved under which name in the database. Keys are the database value and values are the classes, either as fully- or as unqualified \
class names depending if the classes are in the namespace or not.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\
/**\n\
\ * @Entity\n\
\ * @InheritanceType("JOINED")\n\
\ * @DiscriminatorColumn(name="discr", type="string")\n\
\ * @DiscriminatorMap({"person" = "Person", "employee" = "Employee"})\n\
\ */\n\
class Person {\n\
\    // ...\n\
}\n\
</code></pre>
EntityTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Entity</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Required annotation to mark a <code>PHP</code> class as <code>Entity</code>. <code>Doctrine</code> manages the persistence of all classes marked as entity.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Optional attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>repositoryClass</code></b></td>\
    <td>Specifies the <code>FQCN</code> of a subclass of the <code>EntityRepository</code>. Use of repositories for entities is encouraged to keep specialized <code>DQL</code> \
and <code>SQL</code> operations separated from the <code>Model</code>/<code>Domain</code> layer.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>readOnly</code></b></td>\
    <td>(>= 2.1) Specifies that this entity is marked as read only and not considered for change-tracking. Entities of this type can be persisted and removed though.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\
/**\n\
\ * @Entity(repositoryClass="MyProject\UserRepository")\n\
\ */\n\
class User {\n\
\    //...\n\
}\n\
</code></pre>
GeneratedValueTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@GeneratedValue</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Specifies which strategy is used for identifier generation for an instance variable which is annotated by <code>@Id</code>. \
This annotation is optional and only has meaning when used in conjunction with <code>@Id</code>.</p>\n\
<p>If this annotation is not specified with <code>@Id</code> the <code>NONE</code> strategy is used as default.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Required attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>strategy</code></b></td>\
    <td>Set the name of the identifier generation strategy. Valid values are <code>AUTO</code>, <code>SEQUENCE</code>, <code>TABLE</code>, <code>IDENTITY</code> and <code>NONE</code>.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\
/**\n\
\ * @Id\n\
\ * @Column(type="integer")\n\
\ * @generatedValue(strategy="IDENTITY")\n\
\ */\n\
protected $id = null;\n\
</code></pre>
HasLifecycleCallbacksTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@HasLifecycleCallbacks</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Annotation which has to be set on the entity-class <code>PHP</code> <code>DocBlock</code> to notify <code>Doctrine</code> that this entity has entity life-cycle \
callback annotations set on at least one of its methods. Using <code>@PostLoad</code>, <code>@PrePersist</code>, <code>@PostPersist</code>, <code>@PreRemove</code>, <code>@PostRemove</code>, \
<code>@PreUpdate</code> or <code>@PostUpdate</code> without this marker annotation will make <code>Doctrine</code> ignore the callbacks.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\
/**\n\
\ * @Entity\n\
\ * @HasLifecycleCallbacks\n\
\ */\n\
class User {\n\
\    /**\n\
\     * @PostPersist\n\
\     */\n\
\    public function sendOptinMail() {}\n\
}\n\
</code></pre>
IndexTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Index</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Annotation is used inside the <code>@Table</code> annotation on the entity-class level. It allows to hint the <code>SchemaTool</code> to generate a database index on \
the specified table columns. It only has meaning in the <code>SchemaTool</code> schema generation context.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Required attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>name</code></b></td>\
    <td>Name of the <code>Index</code>.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>columns</code></b></td>\
    <td>Array of columns.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\
/**\n\
\ * @Entity\n\
\ * @Table(name="ecommerce_products",indexes={@index(name="search_idx", columns={"name", "email"})})\n\
\ */\n\
class ECommerceProduct {\n\
}\n\
</code></pre>
IdTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Id</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The annotated instance variable will be marked as entity identifier, the primary key in the database. This annotation is a marker only and has no required \
or optional attributes. For entities that have multiple identifier columns each column has to be marked with <code>@Id</code>.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\
/**\n\
\ * @Id\n\
\ * @Column(type="integer")\n\
\ */\n\
protected $id = null;\n\
</code></pre>
InheritanceTypeTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@InheritanceType</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>In an inheritance hierarchy you have to use this annotation on the topmost/super class to define which strategy should be used for inheritance. \
Currently <code>Single Table</code> and <code>Class Table</code> inheritance are supported.</p>\n\
<p>This annotation has always been used in conjunction with the <code>@DiscriminatorMap</code> and <code>@DiscriminatorColumn</code> annotations.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\
/**\n\
\ * @Entity\n\
\ * @InheritanceType("SINGLE_TABLE")\n\
\ * @DiscriminatorColumn(name="discr", type="string")\n\
\ * @DiscriminatorMap({"person" = "Person", "employee" = "Employee"})\n\
\ */\n\
class Person {\n\
\    // ...\n\
}\n\
\n\
/**\n\
\ * @Entity\n\
\ * @InheritanceType("JOINED")\n\
\ * @DiscriminatorColumn(name="discr", type="string")\n\
\ * @DiscriminatorMap({"person" = "Person", "employee" = "Employee"})\n\
\ */\n\
class Person {\n\
\    // ...\n\
}\n\
</code></pre>
JoinColumnTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@JoinColumn</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>This annotation is used in the context of relations in <code>@ManyToOne</code>, <code>@OneToOne</code> fields and in the context of <code>@JoinTable</code> nested inside a <code>@ManyToMany</code>. \
This annotation is not required. If its not specified the attributes <code>name</code> and <code>referencedColumnName</code> are inferred from the table and primary key names.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Required attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>name</code></b></td>\
    <td>Column name that holds the foreign key identifier for this relation. In the context of <code>@JoinTable</code> it specifies the column name in the join table.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>referencedColumnName</code></b></td>\
    <td>Name of the primary key identifier that is used for joining of this relation.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Optional attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>unique</code></b></td>\
    <td>Determines if this relation exclusive between the affected entities and should be enforced so on the database constraint level. Defaults to <code>false</code>.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>nullable</code></b></td>\
    <td>Determine if the related entity is required, or if <code>null</code> is an allowed state for the relation. Defaults to <code>true</code>.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>onDelete</code></b></td>\
    <td>Cascade action (database-level).</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>columnDefinition</code></b></td>\
    <td><code>DDL</code> <code>SQL</code> snippet that starts after the column name and specifies the complete (non-portable!) column definition. This attribute allows to make use of advanced <code>RMDBS</code> features. \
Using this attribute on <code>@JoinColumn</code> is necessary if you need slightly different column definitions for joining columns, for example regarding <code>NULL</code>/<code>NOT NULL</code> defaults. However by \
default a <code>columnDefinition</code> attribute on <code>@Column</code> also sets the related <code>@JoinColumn</code>''s columnDefinition. This is necessary to make foreign keys work.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\
/**\n\
\ * @OneToOne(targetEntity="Customer")\n\
\ * @JoinColumn(name="customer_id", referencedColumnName="id")\n\
\ */\n\
private $customer;\n\
</code></pre>
JoinColumnsTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@JoinColumns</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>An array of <code>@JoinColumn</code> annotations for a <code>@ManyToOne</code> or <code>@OneToOne</code> relation with an entity that has multiple identifiers.</p>
JoinTableTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@JoinTable</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Using <code>@OneToMany</code> or <code>@ManyToMany</code> on the owning side of the relation requires to specify the <code>@JoinTable</code> annotation which describes the details \
of the database join table. If you do not specify <code>@JoinTable</code> on these relations reasonable mapping defaults apply using the affected table and the column names.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Required attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>name</code></b></td>\
    <td>Database name of the join-table.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>joinColumns</code></b></td>\
    <td>An array of <code>@JoinColumn</code> annotations describing the join-relation between the owning entities table and the join table.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>inverseJoinColumns</code></b></td>\
    <td>An array of <code>@JoinColumn</code> annotations describing the join-relation between the inverse entities table and the join table.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\
/**\n\
\ * @ManyToMany(targetEntity="Phonenumber")\n\
\ * @JoinTable(name="users_phonenumbers",\n\
\ *      joinColumns={@JoinColumn(name="user_id", referencedColumnName="id")},\n\
\ *      inverseJoinColumns={@JoinColumn(name="phonenumber_id", referencedColumnName="id", unique=true)}\n\
\ * )\n\
\ */\n\
public $phonenumbers;\n\
</code></pre>
ManyToOneTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@ManyToOne</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Defines that the annotated instance variable holds a reference that describes a many-to-one relationship between two entities.</p>\
<p style="font-weight: bold; font-size: 1.1em">Required attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>targetEntity</code></b></td>\
    <td><code>FQCN</code> of the referenced target entity. Can be the unqualified class name if both classes are in the same namespace. <b>Important</b>: No leading backslash!</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Optional attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>cascade</code></b></td>\
    <td>Cascade option.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>fetch</code></b></td>\
    <td>One of <code>LAZY</code> or <code>EAGER</code>.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>inversedBy</code></b></td>\
    <td>The <code>inversedBy</code> attribute designates the field in the entity that is the inverse side of the relationship.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\
/**\n\
\ * @ManyToOne(targetEntity="Cart", cascade={"all"}, fetch="EAGER")\n\
\ */\n\
private $cart;\n\
</code></pre>
ManyToManyTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@ManyToMany</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Defines an instance variable holds a many-to-many relationship between two entities. <code>@JoinTable</code> is an additional, optional annotation that has reasonable default \
configuration values using the table and names of the two related entities.</p>\
<p style="font-weight: bold; font-size: 1.1em">Required attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>targetEntity</code></b></td>\
    <td><code>FQCN</code> of the referenced target entity. Can be the unqualified class name if both classes are in the same namespace. <b>Important</b>: No leading backslash!</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Optional attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>mappedBy</code></b></td>\
    <td>This option specifies the property name on the <code>targetEntity</code> that is the owning side of this relation. Its a required attribute for the inverse side of a relationship.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>inversedBy</code></b></td>\
    <td>The <code>inversedBy</code> attribute designates the \ufb01eld in the entity that is the inverse side of the relationship.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>cascade</code></b></td>\
    <td>Cascade option.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>fetch</code></b></td>\
    <td>One of <code>LAZY</code>, <code>EXTRA_LAZY</code> or <code>EAGER</code>.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>indexBy</code></b></td>\
    <td>Index the collection by a field on the target entity.</td>\
</tr>\
</table>\n\
<p>For <code>ManyToMany</code> bidirectional relationships either side may be the owning side (the side that defines the <code>@JoinTable</code> and/or does not make use of the <code>mappedBy</code> \
attribute, thus using a default join table).</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\
/**\n\
\ * Owning Side\n\
\ *\n\
\ * @ManyToMany(targetEntity="Group", inversedBy="features")\n\
\ * @JoinTable(name="user_groups",\n\
\ *      joinColumns={@JoinColumn(name="user_id", referencedColumnName="id")},\n\
\ *      inverseJoinColumns={@JoinColumn(name="group_id", referencedColumnName="id")}\n\
\ *      )\n\
\ */\n\
private $groups;\n\
\n\
/**\n\
\ * Inverse Side\n\
\ *\n\
\ * @ManyToMany(targetEntity="User", mappedBy="groups")\n\
\ */\n\
private $features;\n\
</code></pre>
MappedSuperclassTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@MappedSuperclass</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>A mapped superclass is an abstract or concrete class that provides persistent entity state and mapping information for its subclasses, but which is not itself an entity. \
This annotation is specified on the <code>Class<code> <code>DocBlock</code> and has no additional attributes.</p>\
<p>The <code>@MappedSuperclass</code> annotation cannot be used in conjunction with <code>@Entity</code>.</p>\
<p style="font-weight: bold; font-size: 1.1em">Optional attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>repositoryClass</code></b></td>\
    <td>(>= 2.2) Specifies the <code>FQCN</code> of a subclass of the <code>EntityRepository</code>. That will be inherited for all subclasses of that <code>Mapped Superclass</code>.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\
/**\n\
\ * @MappedSuperclass\n\
\ */\n\
class MappedSuperclassBase {\n\
\    // ... fields and methods\n\
}\n\
\n\
/**\n\
\ * @Entity\n\
\ */\n\
class EntitySubClassFoo extends MappedSuperclassBase {\n\
\    // ... fields and methods\n\
}\n\
</code></pre>
OneToOneTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@OneToOne</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@OneToOne</code> annotation works almost exactly as the <code>@ManyToOne</code> with one additional option that can be specified. The configuration defaults for \
<code>@JoinColumn</code> using the target entity table and primary key column names apply here too.</p>\
<p style="font-weight: bold; font-size: 1.1em">Required attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>targetEntity</code></b></td>\
    <td><code>FQCN</code> of the referenced target entity. Can be the unqualified class name if both classes are in the same namespace. <b>Important</b>: No leading backslash!</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Optional attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>cascade</code></b></td>\
    <td>Cascade option.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>fetch</code></b></td>\
    <td>One of <code>LAZY</code> or <code>EAGER</code>.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>orphanRemoval</code></b></td>\
    <td>Boolean that specifies if orphans, inverse <code>OneToOne</code> entities that are not connected to any owning instance, should be removed by <code>Doctrine</code>. Defaults to <code>false</code>.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>inversedBy</code></b></td>\
    <td>The <code>inversedBy</code> attribute designates the \ufb01eld in the entity that is the inverse side of the relationship.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\
/**\n\
\ * @OneToOne(targetEntity="Customer")\n\
\ * @JoinColumn(name="customer_id", referencedColumnName="id")\n\
\ */\n\
private $customer;\n\
</code></pre>
OneToManyTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@OneToMany</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p style="font-weight: bold; font-size: 1.1em">Required attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>targetEntity</code></b></td>\
    <td><code>FQCN</code> of the referenced target entity. Can be the unqualified class name if both classes are in the same namespace. <b>Important</b>: No leading backslash!</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Optional attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>cascade</code></b></td>\
    <td>Cascade option.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>orphanRemoval</code></b></td>\
    <td>Boolean that specifies if orphans, inverse <code>OneToOne</code> entities that are not connected to any owning instance, should be removed by <code>Doctrine</code>. Defaults to <code>false</code>.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>mappedBy</code></b></td>\
    <td>This option specifies the property name on the <code>targetEntity</code> that is the owning side of this relation. It is a required attribute for the inverse side of a relationship.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>fetch</code></b></td>\
    <td>One of <code>LAZY</code>, <code>EXTRA_LAZY</code> or <code>EAGER</code>.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>indexBy</code></b></td>\
    <td>Index the collection by a field on the target entity.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\
/**\n\
\ * @OneToMany(targetEntity="Phonenumber", mappedBy="user", cascade={"persist", "remove", "merge"}, orphanRemoval=true)\n\
\ */\n\
public $phonenumbers;\n\
</code></pre>
OrderByTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@OrderBy</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Optional annotation that can be specified with a <code>@ManyToMany</code> or <code>@OneToMany</code> annotation to specify by which criteria the collection should be retrieved \
from the database by using an <code>ORDER BY</code> clause.</p>\
<p>This annotation requires a single non-attributed value with an <code>DQL</code> snippet:</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\
/**\n\
\ * @ManyToMany(targetEntity="Group")\n\
\ * @OrderBy({"name" = "ASC"})\n\
\ */\n\
private $groups;\n\
</code></pre>\n\
<p>The <code>DQL</code> snippet in <code>OrderBy</code> is only allowed to consist of unqualified, unquoted field names and of an optional <code>ASC</code>/<code>DESC</code> positional statement. \
Multiple fields are separated by a comma (,). The referenced field names have to exist on the <code>targetEntity</code> class of the <code>@ManyToMany</code> or <code>@OneToMany</code> annotation.</p>
PostLoadTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@PostLoad</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Marks a method on the entity to be called as a <code>@PostLoad</code> event. Only works with <code>@HasLifecycleCallbacks</code> in the entity class <code>PHP</code> <code>DocBlock</code>.</p>
PostPersistTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@PostPersist</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Marks a method on the entity to be called as a <code>@PostPersist</code> event. Only works with <code>@HasLifecycleCallbacks</code> in the entity class <code>PHP</code> <code>DocBlock</code>.</p>
PostRemoveTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@PostRemove</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Marks a method on the entity to be called as a <code>@PostRemove</code> event. Only works with <code>@HasLifecycleCallbacks</code> in the entity class <code>PHP</code> <code>DocBlock</code>.</p>
PostUpdateTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@PostUpdate</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Marks a method on the entity to be called as a <code>@PostUpdate</code> event. Only works with <code>@HasLifecycleCallbacks</code> in the entity class <code>PHP</code> <code>DocBlock</code>.</p>
PrePersistTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@PrePersist</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Marks a method on the entity to be called as a <code>@PrePersist</code> event. Only works with <code>@HasLifecycleCallbacks</code> in the entity class <code>PHP</code> <code>DocBlock</code>.</p>
PreRemoveTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@PreRemove</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Marks a method on the entity to be called as a <code>@PreRemove</code> event. Only works with <code>@HasLifecycleCallbacks</code> in the entity class <code>PHP</code> <code>DocBlock</code>.</p>
PreUpdateTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@PreUpdate</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Marks a method on the entity to be called as a <code>@PreUpdate</code> event. Only works with <code>@HasLifecycleCallbacks</code> in the entity class <code>PHP</code> <code>DocBlock</code>.</p>
SequenceGeneratorTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@SequenceGenerator</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>For the use with <code>@generatedValue(strategy="SEQUENCE")</code> this annotation allows to specify details about the sequence, such as the increment size and initial values of the sequence.</p>\
<p style="font-weight: bold; font-size: 1.1em">Required attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>sequenceName</code></b></td>\
    <td>Name of the sequence.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Optional attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>allocationSize</code></b></td>\
    <td>Increment the sequence by the allocation size when its fetched. A value larger than 1 allows to optimize for scenarios where you create more than one new entity per request. \
Defaults to 10</code>.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>initialValue</code></b></td>\
    <td>Where does the sequence start, defaults to <code>1</code>.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\
/**\n\
\ * @Id\n\
\ * @GeneratedValue(strategy="SEQUENCE")\n\
\ * @Column(type="integer")\n\
\ * @SequenceGenerator(sequenceName="tablename_seq", initialValue=1, allocationSize=100)\n\
\ */\n\
protected $id = null;\n\
</code></pre>
TableTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Table</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Annotation describes the table an entity is persisted in. It is placed on the entity-class <code>PHP</code> <code>DocBlock</code> and is optional. If it is not specified the table name \
will default to the entities unqualified classname.</p>\
<p style="font-weight: bold; font-size: 1.1em">Required attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>name</code></b></td>\
    <td>Name of the table.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Optional attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>indexes</code></b></td>\
    <td>Array of <code>@Index</code> annotations.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>uniqueConstraints</code></b></td>\
    <td>Array of <code>@UniqueConstraint</code> annotations.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\
/**\n\
\ * @Entity\n\
\ * @Table(name="user",\n\
\ *      uniqueConstraints={@UniqueConstraint(name="user_unique",columns={"username"})},\n\
\ *      indexes={@Index(name="user_idx", columns={"email"})}\n\
\ * )\n\
\ */\n\
class User {\n\
}\n\
</code></pre>
UniqueConstraintTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@UniqueConstraint</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Annotation is used inside the <code>@Table</code> annotation on the entity-class level. It allows to hint the <code>SchemaTool</code> to generate a database unique constraint on \
the specified table columns. It only has meaning in the <code>SchemaTool</code> schema generation context.</p>\
<p style="font-weight: bold; font-size: 1.1em">Required attributes</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>name</code></b></td>\
    <td>Name of the index.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>columns</code></b></td>\
    <td>Array of columns.</td>\
</tr>\
</table>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\
/**\n\
\ * @Entity\n\
\ * @Table(name="ecommerce_products",uniqueConstraints={@UniqueConstraint(name="search_idx", columns={"name", "email"})})\n\
\ */\n\
class ECommerceProduct {\n\
}\n\
</code></pre>
VersionTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Version</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Marker annotation that defines a specified column as version attribute used in an optimistic locking scenario. It only works on <code>@Column</code> annotations that have the \
type <code>integer<code> or <code>datetime</code>. Combining <code>@Version</code> with <code>@Id</code> is not supported.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\
/**\n\
\ * @column(type="integer")\n\
\ * @version\n\
\ */\n\
protected $version;\n\
</code></pre>
