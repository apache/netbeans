<?xml version='1.0' encoding='ISO-8859-1' ?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->

<project name="javacc-lang" default="compile">
    <!-- The project operates in the same directory
         where the grammar files are located so that JavaCC
         can place the resulting sources there.
         The target build script that calls this build script
         must make sure that the following properties are set:
           ${lexer.module.root} to dir that corresponds to root dir of the lexer module - ".../nb_all/lexer"
           ${grammar.name} to name of JavaCC .jj grammar file without ".jj" suffix e.g. "Calc"
           ${grammar.pkg} to package that corresponds to location of .jj file e.g. "org.netbeans.modules.lexer.demo.javacc"
           ${grammar.root} directory to be added to classpath in order to compile
             the generated java classes located in the same package as grammar file.
           ${tokentypes.ignore} can optionally be set to "true" to ignore the information
             about the tokens contained in the xxxConstants class
             generated by javacc.
           ${lang.description.xml.ignore} can optionally be set to "true"
             to ignore the information contained in the language description xml file.
           ${tokenmanager.src.postprocess} can optionally be set to generate
             a code that is more optimized. However there are some rules
             that need to be kept after setting this option. They are described
             at http://lexer.netbeans.org/doc/javacc.html.
      -->
    <property name="javacc.home" location="${lexer.module.root}/external"/>

    <property name="grammar.srcname" value="${grammar.name}.jj"/>
    <property name="lexer.name" value="${grammar.name}Lexer"/>
    <property name="lexer.classname" value="${grammar.pkg}.${lexer.name}"/>
    <property name="lexer.srcname" value="${lexer.name}.java"/>
    <property name="lang.name" value="${grammar.name}Language"/>
    <property name="lang.classname" value="${grammar.pkg}.${lang.name}"/>
    <property name="lang.srcname" value="${lang.name}.java"/>
    <property name="lang.description.xml" value="${lang.name}.xml"/>
    <property name="tokentypes.name" value="${grammar.name}Constants"/>
    <property name="tokentypes.classname" value="${grammar.pkg}.${tokentypes.name}"/>
    <property name="tokentypes.srcname" value="${tokentypes.name}.java"/>
    <property name="tokenmanager.name" value="${grammar.name}TokenManager"/>
    <property name="tokenmanager.classname" value="${grammar.pkg}.${tokenmanager.name}"/>
    <property name="tokenmanager.srcname" value="${tokenmanager.name}.java"/>
    <property name="test.desc.classname" value="${grammar.pkg}.${grammar.name}TestDescription"/>
    <property name="demo.inputfile" location="${grammar.name}DemoInput.txt"/>

    <patternset id="extra.files">
        <include name="CharStream.java"/>
        <include name="ParseException.java"/>
        <include name="Token.java"/>
        <include name="TokenMgrError.java"/>
    </patternset>
    
    <target name="check-tokenmanager-src-uptodate">
      <uptodate targetfile="${tokenmanager.srcname}" property="tokenmanager.src.uptodate">
        <srcfiles dir="." includes="${grammar.srcname}"/>
      </uptodate>
    </target>

    <!-- Compound target for complete generation and postprocessing
         of xxxTokenManager.java
      --> 
    <target name="generate-tokenmanager"
            depends="check-tokenmanager-src-uptodate, run-javacc, delete-extra-files, post-process-tokenmanager"
            description="Generate token manager source"/>

    <target name="echo-javacc-zip-not-available" unless="javacc-zip-available">
      <echo message="It appears that JavaCC.zip is not present under ${javacc.home}"/>
      <echo message="Please download JavaCC from http://www.experimentalstuff.com/Technologies/JavaCC/"/>
      <echo message="and place the JavaCC.zip into directory listed above."/>
    </target>

    <target name="check-grammar-imports">
      <loadfile property="grammar.srcname.contents"
                srcFile="${grammar.srcname}"/>

      <condition property="grammar-imports-ok">
        <and>
          <contains string="${grammar.srcname.contents}" substring="import org.netbeans.spi.lexer.javacc.CharStream;"/>
          <contains string="${grammar.srcname.contents}" substring="import org.netbeans.spi.lexer.javacc.Token;"/>
          <contains string="${grammar.srcname.contents}" substring="import org.netbeans.spi.lexer.javacc.TokenMgrError;"/>

        </and>
      </condition>

      <fail message="The grammar seems to not contain necessary imports. It's necessary to import CharStream, Token and TokenMgrError classes from org.netbeans.spi.lexer.javacc. Please see http://lexer.netbeans.org/doc/javacc-imports.html for details."
            unless="grammar-imports-ok"
      />

    </target>

    <target name="run-javacc"
            depends="check-tokenmanager-src-uptodate, check-grammar-imports"
            unless="tokenmanager.src.uptodate"
            description="Run JavaCC to generate java sources from the grammar">

        <available property="javacc-zip-available" file="${javacc.home}/JavaCC.zip" type="file"/>
        <antcall target="echo-javacc-zip-not-available"/>

        <javacc
            target="${grammar.srcname}"
            javacchome="${javacc.home}"
        />
    </target>

    <target name="delete-extra-files" depends="run-javacc"
            unless="tokenmanager.src.uptodate"
            description="Delete extra files generated by JavaCC">
        <delete quiet="true">
            <fileset dir=".">
                <patternset refid="extra.files"/>
            </fileset>
        </delete>
    </target>

    <target name="post-process-tokenmanager" depends="delete-extra-files"
            if="tokenmanager.src.postprocess"
            unless="tokenmanager.src.uptodate"
            description="Post process generated token manager source">
        <!-- JavaCC additional <CR> patch -->
        <fixcrlf
            srcdir="."
            includes="${tokenmanager.srcname}"
            eol="lf"
        />

        <!-- Declare shared token instance variable and populate it -->
        <replace
            dir="."
            includes="${tokenmanager.srcname}"
            token="private final Token jjFillToken()">
            <replacevalue><![CDATA[private final Token sharedTokenInstance = new Token();
private final Token jjFillToken()]]></replacevalue>
        </replace>

        <!-- Use one shared token instance instead of continuos Token instances creation -->
        <replace
            dir="."
            includes="${tokenmanager.srcname}"
            token="Token t = Token.newToken(jjmatchedKind);"
            value="Token t = sharedTokenInstance;"
        />

        <!-- Comment out resolving of the token image and begin/end line/column -->
        <replace
            dir="."
            includes="${tokenmanager.srcname}"
            token="String im = jjstrLiteralImages[jjmatchedKind];"
            value="/* String im = jjstrLiteralImages[jjmatchedKind];"
        />
        <replace
            dir="."
            includes="${tokenmanager.srcname}"
            token="t.endColumn = input_stream.getEndColumn();"
            value="t.endColumn = input_stream.getEndColumn(); */"
        />
    </target>

    <target name="check-language-src-uptodate" depends="generate-tokenmanager">
      <uptodate targetfile="${lang.srcname}" property="language-src-uptodate">
        <srcfiles dir=".">
          <include name="${tokenmanager.srcname}"/>
          <include name="${lang.description.xml}"/>
          <include name="${tokentypes.srcname}}"/>
        </srcfiles>
      </uptodate>
    </target>

    <target name="generate-language"
            depends="check-language-src-uptodate"
            unless="language-src-uptodate"
            description="Generate Language class source">

        <!-- Force recompilation of classes in the current dir such as e.g. xxxLexer
             that could be compiled with the old xxxLanguage class and still up-to-date.
             As the class resolves numeric constants from other classes
             at compile time the xxxLexer could use wrong constants.
          -->
        <delete quiet="true">
          <fileset dir=".">
            <include name="**/*.class"/>
          </fileset>
        </delete>

        <taskdef name="stringReplace" classname="org.netbeans.lexer.gen.StringReplace"
            classpath="${lexer.module.root}/gen/build/antclasses"/>

        <stringReplace replaceWhat="." replaceWith="/" replaceIn="${grammar.pkg}" property="grammar.pkgslash"/>

        <javac srcdir="${grammar.root}" destdir="${grammar.root}"
               includes="${grammar.pkgslash}/${tokentypes.srcname}"
               deprecation="${build.compiler.deprecation}"
               debug="${build.compiler.debug}">
        </javac>

        <taskdef name="generateLanguageSource"
                 classname="org.netbeans.lexer.gen.JavaCCGenerateLanguageSource">
          <classpath>
            <pathelement path="${lexer.module.root}/gen/build/antclasses"/>
            <pathelement location="${lexer.module.root}/gen/build/classes"/>
            <pathelement location="${lexer.module.root}/build/classes"/>
            <pathelement location="${grammar.root}"/>
          </classpath>
        </taskdef>

        <generateLanguageSource
             languageClassName="${lang.classname}"
             lexerClassName="${lexer.classname}"
             tokenTypesClassName="${tokentypes.classname}"
             languageDescriptionFile="${lang.description.xml}"
             ignoreTokenTypes="${tokentypes.ignore}"
             ignoreLanguageDescriptionFile="${lang.description.xml.ignore}"
             languageSourceFile="${lang.srcname}"
         />
    </target>

    <target name="compile" depends="generate-language">
        <taskdef name="stringReplace" classname="org.netbeans.lexer.gen.StringReplace"
            classpath="${lexer.module.root}/gen/build/antclasses"/>

      <stringReplace replaceWhat="." replaceWith="/" replaceIn="${grammar.pkg}" property="grammar.pkgslash"/>

      <javac srcdir="${grammar.root}" destdir="${grammar.root}"
             includes="${grammar.pkgslash}/"
             deprecation="${build.compiler.deprecation}"
             debug="${build.compiler.debug}">
        <classpath>
          <pathelement location="${lexer.module.root}/build/classes"/>
          <pathelement location="${grammar.root}"/>
        </classpath>
      </javac>
    </target>
    
    <target name="demo" depends="compile">
      <java classname="org.netbeans.modules.lexer.demo.EditorPaneDemo" dir="${basedir}" fork="true">
        <arg value="${lang.classname}"/>
        <arg value="${demo.inputfile}"/>
        <classpath>
          <pathelement location="${lexer.module.root}/build/classes"/>
          <pathelement location="${lexer.module.root}/demo/build/classes"/>
          <pathelement location="${grammar.root}"/>
        </classpath>
      </java>
    </target>
    
    <target name="test" depends="compile">
      <java classname="org.netbeans.modules.lexer.demo.LexerRandomTest" dir="${basedir}" fork="true">
        <arg value="${test.desc.classname}"/>
        <classpath>
          <pathelement location="${lexer.module.root}/build/classes"/>
          <pathelement location="${lexer.module.root}/demo/build/classes"/>
          <pathelement location="${grammar.root}"/>
        </classpath>
      </java>
    </target>

    <target name="generate-language-description" depends="compile">
      <taskdef name="generateLanguageDescription"
               classname="org.netbeans.lexer.gen.JavaCCGenerateLanguageDescription">
        <classpath>
          <pathelement path="${lexer.module.root}/gen/build/antclasses"/>
          <pathelement location="${lexer.module.root}/gen/build/classes"/>
          <pathelement location="${lexer.module.root}/build/classes"/>
          <pathelement location="${grammar.root}"/>
        </classpath>
      </taskdef>

      <generateLanguageDescription
             tokenTypesClassName="${tokentypes.classname}"
             languageDescriptionFile="${lang.description.xml}"
      />
    </target>

    <target name="clean">
      <delete quiet="true">
        <fileset dir=".">
          <patternset refid="extra.files"/>
          <include name="**/*.class"/>
          <include name="${tokenmanager.srcname}"/>
          <include name="${lang.srcname}"/>
          <include name="${tokentypes.srcname}"/>
        </fileset>
      </delete>
    </target>

</project>

