# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

################################################################################
# Log messages                                                                 #
# Use <class>.<method>.<name> notation for keys.                               #
################################################################################

# FetchLog class
FetchLog.close.cantClose=Cannot close input stream:
FetchLog.close.isNull=Input stream is null.

# FetchLogLocal class
FetchLogLocal.initInputFile.fileNotFound=Server log file {0} was not found.
FetchLogLocal.initInputFile.cantClose=Cannot close input stream:
FetchLogLocal.call.rotation=Log rotation dedected, switching stream.
FetchLogLocal.call.read=Read {0} bytes from local log file.
FetchLogLocal.call.interrupted=Caught InterruptedException: {0}
FetchLogLocal.call.interruptedIO=Caught InterruptedIOException: {0}
FetchLogLocal.call.ioException=Caught IOException:
FetchLogLocal.call.ioExceptionMsg=Caught IOException: {0}

# FetchLogPiped class
FetchLogPiped.stop.cantClose=Cannot close output stream: 
FetchLogPiped.stop.isNull=Output stream is null.
FetchLogPiped.close.failed=Log lines reading task execution failed.

# FetchLogRemote class
FetchLogRemote.call.read=Read {0} bytes from remote log file.
FetchLogRemote.call.interrupted=Caught InterruptedException: {0}
FetchLogRemote.call.interruptedIO=Caught InterruptedIOException: {0}
FetchLogRemote.call.exception=Caught ExecutionException: 
FetchLogRemote.call.ioException=Caught IOException: 
FetchLogRemote.call.ioExceptionMsg=Caught IOException: {0}

# ServerStatus class
AdminPortTask.handleIOException.messageTm=[{0}] {1}
AdminPortTask.handleIOException.message={0}
AdminPortTask.check.success=[{0} {1}] Port status check succeeded.
LocationsTask.start.started=[{0}] Locations task started.
LocationsTask.logExceptionOnJoin.failed=[{0}] Locations task failed: {1} {2}
LocationsTask.join.completed=[{0}] Locations task completed.
VersionTask.start.started=[{0}] Version task started.
VersionTask.logExceptionOnJoin..failed=[{0}] Version task failed: {1} {2}
VersionTask.join.completed=[{0}] Version task completed.

# ServerTasks class
ServerTasks.computeClassPath.cpError=Unable to read main class path \
from glassfish main jar when building launch classpath.
ServerTasks.appendOptions.jvmOptVal=DOMAIN.XML: jvm opt: {0} = {1}
ServerTasks.appendOptions.jvmOpt=DOMAIN.XML: jvm opt: {0}
