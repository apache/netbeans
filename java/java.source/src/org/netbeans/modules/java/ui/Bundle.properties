# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Formating options

LBL_TabsAndIndents=Tabs and Indents
LBL_CodeGeneration=Ordering
LBL_Naming=Naming
LBL_Alignment=Alignment
LBL_Braces=Braces
LBL_Wrapping=Wrapping
LBL_BlankLines=Blank Lines
LBL_Spaces=Spaces
LBL_Imports=Imports

LBL_bp_SAME_LINE=Same Line
LBL_bp_NEW_LINE=New Line
LBL_bp_NEW_LINE_HALF_INDENTED=New Line Half Indented
LBL_bp_NEW_LINE_INDENTED= New Line Indented
    
LBL_bg_GENERATE=Generate
LBL_bg_LEAVE_ALONE=Leave Alone
LBL_bg_ELIMINATE=Eliminate
       
LBL_wrp_WRAP_ALWAYS=Always
LBL_wrp_WRAP_IF_LONG=If Long
LBL_wrp_WRAP_NEVER=Never

LBL_ip_CARET_LOCATION=Caret Location
LBL_ip_FIRST_IN_CATEGORY=First In Category
LBL_ip_ORDERED_IN_CATEGORY=Ordered In Category
LBL_ip_LAST_IN_CATEGORY=Last In Category

LBL_ExpandTabToSpaces=&Expand Tab to Spaces
LBL_TabSize=&Tab Size:
LBL_IndentSize=&Indentation Size:
LBL_ContinuationIndentSize=&Continuation Indentation Size:
LBL_LabelIndent=&Label Indentation\:
LBL_AbsoluteLabelIndent=&Absolute Label Indentation
LBL_IndentTopLevelClassMemberts=&Indent Top Level Class Members
LBL_AddLeadingStarInComment=A&dd Leading Star In Comment
LBL_RightMargin=&Right Margin:
 
LBL_gen_Naming=Naming Conventions\:
LBL_gen_PreferLongerNames=Prefer Longer Names
LBL_gen_UseIsForBooleanGetters=Use Is For Boolean Getters
LBL_gen_Prefix=Prefix
LBL_gen_Suffix=Suffix
LBL_gen_Field=Field\:
LBL_gen_StaticField=Static Field\:
LBL_gen_Parameter=Parameter\:
LBL_gen_LocalVariable=Local Variable\:
LBL_gen_Other=Other\:
LBL_gen_QualifyFieldAccess=Qualify Field Access
LBL_gen_AddOverrideAnnotation=Add Override Annotation
LBL_gen_ParametersFinal=Make Generated Parameters Final
LBL_gen_LocalVariablesFinal=Make Generated Local variables Final
LBL_gen_MembersOreder=Members Sort Order\:
LBL_gen_MembersOrederUp=Move Up
LBL_gen_MembersOrederDown=Move Down
LBL_gen_SortByVisibility=Sort Members By Visibility
LBL_gen_KeepGASTogether=Keep Getters And Setters Together
LBL_gen_SortMembersAlpha=Sort Members in Groups Alphabetically
LBL_gen_InsertionPoint=Insertion Point\:

VAL_gen_STATIC=Static
VAL_gen_CLASS=Classes
VAL_gen_CONSTRUCTOR=Constructors
VAL_gen_FIELD=Fields
VAL_gen_INSTANCE_INIT=Instance Initializers
VAL_gen_METHOD=Methods
VAL_gen_STATIC_INIT=Static Initializers

VAL_gen_PUBLIC=Public
VAL_gen_PRIVATE=Private
VAL_gen_PROTECTED=Protected
VAL_gen_DEFAULT=Default

LBL_blMax=Maximum Preserved Blank Lines
LBL_blInDeclarations=In &Declarations\:
LBL_blInCode=In C&ode\:
LBL_blMin=Minimum Blank Lines
LBL_blBeforePackage=Before &Package\:
LBL_blAfterPackage=After Packa&ge\:
LBL_blBeforeImports=Before &Imports\:
LBL_blAfterImports=After Imports\:
LBL_blBeforeClass=Before &Class\:
LBL_blAfterClass=After C&lass\:
LBL_blAfterClassHeader=After Class &Header\:
LBL_blAfterAnonymousClassHeader=After &Anonymous Class Header:
LBL_blAfterEnumHeader=After En&um Header:
LBL_blBeforeClassFooter=Before Class Closing Brace:
LBL_blBeforeAnonymousClassFooter=Before Anonymous Class Closing Brace:
LBL_blBeforeEnumFooter=Before Enum Closing Brace:
LBL_blBeforeFields=Before &Field\:
LBL_blAfterFields=After Fi&eld\:
LBL_blBeforeMethods=Before &Method\:
LBL_blAfterMethods=After Me&thod\:

LBL_BeforeKeywords=Before Keywords
LBL_spaceBeforeWhile="while"
LBL_spaceBeforeElse="else"
LBL_spaceBeforeCatch="catch"
LBL_spaceBeforeFinally="finally"

LBL_BeforeParentheses=Before Parentheses
LBL_spaceBeforeMethodDeclParen=Method Declaration
LBL_spaceBeforeMethodCallParen=Method Call
LBL_spaceBeforeIfParen="if"
LBL_spaceBeforeForParen="for"
LBL_spaceBeforeWhileParen="while"
LBL_spaceBeforeTryParen="try"
LBL_spaceBeforeCatchParen="catch"
LBL_spaceBeforeSwitchParen="switch"
LBL_spaceBeforeSynchronizedParen="synchronized"
LBL_spaceBeforeAnnotationParen=Annotation Parameters

LBL_AroundOperators=Around Operators
LBL_spaceAroundUnaryOps=Unary Operators
LBL_spaceAroundBinaryOps=Binary Operators
LBL_spaceAroundTernaryOps=Ternary Operators
LBL_spaceAroundAssignOps=Assignment Operators
LBL_spaceAroundAnnotationValueAssignOps=Annotation Value Assignment Operator
LBL_spaceAroundLambdaArrow=Lambda Arrow
LBL_spaceAroundMethodReferenceDoubleColon=Method Reference Double Colon

LBL_BeforeLeftBraces=Before Left Braces
LBL_spaceBeforeClassDeclLeftBrace=Class Declaration
LBL_spaceBeforeMethodDeclLeftBrace=Method Declaration
LBL_spaceBeforeIfLeftBrace="if"
LBL_spaceBeforeElseLeftBrace="else"
LBL_spaceBeforeWhileLeftBrace="while"
LBL_spaceBeforeForLeftBrace="for"
LBL_spaceBeforeDoLeftBrace="do"
LBL_spaceBeforeSwitchLeftBrace="switch"
LBL_spaceBeforeTryLeftBrace="try"
LBL_spaceBeforeCatchLeftBrace="catch"
LBL_spaceBeforeFinallyLeftBrace="finally"
LBL_spaceBeforeSynchronizedLeftBrace="synchronized"
LBL_spaceBeforeStaticInitLeftBrace=Static Initializer
LBL_spaceBeforeArrayInitLeftBrace=Array Initializer

LBL_WithinParentheses=Within Parentheses
LBL_spaceWithinParens=Parentheses
LBL_spaceWithinMethodDeclParens=Method Declaration
LBL_spaceWithinMethodCallParens=Method Call
LBL_spaceWithinIfParens="if"
LBL_spaceWithinForParens="for"
LBL_spaceWithinWhileParens="while"
LBL_spaceWithinSwitchParens="switch"
LBL_spaceWithinTryParens="try"
LBL_spaceWithinCatchParens="catch"
LBL_spaceWithinSynchronizedParens="synchronized"
LBL_spaceWithinTypeCastParens=Type Cast
LBL_spaceWithinAnnotationParens=Annotation
LBL_spaceWithinBraces=Braces
LBL_spaceWithinArrayInitBrackets=Array Initializer Brackets
LBL_spaceWithinArrayIndexBrackets=Array Index Brackets
LBL_spaceWithinLambdaParens=Lambda Parameters

LBL_Other=Other
LBL_spaceBeforeComma=Before Comma
LBL_spaceAfterComma=After Comma
LBL_spaceBeforeSemi=Before Semicolon
LBL_spaceAfterSemi=After Semicolon
LBL_spaceBeforeColon=Before Colon
LBL_spaceAfterColon=After Colon
LBL_spaceAfterTypeCast=After Type Cast

LBL_wrp_extendsImplementsKeyword=&Extends/Implements Keyword\: 
LBL_wrp_extendsImplementsList=E&xtends/Implements List\:
LBL_wrp_methodParameters=Method &Parameters\:
LBL_wrp_throwsKeyword=&Throws Keyword\:
LBL_wrp_throwsList=Th&rows List\:
LBL_wrp_methodCallArgs=Method Call Arguments\:
LBL_wrp_annotationArgs=Annotation Arg&uments\:
LBL_wrp_chainedMethodCalls=C&hained Method Calls\:
LBL_wrp_afeterDot=Wrap After Dot In Chained Method Call
LBL_wrp_arrayInit=Array Initiali&zer\:
LBL_wrp_tryResources=Try Re&sources\:
LBL_wrp_multiCatches=Dis&junctive Catch Types\:
LBL_wrp_afterBar=Wrap After Bar in Disjunctive Catches
LBL_wrp_for=&For\:
LBL_wrp_forStatement=F&or Statement\:
LBL_wrp_ifStatement=&If Statement\:
LBL_wrp_whileStatement=&While Statement\:
LBL_wrp_doWhileStatement=&Do ... While Statement\:
LBL_wrp_caseStatements=Case Statements\:
LBL_wrp_assert=&Assert\:
LBL_wrp_enumConstants=Enum &Constants\:
LBL_wrp_annotations=A&nnotations\:
LBL_wrp_binaryOps=&Binary Operators\:
LBL_wrp_afeterBinaryOps=Wrap After Binary Operators
LBL_wrp_ternaryOps=Ternar&y Operators\:
LBL_wrp_afterTernaryOps=Wrap After Ternary Operators
LBL_wrp_assignOps=Assi&gnment Operators\:
LBL_wrp_afterAssignOps=Wrap After Assignment Operators
LBL_wrp_lambdaParams=&Lambda Parameters\:
LBL_wrp_lambdaArrow=Lambda Arrow\:
LBL_wrp_afterLambdaArrow=Wrap After Lambda Arrow
LBL_wrp_exportsToKeyword=Exports To Keyword:
LBL_wrp_exportsToList=Exports To List:
LBL_wrp_opensToKeyword=Opens To Keyword:
LBL_wrp_opensToList=Opens To List:
LBL_wrp_providesWithKeyword=Provides With Keyword:
LBL_wrp_providesWithList=Provides With List:

LBL_br_bracesPlacement=Braces Placement
LBL_br_bracesGeneration=Braces Generation
LBL_al_newLines=New Lines
LBL_al_multilineAlignment=Multiline Alignment
LBL_bp_ModuleDecl=Modu&le Declaration\:
LBL_bp_ClassDecl=&Class Declaration\:
LBL_bp_MethodDecl=&Method Declaration\:
LBL_bp_Other=&Other\:
LBL_bp_SpecialElseIf=&Special "else if" Treatment
LBL_bg_If="&if"\:
LBL_bg_For="&for"\:
LBL_bg_While="&while"\:
LBL_bg_DoWhile="&do ... while"\:
LBL_nl_Else="&else"
LBL_nl_While="w&hile"
LBL_nl_Catch="c&atch"
LBL_nl_Finally="finall&y"
LBL_nl_Modifiers=After modifie&rs
LBL_am_MethodParams=Method &Parameters
LBL_am_LambdaParams=&Lambda Parameters
LBL_am_CallArgs=Method Call Arg&uments
LBL_am_AnnotationArgs=&Annotation Arguments
LBL_an_Implements=I&mplements List
LBL_am_Throws=&Throws List
LBL_am_Paren=Parenthesize&d
LBL_am_BinaryOp=&Binary Operators
LBL_am_TernaryOp=Ter&nary Operators
LBL_am_Assign=Assi&gnment
LBL_am_For=&For
LBL_am_ArrayInit=Array Initiali&zer
LBL_am_TryResources=Try Re&sources
LBL_am_MultiCatch=Dis&junctive Catch Types
LBL_am_Exports=E&xports
LBL_am_Opens=&Opens
LBL_am_Provides=Prov&ides

LBL_IndentCasesFromSwitch=Indent Case Statements In &Switch

LBL_Comments=Comments
LBL_doc_enableCommentFormat=Enable Comments Formatting
LBL_doc_enableBlockCommentFormat=Format Block Comments
LBL_doc_generalLabel=General
LBL_doc_addLeadingStar=Add Leading Star
LBL_doc_wrapCommentText=Wrap Text At Right Margin
LBL_doc_wrapOneLineCheckBox=Wrap One Line Comments
LBL_doc_preserveNewLinesCheckBox=Preserve New Lines
LBL_doc_javadocLabel=Javadoc
LBL_doc_blankLineAfterDescCheckBox=Add Blank Line After Description
LBL_doc_blankLineAfterParamsCheckBox=Add Blank Line After Parameter Descriptions
LBL_doc_blankLineAfterReturnCheckBox=Add Blank Line After Return Tag
LBL_doc_generatePCheckBox=Generate "<p>" On Blank Lines
LBL_doc_alignParamsCheckBox=Align Parameter Descriptions
LBL_doc_alignReturnCheckBox=Align Return Value Descriptions
LBL_doc_alignExceptionsCheckBox=Align Exception Descriptions

LBL_imp_useSingleClass=Use Single Class Imports
LBL_imp_usePackage=Use Package Imports
LBL_imp_useFQN=Use Fully Qualified Names
LBL_imp_importTreshold=Class Count To Use Star Import
LBL_imp_staticImportTreshold=Members Count To Use Static Star Import
LBL_imp_importInnerClasses=Import Inner Classes
LBL_imp_preferStaticImports=Prefer Static Imports
LBL_imp_starImportPackages=Packages To Use Star Import: 
LBL_imp_importLayout=Import Layout:
LBL_imp_separateStaticImports=Separate Static Imports
LBL_imp_add=Add
LBL_imp_remove=Remove
LBL_imp_moveUp=Move Up
LBL_imp_moveDown=Move Down
LBL_imp_separateGroups=Separate Groups
LBL_imp_allOtherImports=<all other imports>
LBL_imp_Package=Package
LBL_imp_WithSub=*
LBL_imp_Static=Static

# Following entries (marked) as samples are used as examples in the formating
# options. It is highly discourage to localize them unless absolutely necessary.

#do not translate
SAMPLE_Default=public class ClassA {\
public int number = 1;\
private String text ="A";\
public ClassA() {\
}\
public void meth(String text, int number) {\
}\
}

#do not translate
SAMPLE_TabsIndents=public class ClassA {\
public int number = 1;\
private String letters[] = new String[]{ "A", "B" };\
public int meth(String text, int number) {\
if ( text == null ) {\
    text = "a";\
}\
else if (text.length() == 0) {\
    text = "empty";\
}\
else {\
    number++;\
}\
label:\
switch(number) {\
case 1\:\
    return meth("text", 22);\
case 2\:\
    return 20;\
default\:\
    return -1;\
}\
} }

#do not translate
SAMPLE_Align=@Anno(paramA="aValue", paramB="bValue")\
public class ClassA implements InterfaceA, InterfaceB {\
private String letters[] = new String[]{"A", "B"};\
public int meth(String text, int number) throws ExceptionA, ExceptionB {\
BinaryOperator plus = (a, b) -> a + b;\
if ( text != null ) {\
try (Resource r1 = null; Resource r2 = getResource()) {\
meth( "Some text", text.length());\
} catch ( ExceptionA | ExceptionB e ) {\
} finally {\
}\
} else {\
text = number == 0 ? "empty" : "nonempty";\
}\
do {\
number =\nnumber + 1;\
} while (number < 2);\
for( int i = 1; i < 100; i++ ) {\
number = (number +\ni) * 2;\
}\
}\
}

#do not translate
SAMPLE_Braces=public class ClassA {\
private String letters[] = new String[]{"A", "B"};\
public int meth(String text, int number) {\
BinaryOperator plus = (a, b) -> {\
return a + b;\
};\
if ( text != null ) {\
try {\
meth( "Some text", text.length());\
} catch ( Throwable t ) {\
} finally {\
}\
} else if (number >= 0) {\
text = number == 0 ? "empty" : "nonempty";\
}\
do {\
number = number + 1;\
} while (number < 2);\
for( int i = 1; i < 100; i++ ) {\
number = number + i;\
}\
while(number > 0) {\
number--;\
}\
}\
}

#do not translate
SAMPLE_Wrapping=@Anno(paramA="a Value", paramB="bValue")\
@Deprecated \
public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {\
private static final String letters[] = new String[]{ "A", "B", "C", "D" };\
public int number = 1;\
public ClassA() {\
}\
public int method(String text, int number, Object object) throws ExceptionA, ExceptionB {\
BinaryOperator plus = (a, b) -> a + b;\
assert nuber + text.length() < 20 : "message";\
try(Resource r1 = null; Resource r2 = getResource()) {\
if (number==13 && object instanceof Runnable )\
method( "Some text", 12, new Object());\
} catch (ExceptionA | ExceptionB e) {}\
for( int i = 1; i < 100; i++ )\
System.out.print(i);\
while ( this.number < 2 && number != 3 )\
this.number++;\
do \
method1().method2().method3();\
while ( this.number < 2 && number != 3 );\
switch (number) {\
case 0: return 0;\
default: return number > 100 ? -1 : -2;\
}\
}\
public enum Where {\
NORTH, EAST, SOUTH, WEST;\
}\
}

#do not translate
SAMPLE_BlankLines=package org.netbeans.samples;\
import java.util.List;\
import java.util.Map;\
\
public class ClassA {\
public int i;\
public int j;\
\
public ClassA() {\
}\
public void methodA() {\
new Runnable() {\
public void run() {\
}\
};\
}\
public void methodB() {\
}\
public class InnerClass {\
}\
public static interface InnerInterface {\
}\
public enum InnerEnum {\
ONE, TWO, THREE\
}\
}

#do not translate
SAMPLE_Spaces=@Anno(paramA="aValue", paramB="bValue")\
public class ClassA {\
public int number = 1;\
private String text ="A";\
static float[] floats = new float[3];\
protected double[] doubles = new double[]{3.67,40,2e-30};\
\
static {\
    floats[0]=12.6f;\
}\
\
public ClassA() {\
}\
public int meth(String text, int number) {\
BinaryOperator plus = (a, b) -> a + b;\
BinaryOperator plusOp = this::add;\
if (number==13) {\
return (int)System.currentTimeMillis();\
}else {\
}\
\
for( int i = 20; i < 100; i++) {\
    synchronized(this) {\
        while(i%13>5)\
            meth( text + " ", number++);\
    }\
}\
\
for(float f : floats)\
    System.out.println(f);\
\
switch(number) {\
case 1\:\
    do { out( (2+3)*this.number--); } while(this.number > 6);\
    return 10;\
case 2\:\
    try {\
        toString();\
    }\
    catch ( IllegalStateException illegalStateException ) {\
        illegalStateException.printStackTrace();\
    }\
    finally {\
        return 20;\
    }\
default\:\
   return number > 100 ? -1 : -2;\
}\
public int add(int a, int b) {\
    return a + b;\
}\
} }

#do not translate
SAMPLE_Comments=public class ClassA {\n\
/**\n\
This  is  the first part of a  sample  method  description.\n\
The second part is placed after a manual newline.\n\
\n\
The last part is placed after an empty line.\n\
@param text the first parameter description\n\
@param number the second parameter description\n\
@return this is the return value description\n\
@throws ExcepA the first exception description\n\
@throws ExcB the second exception description\n\
*/\n\
public String meth(String text, int number) throws ExceptionA, ExcB {\n\
/*This is one line comment*/\n\
return number > 0 ? text : null;\n\
}\n\
}

#do not translate
SAMPLE_Imports=package org.netbeans.samples;\
\
public class ClassA {\
\
public void method() {\
}\
}

#do not translate
SAMPLE_CodeGen=public class ClassA {\
\
private String name;\
}

#do not translate
SAMPLE_Naming=public class ClassA {\
\
}

nlFinallyCheckBox1.text="finall&y"

AN_Preview=Preview
AD_Preview=Preview
FmtTabsIndents.absoluteLabelIndentCheckBox.AccessibleContext.accessibleDescription=Indent Labels absolutely
FmtTabsIndents.addLeadingStarInCommentCheckBox.AccessibleContext.accessibleDescription=Comment lines starting with leading star
FmtTabsIndents.indentCasesFromSwitchCheckBox.AccessibleContext.accessibleDescription=Additional indent for case statements
FmtTabsIndents.indentTopLevelClassMembersCheckBox.AccessibleContext.accessibleDescription=Indent for top-level class members
FmtTabsIndents.continuationIndentSizeField.AccessibleContext.accessibleDescription=Indent size in spaces
FmtTabsIndents.labelIndentField.AccessibleContext.accessibleDescription=Label indentation size in spaces

ContainsErrorsWarning.jLabel1.text=<html><b>One or more projects were compiled with errors.</b><br>Application you are running may end unexpectedly.
ContainsErrorsWarning.doNotAskAgain.text=&Always run without asking
BTN_RunAnyway=&Run Anyway
BTN_Cancel=&Cancel
ACSD_CB_ContainsErrorsWarning.doNotAskAgain.text=Always run without asking.
ACSD_BTN_RunAnyway=Run anyway. One or more projects were compiled with errors. Application you are running may end unexpectedly.
ACSD_BTN_Cancel=Cancel.
ACSD_ContainsErrorsWarning=Run Project. One or more projects were compiled with errors. Application you are running may end unexpectedly.
ACSN_BTN_RunAnyway=Run anyway
ACSN_BTN_Cancel=Cancel
ACSN_CB_ContainsErrorsWarning.doNotAskAgain.text=Always run without asking
ACSN_ContainsErrorsWarning=Run Project
TITLE_ContainsErrorsWarning=Run Project
TITLE_LowMemory=Low Memory
MSG_LowMemory=Not enough memory to compile: {0}.
URL_LowMemory=http://wiki.netbeans.org/InsufficientMemoryToIndexRoot
FmtCodeGeneration.sortUsesDependenciesCheckBox.text=Sort uses dependencies
FmtBraces.jLabel1.text=Parenthesis
FmtBraces.lambdaParensCheckBox.text=Always use parens around lambda parameters
