/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jan 14 13:12:13 JST 2022
//----------------------------------------------------

package org.netbeans.modules.php.editor.parser;

import java.util.*;
import org.netbeans.modules.csl.api.OffsetRange;
import org.netbeans.modules.php.editor.parser.astnodes.*;
import org.openide.util.Pair;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jan 14 13:12:13 JST 2022
  */
@org.netbeans.api.annotations.common.SuppressWarnings({"EI_EXPOSE_REP", "MS_PKGPROTECT", "BC_BAD_CAST_TO_CONCRETE_COLLECTION"})
public class ASTPHP5Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ASTPHP5Parser() {super();}

  /** Constructor which sets the default scanner. */
  public ASTPHP5Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ASTPHP5Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] =
    unpackFromStrings(new String[] {
    "\000\u030c\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\005\000\002\004\003" +
    "\000\002\004\005\000\002\004\004\000\002\200\003\000" +
    "\002\200\003\000\002\200\003\000\002\200\003\000\002" +
    "\200\003\000\002\200\003\000\002\200\003\000\002\200" +
    "\003\000\002\200\003\000\002\200\003\000\002\200\003" +
    "\000\002\200\003\000\002\200\003\000\002\200\003\000" +
    "\002\200\003\000\002\200\003\000\002\200\003\000\002" +
    "\200\003\000\002\200\003\000\002\200\003\000\002\200" +
    "\003\000\002\200\003\000\002\200\003\000\002\200\003" +
    "\000\002\200\003\000\002\200\003\000\002\200\003\000" +
    "\002\200\003\000\002\200\003\000\002\200\003\000\002" +
    "\200\003\000\002\200\003\000\002\200\003\000\002\200" +
    "\003\000\002\200\003\000\002\200\003\000\002\200\003" +
    "\000\002\200\003\000\002\200\003\000\002\200\003\000" +
    "\002\200\003\000\002\200\003\000\002\200\003\000\002" +
    "\200\003\000\002\200\003\000\002\200\003\000\002\200" +
    "\003\000\002\200\003\000\002\200\003\000\002\200\003" +
    "\000\002\200\003\000\002\200\003\000\002\200\003\000" +
    "\002\200\003\000\002\200\003\000\002\200\003\000\002" +
    "\200\003\000\002\200\003\000\002\200\003\000\002\200" +
    "\003\000\002\200\003\000\002\200\003\000\002\200\003" +
    "\000\002\200\003\000\002\200\003\000\002\200\003\000" +
    "\002\200\003\000\002\200\003\000\002\201\003\000\002" +
    "\201\003\000\002\201\003\000\002\201\003\000\002\201" +
    "\003\000\002\201\003\000\002\201\003\000\002\201\003" +
    "\000\002\203\003\000\002\203\003\000\002\202\003\000" +
    "\002\202\003\000\002\202\003\000\002\012\004\000\002" +
    "\012\002\000\002\315\003\000\002\315\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\004\000\002\013\003" +
    "\000\002\013\005\000\002\013\007\000\002\013\006\000" +
    "\002\013\005\000\002\013\006\000\002\013\006\000\002" +
    "\013\004\000\002\313\003\000\002\313\006\000\002\314" +
    "\003\000\002\314\005\000\002\311\006\000\002\312\003" +
    "\000\002\312\004\000\002\011\005\000\002\011\003\000" +
    "\002\010\003\000\002\010\005\000\002\010\007\000\002" +
    "\010\004\000\002\010\006\000\002\010\010\000\002\005" +
    "\004\000\002\005\002\000\002\006\005\000\002\006\003" +
    "\000\002\007\003\000\002\007\005\000\002\007\004\000" +
    "\002\007\006\000\002\007\004\000\002\007\006\000\002" +
    "\015\004\000\002\015\002\000\002\016\003\000\002\016" +
    "\003\000\002\016\004\000\002\014\003\000\002\014\004" +
    "\000\002\017\005\000\002\017\011\000\002\017\014\000" +
    "\002\017\007\000\002\017\011\000\002\017\013\000\002" +
    "\017\007\000\002\017\004\000\002\017\005\000\002\017" +
    "\004\000\002\017\005\000\002\017\004\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\003\000\002" +
    "\017\004\000\002\017\005\000\002\017\010\000\002\017" +
    "\012\000\002\017\012\000\002\017\007\000\002\017\003" +
    "\000\002\017\012\000\002\017\020\000\002\017\005\000" +
    "\002\017\003\000\002\017\003\000\002\217\003\000\002" +
    "\217\002\000\002\220\003\000\002\220\004\000\002\221" +
    "\012\000\002\226\002\000\002\226\006\000\002\222\004" +
    "\000\002\223\003\000\002\223\002\000\002\224\003\000" +
    "\002\224\004\000\002\225\004\000\002\020\003\000\002" +
    "\020\005\000\002\021\003\000\002\022\003\000\002\022" +
    "\005\000\002\214\003\000\002\215\003\000\002\057\002" +
    "\000\002\057\003\000\002\060\002\000\002\060\003\000" +
    "\002\227\014\000\002\230\011\000\002\230\010\000\002" +
    "\230\007\000\002\162\004\000\002\162\002\000\002\316" +
    "\005\000\002\316\013\000\002\163\003\000\002\163\004" +
    "\000\002\163\003\000\002\160\004\000\002\160\002\000" +
    "\002\320\006\000\002\320\013\000\002\161\003\000\002" +
    "\161\004\000\002\161\003\000\002\161\005\000\002\231" +
    "\003\000\002\231\004\000\002\231\004\000\002\232\002" +
    "\000\002\232\004\000\002\147\003\000\002\150\002\000" +
    "\002\150\004\000\002\233\002\000\002\233\004\000\002" +
    "\234\003\000\002\234\005\000\002\023\002\000\002\023" +
    "\004\000\002\024\003\000\002\024\004\000\002\024\006" +
    "\000\002\024\005\000\002\025\003\000\002\025\006\000" +
    "\002\026\003\000\002\026\006\000\002\027\003\000\002" +
    "\027\006\000\002\030\005\000\002\030\007\000\002\031" +
    "\005\000\002\031\006\000\002\031\006\000\002\031\007" +
    "\000\002\032\002\000\002\032\007\000\002\032\006\000" +
    "\002\033\003\000\002\033\003\000\002\034\003\000\002" +
    "\034\006\000\002\035\002\000\002\035\010\000\002\036" +
    "\002\000\002\036\011\000\002\037\002\000\002\037\004" +
    "\000\002\040\002\000\002\040\005\000\002\041\004\000" +
    "\002\041\002\000\002\044\003\000\002\044\005\000\002" +
    "\321\004\000\002\321\003\000\002\206\002\000\002\206" +
    "\003\000\002\206\003\000\002\206\004\000\002\206\004" +
    "\000\002\264\003\000\002\045\007\000\002\045\011\000" +
    "\002\247\002\000\002\247\004\000\002\235\002\000\002" +
    "\235\003\000\002\236\003\000\002\236\004\000\002\236" +
    "\003\000\002\236\003\000\002\240\003\000\002\240\003" +
    "\000\002\241\003\000\002\241\003\000\002\241\003\000" +
    "\002\242\005\000\002\242\005\000\002\244\005\000\002" +
    "\244\005\000\002\237\003\000\002\237\004\000\002\237" +
    "\003\000\002\237\003\000\002\243\005\000\002\243\005" +
    "\000\002\245\005\000\002\245\005\000\002\046\004\000" +
    "\002\046\002\000\002\047\003\000\002\047\005\000\002" +
    "\050\003\000\002\050\004\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\050\004\000\002\050\003" +
    "\000\002\051\003\000\002\051\003\000\002\052\005\000" +
    "\002\052\003\000\002\053\003\000\002\053\004\000\002" +
    "\053\006\000\002\054\005\000\002\054\007\000\002\054" +
    "\003\000\002\054\005\000\002\055\004\000\002\055\002" +
    "\000\002\317\006\000\002\317\005\000\002\317\013\000" +
    "\002\056\003\000\002\056\004\000\002\056\003\000\002" +
    "\056\005\000\002\151\005\000\002\151\003\000\002\164" +
    "\003\000\002\164\004\000\002\152\003\000\002\152\005" +
    "\000\002\153\004\000\002\153\002\000\002\154\003\000" +
    "\002\154\003\000\002\310\005\000\002\310\003\000\002" +
    "\155\010\000\002\156\011\000\002\156\010\000\002\156" +
    "\006\000\002\156\007\000\002\156\006\000\002\157\003" +
    "\000\002\157\003\000\002\157\003\000\002\211\003\000" +
    "\002\211\005\000\002\207\002\000\002\207\003\000\002" +
    "\207\003\000\002\207\004\000\002\207\004\000\002\251" +
    "\003\000\002\251\003\000\002\251\003\000\002\251\004" +
    "\000\002\251\004\000\002\251\004\000\002\251\004\000" +
    "\002\251\003\000\002\210\002\000\002\210\003\000\002" +
    "\210\003\000\002\210\003\000\002\210\004\000\002\210" +
    "\004\000\002\210\004\000\002\210\004\000\002\210\004" +
    "\000\002\210\004\000\002\210\004\000\002\210\005\000" +
    "\002\210\005\000\002\210\005\000\002\210\005\000\002" +
    "\210\005\000\002\210\005\000\002\210\005\000\002\262" +
    "\003\000\002\263\003\000\002\265\003\000\002\266\003" +
    "\000\002\266\003\000\002\266\003\000\002\267\003\000" +
    "\002\267\003\000\002\177\005\000\002\177\007\000\002" +
    "\177\003\000\002\177\005\000\002\205\007\000\002\205" +
    "\006\000\002\204\007\000\002\204\006\000\002\061\005" +
    "\000\002\061\003\000\002\062\002\000\002\062\003\000" +
    "\002\063\005\000\002\063\003\000\002\064\003\000\002" +
    "\064\003\000\002\064\005\000\002\064\004\000\002\065" +
    "\010\000\002\065\007\000\002\065\005\000\002\065\006" +
    "\000\002\065\010\000\002\065\005\000\002\065\005\000" +
    "\002\065\005\000\002\065\005\000\002\065\005\000\002" +
    "\065\005\000\002\065\005\000\002\065\005\000\002\065" +
    "\005\000\002\065\005\000\002\065\005\000\002\065\005" +
    "\000\002\065\005\000\002\065\004\000\002\065\004\000" +
    "\002\065\004\000\002\065\004\000\002\065\005\000\002" +
    "\065\005\000\002\065\005\000\002\065\005\000\002\065" +
    "\005\000\002\065\005\000\002\065\005\000\002\065\005" +
    "\000\002\065\005\000\002\065\005\000\002\065\005\000" +
    "\002\065\005\000\002\065\005\000\002\065\005\000\002" +
    "\065\005\000\002\065\005\000\002\065\005\000\002\065" +
    "\005\000\002\065\004\000\002\065\004\000\002\065\004" +
    "\000\002\065\004\000\002\065\005\000\002\065\005\000" +
    "\002\065\005\000\002\065\005\000\002\065\005\000\002" +
    "\065\005\000\002\065\005\000\002\065\005\000\002\065" +
    "\005\000\002\065\005\000\002\065\003\000\002\065\007" +
    "\000\002\065\006\000\002\065\005\000\002\065\003\000" +
    "\002\065\004\000\002\065\004\000\002\065\004\000\002" +
    "\065\004\000\002\065\004\000\002\065\004\000\002\065" +
    "\004\000\002\065\004\000\002\065\004\000\002\065\003" +
    "\000\002\065\003\000\002\065\005\000\002\065\004\000" +
    "\002\065\003\000\002\065\004\000\002\065\003\000\002" +
    "\065\004\000\002\065\003\000\002\113\014\000\002\113" +
    "\015\000\002\113\012\000\002\113\013\000\002\114\011" +
    "\000\002\115\002\000\002\115\004\000\002\116\003\000" +
    "\002\116\005\000\002\117\006\000\002\117\006\000\002" +
    "\120\003\000\002\120\005\000\002\042\002\000\002\042" +
    "\007\000\002\043\005\000\002\043\006\000\002\043\003" +
    "\000\002\043\004\000\002\067\006\000\002\067\010\000" +
    "\002\067\007\000\002\067\010\000\002\067\010\000\002" +
    "\067\012\000\002\067\010\000\002\067\010\000\002\067" +
    "\012\000\002\067\006\000\002\067\006\000\002\067\004" +
    "\000\002\067\006\000\002\066\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\005\000\002\066\007\000\002" +
    "\066\003\000\002\066\003\000\002\175\003\000\002\175" +
    "\003\000\002\175\005\000\002\175\004\000\002\176\003" +
    "\000\002\176\005\000\002\176\004\000\002\270\003\000" +
    "\002\270\003\000\002\273\006\000\002\273\006\000\002" +
    "\273\003\000\002\277\004\000\002\277\002\000\002\300" +
    "\004\000\002\300\004\000\002\070\002\000\002\070\004" +
    "\000\002\070\005\000\002\071\002\000\002\071\005\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\072\003\000\002\072\003\000\002\072" +
    "\003\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\072\003\000\002\072\005\000\002\072\004\000" +
    "\002\075\003\000\002\075\003\000\002\075\005\000\002" +
    "\075\004\000\002\075\003\000\002\075\003\000\002\075" +
    "\003\000\002\076\003\000\002\076\005\000\002\077\003" +
    "\000\002\077\003\000\002\077\003\000\002\077\004\000" +
    "\002\077\004\000\002\077\005\000\002\077\005\000\002" +
    "\077\005\000\002\077\005\000\002\077\005\000\002\077" +
    "\005\000\002\077\004\000\002\077\004\000\002\077\005" +
    "\000\002\077\005\000\002\077\005\000\002\077\005\000" +
    "\002\077\005\000\002\077\005\000\002\077\005\000\002" +
    "\077\005\000\002\077\005\000\002\077\005\000\002\077" +
    "\005\000\002\077\005\000\002\077\005\000\002\077\005" +
    "\000\002\077\005\000\002\077\005\000\002\077\005\000" +
    "\002\077\005\000\002\077\005\000\002\077\005\000\002" +
    "\077\005\000\002\077\006\000\002\077\007\000\002\077" +
    "\005\000\002\077\004\000\002\077\004\000\002\077\005" +
    "\000\002\073\003\000\002\074\003\000\002\301\005\000" +
    "\002\302\003\000\002\302\003\000\002\305\006\000\002" +
    "\305\006\000\002\304\006\000\002\304\006\000\002\304" +
    "\006\000\002\303\004\000\002\303\004\000\002\306\006" +
    "\000\002\306\005\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\100\005\000\002\100\004\000\002" +
    "\100\003\000\002\100\005\000\002\100\003\000\002\165" +
    "\005\000\002\101\002\000\002\101\004\000\002\102\002" +
    "\000\002\102\003\000\002\246\003\000\002\246\003\000" +
    "\002\103\007\000\002\103\005\000\002\103\006\000\002" +
    "\103\005\000\002\103\004\000\002\103\003\000\002\121" +
    "\005\000\002\111\003\000\002\111\004\000\002\111\004" +
    "\000\002\111\004\000\002\111\006\000\002\111\005\000" +
    "\002\112\004\000\002\112\005\000\002\110\003\000\002" +
    "\110\003\000\002\104\003\000\002\104\003\000\002\105" +
    "\003\000\002\105\003\000\002\106\003\000\002\106\003" +
    "\000\002\106\003\000\002\107\003\000\002\107\003\000" +
    "\002\250\003\000\002\174\003\000\002\252\003\000\002" +
    "\166\010\000\002\166\010\000\002\166\010\000\002\166" +
    "\010\000\002\166\010\000\002\166\010\000\002\166\010" +
    "\000\002\216\003\000\002\216\003\000\002\213\004\000" +
    "\002\213\002\000\002\254\006\000\002\254\006\000\002" +
    "\254\006\000\002\212\005\000\002\212\002\000\002\126" +
    "\005\000\002\126\005\000\002\127\005\000\002\127\005" +
    "\000\002\130\003\000\002\130\004\000\002\130\002\000" +
    "\002\253\003\000\002\253\004\000\002\255\005\000\002" +
    "\255\005\000\002\123\003\000\002\307\003\000\002\307" +
    "\003\000\002\167\003\000\002\167\004\000\002\167\004" +
    "\000\002\170\004\000\002\170\004\000\002\170\004\000" +
    "\002\172\004\000\002\172\004\000\002\171\006\000\002" +
    "\171\005\000\002\275\003\000\002\275\003\000\002\276" +
    "\005\000\002\276\007\000\002\276\006\000\002\276\004" +
    "\000\002\276\003\000\002\276\003\000\002\276\003\000" +
    "\002\274\005\000\002\274\004\000\002\274\004\000\002" +
    "\122\004\000\002\122\003\000\002\124\003\000\002\124" +
    "\006\000\002\125\002\000\002\125\003\000\002\131\003" +
    "\000\002\131\003\000\002\132\003\000\002\132\003\000" +
    "\002\133\004\000\002\133\003\000\002\134\003\000\002" +
    "\134\005\000\002\135\003\000\002\135\004\000\002\136" +
    "\003\000\002\141\005\000\002\141\003\000\002\137\002" +
    "\000\002\137\003\000\002\140\005\000\002\140\003\000" +
    "\002\140\004\000\002\140\006\000\002\140\004\000\002" +
    "\140\010\000\002\140\006\000\002\142\004\000\002\142" +
    "\004\000\002\142\002\000\002\143\003\000\002\143\006" +
    "\000\002\143\005\000\002\143\005\000\002\143\005\000" +
    "\002\143\010\000\002\143\005\000\002\144\003\000\002" +
    "\144\003\000\002\144\003\000\002\145\007\000\002\145" +
    "\006\000\002\145\006\000\002\145\004\000\002\145\004" +
    "\000\002\145\006\000\002\145\004\000\002\145\004\000" +
    "\002\256\003\000\002\256\005\000\002\257\003\000\002" +
    "\257\003\000\002\257\005\000\002\257\005\000\002\271" +
    "\005\000\002\271\005\000\002\272\004\000\002\272\003" +
    "\000\002\260\003\000\002\261\002\000\002\261\003\000" +
    "\002\146\003\000\002\146\003\000\002\173\012\000\002" +
    "\173\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table =  getActionTable();

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table =
    unpackFromStrings(new String[] {
    "\000\u0614\000\006\002\003\012\004\001\001\000\002\001" +
    "\001\000\152\003\203\004\105\013\216\014\206\017\136" +
    "\064\177\065\130\066\164\067\053\072\135\100\015\104" +
    "\020\106\104\111\175\112\210\113\140\114\146\121\214" +
    "\122\066\123\200\124\153\135\112\145\101\147\143\165" +
    "\134\166\046\167\023\170\145\171\103\172\061\173\114" +
    "\175\073\205\144\214\125\215\160\216\026\227\172\230" +
    "\024\231\056\250\201\252\122\253\006\255\022\260\142" +
    "\271\115\274\034\275\042\276\051\307\060\311\065\312" +
    "\152\315\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\052\u0606\053" +
    "\u0609\001\001\000\122\003\203\004\105\064\177\065\130" +
    "\066\164\067\053\072\135\100\015\104\u0601\111\u0602\112" +
    "\u0603\113\140\114\146\121\214\122\066\123\200\124\153" +
    "\135\112\145\101\165\134\166\046\167\023\170\145\171" +
    "\103\172\061\173\114\175\073\216\026\250\201\252\122" +
    "\253\006\255\022\260\142\271\115\274\034\275\042\276" +
    "\051\307\060\311\065\312\u0184\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\116\003\203\004" +
    "\105\064\177\065\130\066\164\067\053\072\135\100\015" +
    "\104\u0600\113\140\114\146\121\214\122\066\123\200\124" +
    "\153\135\112\145\101\165\134\166\046\167\023\170\145" +
    "\171\103\172\061\173\114\175\073\216\026\250\201\252" +
    "\122\253\006\255\022\260\142\271\115\274\034\275\042" +
    "\276\051\307\060\311\065\312\u0184\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\u05d5\010\u05d7\011\u05da\022\u0443" +
    "\001\001\000\116\003\203\004\105\064\177\065\130\066" +
    "\164\067\053\072\135\100\015\104\u05d4\113\140\114\146" +
    "\121\214\122\066\123\200\124\153\135\112\145\101\165" +
    "\134\166\046\167\023\170\145\171\103\172\061\173\114" +
    "\175\073\216\026\250\201\252\122\253\006\255\022\260" +
    "\142\271\115\274\034\275\042\276\051\307\060\311\065" +
    "\312\u0184\001\001\000\116\003\203\004\105\064\177\065" +
    "\130\066\164\067\053\072\135\100\015\104\u0386\113\140" +
    "\114\146\121\214\122\066\123\200\124\153\135\112\145" +
    "\101\165\134\166\046\167\023\170\145\171\103\172\061" +
    "\173\114\175\073\216\026\250\201\252\122\253\006\255" +
    "\022\260\142\271\115\274\034\275\042\276\051\307\060" +
    "\311\065\312\u0184\001\001\000\012\003\u01f0\175\u05cb\313" +
    "\u05ca\314\u05cc\001\001\000\002\001\001\000\004\126\u042e" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\126" +
    "\u0239\001\001\000\004\142\u05b6\001\001\000\116\003\203" +
    "\004\105\064\177\065\130\066\164\067\053\072\135\100" +
    "\015\104\u05b5\113\140\114\146\121\214\122\066\123\200" +
    "\124\153\135\112\145\101\165\134\166\046\167\023\170" +
    "\145\171\103\172\061\173\114\175\073\216\026\250\201" +
    "\252\122\253\006\255\022\260\142\271\115\274\034\275" +
    "\042\276\051\307\060\311\065\312\u0184\001\001\000\002" +
    "\001\001\000\116\003\203\004\105\064\177\065\130\066" +
    "\164\067\053\072\135\100\015\104\u05b4\113\140\114\146" +
    "\121\214\122\066\123\200\124\153\135\112\145\101\165" +
    "\134\166\046\167\023\170\145\171\103\172\061\173\114" +
    "\175\073\216\026\250\201\252\122\253\006\255\022\260" +
    "\142\271\115\274\034\275\042\276\051\307\060\311\065" +
    "\312\u0184\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\116\003\203\004\105\064\177\065\130" +
    "\066\164\067\053\072\135\100\015\104\u058b\113\140\114" +
    "\146\121\214\122\066\123\200\124\153\135\112\145\101" +
    "\165\134\166\046\167\023\170\145\171\103\172\061\173" +
    "\114\175\073\216\026\250\201\252\122\253\006\255\022" +
    "\260\142\271\115\274\034\275\042\276\051\307\060\311" +
    "\065\312\u0184\001\001\000\004\054\u0583\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\126\u056d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\126\u055a\001\001\000" +
    "\130\003\203\004\105\064\177\065\130\066\164\067\053" +
    "\072\135\100\015\104\u0301\113\140\114\146\121\214\122" +
    "\066\123\200\124\153\135\112\136\u0556\137\u0303\140\u0305" +
    "\141\u0304\145\101\165\134\166\046\167\023\170\145\171" +
    "\103\172\061\173\114\175\073\216\026\246\u0302\250\201" +
    "\252\122\253\006\255\022\260\142\271\115\274\034\275" +
    "\042\276\051\307\060\311\065\312\u0184\001\001\000\054" +
    "\003\u0319\066\164\067\053\121\u028a\122\066\123\u0313\124" +
    "\153\135\112\166\046\171\u0287\172\061\175\u0316\216\u0466" +
    "\252\u0555\253\006\255\022\260\142\274\034\275\042\276" +
    "\051\307\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\126\u029b\001\001\000\002\001\001\000\116\003" +
    "\203\004\105\064\177\065\130\066\164\067\053\072\135" +
    "\100\015\104\u0553\113\140\114\146\121\214\122\066\123" +
    "\200\124\153\135\112\145\101\165\134\166\046\167\023" +
    "\170\145\171\103\172\061\173\114\175\073\216\026\250" +
    "\201\252\122\253\006\255\022\260\142\271\115\274\034" +
    "\275\042\276\051\307\060\311\065\312\u0184\001\001\000" +
    "\002\001\001\000\004\142\u0550\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\057\u022e\246" +
    "\u018d\001\001\000\116\003\203\004\105\064\177\065\130" +
    "\066\164\067\053\072\135\100\015\104\u0385\113\140\114" +
    "\146\121\214\122\066\123\200\124\153\135\112\145\101" +
    "\165\134\166\046\167\023\170\145\171\103\172\061\173" +
    "\114\175\073\216\026\250\201\252\122\253\006\255\022" +
    "\260\142\271\115\274\034\275\042\276\051\307\060\311" +
    "\065\312\u0184\001\001\000\004\015\u054a\001\001\000\002" +
    "\001\001\000\004\003\u0549\001\001\000\004\126\u02e0\001" +
    "\001\000\002\001\001\000\004\126\u0547\001\001\000\116" +
    "\003\203\004\105\064\177\065\130\066\164\067\053\072" +
    "\135\100\015\104\u0546\113\140\114\146\121\214\122\066" +
    "\123\200\124\153\135\112\145\101\165\134\166\046\167" +
    "\023\170\145\171\103\172\061\173\114\175\073\216\026" +
    "\250\201\252\122\253\006\255\022\260\142\271\115\274" +
    "\034\275\042\276\051\307\060\311\065\312\u0184\001\001" +
    "\000\002\001\001\000\116\003\203\004\105\064\177\065" +
    "\130\066\164\067\053\072\135\100\015\104\u0543\113\140" +
    "\114\146\121\214\122\066\123\200\124\153\135\112\145" +
    "\101\165\134\166\046\167\023\170\145\171\103\172\061" +
    "\173\114\175\073\216\026\250\201\252\122\253\006\255" +
    "\022\260\142\271\115\274\034\275\042\276\051\307\060" +
    "\311\065\312\u0184\001\001\000\116\003\203\004\105\064" +
    "\177\065\130\066\164\067\053\072\135\100\015\104\u034d" +
    "\113\140\114\146\121\214\122\066\123\200\124\153\135" +
    "\112\145\101\165\134\166\046\167\023\170\145\171\103" +
    "\172\061\173\114\175\073\216\026\250\201\252\122\253" +
    "\006\255\022\260\142\271\115\274\034\275\042\276\051" +
    "\307\060\311\065\312\u0184\001\001\000\010\122\u0542\124" +
    "\153\260\142\001\001\000\116\003\203\004\105\064\177" +
    "\065\130\066\164\067\053\072\135\100\015\104\u0541\113" +
    "\140\114\146\121\214\122\066\123\200\124\153\135\112" +
    "\145\101\165\134\166\046\167\023\170\145\171\103\172" +
    "\061\173\114\175\073\216\026\250\201\252\122\253\006" +
    "\255\022\260\142\271\115\274\034\275\042\276\051\307" +
    "\060\311\065\312\u0184\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\u01f0\121\u01ea\122" +
    "\u01e8\123\u01e4\124\153\135\u01ed\171\u01e5\172\061\175\u01e9" +
    "\255\022\260\142\270\u034a\273\u01e1\274\u01e2\275\u01ec\276" +
    "\u01e3\311\065\312\u0200\001\001\000\002\001\001\000\004" +
    "\003\u0531\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\116\003\203\004\105" +
    "\064\177\065\130\066\164\067\053\072\135\100\015\104" +
    "\u0349\113\140\114\146\121\214\122\066\123\200\124\153" +
    "\135\112\145\101\165\134\166\046\167\023\170\145\171" +
    "\103\172\061\173\114\175\073\216\026\250\201\252\122" +
    "\253\006\255\022\260\142\271\115\274\034\275\042\276" +
    "\051\307\060\311\065\312\u0184\001\001\000\116\003\203" +
    "\004\105\064\177\065\130\066\164\067\053\072\135\100" +
    "\015\104\u050f\113\140\114\146\121\214\122\066\123\200" +
    "\124\153\135\112\145\101\165\134\166\046\167\023\170" +
    "\145\171\103\172\061\173\114\175\073\216\026\250\201" +
    "\252\122\253\006\255\022\260\142\271\115\274\034\275" +
    "\042\276\051\307\060\311\065\312\u0184\001\001\000\002" +
    "\001\001\000\116\003\203\004\105\064\177\065\130\066" +
    "\164\067\053\072\135\100\015\104\u032b\113\140\114\146" +
    "\121\214\122\066\123\200\124\153\135\112\145\101\165" +
    "\134\166\046\167\023\170\145\171\103\172\061\173\114" +
    "\175\073\216\026\250\201\252\122\253\006\255\022\260" +
    "\142\271\115\274\034\275\042\276\051\307\060\311\065" +
    "\312\u0184\001\001\000\002\001\001\000\006\057\u0506\246" +
    "\u018d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\142\u04ec\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\126\u02d1\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\113\u0186\147\143\214\125\215\160\227\172\230\024\231" +
    "\056\311\u0187\315\u04c7\001\001\000\002\001\001\000\002" +
    "\001\001\000\130\003\203\004\105\014\u04a5\017\136\064" +
    "\177\065\130\066\164\067\053\072\135\100\015\104\020" +
    "\106\104\111\175\112\210\113\140\114\146\121\214\122" +
    "\066\123\200\124\153\135\112\145\101\165\134\166\046" +
    "\167\023\170\145\171\103\172\061\173\114\175\073\216" +
    "\026\250\201\252\122\253\006\255\022\260\142\271\115" +
    "\274\034\275\042\276\051\307\060\311\065\312\u0184\001" +
    "\001\000\116\003\203\004\105\064\177\065\130\066\164" +
    "\067\053\072\135\100\015\104\u04a3\113\140\114\146\121" +
    "\214\122\066\123\200\124\153\135\112\145\101\165\134" +
    "\166\046\167\023\170\145\171\103\172\061\173\114\175" +
    "\073\216\026\250\201\252\122\253\006\255\022\260\142" +
    "\271\115\274\034\275\042\276\051\307\060\311\065\312" +
    "\u0184\001\001\000\120\003\203\004\105\061\u049e\064\177" +
    "\065\130\066\164\067\053\072\135\100\015\104\u049d\113" +
    "\140\114\146\121\214\122\066\123\200\124\153\135\112" +
    "\145\101\165\134\166\046\167\023\170\145\171\103\172" +
    "\061\173\114\175\073\216\026\250\201\252\122\253\006" +
    "\255\022\260\142\271\115\274\034\275\042\276\051\307" +
    "\060\311\065\312\u0184\001\001\000\002\001\001\000\116" +
    "\003\203\004\105\064\177\065\130\066\164\067\053\072" +
    "\135\100\015\104\u0348\113\140\114\146\121\214\122\066" +
    "\123\200\124\153\135\112\145\101\165\134\166\046\167" +
    "\023\170\145\171\103\172\061\173\114\175\073\216\026" +
    "\250\201\252\122\253\006\255\022\260\142\271\115\274" +
    "\034\275\042\276\051\307\060\311\065\312\u0184\001\001" +
    "\000\116\003\203\004\105\064\177\065\130\066\164\067" +
    "\053\072\135\100\015\104\u049c\113\140\114\146\121\214" +
    "\122\066\123\200\124\153\135\112\145\101\165\134\166" +
    "\046\167\023\170\145\171\103\172\061\173\114\175\073" +
    "\216\026\250\201\252\122\253\006\255\022\260\142\271" +
    "\115\274\034\275\042\276\051\307\060\311\065\312\u0184" +
    "\001\001\000\004\126\u02e1\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\126\u0498\001\001\000\002\001\001" +
    "\000\116\003\203\004\105\064\177\065\130\066\164\067" +
    "\053\072\135\100\015\104\u047c\113\140\114\146\121\214" +
    "\122\066\123\200\124\153\135\112\145\101\165\134\166" +
    "\046\167\023\170\145\171\103\172\061\173\114\175\073" +
    "\216\026\250\201\252\122\253\006\255\022\260\142\271" +
    "\115\274\034\275\042\276\051\307\060\311\065\312\u0184" +
    "\001\001\000\002\001\001\000\002\001\001\000\116\003" +
    "\203\004\105\064\177\065\130\066\164\067\053\072\135" +
    "\100\015\104\u047b\113\140\114\146\121\214\122\066\123" +
    "\200\124\153\135\112\145\101\165\134\166\046\167\023" +
    "\170\145\171\103\172\061\173\114\175\073\216\026\250" +
    "\201\252\122\253\006\255\022\260\142\271\115\274\034" +
    "\275\042\276\051\307\060\311\065\312\u0184\001\001\000" +
    "\004\146\u0478\001\001\000\002\001\001\000\120\003\203" +
    "\004\105\064\u0472\065\130\066\164\067\053\072\135\100" +
    "\015\104\u01f3\112\u0473\113\140\114\146\121\214\122\066" +
    "\123\200\124\153\135\112\145\101\165\134\166\046\167" +
    "\023\170\145\171\103\172\061\173\114\175\073\216\u0471" +
    "\250\201\252\122\253\006\255\022\260\142\271\115\274" +
    "\034\275\042\276\051\307\060\311\065\312\u0184\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\070\u02fc\001\001" +
    "\000\116\003\203\004\105\064\177\065\130\066\164\067" +
    "\053\072\135\100\015\104\u046b\113\140\114\146\121\214" +
    "\122\066\123\200\124\153\135\112\145\101\165\134\166" +
    "\046\167\023\170\145\171\103\172\061\173\114\175\073" +
    "\216\026\250\201\252\122\253\006\255\022\260\142\271" +
    "\115\274\034\275\042\276\051\307\060\311\065\312\u0184" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\124\003\203\004\105\064\177\065\u01fb\066\164" +
    "\067\053\072\135\100\015\104\u01f3\110\u01f7\111\u0467\112" +
    "\u0468\113\140\114\146\121\214\122\066\123\200\124\153" +
    "\135\112\145\101\165\134\166\046\167\023\170\145\171" +
    "\103\172\061\173\u01fe\175\073\216\u01f4\250\u01fc\252\122" +
    "\253\006\255\022\260\142\271\115\274\034\275\042\276" +
    "\051\307\060\311\065\312\u0184\001\001\000\002\001\001" +
    "\000\054\003\u0319\066\164\067\053\121\u028a\122\066\123" +
    "\u0313\124\153\135\112\166\046\171\u0287\172\061\175\u0316" +
    "\216\u0466\252\u0465\253\006\255\022\260\142\274\034\275" +
    "\042\276\051\307\060\001\001\000\004\126\u0291\001\001" +
    "\000\116\003\203\004\105\064\177\065\130\066\164\067" +
    "\053\072\135\100\015\104\u037b\113\140\114\146\121\214" +
    "\122\066\123\200\124\153\135\112\145\101\165\134\166" +
    "\046\167\023\170\145\171\103\172\061\173\114\175\073" +
    "\216\026\250\201\252\122\253\006\255\022\260\142\271" +
    "\115\274\034\275\042\276\051\307\060\311\065\312\u0184" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\222\146\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\255\004\244\072\234\073\257\075\232\077\250" +
    "\165\252\175\230\301\242\303\231\304\236\306\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\127\u011e" +
    "\001\001\000\002\001\001\000\004\003\u011d\001\001\000" +
    "\002\001\001\000\030\003\255\004\244\072\234\075\u011c" +
    "\077\250\165\252\175\230\301\242\303\231\304\236\306" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\255\004\244\072\234\075\u0115\077\250\165\252\175" +
    "\230\301\242\303\231\304\236\306\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\255\004\244\072" +
    "\234\075\u0111\077\250\165\252\175\230\301\242\303\231" +
    "\304\236\306\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\127\u010a\001\001\000\036\003\255\004\244" +
    "\072\234\073\376\075\232\077\250\101\375\103\374\165" +
    "\252\175\230\301\242\303\231\304\236\306\254\001\001" +
    "\000\002\001\001\000\030\003\255\004\244\072\234\075" +
    "\372\077\250\165\252\175\230\301\242\303\231\304\236" +
    "\306\254\001\001\000\002\001\001\000\004\127\371\001" +
    "\001\000\004\127\364\001\001\000\002\001\001\000\030" +
    "\003\255\004\244\072\234\075\260\077\250\165\252\175" +
    "\230\301\242\303\231\304\236\306\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\255\004\244\072" +
    "\234\075\357\077\250\165\252\175\230\301\242\303\231" +
    "\304\236\306\254\001\001\000\030\003\255\004\244\072" +
    "\234\075\356\077\250\165\252\175\230\301\242\303\231" +
    "\304\236\306\254\001\001\000\030\003\255\004\244\072" +
    "\234\075\355\077\250\165\252\175\230\301\242\303\231" +
    "\304\236\306\254\001\001\000\030\003\255\004\244\072" +
    "\234\075\354\077\250\165\252\175\230\301\242\303\231" +
    "\304\236\306\254\001\001\000\030\003\255\004\244\072" +
    "\234\075\353\077\250\165\252\175\230\301\242\303\231" +
    "\304\236\306\254\001\001\000\030\003\255\004\244\072" +
    "\234\075\352\077\250\165\252\175\230\301\242\303\231" +
    "\304\236\306\254\001\001\000\030\003\255\004\244\072" +
    "\234\075\351\077\250\165\252\175\230\301\242\303\231" +
    "\304\236\306\254\001\001\000\030\003\255\004\244\072" +
    "\234\075\344\077\250\165\252\175\230\301\242\303\231" +
    "\304\236\306\254\001\001\000\030\003\255\004\244\072" +
    "\234\075\343\077\250\165\252\175\230\301\242\303\231" +
    "\304\236\306\254\001\001\000\030\003\255\004\244\072" +
    "\234\075\342\077\250\165\252\175\230\301\242\303\231" +
    "\304\236\306\254\001\001\000\030\003\255\004\244\072" +
    "\234\075\341\077\250\165\252\175\230\301\242\303\231" +
    "\304\236\306\254\001\001\000\030\003\255\004\244\072" +
    "\234\075\340\077\250\165\252\175\230\301\242\303\231" +
    "\304\236\306\254\001\001\000\030\003\255\004\244\072" +
    "\234\075\337\077\250\165\252\175\230\301\242\303\231" +
    "\304\236\306\254\001\001\000\030\003\255\004\244\072" +
    "\234\075\336\077\250\165\252\175\230\301\242\303\231" +
    "\304\236\306\254\001\001\000\030\003\255\004\244\072" +
    "\234\075\335\077\250\165\252\175\230\301\242\303\231" +
    "\304\236\306\254\001\001\000\030\003\255\004\244\072" +
    "\234\075\334\077\250\165\252\175\230\301\242\303\231" +
    "\304\236\306\254\001\001\000\030\003\255\004\244\072" +
    "\234\075\333\077\250\165\252\175\230\301\242\303\231" +
    "\304\236\306\254\001\001\000\030\003\255\004\244\072" +
    "\234\075\332\077\250\165\252\175\230\301\242\303\231" +
    "\304\236\306\254\001\001\000\002\001\001\000\030\003" +
    "\255\004\244\072\234\075\331\077\250\165\252\175\230" +
    "\301\242\303\231\304\236\306\254\001\001\000\030\003" +
    "\255\004\244\072\234\075\330\077\250\165\252\175\230" +
    "\301\242\303\231\304\236\306\254\001\001\000\030\003" +
    "\255\004\244\072\234\075\327\077\250\165\252\175\230" +
    "\301\242\303\231\304\236\306\254\001\001\000\030\003" +
    "\255\004\244\072\234\075\326\077\250\165\252\175\230" +
    "\301\242\303\231\304\236\306\254\001\001\000\030\003" +
    "\255\004\244\072\234\075\325\077\250\165\252\175\230" +
    "\301\242\303\231\304\236\306\254\001\001\000\030\003" +
    "\255\004\244\072\234\075\324\077\250\165\252\175\230" +
    "\301\242\303\231\304\236\306\254\001\001\000\030\003" +
    "\255\004\244\072\234\075\323\077\250\165\252\175\230" +
    "\301\242\303\231\304\236\306\254\001\001\000\030\003" +
    "\255\004\244\072\234\075\322\077\250\165\252\175\230" +
    "\301\242\303\231\304\236\306\254\001\001\000\030\003" +
    "\255\004\244\072\234\075\321\077\250\165\252\175\230" +
    "\301\242\303\231\304\236\306\254\001\001\000\030\003" +
    "\255\004\244\072\234\075\320\077\250\165\252\175\230" +
    "\301\242\303\231\304\236\306\254\001\001\000\030\003" +
    "\255\004\244\072\234\075\317\077\250\165\252\175\230" +
    "\301\242\303\231\304\236\306\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\255\004\244" +
    "\072\234\075\346\077\250\165\252\175\230\301\242\303" +
    "\231\304\236\306\254\001\001\000\002\001\001\000\030" +
    "\003\255\004\244\072\234\075\350\077\250\165\252\175" +
    "\230\301\242\303\231\304\236\306\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\255\004\244\072\234\075\367\077\250\165\252" +
    "\175\230\301\242\303\231\304\236\306\254\001\001\000" +
    "\030\003\255\004\244\072\234\075\365\077\250\165\252" +
    "\175\230\301\242\303\231\304\236\306\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\255\004\244\072\234\073\u0109\075\232" +
    "\077\250\165\252\175\230\301\242\303\231\304\236\306" +
    "\254\001\001\000\004\102\u0103\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\255\004\244\072\234\073" +
    "\u0100\075\232\077\250\165\252\175\230\301\242\303\231" +
    "\304\236\306\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\255\004\244\072\234\073\u0105\075\232" +
    "\077\250\165\252\175\230\301\242\303\231\304\236\306" +
    "\254\001\001\000\002\001\001\000\032\003\255\004\244" +
    "\072\234\073\u0108\075\232\077\250\165\252\175\230\301" +
    "\242\303\231\304\236\306\254\001\001\000\002\001\001" +
    "\000\032\003\255\004\244\072\234\073\u0107\075\232\077" +
    "\250\165\252\175\230\301\242\303\231\304\236\306\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\255\004\244\072\234" +
    "\075\u010c\077\250\165\252\175\230\301\242\303\231\304" +
    "\236\306\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\255\004\244\072\234\075\u010f\077\250\165" +
    "\252\175\230\301\242\303\231\304\236\306\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\u0114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\255\004\244\072\234\073" +
    "\376\075\232\077\250\101\u0117\103\374\165\252\175\230" +
    "\301\242\303\231\304\236\306\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\255\004\244\072\234" +
    "\075\u011a\077\250\165\252\175\230\301\242\303\231\304" +
    "\236\306\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\200\u0168\201\u016c\202\u015c\203\u014b\302\u0170\305\u0129" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\255\004\244\072\234\075\u0175\077\250\165" +
    "\252\175\230\301\242\303\231\304\236\306\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\255\004" +
    "\244\072\234\075\u0178\077\250\165\252\175\230\301\242" +
    "\303\231\304\236\306\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\132\003\203\004\105\014\u0185\017\136" +
    "\027\u0180\064\177\065\130\066\164\067\053\072\135\100" +
    "\015\104\020\106\104\111\175\112\210\113\140\114\146" +
    "\121\214\122\066\123\200\124\153\135\112\145\101\165" +
    "\134\166\046\167\023\170\145\171\103\172\061\173\114" +
    "\175\073\216\026\250\201\252\122\253\006\255\022\260" +
    "\142\271\115\274\034\275\042\276\051\307\060\311\065" +
    "\312\u0184\001\001\000\004\146\u017c\001\001\000\002\001" +
    "\001\000\032\003\255\004\244\072\234\073\u017e\075\232" +
    "\077\250\165\252\175\230\301\242\303\231\304\236\306" +
    "\254\001\001\000\002\001\001\000\004\022\u0443\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\u0440\001" +
    "\001\000\006\057\u037c\246\u018d\001\001\000\006\113\u0186" +
    "\311\u0187\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\057\u0439\246\u018d" +
    "\001\001\000\006\057\u018c\246\u018d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\041\u019b\044\u0193\045\u0197\206\u019a\264\u0198\266" +
    "\u0190\311\065\312\u0192\321\u0196\001\001\000\004\264\u0438" +
    "\001\001\000\002\001\001\000\014\045\u0437\206\u019a\264" +
    "\u0198\266\u0190\311\u0187\001\001\000\004\102\u0435\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\266\u0433\001\001\000\002\001\001" +
    "\000\020\003\u01aa\176\u01b0\235\u01cf\237\u01d1\241\u01d2\243" +
    "\u01cd\245\u01ce\001\001\000\002\001\001\000\004\042\u019e" +
    "\001\001\000\002\001\001\000\004\247\u01a0\001\001\000" +
    "\020\003\u01aa\176\u01b0\236\u01b3\240\u01b5\241\u01b4\242\u01ab" +
    "\244\u01b1\001\001\000\002\001\001\000\004\015\u01a2\001" +
    "\001\000\150\003\203\004\105\014\u01a7\016\u01a3\017\136" +
    "\064\177\065\130\066\164\067\053\072\135\100\015\104" +
    "\020\106\104\111\175\112\210\113\140\114\146\121\214" +
    "\122\066\123\200\124\153\135\112\145\101\147\143\165" +
    "\134\166\046\167\023\170\145\171\103\172\061\173\114" +
    "\175\073\214\125\215\160\216\026\227\172\230\024\231" +
    "\056\250\201\252\122\253\006\255\022\260\142\271\115" +
    "\274\034\275\042\276\051\307\060\311\065\312\u01a6\315" +
    "\u01a4\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\113\u0186\147\143\214\125\215\160\227" +
    "\172\230\024\231\056\311\u0187\315\u01a8\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\u01aa\176\u01b0\240\u01bf\241\u01b4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\u01ba\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\u01aa\176\u01b0\240\u01b9\241\u01b4" +
    "\001\001\000\012\003\u01aa\176\u01b0\240\u01b8\241\u01b4\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\u01aa\176\u01b0\240\u01bc\241\u01b4\001\001\000" +
    "\002\001\001\000\004\003\u01be\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\u01aa\176\u01b0\240\u01c1\241" +
    "\u01b4\001\001\000\002\001\001\000\006\043\u01c3\246\u01c5" +
    "\001\001\000\004\102\u01c8\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\246\u01ca\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\057\u01d8\246\u018d\001\001\000\010\003" +
    "\u01aa\176\u01b0\241\u01d7\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\u01aa\176\u01b0\241\u01d6\001\001\000" +
    "\010\003\u01aa\176\u01b0\241\u01d5\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\u01da\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\255\004\244\072\234\074\u01e0\075\u01dd\076" +
    "\u01de\077\250\165\252\175\230\301\242\303\231\304\236" +
    "\306\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\u01f0\121\u01ea\122\u01e8\123\u01e4\124\153\135\u01ed" +
    "\171\u01e5\172\061\175\u01e9\255\022\260\142\270\u01eb\273" +
    "\u01e1\274\u01e2\275\u01ec\276\u01e3\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\126\u042e\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\126\u02e0\001\001\000\004" +
    "\003\u042b\001\001\000\130\003\203\004\105\064\177\065" +
    "\130\066\164\067\053\072\135\100\015\104\u0301\113\140" +
    "\114\146\121\214\122\066\123\200\124\153\135\112\136" +
    "\u0429\137\u0303\140\u0305\141\u0304\145\101\165\134\166\046" +
    "\167\023\170\145\171\103\172\061\173\114\175\073\216" +
    "\026\246\u0302\250\201\252\122\253\006\255\022\260\142" +
    "\271\115\274\034\275\042\276\051\307\060\311\065\312" +
    "\u0184\001\001\000\004\126\u029b\001\001\000\002\001\001" +
    "\000\004\126\u0291\001\001\000\004\071\u0426\001\001\000" +
    "\002\001\001\000\010\122\u041a\124\153\260\142\001\001" +
    "\000\120\003\203\004\105\064\177\065\u01fb\066\164\067" +
    "\053\072\135\100\015\104\u01f3\110\u01f7\113\140\114\146" +
    "\121\214\122\066\123\200\124\153\135\112\145\101\165" +
    "\134\166\046\167\023\170\145\171\103\172\061\173\u01f8" +
    "\175\073\216\u01f4\250\u01fc\252\122\253\006\255\022\260" +
    "\142\271\115\274\034\275\042\276\051\307\060\311\065" +
    "\312\u0184\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\u01f2\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\126\u0239\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\u01f0" +
    "\121\u01ea\122\u01e8\123\u01e4\124\153\135\u01ed\171\u01e5\172" +
    "\061\175\u01e9\255\022\260\142\270\u0414\273\u01e1\274\u01e2" +
    "\275\u01ec\276\u01e3\311\065\312\u0200\001\001\000\116\003" +
    "\203\004\105\064\177\065\130\066\164\067\053\072\135" +
    "\100\015\104\u0412\113\140\114\146\121\214\122\066\123" +
    "\200\124\153\135\112\145\101\165\134\166\046\167\023" +
    "\170\145\171\103\172\061\173\114\175\073\216\026\250" +
    "\201\252\122\253\006\255\022\260\142\271\115\274\034" +
    "\275\042\276\051\307\060\311\065\312\u0184\001\001\000" +
    "\002\001\001\000\002\001\001\000\120\003\203\004\105" +
    "\064\177\065\u01fb\066\164\067\053\072\135\100\015\104" +
    "\u01f3\110\u01f7\113\140\114\146\121\214\122\066\123\200" +
    "\124\153\135\112\145\101\165\134\166\046\167\023\170" +
    "\145\171\103\172\061\173\u01fe\175\073\216\u01f4\250\u01fc" +
    "\252\122\253\006\255\022\260\142\271\115\274\034\275" +
    "\042\276\051\307\060\311\065\312\u0184\001\001\000\002" +
    "\001\001\000\046\003\u01f0\121\u01ea\122\u01e8\123\u01e4\124" +
    "\153\135\u01ed\171\u01e5\172\061\175\u01e9\255\022\260\142" +
    "\270\u0202\273\u01e1\274\u01e2\275\u01ec\276\u01e3\311\065\312" +
    "\u0200\001\001\000\004\311\u0187\001\001\000\004\071\u038d" +
    "\001\001\000\004\071\u0203\001\001\000\002\001\001\000" +
    "\134\003\203\004\105\046\u0224\047\u0223\050\u020e\051\u0217" +
    "\064\u0225\065\130\066\164\067\053\072\135\100\015\104" +
    "\u01f3\113\140\114\146\121\214\122\066\123\200\124\153" +
    "\135\112\145\101\146\u0214\165\134\166\046\167\023\170" +
    "\145\171\103\172\061\173\114\175\073\200\u0168\201\u020f" +
    "\216\u0212\250\201\252\122\253\006\255\022\260\142\271" +
    "\115\274\034\275\042\276\051\307\060\311\065\312\u0184" +
    "\001\001\000\002\001\001\000\002\001\001\000\116\003" +
    "\203\004\105\064\177\065\130\066\164\067\053\072\135" +
    "\100\015\104\u0386\113\140\114\146\121\214\122\066\123" +
    "\200\124\153\135\112\145\101\165\134\166\046\167\023" +
    "\170\145\171\103\172\061\173\114\175\073\216\026\250" +
    "\201\252\122\253\006\255\022\260\142\271\115\274\034" +
    "\275\042\276\051\307\060\311\065\312\u0184\001\001\000" +
    "\116\003\203\004\105\064\177\065\130\066\164\067\053" +
    "\072\135\100\015\104\u0385\113\140\114\146\121\214\122" +
    "\066\123\200\124\153\135\112\145\101\165\134\166\046" +
    "\167\023\170\145\171\103\172\061\173\114\175\073\216" +
    "\026\250\201\252\122\253\006\255\022\260\142\271\115" +
    "\274\034\275\042\276\051\307\060\311\065\312\u0184\001" +
    "\001\000\006\057\u037c\246\u018d\001\001\000\002\001\001" +
    "\000\116\003\203\004\105\064\177\065\130\066\164\067" +
    "\053\072\135\100\015\104\u037b\113\140\114\146\121\214" +
    "\122\066\123\200\124\153\135\112\145\101\165\134\166" +
    "\046\167\023\170\145\171\103\172\061\173\114\175\073" +
    "\216\026\250\201\252\122\253\006\255\022\260\142\271" +
    "\115\274\034\275\042\276\051\307\060\311\065\312\u0184" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\003\u0319" +
    "\066\164\067\053\121\u028a\122\066\123\u0313\124\153\135" +
    "\112\166\046\171\u0287\172\061\174\u0376\175\u0316\216\u0315" +
    "\253\006\255\022\260\142\274\034\275\042\276\051\307" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\116\003\203\004\105\064" +
    "\177\065\130\066\164\067\053\072\135\100\015\104\u034d" +
    "\113\140\114\146\121\214\122\066\123\200\124\153\135" +
    "\112\145\101\165\134\166\046\167\023\170\145\171\103" +
    "\172\061\173\114\175\073\216\026\250\201\252\122\253" +
    "\006\255\022\260\142\271\115\274\034\275\042\276\051" +
    "\307\060\311\065\312\u0184\001\001\000\002\001\001\000" +
    "\120\003\203\004\105\051\u034c\064\u0225\065\130\066\164" +
    "\067\053\072\135\100\015\104\u01f3\113\140\114\146\121" +
    "\214\122\066\123\200\124\153\135\112\145\101\165\134" +
    "\166\046\167\023\170\145\171\103\172\061\173\114\175" +
    "\073\216\u0212\250\201\252\122\253\006\255\022\260\142" +
    "\271\115\274\034\275\042\276\051\307\060\311\065\312" +
    "\u0184\001\001\000\046\003\u01f0\121\u01ea\122\u01e8\123\u01e4" +
    "\124\153\135\u01ed\171\u01e5\172\061\175\u01e9\255\022\260" +
    "\142\270\u034a\273\u01e1\274\u01e2\275\u01ec\276\u01e3\311\065" +
    "\312\u0200\001\001\000\116\003\203\004\105\064\177\065" +
    "\130\066\164\067\053\072\135\100\015\104\u0349\113\140" +
    "\114\146\121\214\122\066\123\200\124\153\135\112\145" +
    "\101\165\134\166\046\167\023\170\145\171\103\172\061" +
    "\173\114\175\073\216\026\250\201\252\122\253\006\255" +
    "\022\260\142\271\115\274\034\275\042\276\051\307\060" +
    "\311\065\312\u0184\001\001\000\116\003\203\004\105\064" +
    "\177\065\130\066\164\067\053\072\135\100\015\104\u0348" +
    "\113\140\114\146\121\214\122\066\123\200\124\153\135" +
    "\112\145\101\165\134\166\046\167\023\170\145\171\103" +
    "\172\061\173\114\175\073\216\026\250\201\252\122\253" +
    "\006\255\022\260\142\271\115\274\034\275\042\276\051" +
    "\307\060\311\065\312\u0184\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\116" +
    "\003\203\004\105\064\177\065\130\066\164\067\053\072" +
    "\135\100\015\104\u032b\113\140\114\146\121\214\122\066" +
    "\123\200\124\153\135\112\145\101\165\134\166\046\167" +
    "\023\170\145\171\103\172\061\173\114\175\073\216\026" +
    "\250\201\252\122\253\006\255\022\260\142\271\115\274" +
    "\034\275\042\276\051\307\060\311\065\312\u0184\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\102\u0329\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\070\u02fc\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\126\u0239" +
    "\001\001\000\006\057\u022e\246\u018d\001\001\000\002\001" +
    "\001\000\024\041\u0230\044\u0193\045\u0197\206\u019a\264\u0198" +
    "\266\u0190\311\065\312\u0192\321\u0196\001\001\000\002\001" +
    "\001\000\004\247\u0232\001\001\000\002\001\001\000\126" +
    "\003\203\004\105\064\177\065\130\066\164\067\053\072" +
    "\135\100\015\104\020\106\u0235\107\u0234\111\175\112\210" +
    "\113\140\114\146\121\214\122\066\123\200\124\153\135" +
    "\112\145\101\165\134\166\046\167\023\170\145\171\103" +
    "\172\061\173\114\175\073\216\026\250\201\252\122\253" +
    "\006\255\022\260\142\271\115\274\034\275\042\276\051" +
    "\307\060\311\065\312\u0184\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\120\003\203\004\105" +
    "\064\177\065\130\066\164\067\053\072\135\100\015\104" +
    "\u023a\113\140\114\146\121\214\122\066\123\200\124\153" +
    "\125\u027d\135\112\145\101\165\134\166\046\167\023\170" +
    "\145\171\103\172\061\173\114\175\073\216\026\250\201" +
    "\252\122\253\006\255\022\260\142\271\115\274\034\275" +
    "\042\276\051\307\060\311\065\312\u0184\001\001\000\120" +
    "\003\203\004\105\064\177\065\130\066\164\067\053\072" +
    "\135\100\015\104\u023a\113\140\114\146\121\214\122\066" +
    "\123\200\124\153\125\u023b\135\112\145\101\165\134\166" +
    "\046\167\023\170\145\171\103\172\061\173\114\175\073" +
    "\216\026\250\201\252\122\253\006\255\022\260\142\271" +
    "\115\274\034\275\042\276\051\307\060\311\065\312\u0184" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\116\003\203\004\105\064\177" +
    "\065\130\066\164\067\053\072\135\100\015\104\u027c\113" +
    "\140\114\146\121\214\122\066\123\200\124\153\135\112" +
    "\145\101\165\134\166\046\167\023\170\145\171\103\172" +
    "\061\173\114\175\073\216\026\250\201\252\122\253\006" +
    "\255\022\260\142\271\115\274\034\275\042\276\051\307" +
    "\060\311\065\312\u0184\001\001\000\116\003\203\004\105" +
    "\064\177\065\130\066\164\067\053\072\135\100\015\104" +
    "\u027b\113\140\114\146\121\214\122\066\123\200\124\153" +
    "\135\112\145\101\165\134\166\046\167\023\170\145\171" +
    "\103\172\061\173\114\175\073\216\026\250\201\252\122" +
    "\253\006\255\022\260\142\271\115\274\034\275\042\276" +
    "\051\307\060\311\065\312\u0184\001\001\000\116\003\203" +
    "\004\105\064\177\065\130\066\164\067\053\072\135\100" +
    "\015\104\u027a\113\140\114\146\121\214\122\066\123\200" +
    "\124\153\135\112\145\101\165\134\166\046\167\023\170" +
    "\145\171\103\172\061\173\114\175\073\216\026\250\201" +
    "\252\122\253\006\255\022\260\142\271\115\274\034\275" +
    "\042\276\051\307\060\311\065\312\u0184\001\001\000\116" +
    "\003\203\004\105\064\177\065\130\066\164\067\053\072" +
    "\135\100\015\104\u0279\113\140\114\146\121\214\122\066" +
    "\123\200\124\153\135\112\145\101\165\134\166\046\167" +
    "\023\170\145\171\103\172\061\173\114\175\073\216\026" +
    "\250\201\252\122\253\006\255\022\260\142\271\115\274" +
    "\034\275\042\276\051\307\060\311\065\312\u0184\001\001" +
    "\000\116\003\203\004\105\064\177\065\130\066\164\067" +
    "\053\072\135\100\015\104\u0278\113\140\114\146\121\214" +
    "\122\066\123\200\124\153\135\112\145\101\165\134\166" +
    "\046\167\023\170\145\171\103\172\061\173\114\175\073" +
    "\216\026\250\201\252\122\253\006\255\022\260\142\271" +
    "\115\274\034\275\042\276\051\307\060\311\065\312\u0184" +
    "\001\001\000\116\003\203\004\105\064\177\065\130\066" +
    "\164\067\053\072\135\100\015\104\u0277\113\140\114\146" +
    "\121\214\122\066\123\200\124\153\135\112\145\101\165" +
    "\134\166\046\167\023\170\145\171\103\172\061\173\114" +
    "\175\073\216\026\250\201\252\122\253\006\255\022\260" +
    "\142\271\115\274\034\275\042\276\051\307\060\311\065" +
    "\312\u0184\001\001\000\116\003\203\004\105\064\177\065" +
    "\130\066\164\067\053\072\135\100\015\104\u0276\113\140" +
    "\114\146\121\214\122\066\123\200\124\153\135\112\145" +
    "\101\165\134\166\046\167\023\170\145\171\103\172\061" +
    "\173\114\175\073\216\026\250\201\252\122\253\006\255" +
    "\022\260\142\271\115\274\034\275\042\276\051\307\060" +
    "\311\065\312\u0184\001\001\000\116\003\203\004\105\064" +
    "\177\065\130\066\164\067\053\072\135\100\015\104\u0275" +
    "\113\140\114\146\121\214\122\066\123\200\124\153\135" +
    "\112\145\101\165\134\166\046\167\023\170\145\171\103" +
    "\172\061\173\114\175\073\216\026\250\201\252\122\253" +
    "\006\255\022\260\142\271\115\274\034\275\042\276\051" +
    "\307\060\311\065\312\u0184\001\001\000\116\003\203\004" +
    "\105\064\177\065\130\066\164\067\053\072\135\100\015" +
    "\104\u0270\113\140\114\146\121\214\122\066\123\200\124" +
    "\153\135\112\145\101\165\134\166\046\167\023\170\145" +
    "\171\103\172\061\173\114\175\073\216\026\250\201\252" +
    "\122\253\006\255\022\260\142\271\115\274\034\275\042" +
    "\276\051\307\060\311\065\312\u0184\001\001\000\116\003" +
    "\203\004\105\064\177\065\130\066\164\067\053\072\135" +
    "\100\015\104\u026f\113\140\114\146\121\214\122\066\123" +
    "\200\124\153\135\112\145\101\165\134\166\046\167\023" +
    "\170\145\171\103\172\061\173\114\175\073\216\026\250" +
    "\201\252\122\253\006\255\022\260\142\271\115\274\034" +
    "\275\042\276\051\307\060\311\065\312\u0184\001\001\000" +
    "\116\003\203\004\105\064\177\065\130\066\164\067\053" +
    "\072\135\100\015\104\u026e\113\140\114\146\121\214\122" +
    "\066\123\200\124\153\135\112\145\101\165\134\166\046" +
    "\167\023\170\145\171\103\172\061\173\114\175\073\216" +
    "\026\250\201\252\122\253\006\255\022\260\142\271\115" +
    "\274\034\275\042\276\051\307\060\311\065\312\u0184\001" +
    "\001\000\116\003\203\004\105\064\177\065\130\066\164" +
    "\067\053\072\135\100\015\104\u026d\113\140\114\146\121" +
    "\214\122\066\123\200\124\153\135\112\145\101\165\134" +
    "\166\046\167\023\170\145\171\103\172\061\173\114\175" +
    "\073\216\026\250\201\252\122\253\006\255\022\260\142" +
    "\271\115\274\034\275\042\276\051\307\060\311\065\312" +
    "\u0184\001\001\000\116\003\203\004\105\064\177\065\130" +
    "\066\164\067\053\072\135\100\015\104\u026c\113\140\114" +
    "\146\121\214\122\066\123\200\124\153\135\112\145\101" +
    "\165\134\166\046\167\023\170\145\171\103\172\061\173" +
    "\114\175\073\216\026\250\201\252\122\253\006\255\022" +
    "\260\142\271\115\274\034\275\042\276\051\307\060\311" +
    "\065\312\u0184\001\001\000\116\003\203\004\105\064\177" +
    "\065\130\066\164\067\053\072\135\100\015\104\u026b\113" +
    "\140\114\146\121\214\122\066\123\200\124\153\135\112" +
    "\145\101\165\134\166\046\167\023\170\145\171\103\172" +
    "\061\173\114\175\073\216\026\250\201\252\122\253\006" +
    "\255\022\260\142\271\115\274\034\275\042\276\051\307" +
    "\060\311\065\312\u0184\001\001\000\116\003\203\004\105" +
    "\064\177\065\130\066\164\067\053\072\135\100\015\104" +
    "\u026a\113\140\114\146\121\214\122\066\123\200\124\153" +
    "\135\112\145\101\165\134\166\046\167\023\170\145\171" +
    "\103\172\061\173\114\175\073\216\026\250\201\252\122" +
    "\253\006\255\022\260\142\271\115\274\034\275\042\276" +
    "\051\307\060\311\065\312\u0184\001\001\000\116\003\203" +
    "\004\105\064\177\065\130\066\164\067\053\072\135\100" +
    "\015\104\u0269\113\140\114\146\121\214\122\066\123\200" +
    "\124\153\135\112\145\101\165\134\166\046\167\023\170" +
    "\145\171\103\172\061\173\114\175\073\216\026\250\201" +
    "\252\122\253\006\255\022\260\142\271\115\274\034\275" +
    "\042\276\051\307\060\311\065\312\u0184\001\001\000\116" +
    "\003\203\004\105\064\177\065\130\066\164\067\053\072" +
    "\135\100\015\104\u0268\113\140\114\146\121\214\122\066" +
    "\123\200\124\153\135\112\145\101\165\134\166\046\167" +
    "\023\170\145\171\103\172\061\173\114\175\073\216\026" +
    "\250\201\252\122\253\006\255\022\260\142\271\115\274" +
    "\034\275\042\276\051\307\060\311\065\312\u0184\001\001" +
    "\000\116\003\203\004\105\064\177\065\130\066\164\067" +
    "\053\072\135\100\015\104\u0267\113\140\114\146\121\214" +
    "\122\066\123\200\124\153\135\112\145\101\165\134\166" +
    "\046\167\023\170\145\171\103\172\061\173\114\175\073" +
    "\216\026\250\201\252\122\253\006\255\022\260\142\271" +
    "\115\274\034\275\042\276\051\307\060\311\065\312\u0184" +
    "\001\001\000\116\003\203\004\105\064\177\065\130\066" +
    "\164\067\053\072\135\100\015\104\u0266\113\140\114\146" +
    "\121\214\122\066\123\200\124\153\135\112\145\101\165" +
    "\134\166\046\167\023\170\145\171\103\172\061\173\114" +
    "\175\073\216\026\250\201\252\122\253\006\255\022\260" +
    "\142\271\115\274\034\275\042\276\051\307\060\311\065" +
    "\312\u0184\001\001\000\116\003\203\004\105\064\177\065" +
    "\130\066\164\067\053\072\135\100\015\104\u0265\113\140" +
    "\114\146\121\214\122\066\123\200\124\153\135\112\145" +
    "\101\165\134\166\046\167\023\170\145\171\103\172\061" +
    "\173\114\175\073\216\026\250\201\252\122\253\006\255" +
    "\022\260\142\271\115\274\034\275\042\276\051\307\060" +
    "\311\065\312\u0184\001\001\000\042\003\u01f0\121\u01ea\122" +
    "\u01e8\123\u01e4\124\153\135\u01ed\171\u01e5\172\061\175\u01e9" +
    "\255\022\260\142\270\u0264\273\u01e1\274\u01e2\275\u01ec\276" +
    "\u01e3\001\001\000\116\003\203\004\105\064\177\065\130" +
    "\066\164\067\053\072\135\100\015\104\u0263\113\140\114" +
    "\146\121\214\122\066\123\200\124\153\135\112\145\101" +
    "\165\134\166\046\167\023\170\145\171\103\172\061\173" +
    "\114\175\073\216\026\250\201\252\122\253\006\255\022" +
    "\260\142\271\115\274\034\275\042\276\051\307\060\311" +
    "\065\312\u0184\001\001\000\116\003\203\004\105\064\177" +
    "\065\130\066\164\067\053\072\135\100\015\104\u0262\113" +
    "\140\114\146\121\214\122\066\123\200\124\153\135\112" +
    "\145\101\165\134\166\046\167\023\170\145\171\103\172" +
    "\061\173\114\175\073\216\026\250\201\252\122\253\006" +
    "\255\022\260\142\271\115\274\034\275\042\276\051\307" +
    "\060\311\065\312\u0184\001\001\000\116\003\203\004\105" +
    "\064\177\065\130\066\164\067\053\072\135\100\015\104" +
    "\u0261\113\140\114\146\121\214\122\066\123\200\124\153" +
    "\135\112\145\101\165\134\166\046\167\023\170\145\171" +
    "\103\172\061\173\114\175\073\216\026\250\201\252\122" +
    "\253\006\255\022\260\142\271\115\274\034\275\042\276" +
    "\051\307\060\311\065\312\u0184\001\001\000\116\003\203" +
    "\004\105\064\177\065\130\066\164\067\053\072\135\100" +
    "\015\104\u0260\113\140\114\146\121\214\122\066\123\200" +
    "\124\153\135\112\145\101\165\134\166\046\167\023\170" +
    "\145\171\103\172\061\173\114\175\073\216\026\250\201" +
    "\252\122\253\006\255\022\260\142\271\115\274\034\275" +
    "\042\276\051\307\060\311\065\312\u0184\001\001\000\116" +
    "\003\203\004\105\064\177\065\130\066\164\067\053\072" +
    "\135\100\015\104\u025f\113\140\114\146\121\214\122\066" +
    "\123\200\124\153\135\112\145\101\165\134\166\046\167" +
    "\023\170\145\171\103\172\061\173\114\175\073\216\026" +
    "\250\201\252\122\253\006\255\022\260\142\271\115\274" +
    "\034\275\042\276\051\307\060\311\065\312\u0184\001\001" +
    "\000\116\003\203\004\105\064\177\065\130\066\164\067" +
    "\053\072\135\100\015\104\u025e\113\140\114\146\121\214" +
    "\122\066\123\200\124\153\135\112\145\101\165\134\166" +
    "\046\167\023\170\145\171\103\172\061\173\114\175\073" +
    "\216\026\250\201\252\122\253\006\255\022\260\142\271" +
    "\115\274\034\275\042\276\051\307\060\311\065\312\u0184" +
    "\001\001\000\116\003\203\004\105\064\177\065\130\066" +
    "\164\067\053\072\135\100\015\104\u025d\113\140\114\146" +
    "\121\214\122\066\123\200\124\153\135\112\145\101\165" +
    "\134\166\046\167\023\170\145\171\103\172\061\173\114" +
    "\175\073\216\026\250\201\252\122\253\006\255\022\260" +
    "\142\271\115\274\034\275\042\276\051\307\060\311\065" +
    "\312\u0184\001\001\000\116\003\203\004\105\064\177\065" +
    "\130\066\164\067\053\072\135\100\015\104\u025c\113\140" +
    "\114\146\121\214\122\066\123\200\124\153\135\112\145" +
    "\101\165\134\166\046\167\023\170\145\171\103\172\061" +
    "\173\114\175\073\216\026\250\201\252\122\253\006\255" +
    "\022\260\142\271\115\274\034\275\042\276\051\307\060" +
    "\311\065\312\u0184\001\001\000\116\003\203\004\105\064" +
    "\177\065\130\066\164\067\053\072\135\100\015\104\u025b" +
    "\113\140\114\146\121\214\122\066\123\200\124\153\135" +
    "\112\145\101\165\134\166\046\167\023\170\145\171\103" +
    "\172\061\173\114\175\073\216\026\250\201\252\122\253" +
    "\006\255\022\260\142\271\115\274\034\275\042\276\051" +
    "\307\060\311\065\312\u0184\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\116\003\203\004\105\064\177" +
    "\065\130\066\164\067\053\072\135\100\015\104\u0272\113" +
    "\140\114\146\121\214\122\066\123\200\124\153\135\112" +
    "\145\101\165\134\166\046\167\023\170\145\171\103\172" +
    "\061\173\114\175\073\216\026\250\201\252\122\253\006" +
    "\255\022\260\142\271\115\274\034\275\042\276\051\307" +
    "\060\311\065\312\u0184\001\001\000\002\001\001\000\116" +
    "\003\203\004\105\064\177\065\130\066\164\067\053\072" +
    "\135\100\015\104\u0274\113\140\114\146\121\214\122\066" +
    "\123\200\124\153\135\112\145\101\165\134\166\046\167" +
    "\023\170\145\171\103\172\061\173\114\175\073\216\026" +
    "\250\201\252\122\253\006\255\022\260\142\271\115\274" +
    "\034\275\042\276\051\307\060\311\065\312\u0184\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\003\u028b\004\105\066\164" +
    "\067\053\121\u028a\122\066\123\u0288\124\153\135\112\166" +
    "\046\167\u0282\170\145\171\u0287\172\061\175\u0280\216\u0286" +
    "\253\006\255\022\256\u0289\257\u0284\260\142\274\034\275" +
    "\042\276\051\307\060\001\001\000\002\001\001\000\004" +
    "\003\u02e7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\126\u02e1\001\001\000\002\001\001" +
    "\000\004\126\u02e0\001\001\000\002\001\001\000\004\102" +
    "\u02c4\001\001\000\004\126\u0291\001\001\000\002\001\001" +
    "\000\134\003\203\004\105\046\u028d\047\u0223\050\u020e\051" +
    "\u0217\064\u0225\065\130\066\164\067\053\072\135\100\015" +
    "\104\u01f3\113\140\114\146\121\214\122\066\123\200\124" +
    "\153\135\112\145\101\146\u0214\165\134\166\046\167\023" +
    "\170\145\171\103\172\061\173\114\175\073\200\u0168\201" +
    "\u020f\216\u0212\250\201\252\122\253\006\255\022\260\142" +
    "\271\115\274\034\275\042\276\051\307\060\311\065\312" +
    "\u0184\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\122\u029a\124\153\132\u02bf\133\u0297\134\u0294\135\u0298\146" +
    "\u0293\253\u0295\260\142\001\001\000\032\122\u029a\124\153" +
    "\131\u02bb\135\u0298\200\u0168\201\u016c\202\u015c\203\u014b\253" +
    "\u02b3\260\142\302\u02b5\305\u0129\001\001\000\002\001\001" +
    "\000\024\122\u029a\124\153\132\u0296\133\u0297\134\u0294\135" +
    "\u0298\146\u0293\253\u0295\260\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\212\u02a4\001" +
    "\001\000\004\126\u02a3\001\001\000\010\122\u029e\124\153" +
    "\260\142\001\001\000\116\003\203\004\105\064\177\065" +
    "\130\066\164\067\053\072\135\100\015\104\u029c\113\140" +
    "\114\146\121\214\122\066\123\200\124\153\135\112\145" +
    "\101\165\134\166\046\167\023\170\145\171\103\172\061" +
    "\173\114\175\073\216\026\250\201\252\122\253\006\255" +
    "\022\260\142\271\115\274\034\275\042\276\051\307\060" +
    "\311\065\312\u0184\001\001\000\004\126\u029b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\126\u029b\001\001\000\002\001\001\000\116\003\203\004" +
    "\105\064\177\065\130\066\164\067\053\072\135\100\015" +
    "\104\u02a1\113\140\114\146\121\214\122\066\123\200\124" +
    "\153\135\112\145\101\165\134\166\046\167\023\170\145" +
    "\171\103\172\061\173\114\175\073\216\026\250\201\252" +
    "\122\253\006\255\022\260\142\271\115\274\034\275\042" +
    "\276\051\307\060\311\065\312\u0184\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\126\u02a9" +
    "\130\u02a8\001\001\000\134\003\203\004\105\046\u02a6\047" +
    "\u0223\050\u020e\051\u0217\064\u0225\065\130\066\164\067\053" +
    "\072\135\100\015\104\u01f3\113\140\114\146\121\214\122" +
    "\066\123\200\124\153\135\112\145\101\146\u0214\165\134" +
    "\166\046\167\023\170\145\171\103\172\061\173\114\175" +
    "\073\200\u0168\201\u020f\216\u0212\250\201\252\122\253\006" +
    "\255\022\260\142\271\115\274\034\275\042\276\051\307" +
    "\060\311\065\312\u0184\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\126\u02ab\213\u02aa\001\001\000\002\001" +
    "\001\000\004\254\u02ad\001\001\000\002\001\001\000\024" +
    "\122\u029a\124\153\132\u02b8\133\u0297\134\u0294\135\u0298\146" +
    "\u0293\253\u0295\260\142\001\001\000\002\001\001\000\032" +
    "\122\u029a\124\153\131\u02b4\135\u0298\200\u0168\201\u016c\202" +
    "\u015c\203\u014b\253\u02b3\260\142\302\u02b5\305\u0129\001\001" +
    "\000\024\122\u029a\124\153\132\u02b0\133\u0297\134\u0294\135" +
    "\u0298\146\u0293\253\u0295\260\142\001\001\000\004\212\u02b1" +
    "\001\001\000\006\126\u02a9\130\u02b2\001\001\000\004\126" +
    "\u02ab\001\001\000\002\001\001\000\004\212\u02b6\001\001" +
    "\000\002\001\001\000\006\126\u02a9\130\u02b7\001\001\000" +
    "\004\126\u02ab\001\001\000\004\212\u02b9\001\001\000\006" +
    "\126\u02a9\130\u02ba\001\001\000\004\126\u02ab\001\001\000" +
    "\004\212\u02bc\001\001\000\006\126\u02a9\130\u02bd\001\001" +
    "\000\006\126\u02ab\213\u02be\001\001\000\004\254\u02ad\001" +
    "\001\000\004\212\u02c0\001\001\000\006\126\u02a9\130\u02c1" +
    "\001\001\000\006\126\u02ab\213\u02c2\001\001\000\004\254" +
    "\u02ad\001\001\000\062\003\u028b\004\105\066\164\067\053" +
    "\121\u028a\122\066\123\u0288\124\153\135\112\166\046\167" +
    "\u0282\170\145\171\u0287\172\061\175\u0280\216\u0286\253\006" +
    "\255\022\257\u02c6\260\142\274\034\275\042\276\051\307" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\u02d0\004\105\122\u029a\124\153\135" +
    "\u0298\170\u02cf\200\u0168\201\u016c\202\u015c\203\u02ce\253\u02c8" +
    "\260\142\001\001\000\002\001\001\000\004\126\u0239\001" +
    "\001\000\002\001\001\000\116\003\203\004\105\064\177" +
    "\065\130\066\164\067\053\072\135\100\015\104\u02d8\113" +
    "\140\114\146\121\214\122\066\123\200\124\153\135\112" +
    "\145\101\165\134\166\046\167\023\170\145\171\103\172" +
    "\061\173\114\175\073\216\026\250\201\252\122\253\006" +
    "\255\022\260\142\271\115\274\034\275\042\276\051\307" +
    "\060\311\065\312\u0184\001\001\000\004\003\u02d7\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\126\u02d1\001" +
    "\001\000\002\001\001\000\002\001\001\000\134\003\203" +
    "\004\105\046\u02d3\047\u0223\050\u020e\051\u0217\064\u0225\065" +
    "\130\066\164\067\053\072\135\100\015\104\u01f3\113\140" +
    "\114\146\121\214\122\066\123\200\124\153\135\112\145" +
    "\101\146\u0214\165\134\166\046\167\023\170\145\171\103" +
    "\172\061\173\114\175\073\200\u0168\201\u020f\216\u0212\250" +
    "\201\252\122\253\006\255\022\260\142\271\115\274\034" +
    "\275\042\276\051\307\060\311\065\312\u0184\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\u02d6\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\134\003\203\004\105\046\u02db\047\u0223" +
    "\050\u020e\051\u0217\064\u0225\065\130\066\164\067\053\072" +
    "\135\100\015\104\u01f3\113\140\114\146\121\214\122\066" +
    "\123\200\124\153\135\112\145\101\146\u0214\165\134\166" +
    "\046\167\023\170\145\171\103\172\061\173\114\175\073" +
    "\200\u0168\201\u020f\216\u0212\250\201\252\122\253\006\255" +
    "\022\260\142\271\115\274\034\275\042\276\051\307\060" +
    "\311\065\312\u0184\001\001\000\002\001\001\000\002\001" +
    "\001\000\134\003\203\004\105\046\u02de\047\u0223\050\u020e" +
    "\051\u0217\064\u0225\065\130\066\164\067\053\072\135\100" +
    "\015\104\u01f3\113\140\114\146\121\214\122\066\123\200" +
    "\124\153\135\112\145\101\146\u0214\165\134\166\046\167" +
    "\023\170\145\171\103\172\061\173\114\175\073\200\u0168" +
    "\201\u020f\216\u0212\250\201\252\122\253\006\255\022\260" +
    "\142\271\115\274\034\275\042\276\051\307\060\311\065" +
    "\312\u0184\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\u02e3\001\001" +
    "\000\002\001\001\000\134\003\203\004\105\046\u02e5\047" +
    "\u0223\050\u020e\051\u0217\064\u0225\065\130\066\164\067\053" +
    "\072\135\100\015\104\u01f3\113\140\114\146\121\214\122" +
    "\066\123\200\124\153\135\112\145\101\146\u0214\165\134" +
    "\166\046\167\023\170\145\171\103\172\061\173\114\175" +
    "\073\200\u0168\201\u020f\216\u0212\250\201\252\122\253\006" +
    "\255\022\260\142\271\115\274\034\275\042\276\051\307" +
    "\060\311\065\312\u0184\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\134\003\203\004\105\046" +
    "\u02e9\047\u0223\050\u020e\051\u0217\064\u0225\065\130\066\164" +
    "\067\053\072\135\100\015\104\u01f3\113\140\114\146\121" +
    "\214\122\066\123\200\124\153\135\112\145\101\146\u0214" +
    "\165\134\166\046\167\023\170\145\171\103\172\061\173" +
    "\114\175\073\200\u0168\201\u020f\216\u0212\250\201\252\122" +
    "\253\006\255\022\260\142\271\115\274\034\275\042\276" +
    "\051\307\060\311\065\312\u0184\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\u02d0\004\105\122\u029a\124" +
    "\153\135\u0298\170\u02ef\200\u0168\201\u016c\202\u015c\203\u02ee" +
    "\253\u02ec\260\142\001\001\000\002\001\001\000\116\003" +
    "\203\004\105\064\177\065\130\066\164\067\053\072\135" +
    "\100\015\104\u02f3\113\140\114\146\121\214\122\066\123" +
    "\200\124\153\135\112\145\101\165\134\166\046\167\023" +
    "\170\145\171\103\172\061\173\114\175\073\216\026\250" +
    "\201\252\122\253\006\255\022\260\142\271\115\274\034" +
    "\275\042\276\051\307\060\311\065\312\u0184\001\001\000" +
    "\002\001\001\000\004\126\u02d1\001\001\000\134\003\203" +
    "\004\105\046\u02f1\047\u0223\050\u020e\051\u0217\064\u0225\065" +
    "\130\066\164\067\053\072\135\100\015\104\u01f3\113\140" +
    "\114\146\121\214\122\066\123\200\124\153\135\112\145" +
    "\101\146\u0214\165\134\166\046\167\023\170\145\171\103" +
    "\172\061\173\114\175\073\200\u0168\201\u020f\216\u0212\250" +
    "\201\252\122\253\006\255\022\260\142\271\115\274\034" +
    "\275\042\276\051\307\060\311\065\312\u0184\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\134\003\203\004\105\046\u02f6\047\u0223\050" +
    "\u020e\051\u0217\064\u0225\065\130\066\164\067\053\072\135" +
    "\100\015\104\u01f3\113\140\114\146\121\214\122\066\123" +
    "\200\124\153\135\112\145\101\146\u0214\165\134\166\046" +
    "\167\023\170\145\171\103\172\061\173\114\175\073\200" +
    "\u0168\201\u020f\216\u0212\250\201\252\122\253\006\255\022" +
    "\260\142\271\115\274\034\275\042\276\051\307\060\311" +
    "\065\312\u0184\001\001\000\002\001\001\000\002\001\001" +
    "\000\134\003\203\004\105\046\u02f9\047\u0223\050\u020e\051" +
    "\u0217\064\u0225\065\130\066\164\067\053\072\135\100\015" +
    "\104\u01f3\113\140\114\146\121\214\122\066\123\200\124" +
    "\153\135\112\145\101\146\u0214\165\134\166\046\167\023" +
    "\170\145\171\103\172\061\173\114\175\073\200\u0168\201" +
    "\u020f\216\u0212\250\201\252\122\253\006\255\022\260\142" +
    "\271\115\274\034\275\042\276\051\307\060\311\065\312" +
    "\u0184\001\001\000\002\001\001\000\002\001\001\000\116" +
    "\003\203\004\105\064\177\065\130\066\164\067\053\072" +
    "\135\100\015\104\u02fd\113\140\114\146\121\214\122\066" +
    "\123\200\124\153\135\112\145\101\165\134\166\046\167" +
    "\023\170\145\171\103\172\061\173\114\175\073\216\026" +
    "\250\201\252\122\253\006\255\022\260\142\271\115\274" +
    "\034\275\042\276\051\307\060\311\065\312\u0184\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\130\003\203\004\105\064\177\065\130" +
    "\066\164\067\053\072\135\100\015\104\u0301\113\140\114" +
    "\146\121\214\122\066\123\200\124\153\135\112\136\u0306" +
    "\137\u0303\140\u0305\141\u0304\145\101\165\134\166\046\167" +
    "\023\170\145\171\103\172\061\173\114\175\073\216\026" +
    "\246\u0302\250\201\252\122\253\006\255\022\260\142\271" +
    "\115\274\034\275\042\276\051\307\060\311\065\312\u0184" +
    "\001\001\000\002\001\001\000\054\003\u0319\066\164\067" +
    "\053\121\u028a\122\066\123\u0313\124\153\135\112\166\046" +
    "\171\u0287\172\061\174\u0312\175\u0316\216\u0315\253\006\255" +
    "\022\260\142\274\034\275\042\276\051\307\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\116\003\203\004\105\064\177\065\130" +
    "\066\164\067\053\072\135\100\015\104\u030e\113\140\114" +
    "\146\121\214\122\066\123\200\124\153\135\112\145\101" +
    "\165\134\166\046\167\023\170\145\171\103\172\061\173" +
    "\114\175\073\216\026\250\201\252\122\253\006\255\022" +
    "\260\142\271\115\274\034\275\042\276\051\307\060\311" +
    "\065\312\u0184\001\001\000\002\001\001\000\130\003\203" +
    "\004\105\064\177\065\130\066\164\067\053\072\135\100" +
    "\015\104\u0301\113\140\114\146\121\214\122\066\123\200" +
    "\124\153\135\112\136\u030a\137\u0303\140\u0305\141\u0304\145" +
    "\101\165\134\166\046\167\023\170\145\171\103\172\061" +
    "\173\114\175\073\216\026\246\u0302\250\201\252\122\253" +
    "\006\255\022\260\142\271\115\274\034\275\042\276\051" +
    "\307\060\311\065\312\u0184\001\001\000\002\001\001\000" +
    "\002\001\001\000\116\003\203\004\105\064\177\065\130" +
    "\066\164\067\053\072\135\100\015\104\u030d\113\140\114" +
    "\146\121\214\122\066\123\200\124\153\135\112\145\101" +
    "\165\134\166\046\167\023\170\145\171\103\172\061\173" +
    "\114\175\073\216\026\250\201\252\122\253\006\255\022" +
    "\260\142\271\115\274\034\275\042\276\051\307\060\311" +
    "\065\312\u0184\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\124\003\203\004\105\064\177\065" +
    "\130\066\164\067\053\072\135\100\015\104\u0301\113\140" +
    "\114\146\121\214\122\066\123\200\124\153\135\112\137" +
    "\u0311\140\u0305\145\101\165\134\166\046\167\023\170\145" +
    "\171\103\172\061\173\114\175\073\216\026\246\u0302\250" +
    "\201\252\122\253\006\255\022\260\142\271\115\274\034" +
    "\275\042\276\051\307\060\311\065\312\u0184\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\u031d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\u031b\001\001\000\002\001\001\000\024\122\u029a\124" +
    "\153\135\u0298\200\u0168\201\u016c\202\u015c\203\u02ee\253\u02ec" +
    "\260\142\001\001\000\002\001\001\000\024\122\u029a\124" +
    "\153\135\u0298\200\u0168\201\u016c\202\u015c\203\u02ce\253\u02c8" +
    "\260\142\001\001\000\120\003\203\004\105\064\177\065" +
    "\130\066\164\067\053\072\135\100\015\104\u0320\113\140" +
    "\114\146\121\214\122\066\123\200\124\153\135\112\145" +
    "\101\165\134\166\046\167\023\170\145\171\103\172\061" +
    "\173\114\175\073\216\026\246\u0321\250\201\252\122\253" +
    "\006\255\022\260\142\271\115\274\034\275\042\276\051" +
    "\307\060\311\065\312\u0184\001\001\000\002\001\001\000" +
    "\054\003\u0319\066\164\067\053\121\u028a\122\066\123\u0313" +
    "\124\153\135\112\166\046\171\u0287\172\061\174\u0326\175" +
    "\u0316\216\u0315\253\006\255\022\260\142\274\034\275\042" +
    "\276\051\307\060\001\001\000\002\001\001\000\130\003" +
    "\203\004\105\064\177\065\130\066\164\067\053\072\135" +
    "\100\015\104\u0301\113\140\114\146\121\214\122\066\123" +
    "\200\124\153\135\112\136\u0324\137\u0303\140\u0305\141\u0304" +
    "\145\101\165\134\166\046\167\023\170\145\171\103\172" +
    "\061\173\114\175\073\216\026\246\u0302\250\201\252\122" +
    "\253\006\255\022\260\142\271\115\274\034\275\042\276" +
    "\051\307\060\311\065\312\u0184\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\130\003\203\004\105\050\u032a\051\u0217\064\u0225\065\130" +
    "\066\164\067\053\072\135\100\015\104\u01f3\113\140\114" +
    "\146\121\214\122\066\123\200\124\153\135\112\145\101" +
    "\146\u0214\165\134\166\046\167\023\170\145\171\103\172" +
    "\061\173\114\175\073\200\u0168\201\u020f\216\u0212\250\201" +
    "\252\122\253\006\255\022\260\142\271\115\274\034\275" +
    "\042\276\051\307\060\311\065\312\u0184\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\116\003" +
    "\203\004\105\064\177\065\130\066\164\067\053\072\135" +
    "\100\015\104\u032d\113\140\114\146\121\214\122\066\123" +
    "\200\124\153\135\112\145\101\165\134\166\046\167\023" +
    "\170\145\171\103\172\061\173\114\175\073\216\026\250" +
    "\201\252\122\253\006\255\022\260\142\271\115\274\034" +
    "\275\042\276\051\307\060\311\065\312\u0184\001\001\000" +
    "\002\001\001\000\002\001\001\000\130\003\203\004\105" +
    "\064\177\065\130\066\164\067\053\072\135\100\015\104" +
    "\u0330\105\u0336\113\140\114\146\115\u0332\116\u0334\117\u0337" +
    "\120\u0331\121\214\122\066\123\200\124\153\135\112\145" +
    "\101\165\134\166\046\167\023\170\145\171\103\172\061" +
    "\173\114\175\073\216\026\250\201\252\122\253\006\255" +
    "\022\260\142\271\115\274\034\275\042\276\051\307\060" +
    "\311\065\312\u0184\001\001\000\002\001\001\000\004\102" +
    "\u0341\001\001\000\002\001\001\000\004\102\u033c\001\001" +
    "\000\004\102\u0339\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\124\003\203\004\105\064\177" +
    "\065\130\066\164\067\053\072\135\100\015\104\u0330\105" +
    "\u0336\113\140\114\146\117\u033a\120\u0331\121\214\122\066" +
    "\123\200\124\153\135\112\145\101\165\134\166\046\167" +
    "\023\170\145\171\103\172\061\173\114\175\073\216\026" +
    "\250\201\252\122\253\006\255\022\260\142\271\115\274" +
    "\034\275\042\276\051\307\060\311\065\312\u0184\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\120\003\203\004\105\064\177\065\130" +
    "\066\164\067\053\072\135\100\015\104\u0330\105\u033e\113" +
    "\140\114\146\121\214\122\066\123\200\124\153\135\112" +
    "\145\101\165\134\166\046\167\023\170\145\171\103\172" +
    "\061\173\114\175\073\216\026\250\201\252\122\253\006" +
    "\255\022\260\142\271\115\274\034\275\042\276\051\307" +
    "\060\311\065\312\u0184\001\001\000\002\001\001\000\002" +
    "\001\001\000\120\003\203\004\105\064\177\065\130\066" +
    "\164\067\053\072\135\100\015\104\u0330\105\u0344\113\140" +
    "\114\146\121\214\122\066\123\200\124\153\135\112\145" +
    "\101\165\134\166\046\167\023\170\145\171\103\172\061" +
    "\173\114\175\073\216\026\250\201\252\122\253\006\255" +
    "\022\260\142\271\115\274\034\275\042\276\051\307\060" +
    "\311\065\312\u0184\001\001\000\002\001\001\000\120\003" +
    "\203\004\105\064\177\065\130\066\164\067\053\072\135" +
    "\100\015\104\u0330\105\u0343\113\140\114\146\121\214\122" +
    "\066\123\200\124\153\135\112\145\101\165\134\166\046" +
    "\167\023\170\145\171\103\172\061\173\114\175\073\216" +
    "\026\250\201\252\122\253\006\255\022\260\142\271\115" +
    "\274\034\275\042\276\051\307\060\311\065\312\u0184\001" +
    "\001\000\002\001\001\000\002\001\001\000\116\003\203" +
    "\004\105\064\177\065\130\066\164\067\053\072\135\100" +
    "\015\104\u0346\113\140\114\146\121\214\122\066\123\200" +
    "\124\153\135\112\145\101\165\134\166\046\167\023\170" +
    "\145\171\103\172\061\173\114\175\073\216\026\250\201" +
    "\252\122\253\006\255\022\260\142\271\115\274\034\275" +
    "\042\276\051\307\060\311\065\312\u0184\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\u034b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\u034f\001\001\000" +
    "\002\001\001\000\120\003\203\004\105\051\u0351\064\u0225" +
    "\065\130\066\164\067\053\072\135\100\015\104\u01f3\113" +
    "\140\114\146\121\214\122\066\123\200\124\153\135\112" +
    "\145\101\165\134\166\046\167\023\170\145\171\103\172" +
    "\061\173\114\175\073\216\u0212\250\201\252\122\253\006" +
    "\255\022\260\142\271\115\274\034\275\042\276\051\307" +
    "\060\311\065\312\u0184\001\001\000\002\001\001\000\130" +
    "\003\203\004\105\064\177\065\130\066\164\067\053\072" +
    "\135\100\015\104\u0301\113\140\114\146\121\214\122\066" +
    "\123\200\124\153\135\112\136\u0353\137\u0303\140\u0305\141" +
    "\u0304\145\101\165\134\166\046\167\023\170\145\171\103" +
    "\172\061\173\114\175\073\216\026\246\u0302\250\201\252" +
    "\122\253\006\255\022\260\142\271\115\274\034\275\042" +
    "\276\051\307\060\311\065\312\u0184\001\001\000\002\001" +
    "\001\000\002\001\001\000\116\003\203\004\105\064\177" +
    "\065\130\066\164\067\053\072\135\100\015\104\u0375\113" +
    "\140\114\146\121\214\122\066\123\200\124\153\135\112" +
    "\145\101\165\134\166\046\167\023\170\145\171\103\172" +
    "\061\173\114\175\073\216\026\250\201\252\122\253\006" +
    "\255\022\260\142\271\115\274\034\275\042\276\051\307" +
    "\060\311\065\312\u0184\001\001\000\126\003\203\004\105" +
    "\064\177\065\130\066\164\067\053\072\135\100\015\104" +
    "\020\106\u0370\111\175\112\210\113\140\114\146\121\214" +
    "\122\066\123\200\124\153\135\112\145\101\165\134\166" +
    "\046\167\023\170\145\171\103\172\061\173\114\175\073" +
    "\216\026\246\u036f\250\201\252\122\253\006\255\022\260" +
    "\142\271\115\274\034\275\042\276\051\307\060\311\065" +
    "\312\u0184\001\001\000\116\003\203\004\105\064\177\065" +
    "\130\066\164\067\053\072\135\100\015\104\u036e\113\140" +
    "\114\146\121\214\122\066\123\200\124\153\135\112\145" +
    "\101\165\134\166\046\167\023\170\145\171\103\172\061" +
    "\173\114\175\073\216\026\250\201\252\122\253\006\255" +
    "\022\260\142\271\115\274\034\275\042\276\051\307\060" +
    "\311\065\312\u0184\001\001\000\116\003\203\004\105\064" +
    "\177\065\130\066\164\067\053\072\135\100\015\104\u036d" +
    "\113\140\114\146\121\214\122\066\123\200\124\153\135" +
    "\112\145\101\165\134\166\046\167\023\170\145\171\103" +
    "\172\061\173\114\175\073\216\026\250\201\252\122\253" +
    "\006\255\022\260\142\271\115\274\034\275\042\276\051" +
    "\307\060\311\065\312\u0184\001\001\000\116\003\203\004" +
    "\105\064\177\065\130\066\164\067\053\072\135\100\015" +
    "\104\u036c\113\140\114\146\121\214\122\066\123\200\124" +
    "\153\135\112\145\101\165\134\166\046\167\023\170\145" +
    "\171\103\172\061\173\114\175\073\216\026\250\201\252" +
    "\122\253\006\255\022\260\142\271\115\274\034\275\042" +
    "\276\051\307\060\311\065\312\u0184\001\001\000\116\003" +
    "\203\004\105\064\177\065\130\066\164\067\053\072\135" +
    "\100\015\104\u036b\113\140\114\146\121\214\122\066\123" +
    "\200\124\153\135\112\145\101\165\134\166\046\167\023" +
    "\170\145\171\103\172\061\173\114\175\073\216\026\250" +
    "\201\252\122\253\006\255\022\260\142\271\115\274\034" +
    "\275\042\276\051\307\060\311\065\312\u0184\001\001\000" +
    "\116\003\203\004\105\064\177\065\130\066\164\067\053" +
    "\072\135\100\015\104\u036a\113\140\114\146\121\214\122" +
    "\066\123\200\124\153\135\112\145\101\165\134\166\046" +
    "\167\023\170\145\171\103\172\061\173\114\175\073\216" +
    "\026\250\201\252\122\253\006\255\022\260\142\271\115" +
    "\274\034\275\042\276\051\307\060\311\065\312\u0184\001" +
    "\001\000\116\003\203\004\105\064\177\065\130\066\164" +
    "\067\053\072\135\100\015\104\u0369\113\140\114\146\121" +
    "\214\122\066\123\200\124\153\135\112\145\101\165\134" +
    "\166\046\167\023\170\145\171\103\172\061\173\114\175" +
    "\073\216\026\250\201\252\122\253\006\255\022\260\142" +
    "\271\115\274\034\275\042\276\051\307\060\311\065\312" +
    "\u0184\001\001\000\116\003\203\004\105\064\177\065\130" +
    "\066\164\067\053\072\135\100\015\104\u0368\113\140\114" +
    "\146\121\214\122\066\123\200\124\153\135\112\145\101" +
    "\165\134\166\046\167\023\170\145\171\103\172\061\173" +
    "\114\175\073\216\026\250\201\252\122\253\006\255\022" +
    "\260\142\271\115\274\034\275\042\276\051\307\060\311" +
    "\065\312\u0184\001\001\000\116\003\203\004\105\064\177" +
    "\065\130\066\164\067\053\072\135\100\015\104\u0367\113" +
    "\140\114\146\121\214\122\066\123\200\124\153\135\112" +
    "\145\101\165\134\166\046\167\023\170\145\171\103\172" +
    "\061\173\114\175\073\216\026\250\201\252\122\253\006" +
    "\255\022\260\142\271\115\274\034\275\042\276\051\307" +
    "\060\311\065\312\u0184\001\001\000\116\003\203\004\105" +
    "\064\177\065\130\066\164\067\053\072\135\100\015\104" +
    "\u0366\113\140\114\146\121\214\122\066\123\200\124\153" +
    "\135\112\145\101\165\134\166\046\167\023\170\145\171" +
    "\103\172\061\173\114\175\073\216\026\250\201\252\122" +
    "\253\006\255\022\260\142\271\115\274\034\275\042\276" +
    "\051\307\060\311\065\312\u0184\001\001\000\116\003\203" +
    "\004\105\064\177\065\130\066\164\067\053\072\135\100" +
    "\015\104\u0365\113\140\114\146\121\214\122\066\123\200" +
    "\124\153\135\112\145\101\165\134\166\046\167\023\170" +
    "\145\171\103\172\061\173\114\175\073\216\026\250\201" +
    "\252\122\253\006\255\022\260\142\271\115\274\034\275" +
    "\042\276\051\307\060\311\065\312\u0184\001\001\000\116" +
    "\003\203\004\105\064\177\065\130\066\164\067\053\072" +
    "\135\100\015\104\u0364\113\140\114\146\121\214\122\066" +
    "\123\200\124\153\135\112\145\101\165\134\166\046\167" +
    "\023\170\145\171\103\172\061\173\114\175\073\216\026" +
    "\250\201\252\122\253\006\255\022\260\142\271\115\274" +
    "\034\275\042\276\051\307\060\311\065\312\u0184\001\001" +
    "\000\116\003\203\004\105\064\177\065\130\066\164\067" +
    "\053\072\135\100\015\104\u0363\113\140\114\146\121\214" +
    "\122\066\123\200\124\153\135\112\145\101\165\134\166" +
    "\046\167\023\170\145\171\103\172\061\173\114\175\073" +
    "\216\026\250\201\252\122\253\006\255\022\260\142\271" +
    "\115\274\034\275\042\276\051\307\060\311\065\312\u0184" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\u0319\066\164\067\053\121\u028a\122\066\123\u0313\124" +
    "\153\135\112\166\046\171\u0287\172\061\175\u0316\216\u0371" +
    "\253\006\255\022\260\142\274\034\275\042\276\051\307" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\u01f0\121\u01ea\122\u01e8\123\u01e4\124\153\135\u01ed\171" +
    "\u01e5\172\061\175\u01e9\255\022\260\142\270\u0373\273\u01e1" +
    "\274\u01e2\275\u01ec\276\u01e3\001\001\000\004\071\u0374\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\120\003\203\004\105\051\u0378\064\u0225\065\130\066" +
    "\164\067\053\072\135\100\015\104\u01f3\113\140\114\146" +
    "\121\214\122\066\123\200\124\153\135\112\145\101\165" +
    "\134\166\046\167\023\170\145\171\103\172\061\173\114" +
    "\175\073\216\u0212\250\201\252\122\253\006\255\022\260" +
    "\142\271\115\274\034\275\042\276\051\307\060\311\065" +
    "\312\u0184\001\001\000\002\001\001\000\120\003\203\004" +
    "\105\051\u037a\064\u0225\065\130\066\164\067\053\072\135" +
    "\100\015\104\u01f3\113\140\114\146\121\214\122\066\123" +
    "\200\124\153\135\112\145\101\165\134\166\046\167\023" +
    "\170\145\171\103\172\061\173\114\175\073\216\u0212\250" +
    "\201\252\122\253\006\255\022\260\142\271\115\274\034" +
    "\275\042\276\051\307\060\311\065\312\u0184\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\041\u037e\044\u0193\045\u0197\206\u019a\264\u0198\266\u0190\311" +
    "\065\312\u0192\321\u0196\001\001\000\002\001\001\000\004" +
    "\042\u0380\001\001\000\004\247\u0381\001\001\000\002\001" +
    "\001\000\004\015\u0383\001\001\000\150\003\203\004\105" +
    "\014\u01a7\016\u01a3\017\136\064\177\065\130\066\164\067" +
    "\053\072\135\100\015\104\020\106\104\111\175\112\210" +
    "\113\140\114\146\121\214\122\066\123\200\124\153\135" +
    "\112\145\101\147\143\165\134\166\046\167\023\170\145" +
    "\171\103\172\061\173\114\175\073\214\125\215\160\216" +
    "\026\227\172\230\024\231\056\250\201\252\122\253\006" +
    "\255\022\260\142\271\115\274\034\275\042\276\051\307" +
    "\060\311\065\312\u01a6\315\u01a4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\116\003\203\004" +
    "\105\064\u0389\065\130\066\164\067\053\072\135\100\015" +
    "\104\u01f3\113\140\114\146\121\214\122\066\123\200\124" +
    "\153\135\112\145\101\165\134\166\046\167\023\170\145" +
    "\171\103\172\061\173\114\175\073\216\u0388\250\201\252" +
    "\122\253\006\255\022\260\142\271\115\274\034\275\042" +
    "\276\051\307\060\311\065\312\u0184\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\232\u038f\001\001\000\006\003" +
    "\u01aa\176\u0409\001\001\000\004\233\u0390\001\001\000\002" +
    "\001\001\000\010\003\u01aa\176\u0393\234\u0392\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\u01aa\176\u0395" +
    "\001\001\000\002\001\001\000\004\055\u0397\001\001\000" +
    "\034\056\u03a2\207\u039b\210\u039a\251\u03a9\262\u039d\263\u039f" +
    "\264\u0399\265\u03a3\266\u03a4\267\u039c\311\065\312\u03a1\317" +
    "\u0398\001\001\000\002\001\001\000\004\266\u0408\001\001" +
    "\000\002\001\001\000\004\204\u03f3\001\001\000\004\265" +
    "\u03f0\001\001\000\004\266\u03ee\001\001\000\002\001\001" +
    "\000\004\266\u03ec\001\001\000\002\001\001\000\030\207" +
    "\u039b\210\u039a\251\u03a9\262\u039d\263\u039f\264\u0399\265\u03a3" +
    "\266\u03a4\267\u039c\311\u0187\317\u03eb\001\001\000\002\001" +
    "\001\000\012\262\u03df\263\u03e6\266\u03e7\267\u03e8\001\001" +
    "\000\014\262\u03df\263\u03e0\264\u03e3\265\u03e1\267\u03e2\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\u03b8\151\u03b6\164\u03b7\001\001\000\020\003" +
    "\u01aa\176\u01b0\235\u03ab\237\u01d1\241\u01d2\243\u01cd\245\u01ce" +
    "\001\001\000\002\001\001\000\004\177\u03ad\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\255\004\244\072" +
    "\234\073\u03b2\075\232\077\250\165\252\175\230\301\242" +
    "\303\231\304\236\306\254\001\001\000\002\001\001\000" +
    "\032\003\255\004\244\072\234\073\u03b4\075\232\077\250" +
    "\165\252\175\230\301\242\303\231\304\236\306\254\001" +
    "\001\000\002\001\001\000\004\003\u03de\001\001\000\004" +
    "\152\u03bb\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\u03b8\164\u03dd\001\001\000\004\153\u03bd\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\u01f0\146" +
    "\u03bf\154\u03c0\155\u03be\156\u03c3\175\u03c1\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\146\u03c6\001\001\000\002\001\001\000\010\003" +
    "\u01f0\175\u03d2\310\u03d1\001\001\000\006\146\u03cc\157\u03c9" +
    "\001\001\000\004\146\u03cf\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\u01f0\175\u03d5\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\146\u03d8\157" +
    "\u03d7\001\001\000\004\146\u03da\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\262\u03df\263\u03e6\267" +
    "\u03e5\001\001\000\004\265\u03e4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\262\u03df\263\u03e6\267\u03ea\001\001\000\004\266\u03e9" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\265\u03ed\001\001\000\002\001\001\000\004" +
    "\265\u03ef\001\001\000\002\001\001\000\004\266\u03f1\001" +
    "\001\000\002\001\001\000\010\200\u0168\201\u016c\202\u03f9" +
    "\001\001\000\002\001\001\000\010\200\u0168\201\u016c\202" +
    "\u03f6\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\255\004\244\072\234\075\u03f8\077\250\165\252\175" +
    "\230\301\242\303\231\304\236\306\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\255\004\244\072" +
    "\234\075\u03fb\077\250\165\252\175\230\301\242\303\231" +
    "\304\236\306\254\001\001\000\002\001\001\000\006\057" +
    "\u03fd\246\u018d\001\001\000\012\200\u0168\201\u016c\202\u015c" +
    "\203\u03fe\001\001\000\002\001\001\000\024\041\u0400\044" +
    "\u0193\045\u0197\206\u019a\264\u0198\266\u0190\311\065\312\u0192" +
    "\321\u0196\001\001\000\002\001\001\000\004\247\u0402\001" +
    "\001\000\004\211\u0403\001\001\000\002\001\001\000\004" +
    "\015\u0406\001\001\000\002\001\001\000\150\003\203\004" +
    "\105\014\u01a7\016\u01a3\017\136\064\177\065\130\066\164" +
    "\067\053\072\135\100\015\104\020\106\104\111\175\112" +
    "\210\113\140\114\146\121\214\122\066\123\200\124\153" +
    "\135\112\145\101\147\143\165\134\166\046\167\023\170" +
    "\145\171\103\172\061\173\114\175\073\214\125\215\160" +
    "\216\026\227\172\230\024\231\056\250\201\252\122\253" +
    "\006\255\022\260\142\271\115\274\034\275\042\276\051" +
    "\307\060\311\065\312\u01a6\315\u01a4\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\071\u040b" +
    "\001\001\000\004\232\u040c\001\001\000\004\233\u040d\001" +
    "\001\000\002\001\001\000\004\055\u040f\001\001\000\034" +
    "\056\u03a2\207\u039b\210\u039a\251\u03a9\262\u039d\263\u039f\264" +
    "\u0399\265\u03a3\266\u03a4\267\u039c\311\065\312\u03a1\317\u0398" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\071\u0415\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\126\u029b\001\001\000\024" +
    "\122\u029a\124\153\132\u0424\133\u0297\134\u0294\135\u0298\146" +
    "\u0293\253\u0295\260\142\001\001\000\024\122\u029a\124\153" +
    "\132\u041d\133\u0297\134\u0294\135\u0298\146\u0293\253\u0295\260" +
    "\142\001\001\000\004\277\u041e\001\001\000\004\300\u0420" +
    "\001\001\000\024\122\u029a\124\153\132\u0423\133\u0297\134" +
    "\u0294\135\u0298\146\u0293\253\u0295\260\142\001\001\000\002" +
    "\001\001\000\024\122\u029a\124\153\132\u0422\133\u0297\134" +
    "\u0294\135\u0298\146\u0293\253\u0295\260\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\277\u0425\001\001\000" +
    "\004\300\u0420\001\001\000\002\001\001\000\014\122\u029a" +
    "\124\153\135\u0298\253\u0428\260\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\122\u029a\124\153\135\u0298\253\u042d\260\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\u01aa" +
    "\176\u01b0\241\u0430\001\001\000\002\001\001\000\010\003" +
    "\u01aa\176\u01b0\241\u0432\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\045\u0197\206\u019a\264\u0198\266\u0190\311" +
    "\065\312\u0192\321\u0436\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\041\u043b\044\u0193\045\u0197\206\u019a\264\u0198" +
    "\266\u0190\311\065\312\u0192\321\u0196\001\001\000\002\001" +
    "\001\000\004\247\u043d\001\001\000\002\001\001\000\126" +
    "\003\203\004\105\064\177\065\130\066\164\067\053\072" +
    "\135\100\015\104\020\106\u0235\107\u043f\111\175\112\210" +
    "\113\140\114\146\121\214\122\066\123\200\124\153\135" +
    "\112\145\101\165\134\166\046\167\023\170\145\171\103" +
    "\172\061\173\114\175\073\216\026\250\201\252\122\253" +
    "\006\255\022\260\142\271\115\274\034\275\042\276\051" +
    "\307\060\311\065\312\u0184\001\001\000\002\001\001\000" +
    "\150\003\203\004\105\014\u01a7\016\u01a3\017\136\064\177" +
    "\065\130\066\164\067\053\072\135\100\015\104\020\106" +
    "\104\111\175\112\210\113\140\114\146\121\214\122\066" +
    "\123\200\124\153\135\112\145\101\147\143\165\134\166" +
    "\046\167\023\170\145\171\103\172\061\173\114\175\073" +
    "\214\125\215\160\216\026\227\172\230\024\231\056\250" +
    "\201\252\122\253\006\255\022\260\142\271\115\274\034" +
    "\275\042\276\051\307\060\311\065\312\u01a6\315\u01a4\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\116\003\203\004\105" +
    "\064\177\065\130\066\164\067\053\072\135\100\015\104" +
    "\u044a\113\140\114\146\121\214\122\066\123\200\124\153" +
    "\135\112\145\101\165\134\166\046\167\023\170\145\171" +
    "\103\172\061\173\114\175\073\216\026\250\201\252\122" +
    "\253\006\255\022\260\142\271\115\274\034\275\042\276" +
    "\051\307\060\311\065\312\u0184\001\001\000\002\001\001" +
    "\000\130\003\203\004\105\014\u044d\017\136\064\177\065" +
    "\130\066\164\067\053\072\135\100\015\104\020\106\104" +
    "\111\175\112\210\113\140\114\146\121\214\122\066\123" +
    "\200\124\153\135\112\145\101\165\134\166\046\167\023" +
    "\170\145\171\103\172\061\173\114\175\073\216\026\250" +
    "\201\252\122\253\006\255\022\260\142\271\115\274\034" +
    "\275\042\276\051\307\060\311\065\312\u0184\001\001\000" +
    "\004\015\u0457\001\001\000\004\035\u044e\001\001\000\004" +
    "\037\u044f\001\001\000\002\001\001\000\130\003\203\004" +
    "\105\014\u0456\017\136\064\177\065\130\066\164\067\053" +
    "\072\135\100\015\104\020\106\104\111\175\112\210\113" +
    "\140\114\146\121\214\122\066\123\200\124\153\135\112" +
    "\145\101\165\134\166\046\167\023\170\145\171\103\172" +
    "\061\173\114\175\073\216\026\250\201\252\122\253\006" +
    "\255\022\260\142\271\115\274\034\275\042\276\051\307" +
    "\060\311\065\312\u0184\001\001\000\002\001\001\000\116" +
    "\003\203\004\105\064\177\065\130\066\164\067\053\072" +
    "\135\100\015\104\u0453\113\140\114\146\121\214\122\066" +
    "\123\200\124\153\135\112\145\101\165\134\166\046\167" +
    "\023\170\145\171\103\172\061\173\114\175\073\216\026" +
    "\250\201\252\122\253\006\255\022\260\142\271\115\274" +
    "\034\275\042\276\051\307\060\311\065\312\u0184\001\001" +
    "\000\002\001\001\000\130\003\203\004\105\014\u0455\017" +
    "\136\064\177\065\130\066\164\067\053\072\135\100\015" +
    "\104\020\106\104\111\175\112\210\113\140\114\146\121" +
    "\214\122\066\123\200\124\153\135\112\145\101\165\134" +
    "\166\046\167\023\170\145\171\103\172\061\173\114\175" +
    "\073\216\026\250\201\252\122\253\006\255\022\260\142" +
    "\271\115\274\034\275\042\276\051\307\060\311\065\312" +
    "\u0184\001\001\000\002\001\001\000\002\001\001\000\152" +
    "\003\203\004\105\014\u01a7\016\u01a3\017\136\036\u0458\064" +
    "\177\065\130\066\164\067\053\072\135\100\015\104\020" +
    "\106\104\111\175\112\210\113\140\114\146\121\214\122" +
    "\066\123\200\124\153\135\112\145\101\147\143\165\134" +
    "\166\046\167\023\170\145\171\103\172\061\173\114\175" +
    "\073\214\125\215\160\216\026\227\172\230\024\231\056" +
    "\250\201\252\122\253\006\255\022\260\142\271\115\274" +
    "\034\275\042\276\051\307\060\311\065\312\u01a6\315\u01a4" +
    "\001\001\000\004\040\u0459\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\116\003\203\004\105" +
    "\064\177\065\130\066\164\067\053\072\135\100\015\104" +
    "\u045d\113\140\114\146\121\214\122\066\123\200\124\153" +
    "\135\112\145\101\165\134\166\046\167\023\170\145\171" +
    "\103\172\061\173\114\175\073\216\026\250\201\252\122" +
    "\253\006\255\022\260\142\271\115\274\034\275\042\276" +
    "\051\307\060\311\065\312\u0184\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\u0460\001\001\000\150\003" +
    "\203\004\105\014\u01a7\016\u01a3\017\136\064\177\065\130" +
    "\066\164\067\053\072\135\100\015\104\020\106\104\111" +
    "\175\112\210\113\140\114\146\121\214\122\066\123\200" +
    "\124\153\135\112\145\101\147\143\165\134\166\046\167" +
    "\023\170\145\171\103\172\061\173\114\175\073\214\125" +
    "\215\160\216\026\227\172\230\024\231\056\250\201\252" +
    "\122\253\006\255\022\260\142\271\115\274\034\275\042" +
    "\276\051\307\060\311\065\312\u01a6\315\u01a4\001\001\000" +
    "\004\015\u0462\001\001\000\150\003\203\004\105\014\u01a7" +
    "\016\u01a3\017\136\064\177\065\130\066\164\067\053\072" +
    "\135\100\015\104\020\106\104\111\175\112\210\113\140" +
    "\114\146\121\214\122\066\123\200\124\153\135\112\145" +
    "\101\147\143\165\134\166\046\167\023\170\145\171\103" +
    "\172\061\173\114\175\073\214\125\215\160\216\026\227" +
    "\172\230\024\231\056\250\201\252\122\253\006\255\022" +
    "\260\142\271\115\274\034\275\042\276\051\307\060\311" +
    "\065\312\u01a6\315\u01a4\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\122\u029a\124\153\135\u0298\200" +
    "\u0168\201\u016c\202\u015c\203\u046e\253\u02c8\260\142\272\u046d" +
    "\001\001\000\004\126\u046f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\122\003\203\004\105\064" +
    "\177\065\u01fb\066\164\067\053\072\135\100\015\104\u01f3" +
    "\110\u01f7\112\u0468\113\140\114\146\121\214\122\066\123" +
    "\200\124\153\135\112\145\101\165\134\166\046\167\023" +
    "\170\145\171\103\172\061\173\u01fe\175\073\216\u01f4\250" +
    "\u01fc\252\122\253\006\255\022\260\142\271\115\274\034" +
    "\275\042\276\051\307\060\311\065\312\u0184\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\255\004\244\072\234\075\u01dd\076" +
    "\u047a\077\250\165\252\175\230\301\242\303\231\304\236" +
    "\306\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\116\003\203\004\105\064\177\065\130" +
    "\066\164\067\053\072\135\100\015\104\u047e\113\140\114" +
    "\146\121\214\122\066\123\200\124\153\135\112\145\101" +
    "\165\134\166\046\167\023\170\145\171\103\172\061\173" +
    "\114\175\073\216\026\250\201\252\122\253\006\255\022" +
    "\260\142\271\115\274\034\275\042\276\051\307\060\311" +
    "\065\312\u0184\001\001\000\002\001\001\000\004\031\u0480" +
    "\001\001\000\002\001\001\000\004\032\u0493\001\001\000" +
    "\004\032\u0483\001\001\000\002\001\001\000\004\032\u0485" +
    "\001\001\000\002\001\001\000\002\001\001\000\116\003" +
    "\203\004\105\064\177\065\130\066\164\067\053\072\135" +
    "\100\015\104\u048d\113\140\114\146\121\214\122\066\123" +
    "\200\124\153\135\112\145\101\165\134\166\046\167\023" +
    "\170\145\171\103\172\061\173\114\175\073\216\026\250" +
    "\201\252\122\253\006\255\022\260\142\271\115\274\034" +
    "\275\042\276\051\307\060\311\065\312\u0184\001\001\000" +
    "\004\033\u0489\001\001\000\004\015\u048c\001\001\000\002" +
    "\001\001\000\002\001\001\000\150\003\203\004\105\014" +
    "\u01a7\016\u01a3\017\136\064\177\065\130\066\164\067\053" +
    "\072\135\100\015\104\020\106\104\111\175\112\210\113" +
    "\140\114\146\121\214\122\066\123\200\124\153\135\112" +
    "\145\101\147\143\165\134\166\046\167\023\170\145\171" +
    "\103\172\061\173\114\175\073\214\125\215\160\216\026" +
    "\227\172\230\024\231\056\250\201\252\122\253\006\255" +
    "\022\260\142\271\115\274\034\275\042\276\051\307\060" +
    "\311\065\312\u01a6\315\u01a4\001\001\000\004\033\u048e\001" +
    "\001\000\004\015\u048f\001\001\000\150\003\203\004\105" +
    "\014\u01a7\016\u01a3\017\136\064\177\065\130\066\164\067" +
    "\053\072\135\100\015\104\020\106\104\111\175\112\210" +
    "\113\140\114\146\121\214\122\066\123\200\124\153\135" +
    "\112\145\101\147\143\165\134\166\046\167\023\170\145" +
    "\171\103\172\061\173\114\175\073\214\125\215\160\216" +
    "\026\227\172\230\024\231\056\250\201\252\122\253\006" +
    "\255\022\260\142\271\115\274\034\275\042\276\051\307" +
    "\060\311\065\312\u01a6\315\u01a4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\u0495\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\134\003\203\004" +
    "\105\046\u049a\047\u0223\050\u020e\051\u0217\064\u0225\065\130" +
    "\066\164\067\053\072\135\100\015\104\u01f3\113\140\114" +
    "\146\121\214\122\066\123\200\124\153\135\112\145\101" +
    "\146\u0214\165\134\166\046\167\023\170\145\171\103\172" +
    "\061\173\114\175\073\200\u0168\201\u020f\216\u0212\250\201" +
    "\252\122\253\006\255\022\260\142\271\115\274\034\275" +
    "\042\276\051\307\060\311\065\312\u0184\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\116\003\203\004\105\064\177" +
    "\065\130\066\164\067\053\072\135\100\015\104\u04a1\113" +
    "\140\114\146\121\214\122\066\123\200\124\153\135\112" +
    "\145\101\165\134\166\046\167\023\170\145\171\103\172" +
    "\061\173\114\175\073\216\026\250\201\252\122\253\006" +
    "\255\022\260\142\271\115\274\034\275\042\276\051\307" +
    "\060\311\065\312\u0184\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\116\003\203" +
    "\004\105\064\177\065\130\066\164\067\053\072\135\100" +
    "\015\104\u04a8\113\140\114\146\121\214\122\066\123\200" +
    "\124\153\135\112\145\101\165\134\166\046\167\023\170" +
    "\145\171\103\172\061\173\114\175\073\216\026\250\201" +
    "\252\122\253\006\255\022\260\142\271\115\274\034\275" +
    "\042\276\051\307\060\311\065\312\u0184\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\160\u04ad\001\001\000\032\161\u04b2\210\u04af" +
    "\251\u04b7\262\u039d\263\u04b0\264\u0399\265\u03a3\266\u04b3\267" +
    "\u039c\311\065\312\u04b1\320\u04ae\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\266\u04be\001\001\000\026\210" +
    "\u04af\251\u04b7\262\u039d\263\u04b0\264\u0399\265\u03a3\266\u04b3" +
    "\267\u039c\311\u0187\320\u04bd\001\001\000\002\001\001\000" +
    "\014\262\u03df\263\u03e6\264\u03e3\265\u03e1\267\u03e2\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\u03b8\151" +
    "\u04bb\164\u03b7\001\001\000\020\003\u01aa\176\u01b0\235\u04b8" +
    "\237\u01d1\241\u01d2\243\u01cd\245\u01ce\001\001\000\004\177" +
    "\u04b9\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\152\u04bc\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\265\u03ed\001\001\000\006\057\u04c0\246\u018d\001\001" +
    "\000\012\200\u0168\201\u016c\202\u015c\203\u04c1\001\001\000" +
    "\002\001\001\000\024\041\u04c3\044\u0193\045\u0197\206\u019a" +
    "\264\u0198\266\u0190\311\065\312\u0192\321\u0196\001\001\000" +
    "\002\001\001\000\004\247\u04c5\001\001\000\004\211\u04c6" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\146\u04cd" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\255\004\244\072\234\075\u04cf\077\250\165\252\175\230" +
    "\301\242\303\231\304\236\306\254\001\001\000\002\001" +
    "\001\000\004\150\u04d1\001\001\000\002\001\001\000\010" +
    "\003\u01aa\176\u0393\234\u04d3\001\001\000\002\001\001\000" +
    "\004\162\u04d5\001\001\000\030\163\u04d8\207\u04d7\210\u04d6" +
    "\262\u039d\263\u039f\265\u04da\266\u04db\267\u039c\311\065\312" +
    "\u04d9\316\u04de\001\001\000\002\001\001\000\004\204\u04e2" +
    "\001\001\000\002\001\001\000\024\207\u04d7\210\u04d6\262" +
    "\u039d\263\u039f\265\u04da\266\u04db\267\u039c\311\u0187\316\u04e1" +
    "\001\001\000\012\262\u03df\263\u03e6\266\u04e0\267\u03e8\001" +
    "\001\000\012\262\u03df\263\u03e0\265\u04df\267\u03e2\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\262\u03df\263\u03e6\267\u03e5\001\001\000\010\262\u03df" +
    "\263\u03e6\267\u03ea\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\057\u04e5\246\u018d\001\001" +
    "\000\012\200\u0168\201\u016c\202\u015c\203\u04e6\001\001\000" +
    "\002\001\001\000\024\041\u04e8\044\u0193\045\u0197\206\u019a" +
    "\264\u0198\266\u0190\311\065\312\u0192\321\u0196\001\001\000" +
    "\002\001\001\000\004\247\u04ea\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\143\u04ee\260\u04ed\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\u0319\066\164\067\053\121\u028a\122\066\123\u0313\124" +
    "\153\135\112\166\046\171\u0287\172\061\175\u0316\216\u04fa" +
    "\253\006\255\022\260\142\274\034\275\042\276\051\307" +
    "\060\001\001\000\116\003\203\004\105\064\177\065\130" +
    "\066\164\067\053\072\135\100\015\104\u04f3\113\140\114" +
    "\146\121\214\122\066\123\200\124\153\135\112\145\101" +
    "\165\134\166\046\167\023\170\145\171\103\172\061\173" +
    "\114\175\073\216\026\250\201\252\122\253\006\255\022" +
    "\260\142\271\115\274\034\275\042\276\051\307\060\311" +
    "\065\312\u0184\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\116\003\203\004\105\064\177\065" +
    "\130\066\164\067\053\072\135\100\015\104\u04f6\113\140" +
    "\114\146\121\214\122\066\123\200\124\153\135\112\145" +
    "\101\165\134\166\046\167\023\170\145\171\103\172\061" +
    "\173\114\175\073\216\026\250\201\252\122\253\006\255" +
    "\022\260\142\271\115\274\034\275\042\276\051\307\060" +
    "\311\065\312\u0184\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\146\u0505\001\001\000\010\144" +
    "\u0501\146\u0502\260\u0500\001\001\000\004\146\u04ff\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\146\u0507\001\001\000\002\001\001\000" +
    "\024\041\u0509\044\u0193\045\u0197\206\u019a\264\u0198\266\u0190" +
    "\311\065\312\u0192\321\u0196\001\001\000\002\001\001\000" +
    "\004\247\u050b\001\001\000\002\001\001\000\004\015\u050d" +
    "\001\001\000\150\003\203\004\105\014\u01a7\016\u01a3\017" +
    "\136\064\177\065\130\066\164\067\053\072\135\100\015" +
    "\104\020\106\104\111\175\112\210\113\140\114\146\121" +
    "\214\122\066\123\200\124\153\135\112\145\101\147\143" +
    "\165\134\166\046\167\023\170\145\171\103\172\061\173" +
    "\114\175\073\214\125\215\160\216\026\227\172\230\024" +
    "\231\056\250\201\252\122\253\006\255\022\260\142\271" +
    "\115\274\034\275\042\276\051\307\060\311\065\312\u01a6" +
    "\315\u01a4\001\001\000\002\001\001\000\002\001\001\000" +
    "\116\003\203\004\105\064\u0512\065\130\066\164\067\053" +
    "\072\135\100\015\104\u01f3\113\140\114\146\121\214\122" +
    "\066\123\200\124\153\135\112\145\101\165\134\166\046" +
    "\167\023\170\145\171\103\172\061\173\114\175\073\216" +
    "\u0511\250\201\252\122\253\006\255\022\260\142\271\115" +
    "\274\034\275\042\276\051\307\060\311\065\312\u0184\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\u0319" +
    "\024\u0516\066\164\067\053\121\u028a\122\066\123\u0313\124" +
    "\153\135\112\166\046\171\u0287\172\061\175\u0316\216\u0518" +
    "\246\u0514\253\006\255\022\260\142\274\034\275\042\276" +
    "\051\307\060\001\001\000\052\003\u0319\066\164\067\053" +
    "\121\u028a\122\066\123\u0313\124\153\135\112\166\046\171" +
    "\u0287\172\061\175\u0316\216\u0528\253\006\255\022\260\142" +
    "\274\034\275\042\276\051\307\060\001\001\000\002\001" +
    "\001\000\004\023\u051b\001\001\000\130\003\203\004\105" +
    "\064\177\065\130\066\164\067\053\072\135\100\015\104" +
    "\u0301\113\140\114\146\121\214\122\066\123\200\124\153" +
    "\135\112\136\u0519\137\u0303\140\u0305\141\u0304\145\101\165" +
    "\134\166\046\167\023\170\145\171\103\172\061\173\114" +
    "\175\073\216\026\246\u0302\250\201\252\122\253\006\255" +
    "\022\260\142\271\115\274\034\275\042\276\051\307\060" +
    "\311\065\312\u0184\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\u0319" +
    "\024\u051d\066\164\067\053\121\u028a\122\066\123\u0313\124" +
    "\153\135\112\166\046\171\u0287\172\061\175\u0316\216\u0518" +
    "\246\u0514\253\006\255\022\260\142\274\034\275\042\276" +
    "\051\307\060\001\001\000\002\001\001\000\132\003\203" +
    "\004\105\014\u0520\017\136\026\u0521\064\177\065\130\066" +
    "\164\067\053\072\135\100\015\104\020\106\104\111\175" +
    "\112\210\113\140\114\146\121\214\122\066\123\200\124" +
    "\153\135\112\145\101\165\134\166\046\167\023\170\145" +
    "\171\103\172\061\173\114\175\073\216\026\250\201\252" +
    "\122\253\006\255\022\260\142\271\115\274\034\275\042" +
    "\276\051\307\060\311\065\312\u0184\001\001\000\004\015" +
    "\u0522\001\001\000\002\001\001\000\002\001\001\000\150" +
    "\003\203\004\105\014\u01a7\016\u01a3\017\136\064\177\065" +
    "\130\066\164\067\053\072\135\100\015\104\020\106\104" +
    "\111\175\112\210\113\140\114\146\121\214\122\066\123" +
    "\200\124\153\135\112\145\101\147\143\165\134\166\046" +
    "\167\023\170\145\171\103\172\061\173\114\175\073\214" +
    "\125\215\160\216\026\227\172\230\024\231\056\250\201" +
    "\252\122\253\006\255\022\260\142\271\115\274\034\275" +
    "\042\276\051\307\060\311\065\312\u01a6\315\u01a4\001\001" +
    "\000\002\001\001\000\002\001\001\000\130\003\203\004" +
    "\105\064\177\065\130\066\164\067\053\072\135\100\015" +
    "\104\u0301\113\140\114\146\121\214\122\066\123\200\124" +
    "\153\135\112\136\u0526\137\u0303\140\u0305\141\u0304\145\101" +
    "\165\134\166\046\167\023\170\145\171\103\172\061\173" +
    "\114\175\073\216\026\246\u0302\250\201\252\122\253\006" +
    "\255\022\260\142\271\115\274\034\275\042\276\051\307" +
    "\060\311\065\312\u0184\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\003\u0319\024\u052a\066" +
    "\164\067\053\121\u028a\122\066\123\u0313\124\153\135\112" +
    "\166\046\171\u0287\172\061\175\u0316\216\u0518\246\u0514\253" +
    "\006\255\022\260\142\274\034\275\042\276\051\307\060" +
    "\001\001\000\004\023\u052b\001\001\000\002\001\001\000" +
    "\132\003\203\004\105\014\u0520\017\136\026\u052d\064\177" +
    "\065\130\066\164\067\053\072\135\100\015\104\020\106" +
    "\104\111\175\112\210\113\140\114\146\121\214\122\066" +
    "\123\200\124\153\135\112\145\101\165\134\166\046\167" +
    "\023\170\145\171\103\172\061\173\114\175\073\216\026" +
    "\250\201\252\122\253\006\255\022\260\142\271\115\274" +
    "\034\275\042\276\051\307\060\311\065\312\u0184\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u0536\001\001\000\002\001\001\000\004\012\u0534" +
    "\001\001\000\002\001\001\000\152\003\203\004\105\013" +
    "\216\014\206\017\136\064\177\065\130\066\164\067\053" +
    "\072\135\100\015\104\020\106\104\111\175\112\210\113" +
    "\140\114\146\121\214\122\066\123\200\124\153\135\112" +
    "\145\101\147\143\165\134\166\046\167\023\170\145\171" +
    "\103\172\061\173\114\175\073\205\144\214\125\215\160" +
    "\216\026\227\172\230\024\231\056\250\201\252\122\253" +
    "\006\255\022\260\142\271\115\274\034\275\042\276\051" +
    "\307\060\311\065\312\152\315\141\001\001\000\002\001" +
    "\001\000\152\003\203\004\105\013\216\014\206\017\136" +
    "\064\177\065\130\066\164\067\053\072\135\100\015\104" +
    "\020\106\104\111\175\112\210\113\140\114\146\121\214" +
    "\122\066\123\200\124\153\135\112\145\101\147\143\165" +
    "\134\166\046\167\023\170\145\171\103\172\061\173\114" +
    "\175\073\205\144\214\125\215\160\216\026\227\172\230" +
    "\024\231\056\250\201\252\122\253\006\255\022\260\142" +
    "\271\115\274\034\275\042\276\051\307\060\311\065\312" +
    "\152\315\141\001\001\000\002\001\001\000\056\003\u0319" +
    "\020\u053b\021\u0539\066\164\067\053\121\u028a\122\066\123" +
    "\u0313\124\153\135\112\166\046\171\u0287\172\061\175\u0316" +
    "\216\u053a\253\006\255\022\260\142\274\034\275\042\276" +
    "\051\307\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\102\u053d\001\001\000\054\003\u0319\021\u0540\066" +
    "\164\067\053\121\u028a\122\066\123\u0313\124\153\135\112" +
    "\166\046\171\u0287\172\061\175\u0316\216\u053a\253\006\255" +
    "\022\260\142\274\034\275\042\276\051\307\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\126\u029b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\150\003\203\004\105\014\u01a7\016\u01a3\017" +
    "\136\064\177\065\130\066\164\067\053\072\135\100\015" +
    "\104\020\106\104\111\175\112\210\113\140\114\146\121" +
    "\214\122\066\123\200\124\153\135\112\145\101\147\143" +
    "\165\134\166\046\167\023\170\145\171\103\172\061\173" +
    "\114\175\073\214\125\215\160\216\026\227\172\230\024" +
    "\231\056\250\201\252\122\253\006\255\022\260\142\271" +
    "\115\274\034\275\042\276\051\307\060\311\065\312\u01a6" +
    "\315\u01a4\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\122\u029a\124\153\135\u0298\200\u0168\201\u016c\202\u015c" +
    "\203\u054f\253\u02ec\260\142\272\u054e\001\001\000\004\126" +
    "\u046f\001\001\000\002\001\001\000\006\143\u04ee\260\u04ed" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\116\003\203\004\105\064\177\065" +
    "\130\066\164\067\053\072\135\100\015\104\u0559\113\140" +
    "\114\146\121\214\122\066\123\200\124\153\135\112\145" +
    "\101\165\134\166\046\167\023\170\145\171\103\172\061" +
    "\173\114\175\073\216\026\250\201\252\122\253\006\255" +
    "\022\260\142\271\115\274\034\275\042\276\051\307\060" +
    "\311\065\312\u0184\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\122\u029a\124\153\132\u0561\133\u0297\134\u0294" +
    "\135\u0298\146\u0293\253\u0295\260\142\001\001\000\024\122" +
    "\u029a\124\153\132\u055d\133\u0297\134\u0294\135\u0298\146\u0293" +
    "\253\u0295\260\142\001\001\000\004\212\u055e\001\001\000" +
    "\006\126\u02a9\130\u055f\001\001\000\006\126\u02ab\213\u0560" +
    "\001\001\000\004\254\u02ad\001\001\000\004\212\u0562\001" +
    "\001\000\006\126\u02a9\130\u0563\001\001\000\006\126\u02ab" +
    "\213\u0564\001\001\000\004\254\u02ad\001\001\000\004\232" +
    "\u0566\001\001\000\004\233\u0567\001\001\000\002\001\001" +
    "\000\004\055\u0569\001\001\000\034\056\u03a2\207\u039b\210" +
    "\u039a\251\u03a9\262\u039d\263\u039f\264\u0399\265\u03a3\266\u03a4" +
    "\267\u039c\311\065\312\u03a1\317\u0398\001\001\000\002\001" +
    "\001\000\134\003\203\004\105\046\u0572\047\u0223\050\u020e" +
    "\051\u0217\064\u0225\065\130\066\164\067\053\072\135\100" +
    "\015\104\u01f3\113\140\114\146\121\214\122\066\123\200" +
    "\124\153\135\112\145\101\146\u0214\165\134\166\046\167" +
    "\023\170\145\171\103\172\061\173\114\175\073\200\u0168" +
    "\201\u020f\216\u0212\250\201\252\122\253\006\255\022\260" +
    "\142\271\115\274\034\275\042\276\051\307\060\311\065" +
    "\312\u0184\001\001\000\032\122\u029a\124\153\131\u056e\135" +
    "\u0298\200\u0168\201\u016c\202\u015c\203\u014b\253\u02b3\260\142" +
    "\302\u02b5\305\u0129\001\001\000\002\001\001\000\004\212" +
    "\u056f\001\001\000\006\126\u02a9\130\u0570\001\001\000\006" +
    "\126\u02ab\213\u0571\001\001\000\004\254\u02ad\001\001\000" +
    "\002\001\001\000\002\001\001\000\116\003\203\004\105" +
    "\064\177\065\130\066\164\067\053\072\135\100\015\104" +
    "\u0575\113\140\114\146\121\214\122\066\123\200\124\153" +
    "\135\112\145\101\165\134\166\046\167\023\170\145\171" +
    "\103\172\061\173\114\175\073\216\026\250\201\252\122" +
    "\253\006\255\022\260\142\271\115\274\034\275\042\276" +
    "\051\307\060\311\065\312\u0184\001\001\000\002\001\001" +
    "\000\132\003\203\004\105\014\u0579\017\136\034\u0578\064" +
    "\177\065\130\066\164\067\053\072\135\100\015\104\020" +
    "\106\104\111\175\112\210\113\140\114\146\121\214\122" +
    "\066\123\200\124\153\135\112\145\101\165\134\166\046" +
    "\167\023\170\145\171\103\172\061\173\114\175\073\216" +
    "\026\250\201\252\122\253\006\255\022\260\142\271\115" +
    "\274\034\275\042\276\051\307\060\311\065\312\u0184\001" +
    "\001\000\004\015\u057a\001\001\000\002\001\001\000\002" +
    "\001\001\000\150\003\203\004\105\014\u01a7\016\u01a3\017" +
    "\136\064\177\065\130\066\164\067\053\072\135\100\015" +
    "\104\020\106\104\111\175\112\210\113\140\114\146\121" +
    "\214\122\066\123\200\124\153\135\112\145\101\147\143" +
    "\165\134\166\046\167\023\170\145\171\103\172\061\173" +
    "\114\175\073\214\125\215\160\216\026\227\172\230\024" +
    "\231\056\250\201\252\122\253\006\255\022\260\142\271" +
    "\115\274\034\275\042\276\051\307\060\311\065\312\u01a6" +
    "\315\u01a4\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\122\u029a\124\153\131\u057e\135\u0298\200\u0168\201\u016c" +
    "\202\u015c\203\u014b\253\u02b3\260\142\302\u02b5\305\u0129\001" +
    "\001\000\004\212\u057f\001\001\000\006\126\u02a9\130\u0580" +
    "\001\001\000\006\126\u02ab\213\u0581\001\001\000\004\254" +
    "\u02ad\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\255\004\244\072\234\073\u0588\075\232\077\250\165\252" +
    "\175\230\301\242\303\231\304\236\306\254\001\001\000" +
    "\002\001\001\000\034\003\255\004\244\072\234\074\u058a" +
    "\075\u01dd\076\u01de\077\250\165\252\175\230\301\242\303" +
    "\231\304\236\306\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u058d\001\001\000\150\003\203\004" +
    "\105\014\u01a7\016\u01a3\017\136\064\177\065\130\066\164" +
    "\067\053\072\135\100\015\104\020\106\104\111\175\112" +
    "\210\113\140\114\146\121\214\122\066\123\200\124\153" +
    "\135\112\145\101\147\143\165\134\166\046\167\023\170" +
    "\145\171\103\172\061\173\114\175\073\214\125\215\160" +
    "\216\026\227\172\230\024\231\056\250\201\252\122\253" +
    "\006\255\022\260\142\271\115\274\034\275\042\276\051" +
    "\307\060\311\065\312\u01a6\315\u01a4\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\u0592" +
    "\001\001\000\150\003\203\004\105\014\u01a7\016\u01a3\017" +
    "\136\064\177\065\130\066\164\067\053\072\135\100\015" +
    "\104\020\106\104\111\175\112\210\113\140\114\146\121" +
    "\214\122\066\123\200\124\153\135\112\145\101\147\143" +
    "\165\134\166\046\167\023\170\145\171\103\172\061\173" +
    "\114\175\073\214\125\215\160\216\026\227\172\230\024" +
    "\231\056\250\201\252\122\253\006\255\022\260\142\271" +
    "\115\274\034\275\042\276\051\307\060\311\065\312\u01a6" +
    "\315\u01a4\001\001\000\002\001\001\000\010\003\u01aa\176" +
    "\u0596\222\u0595\001\001\000\006\260\u059d\261\u059e\001\001" +
    "\000\010\223\u0597\224\u059a\225\u0599\001\001\000\002\001" +
    "\001\000\006\003\u01aa\176\u059c\001\001\000\002\001\001" +
    "\000\004\225\u059b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u05a1\001\001\000\150\003\203\004\105\014" +
    "\u01a7\016\u01a3\017\136\064\177\065\130\066\164\067\053" +
    "\072\135\100\015\104\020\106\104\111\175\112\210\113" +
    "\140\114\146\121\214\122\066\123\200\124\153\135\112" +
    "\145\101\147\143\165\134\166\046\167\023\170\145\171" +
    "\103\172\061\173\114\175\073\214\125\215\160\216\026" +
    "\227\172\230\024\231\056\250\201\252\122\253\006\255" +
    "\022\260\142\271\115\274\034\275\042\276\051\307\060" +
    "\311\065\312\u01a6\315\u01a4\001\001\000\010\217\u05a4\220" +
    "\u05a6\221\u05a5\001\001\000\002\001\001\000\004\226\u05a8" +
    "\001\001\000\002\001\001\000\004\221\u05a7\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u05ab\001\001\000\150\003\203\004\105\014\u01a7\016" +
    "\u01a3\017\136\064\177\065\130\066\164\067\053\072\135" +
    "\100\015\104\020\106\104\111\175\112\210\113\140\114" +
    "\146\121\214\122\066\123\200\124\153\135\112\145\101" +
    "\147\143\165\134\166\046\167\023\170\145\171\103\172" +
    "\061\173\114\175\073\214\125\215\160\216\026\227\172" +
    "\230\024\231\056\250\201\252\122\253\006\255\022\260" +
    "\142\271\115\274\034\275\042\276\051\307\060\311\065" +
    "\312\u01a6\315\u01a4\001\001\000\002\001\001\000\010\003" +
    "\u01aa\176\u0596\222\u05ae\001\001\000\006\260\u059d\261\u05af" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\u05b2\001\001\000\150\003\203\004\105\014\u01a7\016\u01a3" +
    "\017\136\064\177\065\130\066\164\067\053\072\135\100" +
    "\015\104\020\106\104\111\175\112\210\113\140\114\146" +
    "\121\214\122\066\123\200\124\153\135\112\145\101\147" +
    "\143\165\134\166\046\167\023\170\145\171\103\172\061" +
    "\173\114\175\073\214\125\215\160\216\026\227\172\230" +
    "\024\231\056\250\201\252\122\253\006\255\022\260\142" +
    "\271\115\274\034\275\042\276\051\307\060\311\065\312" +
    "\u01a6\315\u01a4\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\143\u04ee\260\u04ed\001\001\000" +
    "\002\001\001\000\002\001\001\000\122\003\203\004\105" +
    "\062\u05bb\063\u05bc\064\177\065\130\066\164\067\053\072" +
    "\135\100\015\104\u05ba\113\140\114\146\121\214\122\066" +
    "\123\200\124\153\135\112\145\101\165\134\166\046\167" +
    "\023\170\145\171\103\172\061\173\114\175\073\216\026" +
    "\250\201\252\122\253\006\255\022\260\142\271\115\274" +
    "\034\275\042\276\051\307\060\311\065\312\u0184\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\116\003\203\004\105\064\177\065\130\066\164\067\053" +
    "\072\135\100\015\104\u05be\113\140\114\146\121\214\122" +
    "\066\123\200\124\153\135\112\145\101\165\134\166\046" +
    "\167\023\170\145\171\103\172\061\173\114\175\073\216" +
    "\026\250\201\252\122\253\006\255\022\260\142\271\115" +
    "\274\034\275\042\276\051\307\060\311\065\312\u0184\001" +
    "\001\000\002\001\001\000\122\003\203\004\105\062\u05c0" +
    "\063\u05bc\064\177\065\130\066\164\067\053\072\135\100" +
    "\015\104\u05ba\113\140\114\146\121\214\122\066\123\200" +
    "\124\153\135\112\145\101\165\134\166\046\167\023\170" +
    "\145\171\103\172\061\173\114\175\073\216\026\250\201" +
    "\252\122\253\006\255\022\260\142\271\115\274\034\275" +
    "\042\276\051\307\060\311\065\312\u0184\001\001\000\002" +
    "\001\001\000\122\003\203\004\105\062\u05c2\063\u05bc\064" +
    "\177\065\130\066\164\067\053\072\135\100\015\104\u05ba" +
    "\113\140\114\146\121\214\122\066\123\200\124\153\135" +
    "\112\145\101\165\134\166\046\167\023\170\145\171\103" +
    "\172\061\173\114\175\073\216\026\250\201\252\122\253" +
    "\006\255\022\260\142\271\115\274\034\275\042\276\051" +
    "\307\060\311\065\312\u0184\001\001\000\002\001\001\000" +
    "\132\003\203\004\105\014\u05c6\017\136\025\u05c4\064\177" +
    "\065\130\066\164\067\053\072\135\100\015\104\020\106" +
    "\104\111\175\112\210\113\140\114\146\121\214\122\066" +
    "\123\200\124\153\135\112\145\101\165\134\166\046\167" +
    "\023\170\145\171\103\172\061\173\114\175\073\216\026" +
    "\250\201\252\122\253\006\255\022\260\142\271\115\274" +
    "\034\275\042\276\051\307\060\311\065\312\u0184\001\001" +
    "\000\002\001\001\000\004\015\u05c7\001\001\000\002\001" +
    "\001\000\150\003\203\004\105\014\u01a7\016\u01a3\017\136" +
    "\064\177\065\130\066\164\067\053\072\135\100\015\104" +
    "\020\106\104\111\175\112\210\113\140\114\146\121\214" +
    "\122\066\123\200\124\153\135\112\145\101\147\143\165" +
    "\134\166\046\167\023\170\145\171\103\172\061\173\114" +
    "\175\073\214\125\215\160\216\026\227\172\230\024\231" +
    "\056\250\201\252\122\253\006\255\022\260\142\271\115" +
    "\274\034\275\042\276\051\307\060\311\065\312\u01a6\315" +
    "\u01a4\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\102\u05ce\001\001\000" +
    "\010\003\u01f0\175\u05cb\313\u05d0\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\134\003\203\004" +
    "\105\046\u05d2\047\u0223\050\u020e\051\u0217\064\u0225\065\130" +
    "\066\164\067\053\072\135\100\015\104\u01f3\113\140\114" +
    "\146\121\214\122\066\123\200\124\153\135\112\145\101" +
    "\146\u0214\165\134\166\046\167\023\170\145\171\103\172" +
    "\061\173\114\175\073\200\u0168\201\u020f\216\u0212\250\201" +
    "\252\122\253\006\255\022\260\142\271\115\274\034\275" +
    "\042\276\051\307\060\311\065\312\u0184\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\u05d5\010\u05d7\011\u05f7\001\001\000\002" +
    "\001\001\000\004\003\u05e0\001\001\000\010\003\u05d5\010" +
    "\u05d7\011\u05de\001\001\000\002\001\001\000\006\003\u05d5" +
    "\010\u05dd\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\u05ea\005\u05e9\006\u05e8\007\u05e5\001\001\000\002\001\001" +
    "\000\004\003\u05f4\001\001\000\004\003\u05f1\001\001\000" +
    "\004\102\u05ef\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\u05ea\007\u05f0\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\u05ea\005\u05fd" +
    "\006\u05e8\007\u05e5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\116\003\203\004" +
    "\105\064\177\065\130\066\164\067\053\072\135\100\015" +
    "\104\u0605\113\140\114\146\121\214\122\066\123\200\124" +
    "\153\135\112\145\101\165\134\166\046\167\023\170\145" +
    "\171\103\172\061\173\114\175\073\216\026\250\201\252" +
    "\122\253\006\255\022\260\142\271\115\274\034\275\042" +
    "\276\051\307\060\311\065\312\u0184\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\003\u0319" +
    "\066\164\067\053\121\u028a\122\066\123\u0313\124\153\135" +
    "\112\166\046\171\u0287\172\061\175\u0316\216\u060b\250\u060a" +
    "\253\006\255\022\260\142\274\034\275\042\276\051\307" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\116\003\203\004\105\064\177\065\130\066" +
    "\164\067\053\072\135\100\015\104\u060d\113\140\114\146" +
    "\121\214\122\066\123\200\124\153\135\112\145\101\165" +
    "\134\166\046\167\023\170\145\171\103\172\061\173\114" +
    "\175\073\216\026\250\201\252\122\253\006\255\022\260" +
    "\142\271\115\274\034\275\042\276\051\307\060\311\065" +
    "\312\u0184\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\u0611\001\001\000\002\001\001\000\002\001\001" +
    "\000\134\003\203\004\105\046\u0613\047\u0223\050\u020e\051" +
    "\u0217\064\u0225\065\130\066\164\067\053\072\135\100\015" +
    "\104\u01f3\113\140\114\146\121\214\122\066\123\200\124" +
    "\153\135\112\145\101\146\u0214\165\134\166\046\167\023" +
    "\170\145\171\103\172\061\173\114\175\073\200\u0168\201" +
    "\u020f\216\u0212\250\201\252\122\253\006\255\022\260\142" +
    "\271\115\274\034\275\042\276\051\307\060\311\065\312" +
    "\u0184\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ASTPHP5Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ASTPHP5Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ASTPHP5Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private static short[][] getActionTable() {
return unpackFromStrings(new String[]{
new EncodedActionTable1().getTableData(),
new EncodedActionTable2().getTableData(),
new EncodedActionTable3().getTableData(),
new EncodedActionTable4().getTableData(),
new EncodedActionTable5().getTableData(),
new EncodedActionTable6().getTableData(),
new EncodedActionTable7().getTableData(),
new EncodedActionTable8().getTableData(),
new EncodedActionTable9().getTableData(),
new EncodedActionTable10().getTableData(),
new EncodedActionTable11().getTableData(),
new EncodedActionTable12().getTableData(),
new EncodedActionTable13().getTableData(),
new EncodedActionTable14().getTableData(),
new EncodedActionTable15().getTableData(),
new EncodedActionTable16().getTableData(),
new EncodedActionTable17().getTableData()
});
}


    enum Access {
        NON_STATIC, STATIC, NULLSAFE
    }
    protected final static Integer IMPLICIT_PUBLIC = Integer.valueOf(BodyDeclaration.Modifier.IMPLICIT_PUBLIC);
    protected final static Integer PUBLIC = Integer.valueOf(BodyDeclaration.Modifier.PUBLIC);
    protected final static Integer PRIVATE = Integer.valueOf(BodyDeclaration.Modifier.PRIVATE);
    protected final static Integer PROTECTED = Integer.valueOf(BodyDeclaration.Modifier.PROTECTED);
    protected final static Integer ABSTRACT = Integer.valueOf(BodyDeclaration.Modifier.ABSTRACT);
    protected final static Integer FINAL = Integer.valueOf(BodyDeclaration.Modifier.FINAL);
    protected final static Integer STATIC = Integer.valueOf(BodyDeclaration.Modifier.STATIC);
    protected final static Integer READONLY = Integer.valueOf(BodyDeclaration.Modifier.READONLY);

    private ErrorStrategy defaultStrategy = new DefaultErrorStrategy();;
    private ErrorStrategy errorStrategy = defaultStrategy;

    private ParserErrorHandler errorHandler = null;
    private String fileName = null;
    private int anonymousClassCounter = 0;


    public void setErrorHandler (ParserErrorHandler handler) {
        this.errorHandler = handler;
    }

    public ParserErrorHandler getErrorHandler () {
        return this.errorHandler;
    }

    public String getFileName() {
        return fileName;
    }

    public void setFileName(String fileName) {
        assert fileName != null;
        this.fileName = fileName;
    }

    public int incrementAndGetAnonymousClassCounter() {
        anonymousClassCounter++;
        return anonymousClassCounter;
    }

    public VariableBase createDispatch(VariableBase dispatcher, Pair<Expression, Access> pair, List dimensions) {
        VariableBase dispatch = null;
        Expression property = pair.first();
        Access access = pair.second();
        if (property instanceof DereferencedArrayAccess) {
            DereferencedArrayAccess arrayAccess = (DereferencedArrayAccess) property;
            dimensions = new LinkedList();
            dimensions.add(arrayAccess.getDimension());
            while (arrayAccess.getDispatcher() instanceof DereferencedArrayAccess) {
                arrayAccess = (DereferencedArrayAccess) arrayAccess.getDispatcher();
                ((LinkedList) dimensions).addFirst(arrayAccess.getDimension());
            }
            property = arrayAccess.getDispatcher();
        }
        if (property instanceof Variable) {
            if (access == Access.STATIC) {
                Variable variable = (Variable) property;
                if (variable.isDollared() || variable instanceof ArrayAccess) {
                    dispatch = new StaticFieldAccess(dispatcher.getStartOffset(), property.getEndOffset(), dispatcher, (Variable) property);
                } else {
                    Expression varName = variable.getName();
                    // it should always be identifier
                    String name = varName instanceof Identifier ? ((Identifier) varName).getName() : "";
                    dispatch = new StaticConstantAccess(dispatcher.getStartOffset(), property.getEndOffset(), dispatcher,
                            new Identifier(variable.getStartOffset(), variable.getEndOffset(), name));
                }
            } else {
                boolean isNullsafe = access == Access.NULLSAFE;
                dispatch = new FieldAccess(dispatcher.getStartOffset(), property.getEndOffset(), dispatcher, (Variable)property, isNullsafe);
            }
        } else if (property instanceof FunctionInvocation) {
            if (access == Access.STATIC) {
                dispatch = new StaticMethodInvocation(dispatcher.getStartOffset(), property.getEndOffset(), dispatcher, (FunctionInvocation)property);
            } else {
                boolean isNullsafe = access == Access.NULLSAFE;
                dispatch = new MethodInvocation(dispatcher.getStartOffset(), property.getEndOffset(), dispatcher, (FunctionInvocation)property, isNullsafe);
            }
        } else if (property instanceof ExpressionArrayAccess || property instanceof Identifier) {
            dispatch = new StaticConstantAccess(dispatcher.getStartOffset(), property.getEndOffset(), dispatcher, property);
        } else {
            throw new IllegalArgumentException("Unexpected class: " + property.getClass().getName());
        }

        if (dimensions != null) {
            for (Object i : dimensions) {
                ArrayDimension index = (ArrayDimension) i;
                dispatch = new DereferencedArrayAccess(dispatch.getStartOffset(), index.getEndOffset(), dispatch, index);
            }
        }
        return dispatch;
    }

    public VariableBase createDispatch(VariableBase dispatcher, VariableBase property, List dimensions, Access access) {
        return createDispatch(dispatcher, Pair.of(property, access), null);
    }

    public VariableBase createDispatch(VariableBase dispatcher, VariableBase property, Access access) {
        return createDispatch(dispatcher, property, null, access);
    }

    public VariableBase createDispatch(Access access, VariableBase var, Expression memberProperty, int memberPropertyleft, int memberPropertyright,
            List<Expression> paramsList, int paramsListright, List propertyList, List aa) {
        Expression firstVarProperty = null;
        if (paramsList == null) {
            firstVarProperty = memberProperty;
        } else {
            FunctionName functionName = new FunctionName(memberPropertyleft, memberPropertyright, memberProperty);
            firstVarProperty = new FunctionInvocation(memberPropertyleft, paramsListright, functionName, paramsList);
        }

        // then get the aggregated list of properties ([->|?->|::]...[->|?->|::]...[->|?->|::]...)
        LinkedList list = (LinkedList) propertyList;
        list.addFirst(Pair.of(firstVarProperty, access));

        // now create the dispatch(es) nodes
        VariableBase dispatch = null;
        VariableBase dispatcher = var;
        List arrayDimensiones = aa;
        Iterator listIt = list.iterator();
        while (listIt.hasNext()) {
            Pair<Expression, Access> property = (Pair<Expression, Access>) listIt.next();
            dispatch = createDispatch(dispatcher, property, arrayDimensiones);
            dispatcher = dispatch;
            arrayDimensiones = new LinkedList();
        }
        return dispatch;
    }

    public Pair<Expression, Access> createDispatchProperty(Access access, Expression memberProperty, int memberPropertyleft, int memberPropertyright,
            List<Expression> paramsList, int paramsListright, List aa) {
        Expression result = null;
        if (paramsList == null) {
            result = memberProperty;
        } else {
            FunctionName functionName = new FunctionName(memberPropertyleft, memberPropertyright, memberProperty);
            result = new FunctionInvocation(memberPropertyleft, paramsListright, functionName, paramsList);
        }
        if (result instanceof VariableBase) {
            for (Object i : aa) {
                ArrayDimension index = (ArrayDimension) i;
                result = new DereferencedArrayAccess(result.getStartOffset(), index.getEndOffset(), (VariableBase) result, index);
            }
        }
        return Pair.of(result, access);
    }

    ClassName createClassName(VariableBase var, VariableBase firstVarProperty, List<Pair<VariableBase, Access>> propertyList, int varleft, int propertyListright, Access access) {
        // then get the aggregated list of properties ([->|?->]...[->|?->]...[->|?->]...)
        LinkedList<Pair<VariableBase, Access>> list = (LinkedList<Pair<VariableBase, Access>>) propertyList;
        list.addFirst(Pair.of(firstVarProperty, access));

        // now create the dispatch(es) nodes
        VariableBase dispatch = null;
        VariableBase dispatcher = var;
        Iterator<Pair<VariableBase, Access>> listIt = list.iterator();
        while (listIt.hasNext()) {
            Pair<VariableBase, Access> property = listIt.next();
            dispatch = createDispatch(dispatcher, property.first(), property.second());
            dispatcher = dispatch;
        }

        // create class name from the dispatch
        return new ClassName(varleft, propertyListright, dispatch);
    }

    Statement createAttributedStatement(Statement statement, List<Attribute> attributes) {
        Statement attributedStatement = statement;
        if (statement instanceof FunctionDeclaration) {
            attributedStatement = FunctionDeclaration.create((FunctionDeclaration) statement, attributes);
        } else if (statement instanceof ClassDeclaration) {
            attributedStatement = ClassDeclaration.create((ClassDeclaration) statement, attributes);
        } else if (statement instanceof InterfaceDeclaration) {
            attributedStatement = InterfaceDeclaration.create((InterfaceDeclaration) statement, attributes);
        } else if (statement instanceof TraitDeclaration) {
            attributedStatement = TraitDeclaration.create((TraitDeclaration) statement, attributes);
        } else if (statement instanceof FieldsDeclaration) {
            attributedStatement = FieldsDeclaration.create((FieldsDeclaration) statement, attributes);
        } else if (statement instanceof ConstantDeclaration) {
            attributedStatement = ConstantDeclaration.create((ConstantDeclaration) statement, attributes);
        } else if (statement instanceof MethodDeclaration) {
            attributedStatement = MethodDeclaration.create((MethodDeclaration) statement, attributes);
        } else {
            assert false;
        }
        return attributedStatement;
    }

    interface ErrorStrategy {
        public boolean errorRecovery(boolean debug) throws Exception;
    }

    class DefaultErrorStrategy implements ErrorStrategy {

        public boolean errorRecovery(boolean debug) throws Exception {
            return ASTPHP5Parser.super.error_recovery(debug);
        }
    }

    /**
     * Attempt to recover from a syntax error.  This returns false if recovery fails,
     * true if it succeeds.
     * @param debug should we produce debugging messages as we parse.
     */
    protected boolean error_recovery(boolean debug) throws java.lang.Exception {
        return errorStrategy.errorRecovery(debug);
    }

    /**
     * Report a non fatal error (or warning).  This method takes a message
     * string and an additional object (to be used by specializations implemented in subclasses).
     * The super class prints the message to System.err.
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info) {
        System.out.print("report_eror"  + message);
    }

    /**
     * This method is called when a syntax error has been detected and recovery is about to be invoked.
     * The super class just emit a "Syntax error" error message.
     * @param cur_token the current lookahead Symbol.
     */
    public void syntax_error(java_cup.runtime.Symbol cur_token) {
        java_cup.runtime.Symbol symbol = (java_cup.runtime.Symbol)stack.peek();
        int state = symbol.parse_state;
        short[] rowOfProbe = action_tab[state];
        if (errorHandler != null) {
            errorHandler.handleError(ParserErrorHandler.Type.SYNTAX_ERROR, rowOfProbe, cur_token, symbol);
        }
     }

    /**
     * Report a fatal error.  This method takes a message string and an additional object
     * (to be used by specializations implemented in subclasses).
     * The super class reports the error then throws an exception.
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_fatal_error(String message, Object info) throws Exception {
        if (errorHandler != null) {
            errorHandler.handleError(ParserErrorHandler.Type.FATAL_PARSER_ERROR, null, cur_token, null);
        }
    }

    protected int error_sync_size() {
        return 1;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ASTPHP5Parser$actions {
  private final ASTPHP5Parser parser;

  /** Constructor */
  CUP$ASTPHP5Parser$actions(ASTPHP5Parser parser) {
    this.parser = parser;
  }

public final java_cup.runtime.Symbol CUP$ASTPHP5Parser$do_action(
int                        CUP$ASTPHP5Parser$act_num,
java_cup.runtime.lr_parser CUP$ASTPHP5Parser$parser,
java.util.Stack            CUP$ASTPHP5Parser$stack,
int                        CUP$ASTPHP5Parser$top)
throws java.lang.Exception
{
if (CUP$ASTPHP5Parser$act_num < 100) {
    return fakeMethod0to99(CUP$ASTPHP5Parser$act_num, CUP$ASTPHP5Parser$parser, CUP$ASTPHP5Parser$stack, CUP$ASTPHP5Parser$top);
}
else if (CUP$ASTPHP5Parser$act_num < 200) {
    return fakeMethod100to199(CUP$ASTPHP5Parser$act_num, CUP$ASTPHP5Parser$parser, CUP$ASTPHP5Parser$stack, CUP$ASTPHP5Parser$top);
}
else if (CUP$ASTPHP5Parser$act_num < 300) {
    return fakeMethod200to299(CUP$ASTPHP5Parser$act_num, CUP$ASTPHP5Parser$parser, CUP$ASTPHP5Parser$stack, CUP$ASTPHP5Parser$top);
}
else if (CUP$ASTPHP5Parser$act_num < 400) {
    return fakeMethod300to399(CUP$ASTPHP5Parser$act_num, CUP$ASTPHP5Parser$parser, CUP$ASTPHP5Parser$stack, CUP$ASTPHP5Parser$top);
}
else if (CUP$ASTPHP5Parser$act_num < 500) {
    return fakeMethod400to499(CUP$ASTPHP5Parser$act_num, CUP$ASTPHP5Parser$parser, CUP$ASTPHP5Parser$stack, CUP$ASTPHP5Parser$top);
}
else if (CUP$ASTPHP5Parser$act_num < 600) {
    return fakeMethod500to599(CUP$ASTPHP5Parser$act_num, CUP$ASTPHP5Parser$parser, CUP$ASTPHP5Parser$stack, CUP$ASTPHP5Parser$top);
}
else if (CUP$ASTPHP5Parser$act_num < 700) {
    return fakeMethod600to699(CUP$ASTPHP5Parser$act_num, CUP$ASTPHP5Parser$parser, CUP$ASTPHP5Parser$stack, CUP$ASTPHP5Parser$top);
}
else if (CUP$ASTPHP5Parser$act_num < 800) {
    return fakeMethod700to799(CUP$ASTPHP5Parser$act_num, CUP$ASTPHP5Parser$parser, CUP$ASTPHP5Parser$stack, CUP$ASTPHP5Parser$top);
}
throw new Exception("Invalid action number found in internal parse table");
}
public final java_cup.runtime.Symbol fakeMethod0to99(
int                        CUP$ASTPHP5Parser$act_num,
java_cup.runtime.lr_parser CUP$ASTPHP5Parser$parser,
java.util.Stack            CUP$ASTPHP5Parser$stack,
int                        CUP$ASTPHP5Parser$top)
throws java.lang.Exception
{
java_cup.runtime.Symbol CUP$ASTPHP5Parser$result;
switch (CUP$ASTPHP5Parser$act_num) {
          case 0: // thestart ::= top_statement_list
            {
              Program RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ASTPHP5Scanner phpAstLexer5 = (ASTPHP5Scanner) parser.getScanner();
    List commentList = phpAstLexer5.getCommentList();
    int endOfProgram = statementListright > phpAstLexer5.getWhitespaceEndPosition() || phpAstLexer5.isEndedPhp() ? statementListright : phpAstLexer5.getWhitespaceEndPosition();
    Program program = new Program(statementListleft, endOfProgram, statementList, commentList);
    RESULT = program;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("thestart",0, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /* . . . . . .*/
          case 1: // $START ::= thestart EOF
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		RESULT = start_val;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ASTPHP5Parser$parser.done_parsing();
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // namespace_name ::= T_STRING
            {
              List RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    list.add(new Identifier(nleft, nright, n));
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("namespace_name",1, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // namespace_name ::= T_DEFINE
            {
              List RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    list.add(new Identifier(nleft, nright, "define"));
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("namespace_name",1, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // namespace_name ::= namespace_name T_NS_SEPARATOR T_STRING
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(new Identifier(nleft, nright, n));
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("namespace_name",1, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // namespace_name_access ::= namespace_name
            {
              NamespaceName RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new NamespaceName(listleft, listright, list, false, false);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("namespace_name_access",2, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // namespace_name_access ::= T_NAMESPACE T_NS_SEPARATOR namespace_name
            {
              NamespaceName RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new NamespaceName(sleft, listright, list, false, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("namespace_name_access",2, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // namespace_name_access ::= T_NS_SEPARATOR namespace_name
            {
              NamespaceName RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new NamespaceName(sleft, listright, list, true, false);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("namespace_name_access",2, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // reserved_non_modifiers_without_class ::= T_INCLUDE
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // reserved_non_modifiers_without_class ::= T_INCLUDE_ONCE
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // reserved_non_modifiers_without_class ::= T_EVAL
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // reserved_non_modifiers_without_class ::= T_REQUIRE
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // reserved_non_modifiers_without_class ::= T_REQUIRE_ONCE
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // reserved_non_modifiers_without_class ::= T_LOGICAL_OR
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // reserved_non_modifiers_without_class ::= T_LOGICAL_XOR
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // reserved_non_modifiers_without_class ::= T_LOGICAL_AND
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // reserved_non_modifiers_without_class ::= T_INSTANCEOF
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // reserved_non_modifiers_without_class ::= T_NEW
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // reserved_non_modifiers_without_class ::= T_CLONE
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // reserved_non_modifiers_without_class ::= T_EXIT
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // reserved_non_modifiers_without_class ::= T_IF
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // reserved_non_modifiers_without_class ::= T_ELSEIF
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // reserved_non_modifiers_without_class ::= T_ELSE
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // reserved_non_modifiers_without_class ::= T_ENDIF
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // reserved_non_modifiers_without_class ::= T_ECHO
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // reserved_non_modifiers_without_class ::= T_DO
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // reserved_non_modifiers_without_class ::= T_WHILE
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // reserved_non_modifiers_without_class ::= T_ENDWHILE
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // reserved_non_modifiers_without_class ::= T_FOR
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // reserved_non_modifiers_without_class ::= T_ENDFOR
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // reserved_non_modifiers_without_class ::= T_FOREACH
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // reserved_non_modifiers_without_class ::= T_ENDFOREACH
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // reserved_non_modifiers_without_class ::= T_DECLARE
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // reserved_non_modifiers_without_class ::= T_ENDDECLARE
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // reserved_non_modifiers_without_class ::= T_AS
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // reserved_non_modifiers_without_class ::= T_TRY
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // reserved_non_modifiers_without_class ::= T_CATCH
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // reserved_non_modifiers_without_class ::= T_FINALLY
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // reserved_non_modifiers_without_class ::= T_THROW
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // reserved_non_modifiers_without_class ::= T_USE
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // reserved_non_modifiers_without_class ::= T_INSTEADOF
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // reserved_non_modifiers_without_class ::= T_GLOBAL
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // reserved_non_modifiers_without_class ::= T_VAR
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // reserved_non_modifiers_without_class ::= T_UNSET
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // reserved_non_modifiers_without_class ::= T_ISSET
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // reserved_non_modifiers_without_class ::= T_EMPTY
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // reserved_non_modifiers_without_class ::= T_CONTINUE
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // reserved_non_modifiers_without_class ::= T_GOTO
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // reserved_non_modifiers_without_class ::= T_FN
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    // PHP 7.4
    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // reserved_non_modifiers_without_class ::= T_FUNCTION
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // reserved_non_modifiers_without_class ::= T_CONST
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // reserved_non_modifiers_without_class ::= T_RETURN
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // reserved_non_modifiers_without_class ::= T_PRINT
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // reserved_non_modifiers_without_class ::= T_YIELD
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // reserved_non_modifiers_without_class ::= T_LIST
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // reserved_non_modifiers_without_class ::= T_MATCH
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // reserved_non_modifiers_without_class ::= T_SWITCH
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // reserved_non_modifiers_without_class ::= T_ENDSWITCH
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // reserved_non_modifiers_without_class ::= T_CASE
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // reserved_non_modifiers_without_class ::= T_DEFAULT
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // reserved_non_modifiers_without_class ::= T_BREAK
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // reserved_non_modifiers_without_class ::= T_ARRAY
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // reserved_non_modifiers_without_class ::= T_CALLABLE
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // reserved_non_modifiers_without_class ::= T_EXTENDS
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // reserved_non_modifiers_without_class ::= T_IMPLEMENTS
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // reserved_non_modifiers_without_class ::= T_NAMESPACE
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // reserved_non_modifiers_without_class ::= T_TRAIT
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // reserved_non_modifiers_without_class ::= T_INTERFACE
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // reserved_non_modifiers_without_class ::= T_CLASS_C
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // reserved_non_modifiers_without_class ::= T_TRAIT_C
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // reserved_non_modifiers_without_class ::= T_FUNC_C
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // reserved_non_modifiers_without_class ::= T_METHOD_C
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // reserved_non_modifiers_without_class ::= T_LINE
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // reserved_non_modifiers_without_class ::= T_FILE
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // reserved_non_modifiers_without_class ::= T_DIR
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // reserved_non_modifiers_without_class ::= T_NS_C
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers_without_class",126, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // semi_reserved_without_class ::= reserved_non_modifiers_without_class
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Identifier reserved = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = reserved;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("semi_reserved_without_class",127, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // semi_reserved_without_class ::= T_STATIC
            {
              Identifier RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String modifier = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(modifierleft, modifierright, modifier, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("semi_reserved_without_class",127, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // semi_reserved_without_class ::= T_ABSTRACT
            {
              Identifier RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String modifier = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(modifierleft, modifierright, modifier, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("semi_reserved_without_class",127, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // semi_reserved_without_class ::= T_FINAL
            {
              Identifier RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String modifier = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(modifierleft, modifierright, modifier, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("semi_reserved_without_class",127, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // semi_reserved_without_class ::= T_PRIVATE
            {
              Identifier RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String modifier = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(modifierleft, modifierright, modifier, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("semi_reserved_without_class",127, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // semi_reserved_without_class ::= T_PROTECTED
            {
              Identifier RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String modifier = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(modifierleft, modifierright, modifier, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("semi_reserved_without_class",127, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // semi_reserved_without_class ::= T_PUBLIC
            {
              Identifier RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String modifier = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(modifierleft, modifierright, modifier, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("semi_reserved_without_class",127, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // semi_reserved_without_class ::= T_READONLY
            {
              Identifier RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String modifier = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(modifierleft, modifierright, modifier, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("semi_reserved_without_class",127, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // identifier ::= identifier_without_class
            {
              Identifier RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Identifier ident = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = ident;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("identifier",129, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // identifier ::= T_CLASS
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String reserved = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(reservedleft, reservedright, reserved, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("identifier",129, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // identifier_without_class ::= T_STRING
            {
              Identifier RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(stringleft, stringright, string);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("identifier_without_class",128, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // identifier_without_class ::= T_DEFINE
            {
              Identifier RESULT =null;
		int defineleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int defineright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String define = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(defineleft, defineright, define);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("identifier_without_class",128, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // identifier_without_class ::= semi_reserved_without_class
            {
              Identifier RESULT =null;
		int reservedleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int reservedright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Identifier reserved = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = reserved;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("identifier_without_class",128, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // top_statement_list ::= top_statement_list top_statement
            {
              List RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    if(statement != null) {
        if (!(statement instanceof NamespaceDeclaration) && sList.size() > 0) {
            Statement lastStatement = (Statement) ((LinkedList) sList).getLast();
            if (lastStatement instanceof NamespaceDeclaration) {
                NamespaceDeclaration namespaceDeclaration = (NamespaceDeclaration) lastStatement;
                // there should be NO statement outside bracketed namespaces - it's PHP FATAL ERROR
                // (that statement doesn't belong to last bracketed namespace)
                if (!namespaceDeclaration.isBracketed()) {
                    namespaceDeclaration.addStatement(statement);
                }
            } else {
                sList.add(statement);
            }
        } else {
            sList.add(statement);
        }
    }
    RESULT = sList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement_list",8, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // top_statement_list ::=
            {
              List RESULT =null;

    RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement_list",8, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // attributed_statement ::= function_declaration_statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("attributed_statement",203, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // attributed_statement ::= class_declaration_statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("attributed_statement",203, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // top_statement ::= statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",9, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // top_statement ::= attributed_statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",9, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // top_statement ::= attributes attributed_statement
            {
              Statement RESULT =null;
		int attributesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int attributesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List<Attribute> attributes = (List<Attribute>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = parser.createAttributedStatement(statement, attributes);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",9, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // top_statement ::= T_HALT_COMPILER
            {
              Statement RESULT =null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new HaltCompiler(haltleft, haltright);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",9, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // top_statement ::= T_NAMESPACE namespace_name T_SEMICOLON
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new NamespaceDeclaration(sleft, eright,
        new NamespaceName(listleft, listright, list, false, false), null, false);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",9, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // top_statement ::= T_NAMESPACE namespace_name T_CURLY_OPEN top_statement_list T_CURLY_CLOSE
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new NamespaceDeclaration(sleft, eright,
        new NamespaceName(listleft, listright, list, false, false),
        new Block(tokenleft, eright, sList), true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",9, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // top_statement ::= T_NAMESPACE T_CURLY_OPEN top_statement_list T_CURLY_CLOSE
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new NamespaceDeclaration(sleft, eright, null,
        new Block(tokenleft, eright, sList), true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",9, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
default:
throw new Exception("Invalid action number found in internal parse table");
}
}
public final java_cup.runtime.Symbol fakeMethod100to199(
int                        CUP$ASTPHP5Parser$act_num,
java_cup.runtime.lr_parser CUP$ASTPHP5Parser$parser,
java.util.Stack            CUP$ASTPHP5Parser$stack,
int                        CUP$ASTPHP5Parser$top)
throws java.lang.Exception
{
java_cup.runtime.Symbol CUP$ASTPHP5Parser$result;
switch (CUP$ASTPHP5Parser$act_num) {
          case 100: // top_statement ::= T_USE use_declarations T_SEMICOLON
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new UseStatement(sleft, eright, list);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",9, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // top_statement ::= T_USE T_FUNCTION use_declarations T_SEMICOLON
            {
              Statement RESULT =null;
		int useleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int useright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String use = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new UseStatement(useleft, eright, list, UseStatement.Type.FUNCTION);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",9, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // top_statement ::= T_USE T_CONST use_declarations T_SEMICOLON
            {
              Statement RESULT =null;
		int useleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int useright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String use = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new UseStatement(useleft, eright, list, UseStatement.Type.CONST);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",9, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // top_statement ::= constant_declaration T_SEMICOLON
            {
              Statement RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ConstantDeclaration(listleft, eright, ASTPHP5Parser.IMPLICIT_PUBLIC, list, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",9, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // attribute_decl ::= class_name
            {
              AttributeDeclaration RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression name = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new AttributeDeclaration(nameleft, nameright, name, null);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("attribute_decl",201, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // attribute_decl ::= class_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              AttributeDeclaration RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression name = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new AttributeDeclaration(nameleft, eright, name, paramList);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("attribute_decl",201, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // attribute_group ::= attribute_decl
            {
              List<AttributeDeclaration> RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		AttributeDeclaration decl = (AttributeDeclaration)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    list.add(decl);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("attribute_group",202, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // attribute_group ::= attribute_group T_COMMA attribute_decl
            {
              List<AttributeDeclaration> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List<AttributeDeclaration> list = (List<AttributeDeclaration>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		AttributeDeclaration decl = (AttributeDeclaration)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(decl);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("attribute_group",202, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // attribute ::= T_ATTRIBUTE attribute_group possible_comma T_CLOSE_RECT
            {
              Attribute RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int groupleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int groupright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List<AttributeDeclaration> group = (List<AttributeDeclaration>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Attribute(startleft, endright, group);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("attribute",199, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // attributes ::= attribute
            {
              List<Attribute> RESULT =null;
		int attributeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int attributeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Attribute attribute = (Attribute)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    list.add(attribute);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("attributes",200, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // attributes ::= attributes attribute
            {
              List<Attribute> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List<Attribute> list = (List<Attribute>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int attributeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int attributeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Attribute attribute = (Attribute)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(attribute);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("attributes",200, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // use_declarations ::= use_declarations T_COMMA use_declaration
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		UseStatementPart useDecl = (UseStatementPart)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(useDecl);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_declarations",7, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // use_declarations ::= use_declaration
            {
              List RESULT =null;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		UseStatementPart useDecl = (UseStatementPart)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    list.add(useDecl);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_declarations",7, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // use_declaration ::= namespace_name
            {
              UseStatementPart RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new SingleUseStatementPart(listleft, listright,
        new NamespaceName(listleft, listright, list, false, false), null);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_declaration",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // use_declaration ::= namespace_name T_AS T_STRING
            {
              UseStatementPart RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new SingleUseStatementPart(listleft, aliasNameright,
        new NamespaceName(listleft, listright, list, false, false),
        new Identifier(aliasNameleft, aliasNameright, aliasName));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_declaration",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // use_declaration ::= namespace_name T_NS_SEPARATOR T_CURLY_OPEN group_namespace_parts T_CURLY_CLOSE
            {
              UseStatementPart RESULT =null;
		int basensleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int basensright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List basens = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int openleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int openright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object open = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int partsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int partsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parts = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new GroupUseStatementPart(basensleft, closeright, new NamespaceName(basensleft, basensright, basens, false, false), parts);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_declaration",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // use_declaration ::= T_NS_SEPARATOR namespace_name
            {
              UseStatementPart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new SingleUseStatementPart(sleft, listright,
        new NamespaceName(sleft, listright, list, true, false), null);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_declaration",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // use_declaration ::= T_NS_SEPARATOR namespace_name T_AS T_STRING
            {
              UseStatementPart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new SingleUseStatementPart(sleft, aliasNameright,
        new NamespaceName(sleft, listright, list, true, false),
        new Identifier(aliasNameleft, aliasNameright, aliasName));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_declaration",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // use_declaration ::= T_NS_SEPARATOR namespace_name T_NS_SEPARATOR T_CURLY_OPEN group_namespace_parts T_CURLY_CLOSE
            {
              UseStatementPart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int basensleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int basensright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List basens = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int openleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int openright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object open = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int partsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int partsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parts = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new GroupUseStatementPart(sleft, closeright, new NamespaceName(basensleft, basensright, basens, true, false), parts);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_declaration",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // group_namespace_parts ::= non_empty_group_namespace_parts possible_comma
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;

    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("group_namespace_parts",3, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // group_namespace_parts ::=
            {
              List RESULT =null;

    List list = new LinkedList();
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("group_namespace_parts",3, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // non_empty_group_namespace_parts ::= non_empty_group_namespace_parts T_COMMA group_namespace_part
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int partleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int partright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		SingleUseStatementPart part = (SingleUseStatementPart)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(part);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_group_namespace_parts",4, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // non_empty_group_namespace_parts ::= group_namespace_part
            {
              List RESULT =null;
		int partleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int partright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		SingleUseStatementPart part = (SingleUseStatementPart)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    list.add(part);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_group_namespace_parts",4, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // group_namespace_part ::= namespace_name
            {
              SingleUseStatementPart RESULT =null;
		int partleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int partright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List part = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new SingleUseStatementPart(partleft, partright, new NamespaceName(partleft, partright, part, false, false), null);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("group_namespace_part",5, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // group_namespace_part ::= namespace_name T_AS T_STRING
            {
              SingleUseStatementPart RESULT =null;
		int partleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int partright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List part = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new SingleUseStatementPart(partleft, aliasright, new NamespaceName(partleft, partright, part, false, false), new Identifier(aliasleft, aliasright, alias));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("group_namespace_part",5, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // group_namespace_part ::= T_FUNCTION namespace_name
            {
              SingleUseStatementPart RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int partleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int partright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List part = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new SingleUseStatementPart(fleft, partright, UseStatement.Type.FUNCTION, new NamespaceName(partleft, partright, part, false, false), null);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("group_namespace_part",5, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // group_namespace_part ::= T_FUNCTION namespace_name T_AS T_STRING
            {
              SingleUseStatementPart RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int partleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int partright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List part = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new SingleUseStatementPart(fleft, aliasright, UseStatement.Type.FUNCTION, new NamespaceName(partleft, partright, part, false, false), new Identifier(aliasleft, aliasright, alias));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("group_namespace_part",5, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // group_namespace_part ::= T_CONST namespace_name
            {
              SingleUseStatementPart RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int partleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int partright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List part = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new SingleUseStatementPart(cleft, partright, UseStatement.Type.CONST, new NamespaceName(partleft, partright, part, false, false), null);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("group_namespace_part",5, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // group_namespace_part ::= T_CONST namespace_name T_AS T_STRING
            {
              SingleUseStatementPart RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int partleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int partright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List part = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new SingleUseStatementPart(cleft, aliasright, UseStatement.Type.CONST, new NamespaceName(partleft, partright, part, false, false), new Identifier(aliasleft, aliasright, alias));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("group_namespace_part",5, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // inner_statement_list ::= inner_statement_list inner_statement
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    // Ignore null statements
    if(statement != null) {
        statementList.add(statement);
    }
    RESULT = statementList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // inner_statement_list ::=
            {
              List RESULT =null;

    RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // inner_statement ::= statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("inner_statement",12, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // inner_statement ::= attributed_statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("inner_statement",12, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // inner_statement ::= attributes attributed_statement
            {
              Statement RESULT =null;
		int attributesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int attributesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List<Attribute> attributes = (List<Attribute>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = parser.createAttributedStatement(statement, attributes);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("inner_statement",12, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // statement ::= unticked_statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // statement ::= T_STRING T_NEKUDOTAIM
            {
              Statement RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new GotoLabel(labelleft, eright, new Identifier(labelleft, labelright, label));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // unticked_statement ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Block block = new Block(tokenleft, endright, statementList);
    RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Expression innerCondition = null;
    Statement trueStatement = null;
    Statement falseStatement = iffalse;

    for (int i=0 ; i < elseif[0].size() ; i++) {
        innerCondition = (Expression)elseif[0].get(i);
        trueStatement = (Statement)elseif[1].get(i);
        int start = ((Integer)elseif[2].get(i)).intValue();
        falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
    }
    IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, iftrue, falseStatement);

    RESULT = ifStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Expression innerCondition = null;
    Statement trueStatement = null;
    Statement falseStatement = iffalse;

    for (int i=0 ; i < elseif[0].size() ; i++) {
        innerCondition = (Expression)elseif[0].get(i);
        trueStatement = (Statement)elseif[1].get(i);
        int start = ((Integer)elseif[2].get(i)).intValue();
        falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
    }
    Block block = new Block(colonleft, ifTrueStatementListright, ifTrueStatementList, false);
    IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, block, falseStatement);

    RESULT = ifStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, expr, statement);
    RESULT = whileStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    DoStatement doStatement = new DoStatement(tokenleft, endright, expr, statement);
    RESULT = doStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List conditions = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ForStatement forStatement = new ForStatement(tokenleft, statementright, initializations, conditions, increasements, statement);
    RESULT = forStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, expr, caseBlock);
    RESULT = switchStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // unticked_statement ::= T_BREAK T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new BreakStatement(tokenleft, endright);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // unticked_statement ::= T_BREAK expr T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new BreakStatement(tokenleft, endright, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // unticked_statement ::= T_CONTINUE T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ContinueStatement(tokenleft, endright);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ContinueStatement(tokenleft, endright, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // unticked_statement ::= T_RETURN T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ReturnStatement(tokenleft, endright);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ReturnStatement(tokenleft, endright, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // unticked_statement ::= T_RETURN variable T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ReturnStatement(tokenleft, endright, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // unticked_statement ::= T_RETURN yield_from_expr T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ReturnStatement(tokenleft, endright, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    GlobalStatement global = new GlobalStatement(startleft, endright, list);
    RESULT = global;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    StaticStatement s = new StaticStatement(startleft, endright, list);
    RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new EchoStatement(startleft, endright, exprList);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // unticked_statement ::= T_INLINE_HTML
            {
              Statement RESULT =null;
		int htmlleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int htmlright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object html = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    InLineHtml inLineHtml = new InLineHtml(htmlleft, htmlright);
    RESULT = inLineHtml;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // unticked_statement ::= expr_with_yields T_SEMICOLON
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ExpressionStatement expressionStatement = new ExpressionStatement(exprleft, endright, expr);
    RESULT = expressionStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // unticked_statement ::= T_USE use_filename T_SEMICOLON
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    list.add(expr);
    Identifier id = new Identifier(startleft, startright, "use");
    FunctionName functionName = new FunctionName(startleft, startright, id);
    FunctionInvocation functionInvocation = new FunctionInvocation(startleft, exprright, functionName, list);
    ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
    RESULT = expressionStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables possible_comma T_CLOSE_PARENTHESE T_SEMICOLON
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier id = new Identifier(startleft, startright, "unset");
    FunctionName functionName = new FunctionName(startleft, startright, id);
    FunctionInvocation functionInvocation = new FunctionInvocation(startleft, closeParright, functionName, list);
    ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
    RESULT = expressionStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE variable T_AS foreach_variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ForEachStatement forEachStatement = null;
    if (arg == null) {
        forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
    } else {
        forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
    }
    RESULT = forEachStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr_without_variable T_AS foreach_variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ForEachStatement forEachStatement = null;
    if (arg == null) {
        forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
    } else {
        forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
    }
    RESULT = forEachStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    DeclareStatement declare = new DeclareStatement(startleft, statementright, lists[0], lists[1], statement);
    RESULT = declare;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // unticked_statement ::= T_SEMICOLON
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new EmptyStatement(tokenleft, tokenright);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE T_FINALLY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int finally_wordleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int finally_wordright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String finally_word = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int finallyBlockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int finallyBlockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object finallyBlockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int finallyListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int finallyListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List finallyList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int finallyBlockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int finallyBlockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object finallyBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Block tryBlock = new Block(tryBlockStartleft, tryBlockEndright, tryList);
    Block finallyBlock = new Block(finallyBlockStartleft, finallyBlockEndright, finallyList);
    FinallyClause finallyClause = new FinallyClause(finally_wordleft, finallyBlockEndright, finallyBlock);
    TryStatement tryStatement = new TryStatement(startleft, finallyBlockEndright, tryBlock, null, finallyClause);
    RESULT = tryStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE T_CATCH T_OPEN_PARENTHESE catch_class_names optional_tracked_variable T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE additional_catches additional_finally
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-13)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-13)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-13)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-12)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-12)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-12)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-11)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-11)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-11)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-10)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-10)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-10)).value;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).right;
		String catch_word = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).value;
		int classNamesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int classNamesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		List classNames = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int finallyBlockleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int finallyBlockright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		FinallyClause finallyBlock = (FinallyClause)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Block tryBlock = new Block(tryBlockStartleft, tryBlockEndright, tryList);
    Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
    CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, classNames, var, catchBlock);
    ((LinkedList) catchesList).addFirst(catchClause);
    int end = finallyBlock == null ? catchesListright : finallyBlockright;
    TryStatement tryStatement = new TryStatement(startleft, end, tryBlock, catchesList, finallyBlock);
    RESULT = tryStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-13)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // unticked_statement ::= T_GOTO T_STRING T_SEMICOLON
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new GotoStatement(sleft, eright, new Identifier(labelleft, labelright, label));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // unticked_statement ::= error
            {
              Statement RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ASTError error = new ASTError(theErrorleft, theErrorright);
    RESULT = error;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // unticked_statement ::= T_VAR_COMMENT
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    // TODO: var comment should be added as parser.ast node

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // additional_catches ::= non_empty_additional_catches
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("additional_catches",141, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // additional_catches ::=
            {
              List RESULT =null;

    List list = new LinkedList();
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("additional_catches",141, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // non_empty_additional_catches ::= additional_catch
            {
              List RESULT =null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    list.add(catch_statement);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",142, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // non_empty_additional_catches ::= non_empty_additional_catches additional_catch
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(catch_statement);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",142, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // additional_catch ::= T_CATCH T_OPEN_PARENTHESE catch_class_names optional_tracked_variable T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
            {
              CatchClause RESULT =null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		String catch_word = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int classNamesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int classNamesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		List classNames = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Variable variable = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
    CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, classNames, variable, catchBlock);
    RESULT = catchClause;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("additional_catch",143, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // additional_finally ::=
            {
              FinallyClause RESULT =null;

    RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("additional_finally",148, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // additional_finally ::= T_FINALLY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
            {
              FinallyClause RESULT =null;
		int finally_wordleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int finally_wordright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String finally_word = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int finallyBlockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int finallyBlockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object finallyBlockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int finallyListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int finallyListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List finallyList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int finallyBlockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int finallyBlockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object finallyBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Block finallyBlock = new Block(finallyBlockStartleft, finallyBlockEndright, finallyList);
    FinallyClause finallyClause = new FinallyClause(finally_wordleft, finallyBlockEndright, finallyBlock);
    RESULT = finallyClause;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("additional_finally",148, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // catch_class_names ::= fully_qualified_class_name additional_catch_class_names
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ((LinkedList) list).addFirst(className);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("catch_class_names",144, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // additional_catch_class_names ::= non_empty_additional_catch_class_names
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("additional_catch_class_names",145, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // additional_catch_class_names ::=
            {
              List RESULT =null;

    List list = new LinkedList();
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("additional_catch_class_names",145, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // non_empty_additional_catch_class_names ::= additional_catch_class_name
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    list.add(className);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catch_class_names",146, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // non_empty_additional_catch_class_names ::= non_empty_additional_catch_class_names additional_catch_class_name
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(className);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catch_class_names",146, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // additional_catch_class_name ::= T_OR fully_qualified_class_name
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = className;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("additional_catch_class_name",147, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // unset_variables ::= unset_variable
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    list.add(var);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unset_variables",14, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // unset_variables ::= unset_variables T_COMMA unset_variable
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(var);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unset_variables",14, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // unset_variable ::= variable
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unset_variable",15, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // use_filename ::= T_CONSTANT_ENCAPSED_STRING
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.Type.STRING);
    RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_filename",16, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Scalar s = new Scalar(startleft, endright, scalar, Scalar.Type.STRING);
    RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_filename",16, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // function_declaration_statement ::= unticked_function_declaration_statement
            {
              FunctionDeclaration RESULT =null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		FunctionDeclaration functionDeclaration = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = functionDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_statement",138, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // class_declaration_statement ::= unticked_class_declaration_statement
            {
              Statement RESULT =null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = classDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_declaration_statement",139, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // is_reference ::=
            {
              Boolean RESULT =null;

    RESULT = Boolean.FALSE;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("is_reference",45, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // is_reference ::= ampersand
            {
              Boolean RESULT =null;

    RESULT = Boolean.TRUE;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("is_reference",45, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // is_variadic ::=
            {
              Boolean RESULT =null;

    RESULT = Boolean.FALSE;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("is_variadic",46, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // is_variadic ::= T_ELLIPSIS
            {
              Boolean RESULT =null;

    RESULT = Boolean.TRUE;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("is_variadic",46, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE optional_return_type T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
            {
              FunctionDeclaration RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression returnType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier functionId = new Identifier(functionNameleft, functionNameright, functionName);
    Block block = new Block(blockStartleft, blockEndright, statementList);
    FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, blockEndright, functionId, paramList, returnType, block, isReference.booleanValue());
    RESULT = functionDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_function_declaration_statement",149, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // unticked_class_declaration_statement ::= class_entry_type T_STRING extends_from implements_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		ClassDeclaration.Modifier modifier = (ClassDeclaration.Modifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression superClass = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier classId = new Identifier(classNameleft, classNameright, className);
    Block block = new Block(blockStartleft, blockEndright, statementList);
    ClassDeclaration classDeclaration = new ClassDeclaration(modifierleft ,blockEndright, modifier, classId, superClass, interfaces, block);
    RESULT = classDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",150, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list T_CURLY_OPEN interface_statement_list T_CURLY_CLOSE
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Integer start = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier classId = new Identifier(classNameleft, classNameright, className);
    Block block = new Block(blockStartleft, blockEndright, statementList);
    InterfaceDeclaration interfaceDeclaration = new InterfaceDeclaration(startleft ,blockEndright, classId, interfaces, block);
    RESULT = interfaceDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",150, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // unticked_class_declaration_statement ::= T_TRAIT T_STRING T_CURLY_OPEN trait_statement_list T_CURLY_CLOSE
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int traitNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int traitNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String traitName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier traitId = new Identifier(traitNameleft, traitNameright, traitName);
    Block block = new Block(blockStartleft, blockEndright, statementList);
    TraitDeclaration traitDeclaration = new TraitDeclaration(startleft, blockEndright, traitId, block);
    RESULT = traitDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",150, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // interface_statement_list ::= interface_statement_list interface_statement
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int interfaceStatementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int interfaceStatementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement interfaceStatement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(interfaceStatement);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_statement_list",112, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // interface_statement_list ::=
            {
              List RESULT =null;

    List list = new LinkedList();
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_statement_list",112, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // attributed_interface_statement ::= constant_modifiers class_constant_declaration T_SEMICOLON
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int constantStart = modifier == null ? listleft : modifierleft;
    modifier = modifier == null ? ASTPHP5Parser.IMPLICIT_PUBLIC : modifier;
    ConstantDeclaration classConstantDeclaration = new ConstantDeclaration(constantStart, endright, modifier, list, false);
    RESULT = classConstantDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("attributed_interface_statement",204, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // attributed_interface_statement ::= method_modifiers T_FUNCTION is_reference identifier T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE optional_return_type T_SEMICOLON
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int functionIdleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int functionIdright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Identifier functionId = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression returnType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int methodStart = modifier == null ? startleft : modifierleft;
    modifier = modifier == null ? ASTPHP5Parser.PUBLIC : modifier;
    Block block = new Block(endleft, endright, Collections.EMPTY_LIST, false);
    FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, endright, functionId, paramList, returnType, block, isReference.booleanValue());
    MethodDeclaration methodDeclaration = new MethodDeclaration(methodStart, endright, modifier.intValue(), functionDeclaration, true);
    RESULT = methodDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("attributed_interface_statement",204, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // interface_statement ::= attributed_interface_statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_statement",113, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
default:
throw new Exception("Invalid action number found in internal parse table");
}
}
public final java_cup.runtime.Symbol fakeMethod200to299(
int                        CUP$ASTPHP5Parser$act_num,
java_cup.runtime.lr_parser CUP$ASTPHP5Parser$parser,
java.util.Stack            CUP$ASTPHP5Parser$stack,
int                        CUP$ASTPHP5Parser$top)
throws java.lang.Exception
{
java_cup.runtime.Symbol CUP$ASTPHP5Parser$result;
switch (CUP$ASTPHP5Parser$act_num) {
          case 200: // interface_statement ::= attributes attributed_interface_statement
            {
              Statement RESULT =null;
		int attributesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int attributesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List<Attribute> attributes = (List<Attribute>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = parser.createAttributedStatement(statement, attributes);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_statement",113, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // interface_statement ::= T_VAR_COMMENT
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;



              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_statement",113, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // trait_statement_list ::= trait_statement_list trait_statement
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int traitStatementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int traitStatementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement traitStatement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(traitStatement);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_statement_list",110, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // trait_statement_list ::=
            {
              List RESULT =null;

    List list = new LinkedList();
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_statement_list",110, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // attributed_trait_statement ::= variable_modifiers optional_class_type_without_static class_variable_declaration T_SEMICOLON
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int fieldTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int fieldTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression fieldType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    FieldsDeclaration fieldsDeclaration = new FieldsDeclaration(modifierleft, endright, modifier.intValue(), fieldType, decList);
    RESULT = fieldsDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("attributed_trait_statement",206, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // attributed_trait_statement ::= method_modifiers T_FUNCTION is_reference identifier T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE optional_return_type method_body
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int functionIdleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int functionIdright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Identifier functionId = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression returnType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int methodStart = modifier == null ? startleft : modifierleft;
    modifier = modifier == null ? ASTPHP5Parser.PUBLIC : modifier;
    FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, bodyright, functionId, paramList, returnType, body, isReference.booleanValue());
    MethodDeclaration methodDeclaration = new MethodDeclaration(methodStart, bodyright, modifier.intValue(), functionDeclaration, true);
    RESULT = methodDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("attributed_trait_statement",206, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // trait_statement ::= attributed_trait_statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_statement",111, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // trait_statement ::= attributes attributed_trait_statement
            {
              Statement RESULT =null;
		int attributesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int attributesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List<Attribute> attributes = (List<Attribute>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = parser.createAttributedStatement(statement, attributes);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_statement",111, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // trait_statement ::= T_VAR_COMMENT
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;



              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_statement",111, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // trait_statement ::= T_USE use_traits use_traits_body
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new UseTraitStatement(sleft, bodyright, list, body);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_statement",111, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // class_entry_type ::= T_CLASS
            {
              ClassDeclaration.Modifier RESULT =null;

    RESULT = ClassDeclaration.Modifier.NONE;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_entry_type",151, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // class_entry_type ::= T_ABSTRACT T_CLASS
            {
              ClassDeclaration.Modifier RESULT =null;

    RESULT = ClassDeclaration.Modifier.ABSTRACT;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_entry_type",151, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // class_entry_type ::= T_FINAL T_CLASS
            {
              ClassDeclaration.Modifier RESULT =null;

    RESULT = ClassDeclaration.Modifier.FINAL;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_entry_type",151, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // extends_from ::=
            {
              Expression RESULT =null;

    RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("extends_from",152, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // extends_from ::= T_EXTENDS fully_qualified_class_name
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = className;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("extends_from",152, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // interface_entry ::= T_INTERFACE
            {
              Integer RESULT =null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_entry",101, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // interface_extends_list ::=
            {
              List RESULT =null;

    List list = new LinkedList();
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",102, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // interface_extends_list ::= T_EXTENDS interface_list
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",102, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // implements_list ::=
            {
              List RESULT =null;

    List list = new LinkedList();
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("implements_list",153, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // implements_list ::= T_IMPLEMENTS interface_list
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("implements_list",153, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // interface_list ::= fully_qualified_class_name
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    list.add(className);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_list",154, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // interface_list ::= interface_list T_COMMA fully_qualified_class_name
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(className);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_list",154, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // foreach_optional_arg ::=
            {
              Expression RESULT =null;

    RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",17, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",17, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // foreach_variable ::= variable
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("foreach_variable",18, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // foreach_variable ::= ampersand variable
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Reference reference = new Reference (startleft, varright, var);
    RESULT = reference;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("foreach_variable",18, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // foreach_variable ::= T_LIST T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ListVariable vars = new ListVariable(startleft, endright, varList, ListVariable.SyntaxType.OLD);
    RESULT = vars;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("foreach_variable",18, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // foreach_variable ::= T_OPEN_RECT array_pair_list T_CLOSE_RECT
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ListVariable vars = new ListVariable(startleft, endright, varList, ListVariable.SyntaxType.NEW);
    RESULT = vars;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("foreach_variable",18, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // for_statement ::= statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("for_statement",19, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR T_SEMICOLON
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;

    Block block = new Block(startleft, statementListright, statementList, false);
    RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("for_statement",19, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // foreach_statement ::= statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("foreach_statement",20, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH T_SEMICOLON
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;

    Block block = new Block(startleft, statementListright, statementList, false);
    RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("foreach_statement",20, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // declare_statement ::= statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("declare_statement",21, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE T_SEMICOLON
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;

    Block block = new Block(startleft, statementListright, statementList, false);
    RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("declare_statement",21, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // declare_list ::= string_st T_EQUAL static_scalar
            {
              List[] RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List listKeys = new LinkedList();
    List listValues = new LinkedList();

    Identifier id = new Identifier(keyleft, keyright, key);
    listKeys.add(id);
    listValues.add(value);

    List[] returnList = new List[] { listKeys, listValues };
    RESULT = returnList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("declare_list",22, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar
            {
              List[] RESULT =null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier id = new Identifier(keyleft, keyright, key);
    lists[0].add(id);
    lists[1].add(value);
    RESULT = lists;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("declare_list",22, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Block block = new Block(startleft, endright, caseList);
    RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("switch_case_list",23, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Block block = new Block(startleft, endright, caseList);
    RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("switch_case_list",23, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH T_SEMICOLON
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Block block = new Block(startleft, endright, caseList, false);
    RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("switch_case_list",23, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH T_SEMICOLON
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Block block = new Block(startleft, endright, caseList, false);
    RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("switch_case_list",23, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // case_list ::=
            {
              List RESULT =null;

    RESULT = new LinkedList(); // of SwitchCase

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("case_list",24, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // case_list ::= case_list T_CASE expr case_separator inner_statement_list
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, expr, statements, false);
    if (caseList == null) {
        caseList = new LinkedList(); // of switchCase
    }
    caseList.add(switchCase);
    RESULT = caseList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("case_list",24, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, null, statements, true);
    if (caseList == null) {
        caseList = new LinkedList(); // of SwitchCase
    }
    caseList.add(switchCase);
    RESULT = caseList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("case_list",24, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // case_separator ::= T_NEKUDOTAIM
            {
              Object RESULT =null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("case_separator",25, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // case_separator ::= T_SEMICOLON
            {
              Object RESULT =null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("case_separator",25, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // while_statement ::= statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("while_statement",26, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE T_SEMICOLON
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;

    Block block = new Block(colonleft, statementListright, statementList, false);
    RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("while_statement",26, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // elseif_list ::=
            {
              List[] RESULT =null;

    List listConditions = new LinkedList();
    List listStatements = new LinkedList();
    List listTokens = new LinkedList();

    List[] returnList = new List[] { listConditions, listStatements, listTokens };

    RESULT = returnList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("elseif_list",27, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ((LinkedList)elseifList[0]).addFirst(condition);
    ((LinkedList)elseifList[1]).addFirst(iftrue);
    ((LinkedList)elseifList[2]).addFirst(Integer.valueOf(tokenleft));

    RESULT = elseifList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("elseif_list",27, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // new_elseif_list ::=
            {
              List[] RESULT =null;

    List listConditions = new LinkedList();
    List listStatements = new LinkedList();
    List listTokens = new LinkedList();

    List[] returnList = new List[] { listConditions, listStatements, listTokens };

    RESULT = returnList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",28, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Block block = new Block(colonleft, statementListright, statementList, false);
    ((LinkedList)elseifList[0]).addFirst(condition);
    ((LinkedList)elseifList[1]).addFirst(block);
    ((LinkedList)elseifList[2]).addFirst(Integer.valueOf(tokenleft));

    RESULT = elseifList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",28, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // else_single ::=
            {
              Statement RESULT =null;

    RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("else_single",29, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // else_single ::= T_ELSE statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("else_single",29, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // new_else_single ::=
            {
              Statement RESULT =null;

    RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("new_else_single",30, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Block block = new Block(colonleft, statementListright, statementList, false);
    RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("new_else_single",30, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // parameter_list ::= non_empty_parameter_list possible_comma
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;

    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",31, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // parameter_list ::=
            {
              List RESULT =null;

    List list = new LinkedList();
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",31, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // non_empty_parameter_list ::= attributed_parameter
            {
              List RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    list.add(parameter);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",34, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA attributed_parameter
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(parameter);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",34, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // attributed_parameter ::= attributes parameter
            {
              FormalParameter RESULT =null;
		int attributesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int attributesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List<Attribute> attributes = (List<Attribute>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		FormalParameter param = (FormalParameter)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = FormalParameter.create(param, attributes);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("attributed_parameter",207, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // attributed_parameter ::= parameter
            {
              FormalParameter RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		FormalParameter param = (FormalParameter)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = param;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("attributed_parameter",207, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // optional_property_modifiers ::=
            {
              Integer RESULT =null;

    RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("optional_property_modifiers",132, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // optional_property_modifiers ::= ppp_modifiers
            {
              Integer RESULT =null;
		int pModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int pModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer pModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = pModifier;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("optional_property_modifiers",132, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // optional_property_modifiers ::= readonly_modifier
            {
              Integer RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    /* e.g. readonly int $property = 1, */
    int result = 0;
    result |= ASTPHP5Parser.IMPLICIT_PUBLIC.intValue();
    result |= modifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("optional_property_modifiers",132, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // optional_property_modifiers ::= ppp_modifiers readonly_modifier
            {
              Integer RESULT =null;
		int pModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int pModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer pModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int rModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int rModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer rModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= pModifier.intValue();
    result |= rModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("optional_property_modifiers",132, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // optional_property_modifiers ::= readonly_modifier ppp_modifiers
            {
              Integer RESULT =null;
		int rModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int rModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer rModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int pModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int pModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer pModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= rModifier.intValue();
    result |= pModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("optional_property_modifiers",132, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // readonly_modifier ::= T_READONLY
            {
              Integer RESULT =null;

    RESULT = ASTPHP5Parser.READONLY;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("readonly_modifier",178, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // parameter ::= optional_property_modifiers optional_class_type_without_static is_reference is_variadic T_VARIABLE
            {
              FormalParameter RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int isVariadicleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int isVariadicright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Boolean isVariadic = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int start = varleft;
    if (isVariadic) {
        start = isVariadicleft;
    }
    if (isReference) {
        start = isReferenceleft;
    }
    if (classType != null) {
        start = classTypeleft;
    }
    if (modifier != null) {
        start = modifierleft;
    }
    Variable v = new Variable(varleft, varright, var);
    Expression argument = v;
    if (isVariadic) {
        argument = new Variadic(isVariadicleft, varright, v);
    }
    if (isReference) {
        if (isVariadic) {
            argument = new Reference(isReferenceleft, varright, (Variadic) argument);
        } else {
            argument = new Reference(isReferenceleft, varright, v);
        }
    }
    FormalParameter parameter = new FormalParameter(start, varright, modifier, classType, argument);
    RESULT = parameter;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("parameter",35, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // parameter ::= optional_property_modifiers optional_class_type_without_static is_reference is_variadic T_VARIABLE T_EQUAL static_scalar_with_class_instance
            {
              FormalParameter RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int isVariadicleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int isVariadicright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Boolean isVariadic = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int start = varleft;
    if (isVariadic) {
        start = isVariadicleft;
    }
    if (isReference) {
        start = isReferenceleft;
    }
    if (classType != null) {
        start = classTypeleft;
    }
    if (modifier != null) {
        start = modifierleft;
    }
    Variable v = new Variable(varleft, varright, var);
    Expression argument = v;
    if (isVariadic) {
        argument = new Variadic(isVariadicleft, varright, v);
    }
    if (isReference) {
        if (isVariadic) {
            argument = new Reference(isReferenceleft, varright, (Variadic) argument);
        } else {
            argument = new Reference(isReferenceleft, varright, v);
        }
    }
    FormalParameter parameter = new FormalParameter(start, exprright, modifier, classType, argument, expr);
    RESULT = parameter;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("parameter",35, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // optional_return_type ::=
            {
              Expression RESULT =null;

    RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("optional_return_type",165, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // optional_return_type ::= T_NEKUDOTAIM type_expr
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression type = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = type;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("optional_return_type",165, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // optional_class_type_without_static ::=
            {
              Expression RESULT =null;

    RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("optional_class_type_without_static",155, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // optional_class_type_without_static ::= type_expr_without_static
            {
              Expression RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression type = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = type;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("optional_class_type_without_static",155, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // type_expr ::= class_type
            {
              Expression RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression type = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = type;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("type_expr",156, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // type_expr ::= T_QUESTION_MARK class_type
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression type = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new NullableType(startleft, typeright, type);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("type_expr",156, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // type_expr ::= union_type
            {
              Expression RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List<Expression> list = (List<Expression>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new UnionType(listleft, listright, list);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("type_expr",156, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // type_expr ::= intersection_type
            {
              Expression RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List<Expression> list = (List<Expression>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new IntersectionType(listleft, listright, list);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("type_expr",156, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // class_type ::= class_type_without_static
            {
              Expression RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression type = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = type;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_type",158, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // class_type ::= T_STATIC
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier classId = new Identifier(sleft, sright, "static");
    RESULT = classId;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_type",158, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // class_type_without_static ::= fully_qualified_class_name
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = className;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_type_without_static",159, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // class_type_without_static ::= T_ARRAY
            {
              Expression RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String array = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier classId = new Identifier(arrayleft, arrayright, "array");
    RESULT = classId;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_type_without_static",159, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // class_type_without_static ::= T_CALLABLE
            {
              Expression RESULT =null;
		int callableleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int callableright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String callable = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier classId = new Identifier(callableleft, callableright, "callable");
    RESULT = classId;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_type_without_static",159, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // union_type ::= class_type T_OR class_type
            {
              List<Expression> RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression type1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression type2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new ArrayList<>();
    list.add(type1);
    list.add(type2);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("union_type",160, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // union_type ::= union_type T_OR class_type
            {
              List<Expression> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List<Expression> list = (List<Expression>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression type = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(type);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("union_type",160, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // intersection_type ::= class_type T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG class_type
            {
              List<Expression> RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression type1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression type2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new ArrayList<>();
    list.add(type1);
    list.add(type2);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("intersection_type",162, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // intersection_type ::= intersection_type T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG class_type
            {
              List<Expression> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List<Expression> list = (List<Expression>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression type = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(type);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("intersection_type",162, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // type_expr_without_static ::= class_type_without_static
            {
              Expression RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression type = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = type;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("type_expr_without_static",157, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // type_expr_without_static ::= T_QUESTION_MARK class_type_without_static
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression type = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new NullableType(startleft, typeright, type);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("type_expr_without_static",157, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // type_expr_without_static ::= union_type_without_static
            {
              Expression RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List<Expression> list = (List<Expression>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new UnionType(listleft, listright, list);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("type_expr_without_static",157, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // type_expr_without_static ::= intersection_type_without_static
            {
              Expression RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List<Expression> list = (List<Expression>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new IntersectionType(listleft, listright, list);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("type_expr_without_static",157, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // union_type_without_static ::= class_type_without_static T_OR class_type_without_static
            {
              List<Expression> RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression type1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression type2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new ArrayList<>();
    list.add(type1);
    list.add(type2);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("union_type_without_static",161, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // union_type_without_static ::= union_type_without_static T_OR class_type_without_static
            {
              List<Expression> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List<Expression> list = (List<Expression>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression type = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(type);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("union_type_without_static",161, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // intersection_type_without_static ::= class_type_without_static T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG class_type_without_static
            {
              List<Expression> RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression type1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression type2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new ArrayList<>();
    list.add(type1);
    list.add(type2);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("intersection_type_without_static",163, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // intersection_type_without_static ::= intersection_type_without_static T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG class_type_without_static
            {
              List<Expression> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List<Expression> list = (List<Expression>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression type = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(type);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("intersection_type_without_static",163, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // function_call_parameter_list ::= non_empty_function_call_parameter_list possible_comma
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;

    RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",36, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // function_call_parameter_list ::=
            {
              List RESULT =null;

    RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",36, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // non_empty_function_call_parameter_list ::= argument
            {
              List RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List paramsList = new LinkedList();
    paramsList.add(arg);
    RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",37, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA argument
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    paramsList.add(arg);
    RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",37, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // argument ::= argument_expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("argument",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // argument ::= T_ELLIPSIS argument_expr
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Expression param = var;
    param = new Variadic(eleft, varright, var);
    RESULT = param;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("argument",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
default:
throw new Exception("Invalid action number found in internal parse table");
}
}
public final java_cup.runtime.Symbol fakeMethod300to399(
int                        CUP$ASTPHP5Parser$act_num,
java_cup.runtime.lr_parser CUP$ASTPHP5Parser$parser,
java.util.Stack            CUP$ASTPHP5Parser$stack,
int                        CUP$ASTPHP5Parser$top)
throws java.lang.Exception
{
java_cup.runtime.Symbol CUP$ASTPHP5Parser$result;
switch (CUP$ASTPHP5Parser$act_num) {
          case 300: // argument ::= string_st T_NEKUDOTAIM argument_expr
            {
              Expression RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier identifier = new Identifier(identleft, identright, ident);
    Expression param = new NamedArgument(identleft, varright, identifier, var);
    RESULT = param;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("argument",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // argument ::= T_CLASS T_NEKUDOTAIM argument_expr
            {
              Expression RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier identifier = new Identifier(identleft, identright, ident);
    Expression param = new NamedArgument(identleft, varright, identifier, var);
    RESULT = param;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("argument",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // argument ::= semi_reserved_without_class T_NEKUDOTAIM argument_expr
            {
              Expression RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Identifier ident = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Expression param = new NamedArgument(identleft, varright, ident, var);
    RESULT = param;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("argument",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // argument ::= T_REFERENCE w_variable
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    // Call-time pass-by-reference has been removed since PHP 5.4.0
    Expression var_ref = new Reference(startleft, varright, var);
    RESULT = var_ref;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("argument",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // argument ::= error
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ASTErrorExpression(exprleft, exprright);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("argument",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // argument_expr ::= expr_without_variable
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("argument_expr",39, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // argument_expr ::= variable
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("argument_expr",39, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // global_var_list ::= global_var_list T_COMMA global_var
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(var);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("global_var_list",40, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // global_var_list ::= global_var
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    list.add(var);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("global_var_list",40, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // global_var ::= T_VARIABLE
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Variable variable = new Variable(varleft, varright, var);
    RESULT = variable;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("global_var",41, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // global_var ::= T_DOLLAR r_variable
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ReflectionVariable ref = new ReflectionVariable(startleft, varright, var);
    RESULT = ref;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("global_var",41, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ReflectionVariable var = new ReflectionVariable(startleft, endright, varName);
    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("global_var",41, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // static_var_list ::= static_var_list T_COMMA T_VARIABLE
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Variable v = new Variable(varleft, varright, var);
    list.add(v);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_var_list",42, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Variable v = new Variable(varleft, varright, var);
    Assignment assignment = new Assignment(varleft, exprright, v, Assignment.Type.EQUAL, expr);
    list.add(assignment);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_var_list",42, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // static_var_list ::= T_VARIABLE
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Variable v = new Variable(varleft, varright, var);
    List list = new LinkedList();
    list.add(v);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_var_list",42, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar_with_class_instance
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Variable v = new Variable(varleft, varright, var);
    Assignment assignment = new Assignment(varleft, exprright, v, Assignment.Type.EQUAL, expr);
    List list = new LinkedList();
    list.add(assignment);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_var_list",42, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // class_statement_list ::= class_statement_list class_statement
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement classStatement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(classStatement);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_statement_list",43, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // class_statement_list ::=
            {
              List RESULT =null;

    List list = new LinkedList();
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_statement_list",43, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // attributed_class_statement ::= variable_modifiers optional_class_type_without_static class_variable_declaration T_SEMICOLON
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int fieldTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int fieldTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression fieldType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    FieldsDeclaration fieldsDeclaration = new FieldsDeclaration(modifierleft, endright, modifier.intValue(), fieldType, decList);
    RESULT = fieldsDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("attributed_class_statement",205, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // attributed_class_statement ::= constant_modifiers class_constant_declaration T_SEMICOLON
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int constantStart = modifier == null ? listleft : modifierleft;
    modifier = modifier == null ? ASTPHP5Parser.IMPLICIT_PUBLIC : modifier;
    ConstantDeclaration classConstantDeclaration = new ConstantDeclaration(constantStart, endright, modifier, list, false);
    RESULT = classConstantDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("attributed_class_statement",205, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // attributed_class_statement ::= method_modifiers T_FUNCTION is_reference identifier T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE optional_return_type method_body
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int functionIdleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int functionIdright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Identifier functionId = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression returnType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int methodStart = modifier == null ? startleft : modifierleft;
    modifier = modifier == null ? ASTPHP5Parser.PUBLIC : modifier;
    FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, bodyright, functionId, paramList, returnType, body, isReference.booleanValue());
    MethodDeclaration methodDeclaration = new MethodDeclaration(methodStart, bodyright, modifier.intValue(), functionDeclaration, true);
    RESULT = methodDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("attributed_class_statement",205, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // class_statement ::= attributed_class_statement
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_statement",44, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // class_statement ::= attributes attributed_class_statement
            {
              Statement RESULT =null;
		int attributesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int attributesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List<Attribute> attributes = (List<Attribute>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = parser.createAttributedStatement(statement, attributes);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_statement",44, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // class_statement ::= T_VAR_COMMENT
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;



              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_statement",44, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // class_statement ::= T_USE use_traits use_traits_body
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new UseTraitStatement(sleft, bodyright, list, body);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_statement",44, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // use_traits ::= use_traits T_COMMA use_trait
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		UseTraitStatementPart useDecl = (UseTraitStatementPart)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(useDecl);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_traits",103, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // use_traits ::= use_trait
            {
              List RESULT =null;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		UseTraitStatementPart useDecl = (UseTraitStatementPart)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    list.add(useDecl);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_traits",103, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // use_trait ::= namespace_name
            {
              UseTraitStatementPart RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new UseTraitStatementPart(listleft, listright, new NamespaceName(listleft, listright, list, false, false));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_trait",114, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // use_trait ::= T_NS_SEPARATOR namespace_name
            {
              UseTraitStatementPart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new UseTraitStatementPart(sleft, listright, new NamespaceName(sleft, listright, list, true, false));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_trait",114, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // use_traits_body ::= T_SEMICOLON
            {
              Block RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_traits_body",104, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // use_traits_body ::= T_CURLY_OPEN use_traits_body_statement_list T_CURLY_CLOSE
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Block block = new Block(startleft, endright, statementList);
    RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_traits_body",104, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // use_traits_body_statement_list ::= use_traits_body_statement_list use_traits_body_statement
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    // Ignore null statements
    if(statement != null) {
        statementList.add(statement);
    }
    RESULT = statementList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_traits_body_statement_list",105, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // use_traits_body_statement_list ::=
            {
              List RESULT =null;

    RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_traits_body_statement_list",105, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // use_traits_body_statement ::= trait_conflict_resolution_declaration
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_traits_body_statement",106, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // use_traits_body_statement ::= trait_method_alias_declaration
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_traits_body_statement",106, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // class_name_list ::= class_name_list T_COMMA class_name
            {
              List RESULT =null;
		int classNameListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List classNameList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    classNameList.add(className);
    RESULT = classNameList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_name_list",198, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // class_name_list ::= class_name
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List classNameList = new LinkedList();
    classNameList.add(className);
    RESULT = classNameList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_name_list",198, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // trait_conflict_resolution_declaration ::= class_name T_PAAMAYIM_NEKUDOTAYIM string_st T_INSTEADOF class_name_list T_SEMICOLON
            {
              Statement RESULT =null;
		int preferredTraitNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int preferredTraitNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Expression preferredTraitName = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int suppressedTraitNamesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int suppressedTraitNamesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List suppressedTraitNames = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier methodId = new Identifier(methodNameleft, methodNameright, methodName);
    RESULT = new TraitConflictResolutionDeclaration(preferredTraitNameleft, endright, preferredTraitName, methodId, suppressedTraitNames);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_conflict_resolution_declaration",107, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // trait_method_alias_declaration ::= class_name T_PAAMAYIM_NEKUDOTAYIM string_st T_AS traits_alias_modifier string_st T_SEMICOLON
            {
              Statement RESULT =null;
		int traitNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int traitNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Expression traitName = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int oldMethodNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int oldMethodNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String oldMethodName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		TraitMethodAliasDeclaration.Modifier modifier = (TraitMethodAliasDeclaration.Modifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int newMethodNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int newMethodNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String newMethodName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier oldMethodId = new Identifier(oldMethodNameleft, oldMethodNameright, oldMethodName);
    Identifier newMethodId = new Identifier(newMethodNameleft, newMethodNameright, newMethodName);
    RESULT = new TraitMethodAliasDeclaration(traitNameleft, endright, oldMethodId, newMethodId, traitName, modifier);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_method_alias_declaration",108, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // trait_method_alias_declaration ::= class_name T_PAAMAYIM_NEKUDOTAYIM string_st T_AS string_st T_SEMICOLON
            {
              Statement RESULT =null;
		int traitNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int traitNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Expression traitName = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int oldMethodNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int oldMethodNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String oldMethodName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int newMethodNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int newMethodNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String newMethodName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier oldMethodId = new Identifier(oldMethodNameleft, oldMethodNameright, oldMethodName);
    Identifier newMethodId = new Identifier(newMethodNameleft, newMethodNameright, newMethodName);
    RESULT = new TraitMethodAliasDeclaration(traitNameleft, endright, oldMethodId, newMethodId, traitName, null);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_method_alias_declaration",108, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // trait_method_alias_declaration ::= string_st T_AS traits_alias_modifier T_SEMICOLON
            {
              Statement RESULT =null;
		int oldMethodNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int oldMethodNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String oldMethodName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		TraitMethodAliasDeclaration.Modifier modifier = (TraitMethodAliasDeclaration.Modifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier oldMethodId = new Identifier(oldMethodNameleft, oldMethodNameright, oldMethodName);
    Identifier newMethodId = new Identifier(oldMethodNameleft, oldMethodNameright, oldMethodName);
    RESULT = new TraitMethodAliasDeclaration(oldMethodNameleft, endright, oldMethodId, newMethodId, null, modifier);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_method_alias_declaration",108, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // trait_method_alias_declaration ::= string_st T_AS traits_alias_modifier string_st T_SEMICOLON
            {
              Statement RESULT =null;
		int oldMethodNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int oldMethodNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String oldMethodName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		TraitMethodAliasDeclaration.Modifier modifier = (TraitMethodAliasDeclaration.Modifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int newMethodNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int newMethodNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String newMethodName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier oldMethodId = new Identifier(oldMethodNameleft, oldMethodNameright, oldMethodName);
    Identifier newMethodId = new Identifier(newMethodNameleft, newMethodNameright, newMethodName);
    RESULT = new TraitMethodAliasDeclaration(oldMethodNameleft, endright, oldMethodId, newMethodId, null, modifier);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_method_alias_declaration",108, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // trait_method_alias_declaration ::= string_st T_AS string_st T_SEMICOLON
            {
              Statement RESULT =null;
		int oldMethodNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int oldMethodNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String oldMethodName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int newMethodNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int newMethodNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String newMethodName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier oldMethodId = new Identifier(oldMethodNameleft, oldMethodNameright, oldMethodName);
    Identifier newMethodId = new Identifier(newMethodNameleft, newMethodNameright, newMethodName);
    RESULT = new TraitMethodAliasDeclaration(oldMethodNameleft, endright, oldMethodId, newMethodId, null, null);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("trait_method_alias_declaration",108, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // traits_alias_modifier ::= T_PUBLIC
            {
              TraitMethodAliasDeclaration.Modifier RESULT =null;

    RESULT = TraitMethodAliasDeclaration.Modifier.PUBLIC;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("traits_alias_modifier",109, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // traits_alias_modifier ::= T_PROTECTED
            {
              TraitMethodAliasDeclaration.Modifier RESULT =null;

    RESULT = TraitMethodAliasDeclaration.Modifier.PROTECTED;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("traits_alias_modifier",109, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // traits_alias_modifier ::= T_PRIVATE
            {
              TraitMethodAliasDeclaration.Modifier RESULT =null;

    RESULT = TraitMethodAliasDeclaration.Modifier.PRIVATE;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("traits_alias_modifier",109, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // method_body ::= T_SEMICOLON
            {
              Block RESULT =null;

    RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_body",135, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Block block = new Block(startleft, endright, statementList);
    RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_body",135, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // constant_modifiers ::=
            {
              Integer RESULT =null;

    RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("constant_modifiers",133, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // constant_modifiers ::= ppp_modifiers
            {
              Integer RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = modifier;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("constant_modifiers",133, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // constant_modifiers ::= final_modifier
            {
              Integer RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = modifier;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("constant_modifiers",133, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // constant_modifiers ::= final_modifier ppp_modifiers
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int pModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int pModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer pModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
    result |= pModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("constant_modifiers",133, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // constant_modifiers ::= ppp_modifiers final_modifier
            {
              Integer RESULT =null;
		int pModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int pModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer pModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= pModifier.intValue();
    result |= fModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("constant_modifiers",133, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // variable_modifiers ::= ppp_modifiers
            {
              Integer RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = modifier;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",167, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // variable_modifiers ::= readonly_modifier
            {
              Integer RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    /* e.g. readonly int $property; */
    int result = 0;
    result |= ASTPHP5Parser.IMPLICIT_PUBLIC.intValue();
    result |= modifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",167, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // variable_modifiers ::= static_modifier
            {
              Integer RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = modifier;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",167, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // variable_modifiers ::= static_modifier ppp_modifiers
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
    result |= sModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",167, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // variable_modifiers ::= ppp_modifiers static_modifier
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
    result |= sModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",167, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // variable_modifiers ::= readonly_modifier ppp_modifiers
            {
              Integer RESULT =null;
		int rModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int rModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer rModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= rModifier.intValue();
    result |= fModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",167, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // variable_modifiers ::= ppp_modifiers readonly_modifier
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int rModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int rModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer rModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
    result |= rModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",167, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // variable_modifiers ::= T_VAR
            {
              Integer RESULT =null;

    RESULT = ASTPHP5Parser.PUBLIC;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",167, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // method_modifiers ::=
            {
              Integer RESULT =null;

    RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",134, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // method_modifiers ::= af_modifiers
            {
              Integer RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = modifier;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",134, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // method_modifiers ::= static_modifier
            {
              Integer RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = modifier;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",134, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // method_modifiers ::= ppp_modifiers
            {
              Integer RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = modifier;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",134, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // method_modifiers ::= static_modifier ppp_modifiers
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
    result |= sModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",134, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // method_modifiers ::= static_modifier af_modifiers
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
    result |= sModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",134, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // method_modifiers ::= ppp_modifiers static_modifier
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
    result |= sModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",134, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // method_modifiers ::= ppp_modifiers af_modifiers
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
    result |= sModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",134, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // method_modifiers ::= af_modifiers static_modifier
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
    result |= sModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",134, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // method_modifiers ::= abstract_modifier ppp_modifiers
            {
              Integer RESULT =null;
		int aModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int aModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer aModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= aModifier.intValue();
    result |= sModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",134, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // method_modifiers ::= final_modifier ppp_modifiers
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
    result |= sModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",134, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // method_modifiers ::= static_modifier ppp_modifiers af_modifiers
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int tModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer tModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
    result |= sModifier.intValue();
    result |= tModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",134, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // method_modifiers ::= static_modifier af_modifiers ppp_modifiers
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int tModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer tModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
    result |= sModifier.intValue();
    result |= tModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",134, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // method_modifiers ::= ppp_modifiers static_modifier af_modifiers
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int tModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer tModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
    result |= sModifier.intValue();
    result |= tModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",134, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // method_modifiers ::= ppp_modifiers af_modifiers static_modifier
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int tModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer tModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
    result |= sModifier.intValue();
    result |= tModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",134, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // method_modifiers ::= af_modifiers static_modifier ppp_modifiers
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int tModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer tModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
    result |= sModifier.intValue();
    result |= tModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",134, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // method_modifiers ::= abstract_modifier ppp_modifiers static_modifier
            {
              Integer RESULT =null;
		int aModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int aModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Integer aModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int tModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer tModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= aModifier.intValue();
    result |= sModifier.intValue();
    result |= tModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",134, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // method_modifiers ::= final_modifier ppp_modifiers static_modifier
            {
              Integer RESULT =null;
		int fModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int fModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Integer fModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int sModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer sModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int tModifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tModifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer tModifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    int result = 0;
    result |= fModifier.intValue();
    result |= sModifier.intValue();
    result |= tModifier.intValue();
    RESULT = Integer.valueOf(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",134, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // abstract_modifier ::= T_ABSTRACT
            {
              Integer RESULT =null;

    RESULT = ASTPHP5Parser.ABSTRACT;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("abstract_modifier",176, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // final_modifier ::= T_FINAL
            {
              Integer RESULT =null;

    RESULT = ASTPHP5Parser.FINAL;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("final_modifier",177, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // static_modifier ::= T_STATIC
            {
              Integer RESULT =null;

    RESULT = ASTPHP5Parser.STATIC;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_modifier",179, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // ppp_modifiers ::= T_PUBLIC
            {
              Integer RESULT =null;

    RESULT = ASTPHP5Parser.PUBLIC;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("ppp_modifiers",180, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // ppp_modifiers ::= T_PROTECTED
            {
              Integer RESULT =null;

    RESULT = ASTPHP5Parser.PROTECTED;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("ppp_modifiers",180, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // ppp_modifiers ::= T_PRIVATE
            {
              Integer RESULT =null;

    RESULT = ASTPHP5Parser.PRIVATE;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("ppp_modifiers",180, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // af_modifiers ::= abstract_modifier
            {
              Integer RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = modifier;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("af_modifiers",181, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // af_modifiers ::= final_modifier
            {
              Integer RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = modifier;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("af_modifiers",181, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Variable varId = new Variable(varleft, varright, var);
    list.add(new ASTNode[] {varId, null});
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",125, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Variable varId = new Variable(varleft, varright, var);
    list.add(new ASTNode[] {varId, expr});
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",125, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // class_variable_declaration ::= T_VARIABLE
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    Variable varId = new Variable(varleft, varright, var);
    list.add(new ASTNode[] {varId, null});
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",125, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    Variable varId = new Variable(varleft, varright, var);
    list.add(new ASTNode[] {varId, expr});
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",125, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // constant_declaration ::= constant_declaration T_COMMA string_st T_EQUAL static_scalar_value
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier constId = new Identifier(constNameleft, constNameright, constName);
    list.add(new ASTNode[] {constId, expr});
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("constant_declaration",131, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // constant_declaration ::= T_CONST string_st T_EQUAL static_scalar_value_with_class_instance
            {
              List RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    Identifier constId = new Identifier(constNameleft, constNameright, constName);
    list.add(new ASTNode[] {constId, expr});
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("constant_declaration",131, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // class_constant_declaration ::= class_constant_declaration T_COMMA identifier_without_class T_EQUAL static_scalar_value
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Identifier constName = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(new ASTNode[] {constName, expr});
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_constant_declaration",130, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // class_constant_declaration ::= T_CONST identifier_without_class T_EQUAL static_scalar_value
            {
              List RESULT =null;
		int constIdleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int constIdright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Identifier constId = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    list.add(new ASTNode[] {constId, expr});
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_constant_declaration",130, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // echo_expr_list ::= echo_expr_list T_COMMA expr
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    exprList.add(expr);
    RESULT = exprList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // echo_expr_list ::= expr
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List exprList = new LinkedList();
    exprList.add(expr);
    RESULT = exprList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // for_expr ::=
            {
              List RESULT =null;

    RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("for_expr",48, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // for_expr ::= non_empty_for_expr
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = exprList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("for_expr",48, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    exprList.add(expr);
    RESULT = exprList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",49, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
default:
throw new Exception("Invalid action number found in internal parse table");
}
}
public final java_cup.runtime.Symbol fakeMethod400to499(
int                        CUP$ASTPHP5Parser$act_num,
java_cup.runtime.lr_parser CUP$ASTPHP5Parser$parser,
java.util.Stack            CUP$ASTPHP5Parser$stack,
int                        CUP$ASTPHP5Parser$top)
throws java.lang.Exception
{
java_cup.runtime.Symbol CUP$ASTPHP5Parser$result;
switch (CUP$ASTPHP5Parser$act_num) {
          case 400: // non_empty_for_expr ::= expr
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List exprList = new LinkedList();
    exprList.add(expr);
    RESULT = exprList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",49, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // expr_without_variable ::= expr_without_variable_and_class_instance
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = ex;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",50, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // expr_without_variable ::= anonymous_class
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ClassInstanceCreation ex = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = ex;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",50, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // expr_without_variable ::= T_NEW class_name_reference ctor_arguments
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
    RESULT = classInstanceCreation;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",50, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // expr_without_variable ::= T_CLONE expr
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    CloneExpression clone = new CloneExpression(startleft, exprright, expr);
    RESULT = clone;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",50, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // expr_without_variable_and_class_instance ::= T_LIST T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE T_EQUAL expr
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ListVariable vars = new ListVariable(startleft, closeright, varList, ListVariable.SyntaxType.OLD);
    Assignment list = new Assignment(startleft, exprright, vars, Assignment.Type.EQUAL, expr);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // expr_without_variable_and_class_instance ::= T_OPEN_RECT array_pair_list T_CLOSE_RECT T_EQUAL expr
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ListVariable vars = new ListVariable(startleft, closeright, varList, ListVariable.SyntaxType.NEW);
    Assignment list = new Assignment(startleft, exprright, vars, Assignment.Type.EQUAL, expr);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // expr_without_variable_and_class_instance ::= variable T_EQUAL expr_with_yields
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Assignment(varleft, exprright, var, Assignment.Type.EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // expr_without_variable_and_class_instance ::= variable T_EQUAL ampersand variable
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase refvar = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Assignment(varleft, refvarright, var, Assignment.Type.EQUAL, new Reference(reftokenleft, refvarright, refvar));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // expr_without_variable_and_class_instance ::= variable T_EQUAL ampersand T_NEW class_name_reference ctor_arguments
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
    Reference reference = new Reference(reftokenleft, ctorright, classInstanceCreation);
    Assignment assignment = new Assignment(varleft, ctorright, var, Assignment.Type.EQUAL, reference);
    RESULT = assignment;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // expr_without_variable_and_class_instance ::= variable T_POW_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Assignment(varleft, exprright, var , Assignment.Type.POW_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // expr_without_variable_and_class_instance ::= variable T_PLUS_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Assignment(varleft, exprright, var , Assignment.Type.PLUS_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // expr_without_variable_and_class_instance ::= variable T_MINUS_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Assignment(varleft, exprright, var , Assignment.Type.MINUS_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // expr_without_variable_and_class_instance ::= variable T_MUL_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Assignment(varleft, exprright, var , Assignment.Type.MUL_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // expr_without_variable_and_class_instance ::= variable T_DIV_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Assignment(varleft, exprright, var , Assignment.Type.DIV_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // expr_without_variable_and_class_instance ::= variable T_CONCAT_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Assignment(varleft, exprright, var , Assignment.Type.CONCAT_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // expr_without_variable_and_class_instance ::= variable T_MOD_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Assignment(varleft, exprright, var , Assignment.Type.MOD_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // expr_without_variable_and_class_instance ::= variable T_AND_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Assignment(varleft, exprright, var , Assignment.Type.AND_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // expr_without_variable_and_class_instance ::= variable T_OR_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Assignment(varleft, exprright, var , Assignment.Type.OR_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // expr_without_variable_and_class_instance ::= variable T_XOR_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Assignment(varleft, exprright, var , Assignment.Type.XOR_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // expr_without_variable_and_class_instance ::= variable T_SL_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Assignment(varleft, exprright, var , Assignment.Type.SL_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // expr_without_variable_and_class_instance ::= variable T_SR_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Assignment(varleft, exprright, var , Assignment.Type.SR_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // expr_without_variable_and_class_instance ::= variable T_COALESCE_EQUAL expr
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    // PHP 7.4 Null Coalescing Assignment Operator
    // https://wiki.php.net/rfc/null_coalesce_equal_operator
    RESULT = new Assignment(varleft, exprright, var , Assignment.Type.COALESCE_EQUAL, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // expr_without_variable_and_class_instance ::= rw_variable T_INC
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.Operator.INC);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // expr_without_variable_and_class_instance ::= T_INC rw_variable
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.Operator.INC);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // expr_without_variable_and_class_instance ::= rw_variable T_DEC
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.Operator.DEC);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // expr_without_variable_and_class_instance ::= T_DEC rw_variable
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.Operator.DEC);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // expr_without_variable_and_class_instance ::= expr T_BOOLEAN_OR expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.BOOL_OR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // expr_without_variable_and_class_instance ::= expr T_BOOLEAN_AND expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.BOOL_AND, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // expr_without_variable_and_class_instance ::= expr T_LOGICAL_OR expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.STRING_OR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // expr_without_variable_and_class_instance ::= expr T_LOGICAL_AND expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.STRING_AND, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // expr_without_variable_and_class_instance ::= expr T_LOGICAL_XOR expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.STRING_XOR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // expr_without_variable_and_class_instance ::= expr T_OR expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.OR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // expr_without_variable_and_class_instance ::= expr T_REFERENCE expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.AND, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // expr_without_variable_and_class_instance ::= expr T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.AND, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // expr_without_variable_and_class_instance ::= expr T_KOVA expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.XOR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // expr_without_variable_and_class_instance ::= expr T_NEKUDA expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.CONCAT, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // expr_without_variable_and_class_instance ::= expr T_POW expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.POW, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // expr_without_variable_and_class_instance ::= expr T_PLUS expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.PLUS, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // expr_without_variable_and_class_instance ::= expr T_MINUS expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.MINUS, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // expr_without_variable_and_class_instance ::= expr T_TIMES expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.MUL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // expr_without_variable_and_class_instance ::= expr T_DIV expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.DIV, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // expr_without_variable_and_class_instance ::= expr T_PRECENT expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.MOD, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // expr_without_variable_and_class_instance ::= expr T_SL expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.SL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // expr_without_variable_and_class_instance ::= expr T_SR expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.SR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // expr_without_variable_and_class_instance ::= T_PLUS expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.Operator.PLUS);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // expr_without_variable_and_class_instance ::= T_MINUS expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.Operator.MINUS);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // expr_without_variable_and_class_instance ::= T_NOT expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.Operator.NOT);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // expr_without_variable_and_class_instance ::= T_TILDA expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.Operator.TILDA);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // expr_without_variable_and_class_instance ::= expr T_IS_IDENTICAL expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_IDENTICAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // expr_without_variable_and_class_instance ::= expr T_IS_NOT_IDENTICAL expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_NOT_IDENTICAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // expr_without_variable_and_class_instance ::= expr T_IS_EQUAL expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_EQUAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // expr_without_variable_and_class_instance ::= expr T_IS_NOT_EQUAL expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_NOT_EQUAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // expr_without_variable_and_class_instance ::= expr T_RGREATER expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.RGREATER, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // expr_without_variable_and_class_instance ::= expr T_IS_SMALLER_OR_EQUAL expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_SMALLER_OR_EQUAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // expr_without_variable_and_class_instance ::= expr T_LGREATER expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.LGREATER, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // expr_without_variable_and_class_instance ::= expr T_IS_GREATER_OR_EQUAL expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_GREATER_OR_EQUAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // expr_without_variable_and_class_instance ::= expr T_SPACESHIP expr
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.SPACESHIP, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // expr_without_variable_and_class_instance ::= expr T_INSTANCEOF class_name_reference
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InstanceOfExpression(exprleft, classNameright, expr , className);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // expr_without_variable_and_class_instance ::= parenthesis_expr
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ParenthesisExpression expr = (ParenthesisExpression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // expr_without_variable_and_class_instance ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition, ConditionalExpression.OperatorType.QUESTION_MARK, ifTrue, ifFalse);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // expr_without_variable_and_class_instance ::= expr T_QUESTION_MARK T_NEKUDOTAIM expr
            {
              Expression RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ConditionalExpression(condleft, ifFalseright, cond, ConditionalExpression.OperatorType.ELVIS, null, ifFalse);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // expr_without_variable_and_class_instance ::= expr T_COALESCE expr
            {
              Expression RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ConditionalExpression(condleft, ifFalseright, cond, ConditionalExpression.OperatorType.COALESCE, null, ifFalse);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // expr_without_variable_and_class_instance ::= internal_functions_in_yacc
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // expr_without_variable_and_class_instance ::= T_INT_CAST expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.Type.INT);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // expr_without_variable_and_class_instance ::= T_DOUBLE_CAST expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.Type.REAL);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // expr_without_variable_and_class_instance ::= T_STRING_CAST expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.Type.STRING);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // expr_without_variable_and_class_instance ::= T_ARRAY_CAST expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.Type.ARRAY);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // expr_without_variable_and_class_instance ::= T_OBJECT_CAST expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.Type.OBJECT);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // expr_without_variable_and_class_instance ::= T_BOOL_CAST expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.Type.BOOL);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // expr_without_variable_and_class_instance ::= T_UNSET_CAST expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.Type.UNSET);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // expr_without_variable_and_class_instance ::= T_EXIT exit_expr
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List expList = new LinkedList();
    if (expr != null) {
        expList.add(expr);
    }
    Identifier id = new Identifier(startleft, startright, start);
    FunctionName name = new FunctionName(startleft, startright, id);
    FunctionInvocation result = new FunctionInvocation(startleft, exprright, name, expList);
    RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // expr_without_variable_and_class_instance ::= T_AT expr
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    IgnoreError ignoreError = new IgnoreError(startleft, exprright, expr);
    RESULT = ignoreError;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // expr_without_variable_and_class_instance ::= scalar
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = scalar;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // expr_without_variable_and_class_instance ::= array_creation
            {
              Expression RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression array = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = array;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // expr_without_variable_and_class_instance ::= T_BACKQUATE encaps_list T_BACKQUATE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, list);
    RESULT = backTickExpression;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // expr_without_variable_and_class_instance ::= T_PRINT expr
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List expList = new LinkedList();
    if (expr != null) {
        expList.add(expr);
    }
    Identifier id = new Identifier(startleft, startright, "print");
    FunctionName name = new FunctionName(startleft, startright, id);
    FunctionInvocation result = new FunctionInvocation(startleft, exprright, name, expList);
    RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // expr_without_variable_and_class_instance ::= inline_function
            {
              Expression RESULT =null;
		int inlineleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int inlineright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression inline = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = inline;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // expr_without_variable_and_class_instance ::= attributes inline_function
            {
              Expression RESULT =null;
		int attributesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int attributesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List<Attribute> attributes = (List<Attribute>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int inlineleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int inlineright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression inline = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Expression attributedExpression = inline;
    if (inline instanceof ArrowFunctionDeclaration) {
        attributedExpression = ArrowFunctionDeclaration.create((ArrowFunctionDeclaration) inline, attributes);
    } else if (inline instanceof LambdaFunctionDeclaration) {
        attributedExpression = LambdaFunctionDeclaration.create((LambdaFunctionDeclaration) inline, attributes);
    } else {
        assert false;
    }
    RESULT = attributedExpression;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // expr_without_variable_and_class_instance ::= expression_array_access
            {
              Expression RESULT =null;
		int eaaleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eaaright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression eaa = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = eaa;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // expr_without_variable_and_class_instance ::= T_THROW expr
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    // PHP 8.0: https://wiki.php.net/rfc/throw_expression
    RESULT = new ThrowExpression(tokenleft, exprright, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // expr_without_variable_and_class_instance ::= match
            {
              Expression RESULT =null;
		int matchleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int matchright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		MatchExpression match = (MatchExpression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    // PHP 8.0: https://wiki.php.net/rfc/match_expression_v2
    RESULT = match;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable_and_class_instance",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // inline_function ::= T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars optional_return_type T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression returnType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, paramList, returnType, varsList,
        new Block(blockStartleft, blockEndright, list), isReference.booleanValue(), false);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("inline_function",73, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // inline_function ::= T_STATIC T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars optional_return_type T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
            {
              Expression RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-10)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-10)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-10)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression returnType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, paramList, returnType, varsList,
        new Block(blockStartleft, blockEndright, list), isReference.booleanValue(), true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("inline_function",73, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-10)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // inline_function ::= T_FN is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE optional_return_type T_DOUBLE_ARROW expr_with_yields_and_error
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression returnType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    // PHP 7.4
    RESULT = new ArrowFunctionDeclaration(sleft, exprright, paramList, returnType, expr, isReference.booleanValue(), false);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("inline_function",73, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // inline_function ::= T_STATIC T_FN is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE optional_return_type T_DOUBLE_ARROW expr_with_yields_and_error
            {
              Expression RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression returnType = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    // PHP 7.4
    RESULT = new ArrowFunctionDeclaration(stleft, exprright, paramList, returnType, expr, isReference.booleanValue(), true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("inline_function",73, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // match ::= T_MATCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_CURLY_OPEN match_arm_list T_CURLY_CLOSE
            {
              MatchExpression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int curlyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int curlyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object curly = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new MatchExpression(tokenleft, endright, new OffsetRange(curlyleft, endright), expr, list);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("match",74, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // match_arm_list ::=
            {
              List RESULT =null;

    RESULT = new ArrayList<>();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("match_arm_list",75, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // match_arm_list ::= non_empty_match_arm_list possible_comma
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;

    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("match_arm_list",75, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // non_empty_match_arm_list ::= match_arm
            {
              List RESULT =null;
		int armleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int armright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		MatchArm arm = (MatchArm)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List<MatchArm> list = new ArrayList<>();
    list.add(arm);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_match_arm_list",76, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // non_empty_match_arm_list ::= non_empty_match_arm_list T_COMMA match_arm
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int armleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int armright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		MatchArm arm = (MatchArm)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(arm);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_match_arm_list",76, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // match_arm ::= match_arm_condition_list possible_comma T_DOUBLE_ARROW expr_with_error
            {
              MatchArm RESULT =null;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List conditions = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new MatchArm(conditionsleft, exprright, conditions, expr, false);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("match_arm",77, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // match_arm ::= T_DEFAULT possible_comma T_DOUBLE_ARROW expr_with_error
            {
              MatchArm RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List<Expression> conditions = new ArrayList<>();
    conditions.add(new Identifier(tokenleft, tokenright, "default"));
    RESULT = new MatchArm(tokenleft, exprright, conditions, expr, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("match_arm",77, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // match_arm_condition_list ::= expr_with_error
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List<Expression> list = new ArrayList<>();
    list.add(expr);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("match_arm_condition_list",78, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // match_arm_condition_list ::= match_arm_condition_list T_COMMA expr_with_error
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(expr);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("match_arm_condition_list",78, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // lexical_vars ::=
            {
              List RESULT =null;

    RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("lexical_vars",32, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // lexical_vars ::= T_USE T_OPEN_PARENTHESE lexical_var_list possible_comma T_CLOSE_PARENTHESE
            {
              List RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("lexical_vars",32, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // lexical_var_list ::= lexical_var_list T_COMMA T_VARIABLE
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Variable v = new Variable(varleft, varright, var);
    list.add(v);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",33, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // lexical_var_list ::= lexical_var_list T_COMMA ampersand T_VARIABLE
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(new Reference (refleft, varright, new Variable(varleft, varright, var)));
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",33, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // lexical_var_list ::= T_VARIABLE
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    list.add(new Variable(varleft, varright, var));
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",33, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
default:
throw new Exception("Invalid action number found in internal parse table");
}
}
public final java_cup.runtime.Symbol fakeMethod500to599(
int                        CUP$ASTPHP5Parser$act_num,
java_cup.runtime.lr_parser CUP$ASTPHP5Parser$parser,
java.util.Stack            CUP$ASTPHP5Parser$stack,
int                        CUP$ASTPHP5Parser$top)
throws java.lang.Exception
{
java_cup.runtime.Symbol CUP$ASTPHP5Parser$result;
switch (CUP$ASTPHP5Parser$act_num) {
          case 500: // lexical_var_list ::= ampersand T_VARIABLE
            {
              List RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    list.add(new Reference (refleft, varright, new Variable(varleft, varright, var)));
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",33, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // function_call ::= namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new FunctionInvocation(listleft, eright,
        new FunctionName(listleft, listright,
            new NamespaceName(listleft, listright, list, false, false)), parameters);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // function_call ::= T_NAMESPACE T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new FunctionInvocation(sleft, eright,
        new FunctionName(sleft, listright,
            new NamespaceName(sleft, listright, list, false, true)), parameters);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // function_call ::= T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new FunctionInvocation(sleft, eright,
        new FunctionName(sleft, listright,
            new NamespaceName(sleft, listright, list, true, false)), parameters);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM identifier T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Identifier fn = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new StaticMethodInvocation(classNameleft, eright, className,
        new FunctionInvocation(fnleft, eright,
            new FunctionName(fnleft, fnright, fn), parameters));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new StaticMethodInvocation(classNameleft, eright, className,
        new FunctionInvocation(reflectionNameleft, eright,
            new FunctionName(reflectionNameleft, reflectionNameright, reflectionName), parameters));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_CURLY_OPEN expr T_CURLY_CLOSE T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ReflectionVariable reflectionVariable = new ReflectionVariable(oleft, cright, expr);
    RESULT = new StaticMethodInvocation(classNameleft, eright, className,
        new FunctionInvocation(oleft, eright,
            new FunctionName(oleft, cright, reflectionVariable), parameters));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM identifier T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Identifier fn = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new StaticMethodInvocation(classNameleft, eright, className,
        new FunctionInvocation(fnleft, eright,
            new FunctionName(fnleft, fnright, fn), parameters));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new StaticMethodInvocation(classNameleft, eright, className,
        new FunctionInvocation(reflectionNameleft, eright,
            new FunctionName(reflectionNameleft, reflectionNameright, reflectionName), parameters));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM T_CURLY_OPEN expr T_CURLY_CLOSE T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ReflectionVariable reflectionVariable = new ReflectionVariable(oleft, cright, expr);
    RESULT = new StaticMethodInvocation(classNameleft, eright, className,
        new FunctionInvocation(oleft, eright,
            new FunctionName(oleft, cright, reflectionVariable), parameters));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new FunctionInvocation(reflectionNameleft, eright,
        new FunctionName(reflectionNameleft, reflectionNameright, reflectionName), parameters);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // function_call ::= callable_expr T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression start = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new FunctionInvocation(startleft, eright,
        new FunctionName(startleft, startright, start), parameters);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // function_call ::= function_call array_dimension
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayDimension ad = (ArrayDimension)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new DereferencedArrayAccess(varleft, adright, var, ad);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // function_call ::= function_call T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		VariableBase call = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new FunctionInvocation(callleft, eright,
        new FunctionName(callleft, callright, call), parameters);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // callable_expr ::= parenthesis_expr
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ParenthesisExpression expr = (ParenthesisExpression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("callable_expr",52, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // callable_expr ::= dereferencable_variable
            {
              Expression RESULT =null;
		int dereferencableVariableleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int dereferencableVariableright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase dereferencableVariable = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = dereferencableVariable;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("callable_expr",52, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // callable_expr ::= field_or_method_access
            {
              Expression RESULT =null;
		int fmaleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int fmaright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase fma = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = fma;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("callable_expr",52, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // callable_expr ::= T_OPEN_PARENTHESE anonymous_class T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int clsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int clsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		ClassInstanceCreation cls = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    AnonymousObjectVariable anonymous= new AnonymousObjectVariable(startleft, endright, cls);
    RESULT = anonymous;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("callable_expr",52, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // callable_expr ::= T_OPEN_PARENTHESE T_NEW class_name_reference ctor_arguments T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(nleft, ctorright, className, ctor);
    AnonymousObjectVariable anonymous = new AnonymousObjectVariable(startleft, endright, classInstanceCreation);
    RESULT = anonymous;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("callable_expr",52, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // callable_expr ::= T_CONSTANT_ENCAPSED_STRING
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Scalar(scalarleft, scalarright, scalar, Scalar.Type.STRING);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("callable_expr",52, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // callable_expr ::= array_creation
            {
              Expression RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression array = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = array;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("callable_expr",52, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // class_name ::= T_STATIC
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Identifier(sleft, sright, "static");

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_name",123, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // class_name ::= namespace_name
            {
              Expression RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new NamespaceName(listleft, listright, list, false, false);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_name",123, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new NamespaceName(sleft, listright, list, false, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_name",123, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // class_name ::= T_NS_SEPARATOR namespace_name
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new NamespaceName(sleft, listright, list, true, false);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_name",123, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // fully_qualified_class_name ::= namespace_name
            {
              NamespaceName RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new NamespaceName(listleft, listright, list, false, false);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",124, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // fully_qualified_class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name
            {
              NamespaceName RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new NamespaceName(sleft, listright, list, false, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",124, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // fully_qualified_class_name ::= T_NS_SEPARATOR namespace_name
            {
              NamespaceName RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new NamespaceName(sleft, listright, list, true, false);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",124, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // class_name_reference ::= class_name
            {
              ClassName RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ClassName(classNameleft, classNameright, className);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_name_reference",182, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // class_name_reference ::= dynamic_class_name_reference
            {
              ClassName RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = className;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_name_reference",182, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // dynamic_class_name_reference ::= base_variable T_OBJECT_OPERATOR object_property dynamic_class_name_variable_properties
            {
              ClassName RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int firstVarPropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int firstVarPropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase firstVarProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ClassName name = parser.createClassName(var, firstVarProperty, propertyList, varleft, propertyListright, ASTPHP5Parser.Access.NON_STATIC);
    RESULT = name;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",185, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // dynamic_class_name_reference ::= base_variable T_NULLSAFE_OBJECT_OPERATOR object_property dynamic_class_name_variable_properties
            {
              ClassName RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int firstVarPropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int firstVarPropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase firstVarProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ClassName name = parser.createClassName(var, firstVarProperty, propertyList, varleft, propertyListright, ASTPHP5Parser.Access.NULLSAFE);
    RESULT = name;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",185, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // dynamic_class_name_reference ::= base_variable
            {
              ClassName RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

     ClassName name = new ClassName(varleft, varright, var);
     RESULT = name;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",185, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // dynamic_class_name_variable_properties ::= dynamic_class_name_variable_properties dynamic_class_name_variable_property
            {
              List RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Pair<VariableBase,ASTPHP5Parser.Access> var = (Pair<VariableBase,ASTPHP5Parser.Access>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    variables.add(var);
    RESULT = variables;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_properties",189, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // dynamic_class_name_variable_properties ::=
            {
              List RESULT =null;

    RESULT = new LinkedList<Pair<VariableBase, ASTPHP5Parser.Access>>();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_properties",189, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // dynamic_class_name_variable_property ::= T_OBJECT_OPERATOR object_property
            {
              Pair<VariableBase,ASTPHP5Parser.Access> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = Pair.of(var, ASTPHP5Parser.Access.NON_STATIC);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",190, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // dynamic_class_name_variable_property ::= T_NULLSAFE_OBJECT_OPERATOR object_property
            {
              Pair<VariableBase,ASTPHP5Parser.Access> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = Pair.of(var, ASTPHP5Parser.Access.NULLSAFE);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",190, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // exit_expr ::=
            {
              Expression RESULT =null;

    RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("exit_expr",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;

    RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("exit_expr",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;

    RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("exit_expr",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // ctor_arguments ::=
            {
              List RESULT =null;

    RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",55, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;

    RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",55, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // common_scalar ::= T_LNUMBER
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.Type.INT);
    RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",56, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // common_scalar ::= T_DNUMBER
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.Type.REAL);
    RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",56, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.Type.STRING);
    RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",56, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // common_scalar ::= T_LINE
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Scalar s = new Scalar(scalarleft, scalarright, "__LINE__", Scalar.Type.SYSTEM);
    RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",56, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // common_scalar ::= T_FILE
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Scalar s = new Scalar(scalarleft, scalarright, "__FILE__", Scalar.Type.SYSTEM);
    RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",56, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // common_scalar ::= T_DIR
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Scalar(scalarleft, scalarright, "__DIR__", Scalar.Type.SYSTEM);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",56, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 548: // common_scalar ::= T_CLASS_C
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Scalar s = new Scalar(scalarleft, scalarright, "__CLASS__", Scalar.Type.SYSTEM);
    RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",56, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 549: // common_scalar ::= T_TRAIT_C
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Scalar s = new Scalar(scalarleft, scalarright, "__TRAIT__", Scalar.Type.SYSTEM);
    RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",56, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 550: // common_scalar ::= T_METHOD_C
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Scalar s = new Scalar(scalarleft, scalarright, "__METHOD__", Scalar.Type.SYSTEM);
    RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",56, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 551: // common_scalar ::= T_FUNC_C
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Scalar s = new Scalar(scalarleft, scalarright, "__FUNCTION__", Scalar.Type.SYSTEM);
    RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",56, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 552: // common_scalar ::= T_NS_C
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Scalar(scalarleft, scalarright, "__NAMESPACE__", Scalar.Type.SYSTEM);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",56, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 553: // common_scalar ::= T_START_NOWDOC T_ENCAPSED_AND_WHITESPACE T_END_NOWDOC
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Scalar s = new Scalar(startleft, endright, scalar, Scalar.Type.STRING);
    RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",56, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 554: // common_scalar ::= T_START_NOWDOC T_END_NOWDOC
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Scalar s = new Scalar(startleft, endright, "", Scalar.Type.STRING); //NOI18N
    RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",56, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 555: // static_scalar_value ::= common_scalar
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = scalar;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar_value",59, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 556: // static_scalar_value ::= namespace_name
            {
              Expression RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    if (list.size() == 1) {
        String itemName = ((Identifier)list.get(0)).getName();
        String itemNameLower = itemName.toLowerCase();
        if ("true".equals(itemNameLower) || "false".equals(itemNameLower)) { //NOI18N
            RESULT = new Scalar(listleft, listright, itemName, Scalar.Type.STRING);
        } else {
            RESULT = new NamespaceName(listleft, listright, list, false, false);
        }
    } else {
        RESULT = new NamespaceName(listleft, listright, list, false, false);
    }

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar_value",59, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 557: // static_scalar_value ::= T_NAMESPACE T_NS_SEPARATOR namespace_name
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new NamespaceName(sleft, listright, list, false, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar_value",59, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 558: // static_scalar_value ::= T_NS_SEPARATOR namespace_name
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new NamespaceName(sleft, listright, list, true, false);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar_value",59, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 559: // static_scalar_value ::= static_class_constant
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = classConstant;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar_value",59, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 560: // static_scalar_value ::= heredoc
            {
              Expression RESULT =null;
		int docleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Quote doc = (Quote)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = doc;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar_value",59, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 561: // static_scalar_value ::= static_operation
            {
              Expression RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression operation = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = operation;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar_value",59, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 562: // static_scalar_value_with_class_instance ::= static_scalar_value
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = scalar;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar_value_with_class_instance",60, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 563: // static_scalar_value_with_class_instance ::= T_NEW class_name_reference ctor_arguments
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ClassInstanceCreation(nleft, ctorright, className, ctor);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar_value_with_class_instance",60, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 564: // static_operation ::= static_array_creation
            {
              Expression RESULT =null;
		int arrayCreationleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayCreationright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression arrayCreation = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = arrayCreation;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 565: // static_operation ::= static_array_creation_with_access
            {
              Expression RESULT =null;
		int arrayAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression arrayAccess = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = arrayAccess;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 566: // static_operation ::= static_constant_array_access
            {
              Expression RESULT =null;
		int arrayAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression arrayAccess = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = arrayAccess;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 567: // static_operation ::= T_ENCAPSED_AND_WHITESPACE array_dimension_with_static_scalar_value
            {
              Expression RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayDimension ad = (ArrayDimension)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(strleft, adright, new Identifier(strleft, strright, str), ad);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 568: // static_operation ::= T_CONSTANT_ENCAPSED_STRING array_dimension_with_static_scalar_value
            {
              Expression RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayDimension ad = (ArrayDimension)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(strleft, adright, new Identifier(strleft, strright, str), ad);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 569: // static_operation ::= static_scalar_value T_PLUS static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OperatorType.PLUS, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 570: // static_operation ::= static_scalar_value T_MINUS static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OperatorType.MINUS, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 571: // static_operation ::= static_scalar_value T_TIMES static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OperatorType.MUL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 572: // static_operation ::= static_scalar_value T_POW static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OperatorType.POW, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 573: // static_operation ::= static_scalar_value T_DIV static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OperatorType.DIV, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 574: // static_operation ::= static_scalar_value T_PRECENT static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OperatorType.MOD, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 575: // static_operation ::= T_NOT static_scalar_value
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.Operator.NOT);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 576: // static_operation ::= T_TILDA static_scalar_value
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.Operator.TILDA);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 577: // static_operation ::= static_scalar_value T_OR static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.OR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 578: // static_operation ::= static_scalar_value T_REFERENCE static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.AND, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 579: // static_operation ::= static_scalar_value T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.AND, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 580: // static_operation ::= static_scalar_value T_KOVA static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.XOR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 581: // static_operation ::= static_scalar_value T_SL static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.SL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 582: // static_operation ::= static_scalar_value T_SR static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.SR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 583: // static_operation ::= static_scalar_value T_NEKUDA static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.CONCAT, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 584: // static_operation ::= static_scalar_value T_LOGICAL_XOR static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.STRING_XOR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 585: // static_operation ::= static_scalar_value T_LOGICAL_AND static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.STRING_AND, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 586: // static_operation ::= static_scalar_value T_LOGICAL_OR static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.STRING_OR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 587: // static_operation ::= static_scalar_value T_BOOLEAN_AND static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.BOOL_AND, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 588: // static_operation ::= static_scalar_value T_BOOLEAN_OR static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.BOOL_OR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 589: // static_operation ::= static_scalar_value T_IS_IDENTICAL static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_IDENTICAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 590: // static_operation ::= static_scalar_value T_IS_NOT_IDENTICAL static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_NOT_IDENTICAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 591: // static_operation ::= static_scalar_value T_IS_EQUAL static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_EQUAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 592: // static_operation ::= static_scalar_value T_IS_NOT_EQUAL static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_NOT_EQUAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 593: // static_operation ::= static_scalar_value T_RGREATER static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.RGREATER, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 594: // static_operation ::= static_scalar_value T_LGREATER static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.LGREATER, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 595: // static_operation ::= static_scalar_value T_IS_SMALLER_OR_EQUAL static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_SMALLER_OR_EQUAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 596: // static_operation ::= static_scalar_value T_IS_GREATER_OR_EQUAL static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.IS_GREATER_OR_EQUAL, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 597: // static_operation ::= static_scalar_value T_SPACESHIP static_scalar_value
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OperatorType.SPACESHIP, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 598: // static_operation ::= static_scalar_value T_QUESTION_MARK T_NEKUDOTAIM static_scalar_value
            {
              Expression RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ConditionalExpression(condleft, ifFalseright, cond, ConditionalExpression.OperatorType.ELVIS, null, ifFalse);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 599: // static_operation ::= static_scalar_value T_QUESTION_MARK static_scalar_value T_NEKUDOTAIM static_scalar_value
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition, ConditionalExpression.OperatorType.QUESTION_MARK, ifTrue, ifFalse);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
default:
throw new Exception("Invalid action number found in internal parse table");
}
}
public final java_cup.runtime.Symbol fakeMethod600to699(
int                        CUP$ASTPHP5Parser$act_num,
java_cup.runtime.lr_parser CUP$ASTPHP5Parser$parser,
java.util.Stack            CUP$ASTPHP5Parser$stack,
int                        CUP$ASTPHP5Parser$top)
throws java.lang.Exception
{
java_cup.runtime.Symbol CUP$ASTPHP5Parser$result;
switch (CUP$ASTPHP5Parser$act_num) {
          case 600: // static_operation ::= static_scalar_value T_COALESCE static_scalar_value
            {
              Expression RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ConditionalExpression(condleft, ifFalseright, cond, ConditionalExpression.OperatorType.COALESCE, null, ifFalse);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 601: // static_operation ::= T_PLUS static_scalar_value
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.Operator.PLUS);
    RESULT = op;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 602: // static_operation ::= T_MINUS static_scalar_value
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.Operator.MINUS);
    RESULT = op;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 603: // static_operation ::= T_OPEN_PARENTHESE static_scalar_value T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;

    RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_operation",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 604: // static_scalar ::= static_scalar_value
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = scalar;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar",57, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 605: // static_scalar_with_class_instance ::= static_scalar_value_with_class_instance
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = scalar;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar_with_class_instance",58, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 606: // static_class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM static_reference_constant
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int constantleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression constant = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new StaticConstantAccess(classNameleft, constantright, className, constant);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_class_constant",191, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 607: // static_reference_constant ::= static_class_constant_array_access
            {
              Expression RESULT =null;
		int arrayAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression arrayAccess = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = arrayAccess;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_reference_constant",192, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 608: // static_reference_constant ::= identifier
            {
              Expression RESULT =null;
		int constantNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int constantNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Identifier constantName = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = constantName;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_reference_constant",192, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 609: // static_class_constant_array_access ::= static_class_constant_array_access T_OPEN_RECT static_scalar_value T_CLOSE_RECT
            {
              Expression RESULT =null;
		int arrayAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int arrayAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression arrayAccess = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(arrayAccessleft, endright, arrayAccess, new ArrayDimension(oleft, endright, index, ArrayDimension.Type.VARIABLE_ARRAY));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_class_constant_array_access",195, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 610: // static_class_constant_array_access ::= identifier T_OPEN_RECT static_scalar_value T_CLOSE_RECT
            {
              Expression RESULT =null;
		int constantNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int constantNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Identifier constantName = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(constantNameleft, endright, constantName, new ArrayDimension(oleft, endright, index, ArrayDimension.Type.VARIABLE_ARRAY));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_class_constant_array_access",195, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 611: // static_constant_array_access ::= static_constant_array_access T_OPEN_RECT static_scalar_value T_CLOSE_RECT
            {
              Expression RESULT =null;
		int arrayAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int arrayAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression arrayAccess = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(arrayAccessleft, endright, arrayAccess, new ArrayDimension(oleft, endright, index, ArrayDimension.Type.VARIABLE_ARRAY));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_constant_array_access",194, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 612: // static_constant_array_access ::= T_STRING T_OPEN_RECT static_scalar_value T_CLOSE_RECT
            {
              Expression RESULT =null;
		int constantNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int constantNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String constantName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(constantNameleft, endright, new Identifier(constantNameleft, constantNameright, constantName), new ArrayDimension(oleft, endright, index, ArrayDimension.Type.VARIABLE_ARRAY));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_constant_array_access",194, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 613: // static_constant_array_access ::= namespace_name_access T_OPEN_RECT static_scalar_value T_CLOSE_RECT
            {
              Expression RESULT =null;
		int namespaceleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int namespaceright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		NamespaceName namespace = (NamespaceName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(namespaceleft, endright, namespace, new ArrayDimension(oleft, endright, index, ArrayDimension.Type.VARIABLE_ARRAY));

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_constant_array_access",194, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 614: // static_array_creation_with_access ::= static_array_creation array_dimension_with_static_scalar_value
            {
              Expression RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression arr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayDimension ad = (ArrayDimension)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(arrleft, adright, arr, ad);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_array_creation_with_access",193, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 615: // static_array_creation_with_access ::= static_array_creation_with_access array_dimension_with_static_scalar_value
            {
              Expression RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression acc = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayDimension ad = (ArrayDimension)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(accleft, adright, acc, ad);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_array_creation_with_access",193, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 616: // static_array_creation ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Expression expr = new ArrayCreation(startleft, endright, list, ArrayCreation.Type.OLD);
    RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_array_creation",196, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 617: // static_array_creation ::= T_OPEN_RECT static_array_pair_list T_CLOSE_RECT
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Expression expr = new ArrayCreation(startleft, endright, list, ArrayCreation.Type.NEW);
    RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_array_creation",196, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 618: // scalar ::= T_STRING_VARNAME
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Scalar(scalarleft, scalarright, scalar, Scalar.Type.STRING);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",62, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 619: // scalar ::= class_constant
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = classConstant;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",62, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 620: // scalar ::= namespace_name
            {
              Expression RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    if (list.size() == 1) {
        String itemName = ((Identifier)list.get(0)).getName();
        String itemNameLower = itemName.toLowerCase();
        if ("true".equals(itemNameLower) || "false".equals(itemNameLower)) { //NOI18N
            RESULT = new Scalar(listleft, listright, itemName, Scalar.Type.STRING);
        } else {
            RESULT = new NamespaceName(listleft, listright, list, false, false);
        }
    } else {
        RESULT = new NamespaceName(listleft, listright, list, false, false);
    }

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",62, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 621: // scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new NamespaceName(sleft, listright, list, false, true);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",62, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 622: // scalar ::= T_NS_SEPARATOR namespace_name
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new NamespaceName(sleft, listright, list, true, false);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",62, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 623: // scalar ::= common_scalar
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = scalar;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",62, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 624: // scalar ::= T_QUATE encaps_list T_QUATE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Quote quote = new Quote(startleft, endright, list, Quote.Type.QUOTE);
    RESULT = quote;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",62, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 625: // scalar ::= heredoc
            {
              Expression RESULT =null;
		int docleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Quote doc = (Quote)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = doc;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",62, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 626: // heredoc ::= T_START_HEREDOC encaps_list T_END_HEREDOC
            {
              Quote RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Quote hereDoc = new Quote(startleft, endright, list, Quote.Type.HEREDOC);
    RESULT = hereDoc;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("heredoc",115, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 627: // static_array_pair_list ::=
            {
              List RESULT =null;

    List list = new LinkedList();
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",63, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 628: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;

    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",63, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 629: // possible_comma ::=
            {
              Object RESULT =null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("possible_comma",64, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 630: // possible_comma ::= T_COMMA
            {
              Object RESULT =null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("possible_comma",64, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 631: // ampersand ::= T_REFERENCE
            {
              Object RESULT =null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("ampersand",164, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 632: // ampersand ::= T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG
            {
              Object RESULT =null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("ampersand",164, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 633: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
    list.add(element);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",65, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 634: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ArrayElement element = new ArrayElement(valueleft, valueright, value);
    list.add(element);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",65, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 635: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA T_ELLIPSIS static_scalar
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int ellleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int ellright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object ell = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    // PHP 7.4 Spread Operator In Array Expression
    UnpackableArrayElement element = new UnpackableArrayElement(ellleft, valueright, value);
    list.add(element);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",65, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 636: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
    list.add(element);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",65, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 637: // non_empty_static_array_pair_list ::= T_ELLIPSIS static_scalar
            {
              List RESULT =null;
		int ellleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int ellright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object ell = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    // PHP 7.4 Spread Operator In Array Expression
    List list = new LinkedList();
    UnpackableArrayElement element = new UnpackableArrayElement(ellleft, valueright, value);
    list.add(element);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",65, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 638: // non_empty_static_array_pair_list ::= static_scalar
            {
              List RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    ArrayElement element = new ArrayElement(valueleft, valueright, value);
    list.add(element);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",65, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 639: // parenthesis_expr ::= T_OPEN_PARENTHESE expr_without_class_instance T_CLOSE_PARENTHESE
            {
              ParenthesisExpression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ParenthesisExpression parenthesisExpression = new ParenthesisExpression(startleft, endright, expr);
    RESULT = parenthesisExpression;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("parenthesis_expr",79, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 640: // yield_expr ::= T_YIELD
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new YieldExpression(sleft, sright, null);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("yield_expr",71, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 641: // yield_expr ::= T_YIELD yield_expr
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new YieldExpression(sleft, exprright, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("yield_expr",71, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 642: // yield_expr ::= T_YIELD yield_from_expr
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new YieldExpression(sleft, exprright, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("yield_expr",71, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 643: // yield_expr ::= T_YIELD expr
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new YieldExpression(sleft, exprright, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("yield_expr",71, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 644: // yield_expr ::= T_YIELD expr T_DOUBLE_ARROW expr
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new YieldExpression(sleft, expr2right, expr1, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("yield_expr",71, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 645: // yield_expr ::= T_OPEN_PARENTHESE yield_expr T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ParenthesisExpression parenthesisExpression = new ParenthesisExpression(startleft, endright, expr);
    RESULT = parenthesisExpression;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("yield_expr",71, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 646: // yield_from_expr ::= T_YIELD_FROM expr
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new YieldFromExpression(sleft, exprright, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("yield_from_expr",72, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 647: // yield_from_expr ::= T_OPEN_PARENTHESE yield_from_expr T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ParenthesisExpression parenthesisExpression = new ParenthesisExpression(startleft, endright, expr);
    RESULT = parenthesisExpression;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("yield_from_expr",72, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 648: // expr_without_class_instance ::= r_variable
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_class_instance",70, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 649: // expr_without_class_instance ::= expr_without_variable_and_class_instance
            {
              Expression RESULT =null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = ewv;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_class_instance",70, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 650: // expr ::= r_variable
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr",66, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 651: // expr ::= expr_without_variable
            {
              Expression RESULT =null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = ewv;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr",66, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 652: // expr_with_error ::= expr
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_with_error",67, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 653: // expr_with_error ::= error
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ASTErrorExpression(exprleft, exprright);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_with_error",67, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 654: // expr_with_yields ::= expr
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_with_yields",68, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 655: // expr_with_yields ::= yield_expr
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_with_yields",68, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 656: // expr_with_yields ::= yield_from_expr
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_with_yields",68, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 657: // expr_with_yields_and_error ::= expr_with_yields
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_with_yields_and_error",69, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 658: // expr_with_yields_and_error ::= error
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ASTErrorExpression(exprleft, exprright);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_with_yields_and_error",69, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 659: // r_variable ::= variable
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("r_variable",166, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 660: // w_variable ::= variable
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("w_variable",122, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 661: // rw_variable ::= variable
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("rw_variable",168, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 662: // field_or_method_access ::= base_variable_with_function_calls T_OBJECT_OPERATOR object_property method_or_not array_access_or_not variable_properties
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List aa = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = parser.createDispatch(ASTPHP5Parser.Access.NON_STATIC, var, memberProperty, memberPropertyleft, memberPropertyright, paramsList, paramsListright, propertyList, aa);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("field_or_method_access",116, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 663: // field_or_method_access ::= base_variable_with_function_calls T_NULLSAFE_OBJECT_OPERATOR object_property method_or_not array_access_or_not variable_properties
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List aa = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = parser.createDispatch(ASTPHP5Parser.Access.NULLSAFE, var, memberProperty, memberPropertyleft, memberPropertyright, paramsList, paramsListright, propertyList, aa);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("field_or_method_access",116, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 664: // field_or_method_access ::= function_call T_PAAMAYIM_NEKUDOTAYIM static_property method_or_not array_access_or_not variable_properties
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression memberProperty = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List aa = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = parser.createDispatch(ASTPHP5Parser.Access.STATIC, var, memberProperty, memberPropertyleft, memberPropertyright, paramsList, paramsListright, propertyList, aa);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("field_or_method_access",116, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 665: // field_or_method_access ::= base_variable_without_reference_variable T_PAAMAYIM_NEKUDOTAYIM static_property method_or_not array_access_or_not variable_properties
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression memberProperty = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List aa = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = parser.createDispatch(ASTPHP5Parser.Access.STATIC, var, memberProperty, memberPropertyleft, memberPropertyright, paramsList, paramsListright, propertyList, aa);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("field_or_method_access",116, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 666: // field_or_method_access ::= parenthesis_expr T_OBJECT_OPERATOR object_property method_or_not array_access_or_not variable_properties
            {
              VariableBase RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		ParenthesisExpression pe = (ParenthesisExpression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List aa = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    // e.g. ($uvs = new UVS())->method();
    DereferencableVariable var = new DereferencableVariable(peleft, peright, pe.getExpression());
    RESULT = parser.createDispatch(ASTPHP5Parser.Access.NON_STATIC, var, memberProperty, memberPropertyleft, memberPropertyright, paramsList, paramsListright, propertyList, aa);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("field_or_method_access",116, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 667: // field_or_method_access ::= parenthesis_expr T_NULLSAFE_OBJECT_OPERATOR object_property method_or_not array_access_or_not variable_properties
            {
              VariableBase RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		ParenthesisExpression pe = (ParenthesisExpression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List aa = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    // e.g. ($uvs = new UVS())?->method();
    DereferencableVariable var = new DereferencableVariable(peleft, peright, pe.getExpression());
    RESULT = parser.createDispatch(ASTPHP5Parser.Access.NULLSAFE, var, memberProperty, memberPropertyleft, memberPropertyright, paramsList, paramsListright, propertyList, aa);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("field_or_method_access",116, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 668: // field_or_method_access ::= parenthesis_expr T_PAAMAYIM_NEKUDOTAYIM static_property method_or_not array_access_or_not variable_properties
            {
              VariableBase RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		ParenthesisExpression pe = (ParenthesisExpression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression memberProperty = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List aa = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    // e.g. ($uvs = new UVS())::staticMethod();
    DereferencableVariable var = new DereferencableVariable(peleft, peright, pe.getExpression());
    RESULT = parser.createDispatch(ASTPHP5Parser.Access.STATIC, var, memberProperty, memberPropertyleft, memberPropertyright, paramsList, paramsListright, propertyList, aa);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("field_or_method_access",116, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 669: // variable ::= field_or_method_access
            {
              VariableBase RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int accright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase acc = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = acc;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable",140, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 670: // variable ::= base_variable_with_function_calls
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable",140, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 671: // variable_properties ::= variable_properties variable_property
            {
              List RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int variablePropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int variablePropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Pair<Expression,Boolean> variableProperty = (Pair<Expression,Boolean>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    variables.add(variableProperty);
    RESULT = variables;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_properties",137, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 672: // variable_properties ::=
            {
              List RESULT =null;

    RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_properties",137, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 673: // variable_property ::= T_OBJECT_OPERATOR object_property method_or_not array_access_or_not
            {
              Pair<Expression,Boolean> RESULT =null;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List aa = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = parser.createDispatchProperty(ASTPHP5Parser.Access.NON_STATIC, memberProperty, memberPropertyleft, memberPropertyright, paramsList, paramsListright, aa);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_property",170, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 674: // variable_property ::= T_NULLSAFE_OBJECT_OPERATOR object_property method_or_not array_access_or_not
            {
              Pair<Expression,Boolean> RESULT =null;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List aa = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = parser.createDispatchProperty(ASTPHP5Parser.Access.NULLSAFE, memberProperty, memberPropertyleft, memberPropertyright, paramsList, paramsListright, aa);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_property",170, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 675: // variable_property ::= T_PAAMAYIM_NEKUDOTAYIM static_property method_or_not array_access_or_not
            {
              Pair<Expression,Boolean> RESULT =null;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression memberProperty = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List aa = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = parser.createDispatchProperty(ASTPHP5Parser.Access.STATIC, memberProperty, memberPropertyleft, memberPropertyright, paramsList, paramsListright, aa);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_property",170, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 676: // method_or_not ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;

    RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_or_not",136, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 677: // method_or_not ::=
            {
              List RESULT =null;

    RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_or_not",136, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 678: // array_dimension ::= T_OPEN_RECT dim_offset T_CLOSE_RECT
            {
              ArrayDimension RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ArrayDimension(oleft, endright, index, ArrayDimension.Type.VARIABLE_ARRAY);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_dimension",84, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 679: // array_dimension ::= T_CURLY_OPEN dim_offset T_CURLY_CLOSE
            {
              ArrayDimension RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ArrayDimension(oleft, endright, index, ArrayDimension.Type.VARIABLE_HASHTABLE);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_dimension",84, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 680: // array_dimension_with_static_scalar_value ::= T_OPEN_RECT static_scalar_value T_CLOSE_RECT
            {
              ArrayDimension RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ArrayDimension(oleft, endright, index, ArrayDimension.Type.VARIABLE_ARRAY);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_dimension_with_static_scalar_value",85, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 681: // array_dimension_with_static_scalar_value ::= T_CURLY_OPEN static_scalar_value T_CURLY_CLOSE
            {
              ArrayDimension RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ArrayDimension(oleft, endright, index, ArrayDimension.Type.VARIABLE_HASHTABLE);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_dimension_with_static_scalar_value",85, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 682: // array_access_or_not ::= array_dimension
            {
              List RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayDimension ad = (ArrayDimension)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    list.add(ad);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_access_or_not",86, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 683: // array_access_or_not ::= array_access_or_not array_dimension
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayDimension ad = (ArrayDimension)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(ad);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_access_or_not",86, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 684: // array_access_or_not ::=
            {
              List RESULT =null;

    RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_access_or_not",86, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 685: // variable_without_objects ::= reference_variable
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",169, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 686: // variable_without_objects ::= simple_indirect_reference reference_variable
            {
              Variable RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    // the ref_count counts the number of reflection (DOLLAR sign) so now we should
    // accomulate the dolars into reflection variables
    Variable finalVar = var;
    for (int i=0; i<ref_count.intValue(); i++) {
        finalVar = new ReflectionVariable(ref_countright - i - 1, varright, finalVar);
    }
    RESULT = finalVar;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",169, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 687: // static_member ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new StaticFieldAccess(classNameleft, varright, className, var);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_member",171, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 688: // static_member ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new StaticFieldAccess(classNameleft, varright, className, var);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_member",171, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 689: // variable_class_name ::= reference_variable
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_class_name",81, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 690: // base_variable_with_function_calls ::= base_variable
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",197, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 691: // base_variable_with_function_calls ::= function_call
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",197, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 692: // expression_array_access ::= constant_array_access
            {
              Expression RESULT =null;
		int arrayAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression arrayAccess = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = arrayAccess;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expression_array_access",117, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 693: // expression_array_access ::= T_ENCAPSED_AND_WHITESPACE array_dimension
            {
              Expression RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayDimension ad = (ArrayDimension)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(strleft, adright, new Identifier(strleft, strright, str), ad);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expression_array_access",117, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 694: // expression_array_access ::= T_CONSTANT_ENCAPSED_STRING array_dimension
            {
              Expression RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayDimension ad = (ArrayDimension)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(strleft, adright, new Identifier(strleft, strright, str), ad);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expression_array_access",117, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 695: // constant_array_access ::= constant_array_access array_dimension
            {
              Expression RESULT =null;
		int arrayAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int arrayAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression arrayAccess = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayDimension ad = (ArrayDimension)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(arrayAccessleft, adright, arrayAccess, ad);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("constant_array_access",118, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 696: // constant_array_access ::= T_STRING array_dimension
            {
              Expression RESULT =null;
		int constantNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int constantNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String constantName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayDimension ad = (ArrayDimension)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(constantNameleft, adright, new Identifier(constantNameleft, constantNameright, constantName), ad);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("constant_array_access",118, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 697: // constant_array_access ::= namespace_name_access array_dimension
            {
              Expression RESULT =null;
		int namespaceleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int namespaceright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		NamespaceName namespace = (NamespaceName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayDimension ad = (ArrayDimension)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(namespaceleft, adright, namespace, ad);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("constant_array_access",118, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 698: // array_creation_with_access ::= array_creation array_dimension
            {
              VariableBase RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression arr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayDimension ad = (ArrayDimension)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(arrleft, adright, arr, ad);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_creation_with_access",120, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 699: // array_creation_with_access ::= array_creation_with_access array_dimension
            {
              VariableBase RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase acc = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayDimension ad = (ArrayDimension)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(accleft, adright, acc, ad);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_creation_with_access",120, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
default:
throw new Exception("Invalid action number found in internal parse table");
}
}
public final java_cup.runtime.Symbol fakeMethod700to799(
int                        CUP$ASTPHP5Parser$act_num,
java_cup.runtime.lr_parser CUP$ASTPHP5Parser$parser,
java.util.Stack            CUP$ASTPHP5Parser$stack,
int                        CUP$ASTPHP5Parser$top)
throws java.lang.Exception
{
java_cup.runtime.Symbol CUP$ASTPHP5Parser$result;
switch (CUP$ASTPHP5Parser$act_num) {
          case 700: // array_creation ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Expression expr = new ArrayCreation(startleft, endright, list, ArrayCreation.Type.OLD);
    RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_creation",119, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 701: // array_creation ::= T_OPEN_RECT array_pair_list T_CLOSE_RECT
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Expression expr = new ArrayCreation(startleft, endright, list, ArrayCreation.Type.NEW);
    RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_creation",119, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 702: // base_variable ::= reference_variable
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable",187, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 703: // base_variable ::= base_variable_without_reference_variable
            {
              VariableBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase variable = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = variable;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable",187, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 704: // base_variable_without_reference_variable ::= T_OPEN_PARENTHESE anonymous_class T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int clsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int clsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		ClassInstanceCreation cls = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new AnonymousObjectVariable(startleft, endright, cls);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable_without_reference_variable",188, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 705: // base_variable_without_reference_variable ::= T_OPEN_PARENTHESE T_NEW class_name_reference ctor_arguments T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(nleft, ctorright, className, ctor);
    RESULT = new AnonymousObjectVariable(startleft, endright, classInstanceCreation);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable_without_reference_variable",188, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 706: // base_variable_without_reference_variable ::= T_OPEN_PARENTHESE T_CLONE expr T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    CloneExpression clone = new CloneExpression(cleft, exprright, expr);
    RESULT = new AnonymousObjectVariable(startleft, endright, clone);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable_without_reference_variable",188, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 707: // base_variable_without_reference_variable ::= simple_indirect_reference reference_variable
            {
              VariableBase RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    // the ref_count counts the number of reflection (DOLLAR sign) so now we should
    // accomulate the dolars into reflection variables
    VariableBase finalVar = var;
    for (int i=0; i<ref_count.intValue(); i++) {
        finalVar = new ReflectionVariable(ref_countright - i - 1, varright, finalVar);
    }
    RESULT = finalVar;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable_without_reference_variable",188, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 708: // base_variable_without_reference_variable ::= static_member
            {
              VariableBase RESULT =null;
		int staticFieldAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int staticFieldAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase staticFieldAccess = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = staticFieldAccess;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable_without_reference_variable",188, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 709: // base_variable_without_reference_variable ::= array_creation_with_access
            {
              VariableBase RESULT =null;
		int arrayCreationWithAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayCreationWithAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase arrayCreationWithAccess = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = arrayCreationWithAccess;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable_without_reference_variable",188, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 710: // base_variable_without_reference_variable ::= dereferencable_variable
            {
              VariableBase RESULT =null;
		int dereferencableVariableleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int dereferencableVariableright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase dereferencableVariable = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = dereferencableVariable;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable_without_reference_variable",188, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 711: // dereferencable_variable ::= T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new DereferencableVariable(startleft, endright, var);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dereferencable_variable",186, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 712: // dereferencable_variable ::= parenthesis_expr array_dimension
            {
              VariableBase RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		ParenthesisExpression pe = (ParenthesisExpression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayDimension ad = (ArrayDimension)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    // e.g. ((string) $variable->something)[0];
    DereferencableVariable dereferencableVariable = new DereferencableVariable(peleft, peright, pe.getExpression());
    RESULT = new DereferencedArrayAccess(peleft, adright, dereferencableVariable, ad);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dereferencable_variable",186, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 713: // dereferencable_variable ::= dereferencable_variable array_dimension
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayDimension ad = (ArrayDimension)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new DereferencedArrayAccess(varleft, adright, var, ad);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dereferencable_variable",186, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 714: // reference_variable ::= reference_variable array_dimension
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayDimension ad = (ArrayDimension)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Variable var = new ArrayAccess(varNameleft, adright, varName, ad);
    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reference_variable",80, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 715: // reference_variable ::= compound_variable
            {
              Variable RESULT =null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable comp_var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = comp_var;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reference_variable",80, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 716: // compound_variable ::= tracked_variable
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("compound_variable",82, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 717: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE
            {
              Variable RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ReflectionVariable var = new ReflectionVariable(startleft, endright, expr);
    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("compound_variable",82, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 718: // dim_offset ::=
            {
              Expression RESULT =null;

    RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dim_offset",83, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 719: // dim_offset ::= expr
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dim_offset",83, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 720: // static_property ::= variable_without_objects
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_property",87, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 721: // static_property ::= static_reference_constant
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_property",87, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 722: // object_property ::= object_dim_list
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("object_property",88, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 723: // object_property ::= variable_without_objects
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("object_property",88, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 724: // object_dim_list ::= object_dim_list array_dimension
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayDimension ad = (ArrayDimension)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Variable varArray = new ArrayAccess(varleft, adright, var, ad);
    RESULT = varArray;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("object_dim_list",89, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 725: // object_dim_list ::= variable_name
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("object_dim_list",89, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 726: // variable_name ::= string_st
            {
              VariableBase RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Variable(varNameleft, varNameright, varName);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_name",90, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 727: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ReflectionVariable(startleft, endright, expr);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_name",90, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 728: // simple_indirect_reference ::= T_DOLLAR
            {
              Integer RESULT =null;

    RESULT = Integer.valueOf(1);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",91, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 729: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR
            {
              Integer RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;

    RESULT = Integer.valueOf(1 + ref.intValue());

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",91, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 730: // array_pair_list ::= non_empty_array_pair_list
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_pair_list",92, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 731: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA possible_array_pair
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int pairleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayElement pair = (ArrayElement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    if(pair != null) {
        list.add(pair);
    }
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",95, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 732: // non_empty_array_pair_list ::= possible_array_pair
            {
              List RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayElement pair = (ArrayElement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    if(pair != null) {
        list.add(pair);
    }
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",95, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 733: // possible_array_pair ::=
            {
              ArrayElement RESULT =null;

    RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("possible_array_pair",93, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 734: // possible_array_pair ::= array_pair
            {
              ArrayElement RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayElement pair = (ArrayElement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = pair;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("possible_array_pair",93, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 735: // array_pair ::= expr T_DOUBLE_ARROW expr
            {
              ArrayElement RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
    RESULT = element;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_pair",94, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 736: // array_pair ::= expr
            {
              ArrayElement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ArrayElement element = new ArrayElement(exprleft, exprright, expr);
    RESULT = element;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_pair",94, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 737: // array_pair ::= T_ELLIPSIS expr
            {
              ArrayElement RESULT =null;
		int ellleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int ellright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object ell = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    // PHP 7.4 Spread Operator In Array Expression
    // https://wiki.php.net/rfc/spread_operator_for_array
    UnpackableArrayElement unpack = new UnpackableArrayElement(ellleft, exprright, expr);
    RESULT = unpack;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_pair",94, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 738: // array_pair ::= expr T_DOUBLE_ARROW ampersand w_variable
            {
              ArrayElement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Reference value = new Reference(startleft, varright, var);
    ArrayElement element = new ArrayElement(exprleft, varright, expr, value);
    RESULT = element;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_pair",94, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 739: // array_pair ::= ampersand w_variable
            {
              ArrayElement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Reference ref = new Reference(startleft, varright, var);
    ArrayElement element = new ArrayElement(startleft, varright, ref);
    RESULT = element;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_pair",94, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 740: // array_pair ::= expr T_DOUBLE_ARROW T_LIST T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE
            {
              ArrayElement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ListVariable value = new ListVariable(startleft, endright, varList, ListVariable.SyntaxType.OLD);
    ArrayElement element = new ArrayElement(exprleft, endright, expr, value);
    RESULT = element;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_pair",94, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 741: // array_pair ::= T_LIST T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE
            {
              ArrayElement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ListVariable vars = new ListVariable(startleft, endright, varList, ListVariable.SyntaxType.OLD);
    ArrayElement element = new ArrayElement(startleft, endright, vars);
    RESULT = element;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_pair",94, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 742: // encaps_list ::= encaps_list encaps_var
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    list.add(var);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_list",96, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 743: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.Type.UNKNOWN : Scalar.Type.STRING);
    list.add(scalar);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_list",96, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 744: // encaps_list ::=
            {
              List RESULT =null;

    RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_list",96, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 745: // encaps_var ::= tracked_variable
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var",97, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 746: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT
            {
              VariableBase RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Variable var = new ArrayAccess(varNameleft, endright, varName, new ArrayDimension(oleft, endright, index, ArrayDimension.Type.VARIABLE_ARRAY));
    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var",97, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 747: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Variable property = new Variable(stringleft, stringright, string);
    VariableBase dispatch = parser.createDispatch(var, property, ASTPHP5Parser.Access.NON_STATIC);
    RESULT = dispatch;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var",97, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 748: // encaps_var ::= tracked_variable T_NULLSAFE_OBJECT_OPERATOR string_st
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Variable property = new Variable(stringleft, stringright, string);
    VariableBase dispatch = parser.createDispatch(var, property, ASTPHP5Parser.Access.NULLSAFE);
    RESULT = dispatch;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var",97, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 749: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ReflectionVariable var = new ReflectionVariable(startleft, endright, expr);
    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var",97, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 750: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Variable var = new Variable(varNameleft, varNameright, varName);
    Variable indexedVar = new ArrayAccess(startleft, endright, var, new ArrayDimension(oleft, cright, index, ArrayDimension.Type.VARIABLE_ARRAY));
    RESULT = indexedVar;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var",97, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 751: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    ReflectionVariable ref = new ReflectionVariable(startleft, endright, var);
    RESULT = ref;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var",97, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 752: // encaps_var_offset ::= string_st
            {
              Expression RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier id = new Identifier(stringleft, stringright, string);
    RESULT = id;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",98, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 753: // encaps_var_offset ::= T_NUM_STRING
            {
              Expression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Scalar scalar = new Scalar(numleft,numright, num, Scalar.Type.REAL);
    RESULT = scalar;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",98, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 754: // encaps_var_offset ::= tracked_variable
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",98, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 755: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables possible_comma T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier id = new Identifier(startleft, startright, "isset");
    FunctionName name = new FunctionName(startleft, startright, id);
    FunctionInvocation result = new FunctionInvocation(startleft, endright, name, varList);
    RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",99, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 756: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier id = new Identifier(startleft, startright, "empty");
    FunctionName name = new FunctionName(startleft, startright, id);
    LinkedList varList = new LinkedList();
    varList.add(var);
    FunctionInvocation result = new FunctionInvocation(startleft, endright, name, varList);
    RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",99, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 757: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE expr_without_variable T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier id = new Identifier(startleft, startright, "empty");
    FunctionName name = new FunctionName(startleft, startright, id);
    LinkedList exprList = new LinkedList();
    exprList.add(expr);
    FunctionInvocation result = new FunctionInvocation(startleft, endright, name, exprList);
    RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",99, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 758: // internal_functions_in_yacc ::= T_INCLUDE expr
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Include result = new Include(includeleft, exprright, expr, Include.Type.INCLUDE);
    RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",99, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 759: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Include result = new Include(includeleft, exprright, expr, Include.Type.INCLUDE_ONCE);
    RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",99, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 760: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Identifier id = new Identifier(startleft, startright, "eval");
    FunctionName name = new FunctionName(startleft, startright, id);
    LinkedList exprList = new LinkedList();
    exprList.add(expr);
    FunctionInvocation result = new FunctionInvocation(startleft, endright, name, exprList);
    RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",99, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 761: // internal_functions_in_yacc ::= T_REQUIRE expr
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Include result = new Include(includeleft, exprright, expr, Include.Type.REQUIRE);
    RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",99, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 762: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    Include result = new Include(includeleft, exprright, expr, Include.Type.REQUIRE_ONCE);
    RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",99, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 763: // isset_variables ::= isset_variable
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    List list = new LinkedList();
    list.add(var);
    RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("isset_variables",172, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 764: // isset_variables ::= isset_variables T_COMMA isset_variable
            {
              List RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    varList.add(var);
    RESULT = varList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("isset_variables",172, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 765: // isset_variable ::= variable
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("isset_variable",173, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 766: // isset_variable ::= expression_array_access
            {
              Expression RESULT =null;
		int arrayAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression arrayAccess = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = arrayAccess;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("isset_variable",173, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 767: // isset_variable ::= class_name T_PAAMAYIM_NEKUDOTAYIM constant_array_access
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int arrayAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression arrayAccess = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new StaticConstantAccess(classNameleft, arrayAccessright, className, arrayAccess);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("isset_variable",173, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 768: // isset_variable ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM constant_array_access
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int arrayAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression arrayAccess = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new StaticConstantAccess(classNameleft, arrayAccessright, className, arrayAccess);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("isset_variable",173, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 769: // class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM reference_constant
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int constantleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression constant = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new StaticConstantAccess(classNameleft, constantright, className, constant);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_constant",183, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 770: // class_constant ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM reference_constant
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int constantleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression constant = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new StaticConstantAccess(classNameleft, constantright, className, constant);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_constant",183, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 771: // reference_constant ::= reference_constant array_dimension
            {
              Expression RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression constant = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ArrayDimension ad = (ArrayDimension)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new ExpressionArrayAccess(constantleft, adright, constant, ad);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reference_constant",184, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 772: // reference_constant ::= identifier
            {
              Expression RESULT =null;
		int constantNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int constantNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Identifier constantName = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = constantName;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reference_constant",184, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 773: // tracked_variable ::= T_VARIABLE
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = new Variable(varNameleft, varNameright, varName);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("tracked_variable",174, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 774: // optional_tracked_variable ::=
            {
              Variable RESULT =null;

    RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("optional_tracked_variable",175, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 775: // optional_tracked_variable ::= tracked_variable
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("optional_tracked_variable",175, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 776: // string_st ::= T_STRING
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = value;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("string_st",100, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 777: // string_st ::= T_DEFINE
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = value;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("string_st",100, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 778: // anonymous_class ::= T_NEW T_CLASS ctor_arguments extends_from implements_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE
            {
              ClassInstanceCreation RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression superClass = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    final int counter = parser.incrementAndGetAnonymousClassCounter();
    Block block = new Block(blockStartleft, blockEndright, statementList);
    ClassInstanceCreation classInstance = ClassInstanceCreation.anonymous(parser.getFileName(), counter, startleft, blockEndright, cleft, ctor, superClass, interfaces, block);
    RESULT = classInstance;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("anonymous_class",121, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 779: // anonymous_class ::= T_NEW attributes T_CLASS ctor_arguments extends_from implements_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE
            {
              ClassInstanceCreation RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).value;
		int attributesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int attributesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		List<Attribute> attributes = (List<Attribute>)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression superClass = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;

    final int counter = parser.incrementAndGetAnonymousClassCounter();
    Block block = new Block(blockStartleft, blockEndright, statementList);
    ClassInstanceCreation classInstance = ClassInstanceCreation.anonymous(parser.getFileName(), counter, startleft, blockEndright, cleft, ctor, superClass, interfaces, block, attributes);
    RESULT = classInstance;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("anonymous_class",121, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
default:
throw new Exception("Invalid action number found in internal parse table");
}
}

}