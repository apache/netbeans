<?xml version='1.0' encoding='ISO-8859-1' ?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->

<project name="antlr-lang" default="compile">
    <!-- The project operates in the same directory
         where the grammar files are located so that Antlr
         can place the resulting sources there.
         The target build script that calls this build script
         must make sure that the following properties are set:
           ${lexer.module.root} to dir that corresponds to root dir of the lexer module - ".../nb_all/lexer"
           ${grammar.name} to name of Antlr .g grammar file without ".g" suffix e.g. "Calc"
           ${grammar.pkg} to package that corresponds to location of .g file e.g. "org.netbeans.modules.lexer.demo.antlr"
           ${grammar.root} directory to be added to classpath in order to compile
             the generated java classes located in the same package as grammar file.
           ${tokentypes.ignore} can optionally be set to "true" to ignore the information
             about the tokens contained in the xxxTokenTypes class
             generated by antlr.
           ${lang.description.xml.ignore} can optionally be set to "true"
             to ignore the information contained in the language description xml file.
           ${scanner.src.postprocess} can optionally be set to generate
             a code that is more optimized. However there are some rules
             that need to be kept after setting this option. They are described
             at http://lexer.netbeans.org/doc/antlr.html.
      -->
    <property name="antlr.home" location="${lexer.module.root}/external"/>

    <property name="grammar.srcname" value="${grammar.name}.g"/>
    <property name="lexer.name" value="${grammar.name}Lexer"/>
    <property name="lexer.classname" value="${grammar.pkg}.${lexer.name}"/>
    <property name="lexer.srcname" value="${lexer.name}.java"/>
    <property name="lang.name" value="${grammar.name}Language"/>
    <property name="lang.classname" value="${grammar.pkg}.${lang.name}"/>
    <property name="lang.srcname" value="${lang.name}.java"/>
    <property name="lang.description.xml" value="${lang.name}.xml"/>
    <property name="scanner.name" value="${grammar.name}Scanner"/>
    <property name="scanner.classname" value="${grammar.pkg}.${scanner.name}"/>
    <property name="scanner.srcname" value="${scanner.name}.java"/>
    <property name="tokentypes.name" value="${scanner.name}TokenTypes"/>
    <property name="tokentypes.classname" value="${grammar.pkg}.${tokentypes.name}"/>
    <property name="tokentypes.srcname" value="${tokentypes.name}.java"/>
    <property name="tokentypes.txt" value="${tokentypes.name}.txt"/>
    <property name="test.desc.classname" value="${grammar.pkg}.${grammar.name}TestDescription"/>
    <property name="demo.inputfile" value="${grammar.name}DemoInput.txt"/>

    <target name="check-scanner-src-uptodate">
      <uptodate targetfile="${scanner.srcname}" property="scanner.src.uptodate">
        <srcfiles dir="." includes="${grammar.srcname}"/>
      </uptodate>
    </target>

    <!-- Compound target for complete generation and postprocessing
         of xxxScanner.java
      --> 
    <target name="generate-scanner"
            depends="check-scanner-src-uptodate, run-antlr, post-process-scanner"
            description="Generate scanner source"/>

    <target name="run-antlr"
            depends="check-scanner-src-uptodate"
            unless="scanner.src.uptodate"
            description="Run Antlr to generate java sources from the grammar">
      <java classname="antlr.Tool" dir="${basedir}" fork="true">
        <arg value="${grammar.srcname}"/>
        <classpath>
          <fileset dir="${antlr.home}">
            <include name="antlr*.jar"/>
            <include name="lexer-gen-antlr*.jar"/>
          </fileset>
        </classpath>
      </java>
    </target>

    <target name="post-process-scanner" depends="run-antlr"
            if="scanner.src.postprocess"
            unless="scanner.src.uptodate"
            description="Post process generated scanner source">
        <!-- Extend AntlrCharScanner instead of antlr.CharScanner -->
        <replace
            dir="."
            includes="${scanner.srcname}"
            token=" extends antlr.CharScanner implements "
            value=" extends org.netbeans.spi.lexer.antlr.AntlrCharScanner implements "
        />

        <!-- Comment out setting of the token text as it creates a new java.lang.String
             instance. The org.netbeans.spi.lexer.antlr.AntlrCharScanner.makeToken() assigns
             the length of the current token into org.netbeans.spi.lexer.antlr.AntlrToken.
             Knowing the length of the token is sufficient for the lexer module to work.
          -->
        <replace
            dir="."
            includes="${scanner.srcname}"
            token="_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));"
            value="// _token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));"
        />
    </target>

    <target name="check-language-src-uptodate" depends="generate-scanner">
      <uptodate targetfile="${lang.srcname}" property="language-src-uptodate">
        <srcfiles dir=".">
          <include name="${scanner.srcname}"/>
          <include name="${lang.description.xml}"/>
          <include name="${tokentypes.srcname}}"/>
        </srcfiles>
      </uptodate>
    </target>

    <target name="generate-language"
            depends="check-language-src-uptodate"
            unless="language-src-uptodate"
            description="Generate Language class source">

      <!-- Force recompilation of classes in the current dir such as e.g. xxxLexer
           that could be compiled with the old xxxLanguage class and still up-to-date.
           As the class resolves numeric constants from other classes
           at compile time the xxxLexer could use wrong constants.
       -->
      <delete quiet="true">
        <fileset dir=".">
          <include name="**/*.class"/>
        </fileset>
      </delete>

      <taskdef name="stringReplace" classname="org.netbeans.lexer.gen.StringReplace"
               classpath="${lexer.module.root}/gen/build/antclasses"/>

      <stringReplace replaceWhat="." replaceWith="/" replaceIn="${grammar.pkg}" property="grammar.pkgslash"/>

      <javac srcdir="${grammar.root}" destdir="${grammar.root}"
             includes="${grammar.pkgslash}/${tokentypes.srcname}"
             deprecation="${build.compiler.deprecation}"
             debug="${build.compiler.debug}">
      </javac>

      <taskdef name="generateLanguageSource"
               classname="org.netbeans.lexer.gen.AntlrGenerateLanguageSource">
        <classpath>
          <pathelement path="${lexer.module.root}/gen/build/antclasses"/>
          <pathelement location="${lexer.module.root}/gen/build/classes"/>
          <pathelement location="${lexer.module.root}/build/classes"/>
          <pathelement location="${lexer.module.root}/tmp"/>
          <pathelement location="${grammar.root}"/>
          <fileset dir="${antlr.home}">
            <include name="antlr*.jar"/>
            <include name="lexer-gen-antlr*.jar"/>
          </fileset>
        </classpath>
      </taskdef>

      <generateLanguageSource
           languageClassName="${lang.classname}"
           lexerClassName="${lexer.classname}"
           tokenTypesClassName="${tokentypes.classname}"
           languageDescriptionFile="${lang.description.xml}"
           ignoreTokenTypes="${tokentypes.ignore}"
           ignoreLanguageDescriptionFile="${lang.description.xml.ignore}"
           languageSourceFile="${lang.srcname}"
       />
    </target>

    <target name="compile" depends="generate-language">
      <taskdef name="stringReplace" classname="org.netbeans.lexer.gen.StringReplace"
               classpath="${lexer.module.root}/gen/build/antclasses"/>

      <stringReplace replaceWhat="." replaceWith="/" replaceIn="${grammar.pkg}" property="grammar.pkgslash"/>

      <javac srcdir="${grammar.root}" destdir="${grammar.root}"
             includes="${grammar.pkgslash}/"
             deprecation="${build.compiler.deprecation}"
             debug="${build.compiler.debug}">
        <classpath>
          <pathelement location="${lexer.module.root}/build/classes"/>
          <pathelement location="${lexer.module.root}/tmp"/>
          <pathelement location="${grammar.root}"/>
          <fileset dir="${antlr.home}">
            <include name="antlr*.jar"/>
          </fileset>
        </classpath>
      </javac>
    </target>
    
    <target name="demo" depends="compile">
      <java classname="org.netbeans.modules.lexer.demo.EditorPaneDemo" dir="${basedir}" fork="true">
        <arg value="${lang.classname}"/>
        <arg value="${demo.inputfile}"/>
        <classpath>
          <pathelement location="${lexer.module.root}/build/classes"/>
          <pathelement location="${lexer.module.root}/demo/build/classes"/>
          <pathelement location="${grammar.root}"/>
          <fileset dir="${antlr.home}">
            <include name="antlr*.jar"/>
          </fileset>
        </classpath>
      </java>
    </target>
    
    <target name="test" depends="compile">
      <java classname="org.netbeans.modules.lexer.demo.LexerRandomTest" dir="${basedir}" fork="true">
        <arg value="${test.desc.classname}"/>
        <classpath>
          <pathelement location="${lexer.module.root}/build/classes"/>
          <pathelement location="${lexer.module.root}/demo/build/classes"/>
          <pathelement location="${grammar.root}"/>
          <fileset dir="${antlr.home}">
            <include name="antlr*.jar"/>
          </fileset>
        </classpath>
      </java>
    </target>

    <target name="generate-language-description" depends="compile">
      <taskdef name="generateLanguageDescription"
               classname="org.netbeans.lexer.gen.AntlrGenerateLanguageDescription">
        <classpath>
          <pathelement path="${lexer.module.root}/gen/build/antclasses"/>
          <pathelement location="${lexer.module.root}/gen/build/classes"/>
          <pathelement location="${lexer.module.root}/build/classes"/>
          <pathelement location="${grammar.root}"/>
        </classpath>
      </taskdef>

      <generateLanguageDescription
             tokenTypesClassName="${tokentypes.classname}"
             languageDescriptionFile="${lang.description.xml}"
      />
    </target>

    <target name="clean">
      <delete quiet="true">
        <fileset dir=".">
          <include name="**/*.class"/>
          <include name="${scanner.srcname}"/>
          <include name="${lang.srcname}"/>
          <include name="${tokentypes.srcname}"/>
          <include name="${tokentypes.txt}"/>
        </fileset>
      </delete>
    </target>

</project>
