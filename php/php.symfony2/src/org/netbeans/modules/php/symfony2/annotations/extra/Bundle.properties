# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

RouteTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Route</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@Route</code> annotation maps a route pattern with a controller.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;\n\
\n\
class PostController extends Controller {\n\
\    /**\n\
\     * @Route("/")\n\
\     */\n\
\    public function indexAction() {\n\
\        // ...\n\
\    }\n\
}\n\
</code></pre>\n\
<p>The <code>index</code> action of the <code>Post</code> controller is now mapped to the <code>/</code> URL. This is equivalent to the following YAML configuration.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
blog_home:\n\
\    pattern:  /\n\
\    defaults: { _controller: SensioBlogBundle:Post:index }\n\
</code></pre>\n\
<p>Like any route pattern, you can define placeholders, requirements, and default values.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Route("/{id}", requirements={"id" = "\d+"}, defaults={"foo" = "bar"})\n\
\ */\n\
public function showAction($id) {\n\
}\n\
</code></pre>\n\
<p>You can also match more than one URL by defining additional <code>@Route</code> annotations.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Route("/", defaults={"id" = 1})\n\
\ * @Route("/{id}")\n\
\ */\n\
public function showAction($id) {\n\
}\n\
</code></pre>\n\
<p style="font-weight: bold; font-size: 1.1em">Activation</p>\
<p>The routes need to be imported to be active as any other routing resources (note the annotation type).</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
# app/config/routing.yml\n\
\n\
# import routes from a controller class\n\
post:\n\
\    resource: "@SensioBlogBundle/Controller/PostController.php"\n\
\    type:     annotation\n\
</code></pre>\n\
<p>You can also import a whole directory.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
# import routes from a controller directory\n\
blog:\n\
\    resource: "@SensioBlogBundle/Controller"\n\
\    type:     annotation\n\
</code></pre>\n\
<p>As for any other resource, you can "mount" the routes under a given prefix.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
post:\n\
\    resource: "@SensioBlogBundle/Controller/PostController.php"\n\
\    prefix:   /blog\n\
\    type:     annotation\n\
</code></pre>\n\
<p style="font-weight: bold; font-size: 1.1em">Route Name</p>\
<p>A route defined with the <code>@Route</code> annotation is given a default name composed of the bundle name, the controller name and the action name. \
That would be <code>sensio_blog_post_index</code> for the above example.</p>\
<p>The <code>name</code> attribute can be used to override this default route name.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Route("/", name="blog_home")\n\
\ */\n\
public function indexAction() {\n\
\    // ...\n\
}\n\
</code></pre>\n\
<p style="font-weight: bold; font-size: 1.1em">Route Prefix</p>\
<p>A <code>@Route</code> annotation on a controller class defines a prefix for all action routes.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Route("/blog")\n\
\ */\n\
class PostController extends Controller {\n\
\    /**\n\
\     * @Route("/{id}")\n\
\     */\n\
\    public function showAction($id) {\n\
\    }\n\
}\n\
</code></pre>\n\
<p>The <code>show</code> action is now mapped to the <code>/blog/{id}</code> pattern.</p>
MethodTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Method</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>There is a shortcut <code>@Method</code> annotation to specify the HTTP method allowed for the route. To use it, import the <code>Method</code> annotation namespace.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;\n\
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;\n\
\n\
/**\n\
 * @Route("/blog")\n\
 */\n\
class PostController extends Controller {\n\
    /**\n\
     * @Route("/edit/{id}")\n\
     * @Method({"GET", "POST"})\n\
     */\n\
    public function editAction($id) {\n\
    }\n\
}\n\
</code></pre>\n\
<p>The <code>edit</code> action is now mapped to the <code>/blog/edit/{id}</code> pattern if the HTTP method used is either <code>GET</code> or <code>POST</code>.</p>\
<p>The <code>@Method</code> annotation is only considered when an action is annotated with <code>@Route</code>.</p>
ParamConverterTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@ParamConverter</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@ParamConverter</code> annotation calls <i>converters</i> to convert request parameters to objects. These objects are stored as request attributes \
and so they can be injected as controller method arguments.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;\n\
use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;\n\
\n\
/**\n\
\ * @Route("/blog/{id}")\n\
\ * @ParamConverter("post", class="SensioBlogBundle:Post")\n\
\ */\n\
public function showAction(Post $post) {\n\
}\n\
</code></pre>\n\
<p>Several things happens under the hood:</p>\
<ul>\
  <li>The converter tries to get a <code>SensioBlogBundle:Post</code> object from the request attributes (request attributes comes from route placeholders -- here <code>id</code>);</li>\
  <li>If no <code>Post</code> object is found, a <code>404</code> <code>Response</code> is generated;</li>\
  <li>If a <code>Post</code> object is found, a new <code>post</code> request attribute is defined (accessible via <code>$request->attributes->get('post')</code>);</li>\
  <li>As for any other request attribute, it is automatically injected in the controller when present in the method signature.</li>\
</ul>\
<p>If you use type hinting as in the example above, you can even omit the <code>@ParamConverter</code> annotation altogether.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
// automatic with method signature\n\
public function showAction(Post $post) {\n\
}\n\
</code></pre>\n\
<p style="font-weight: bold; font-size: 1.1em">Built-in Converters</p>\
<p>The bundle has only one built-in converter, the <code>Doctrine</code> one.</p>\
<p><b><code>Doctrine</code> Converter</b></p>\
<p>By default, the <code>Doctrine</code> converter uses the default entity manager. This can be configured with the <code>entity_manager</code> option.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;\n\
use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;\n\
\n\
/**\n\
\ * @Route("/blog/{id}")\n\
\ * @ParamConverter("post", class="SensioBlogBundle:Post", options={"entity_manager" = "foo"})\n\
\ */\n\
public function showAction(Post $post) {\n\
}\n\
</code></pre>\n\
<p style="font-weight: bold; font-size: 1.1em">Creating a Converter</p>\
<p>All converters must implement the <code>ParamConverterInterface</code>.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
namespace Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter;\n\
\n\
use Sensio\Bundle\FrameworkExtraBundle\Configuration\ConfigurationInterface;\n\
use Symfony\Component\HttpFoundation\Request;\n\
\n\
interface ParamConverterInterface {\n\
\    function apply(Request $request, ConfigurationInterface $configuration);\n\
\n\
\    function supports(ConfigurationInterface $configuration);\n\
}\n\
</code></pre>\n\
<p>The <code>supports()</code> method must return <code>true</code> when it is able to convert the given configuration (a <code>ParamConverter</code> instance).</p>\
<p>The <code>ParamConverter</code> instance has three information about the annotation:</p>\
<table border="0">\
<tr>\
    <td valign="top"><b><code>name</code></b></td>\
    <td>The attribute name.</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>class</code></b></td>\
    <td>The attribute class name (can be any string representing a class name).</td>\
</tr>\
<tr>\
    <td valign="top"><b><code>options</code></b></td>\
    <td>An array of options.</td>\
</tr>\
</table>\n\
<p>The <code>apply()</code> method is called whenever a configuration is supported. Based on the request attributes, it should set an attribute named \
<code>$configuration->getName()</code>, which stores an object of class <code>$configuration->getClass()</code>.</p>
TemplateTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Template</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@Template</code> annotation associates a controller with a template name.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;\n\
\n\
/**\n\
\ * @Template("SensioBlogBundle:Post:show")\n\
\ */\n\
public function showAction($id) {\n\
\    // get the Post\n\
\    $post = ...;\n\
\n\
\    return array('post' => $post);\n\
}\n\
</code></pre>\n\
<p>When using the <code>@Template</code> annotation, the controller should return an array of parameters to pass to the view instead of a <code>Response</code> object.</p>\
<p>If the template is named after the controller and action names, which is the case for the above example, you can even omit the annotation value.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Template\n\
\ */\n\
public function showAction($id) {\n\
\    // get the Post\n\
\    $post = ...;\n\
\n\
\    return array('post' => $post);\n\
}\n\
</code></pre>\n\
<p>And if the only parameters to pass to the template are method arguments, you can use the <code>vars</code> attribute instead of returning an array. \
This is very useful in combination with the <code>@ParamConverter</code> annotation.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @ParamConverter("post", class="SensioBlogBundle:Post")\n\
\ * @Template("SensioBlogBundle:Post:show", vars={"post"})\n\
\ */\n\
public function showAction(Post $post) {\n\
}\n\
</code></pre>\n\
<p>which, thanks to conventions, is equivalent to the following configuration.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Template(vars={"post"})\n\
\ */\n\
public function showAction(Post $post) {\n\
}\n\
</code></pre>\n\
<p>You can make it even more concise as all method arguments are automatically passed to the template if the method returns <code>null</code> and no <code>vars</code> attribute is defined.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Template\n\
\ */\n\
public function showAction(Post $post) {\n\
}\n\
</code></pre>
CacheTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Cache</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@Cache</code> annotation makes it easy to define HTTP caching.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Cache;\n\
\n\
/**\n\
\ * @Cache(expires="tomorrow")\n\
\ */\n\
public function indexAction() {\n\
}\n\
</code></pre>\n\
<p>You can also use the annotation on a class to define caching for all methods.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Cache(expires="tomorrow")\n\
\ */\n\
class BlogController extends Controller {\n\
}\n\
</code></pre>\n\
<p>When there is a conflict between the class configuration and the method configuration, the latter overrides the former.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @Cache(expires="tomorrow")\n\
\ */\n\
class BlogController extends Controller {\n\
\    /**\n\
\     * @Cache(expires="+2 days")\n\
\     */\n\
\    public function indexAction() {\n\
\    }\n\
}\n\
</code></pre>\n\
<p style="font-weight: bold; font-size: 1.1em">Attributes</p>\
<p>Here is a list of accepted attributes and their HTTP header equivalent:</p>\
<table border="0">\
<tr>\
    <td><code>@Cache(expires="tomorrow")</code></td>\
    <td><code>$response->setExpires()</code></td>\
</tr>\
<tr>\
    <td><code>@Cache(smaxage="15")</code></td>\
    <td><code>$response->setSharedMaxAge()</code></td>\
</tr>\
<tr>\
    <td><code>@Cache(maxage="15")</code></td>\
    <td><code>$response->setMaxAge()</code></td>\
</tr>\
</table>
