// $ANTLR 3.5.2 /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g 2023-02-04 23:18:19

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// DO NOT EDIT THIS FILE MANUALLY!
// SEE Css3.g FOR INSTRUCTIONS

package org.netbeans.modules.css.lib;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.debug.*;
import java.io.IOException;
@SuppressWarnings("all")
public class Css3Parser extends DebugParser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ANGLE", "AT_IDENT", "AT_SIGN", 
		"B", "BEGINS", "BOTTOMCENTER_SYM", "BOTTOMLEFTCORNER_SYM", "BOTTOMLEFT_SYM", 
		"BOTTOMRIGHTCORNER_SYM", "BOTTOMRIGHT_SYM", "C", "CDC", "CDO", "CHARSET_SYM", 
		"COLON", "COMMA", "COMMENT", "CONTAINS", "COUNTER_STYLE_SYM", "CP_DOTS", 
		"CP_EQ", "CP_NOT_EQ", "D", "DASHMATCH", "DCOLON", "DIMENSION", "DOT", 
		"E", "EMS", "ENDS", "ESCAPE", "EXCLAMATION_MARK", "EXS", "F", "FONT_FACE_SYM", 
		"FREQ", "G", "GEN", "GREATER", "GREATER_OR_EQ", "H", "HASH", "HASH_SYMBOL", 
		"HEXCHAR", "HEXCHAR_WILDCARD", "I", "IDENT", "IMPORTANT_SYM", "IMPORT_SYM", 
		"INCLUDES", "INVALID", "J", "K", "L", "LBRACE", "LBRACKET", "LEFTBOTTOM_SYM", 
		"LEFTMIDDLE_SYM", "LEFTTOP_SYM", "LENGTH", "LESS", "LESS_AND", "LESS_JS_STRING", 
		"LESS_OR_EQ", "LESS_REST", "LINE_COMMENT", "LPAREN", "M", "MEDIA_SYM", 
		"MINUS", "MOZ_DOCUMENT_SYM", "MOZ_DOMAIN", "MOZ_REGEXP", "MOZ_URL_PREFIX", 
		"N", "NAME", "NAMESPACE_SYM", "NL", "NMCHAR", "NMSTART", "NONASCII", "NOT", 
		"NUMBER", "O", "OPEQ", "P", "PAGE_SYM", "PERCENTAGE", "PERCENTAGE_SYMBOL", 
		"PIPE", "PLUS", "Q", "R", "RBRACE", "RBRACKET", "REM", "RESOLUTION", "RIGHTBOTTOM_SYM", 
		"RIGHTMIDDLE_SYM", "RIGHTTOP_SYM", "RPAREN", "S", "SASS_AT_ROOT", "SASS_CONTENT", 
		"SASS_DEBUG", "SASS_DEFAULT", "SASS_EACH", "SASS_ELSE", "SASS_ELSEIF", 
		"SASS_ERROR", "SASS_EXTEND", "SASS_EXTEND_ONLY_SELECTOR", "SASS_FOR", 
		"SASS_FORWARD", "SASS_FUNCTION", "SASS_GLOBAL", "SASS_IF", "SASS_INCLUDE", 
		"SASS_MIXIN", "SASS_OPTIONAL", "SASS_RETURN", "SASS_USE", "SASS_VAR", 
		"SASS_WARN", "SASS_WHILE", "SEMI", "SOLIDUS", "STAR", "STRING", "SUPPORTS_SYM", 
		"T", "TILDE", "TIME", "TOPCENTER_SYM", "TOPLEFTCORNER_SYM", "TOPLEFT_SYM", 
		"TOPRIGHTCORNER_SYM", "TOPRIGHT_SYM", "U", "UNICODE", "URANGE", "URI", 
		"URL", "V", "VARIABLE", "W", "WEBKIT_KEYFRAMES_SYM", "WS", "X", "Y", "Z"
	};
	public static final int EOF=-1;
	public static final int A=4;
	public static final int ANGLE=5;
	public static final int AT_IDENT=6;
	public static final int AT_SIGN=7;
	public static final int B=8;
	public static final int BEGINS=9;
	public static final int BOTTOMCENTER_SYM=10;
	public static final int BOTTOMLEFTCORNER_SYM=11;
	public static final int BOTTOMLEFT_SYM=12;
	public static final int BOTTOMRIGHTCORNER_SYM=13;
	public static final int BOTTOMRIGHT_SYM=14;
	public static final int C=15;
	public static final int CDC=16;
	public static final int CDO=17;
	public static final int CHARSET_SYM=18;
	public static final int COLON=19;
	public static final int COMMA=20;
	public static final int COMMENT=21;
	public static final int CONTAINS=22;
	public static final int COUNTER_STYLE_SYM=23;
	public static final int CP_DOTS=24;
	public static final int CP_EQ=25;
	public static final int CP_NOT_EQ=26;
	public static final int D=27;
	public static final int DASHMATCH=28;
	public static final int DCOLON=29;
	public static final int DIMENSION=30;
	public static final int DOT=31;
	public static final int E=32;
	public static final int EMS=33;
	public static final int ENDS=34;
	public static final int ESCAPE=35;
	public static final int EXCLAMATION_MARK=36;
	public static final int EXS=37;
	public static final int F=38;
	public static final int FONT_FACE_SYM=39;
	public static final int FREQ=40;
	public static final int G=41;
	public static final int GEN=42;
	public static final int GREATER=43;
	public static final int GREATER_OR_EQ=44;
	public static final int H=45;
	public static final int HASH=46;
	public static final int HASH_SYMBOL=47;
	public static final int HEXCHAR=48;
	public static final int HEXCHAR_WILDCARD=49;
	public static final int I=50;
	public static final int IDENT=51;
	public static final int IMPORTANT_SYM=52;
	public static final int IMPORT_SYM=53;
	public static final int INCLUDES=54;
	public static final int INVALID=55;
	public static final int J=56;
	public static final int K=57;
	public static final int L=58;
	public static final int LBRACE=59;
	public static final int LBRACKET=60;
	public static final int LEFTBOTTOM_SYM=61;
	public static final int LEFTMIDDLE_SYM=62;
	public static final int LEFTTOP_SYM=63;
	public static final int LENGTH=64;
	public static final int LESS=65;
	public static final int LESS_AND=66;
	public static final int LESS_JS_STRING=67;
	public static final int LESS_OR_EQ=68;
	public static final int LESS_REST=69;
	public static final int LINE_COMMENT=70;
	public static final int LPAREN=71;
	public static final int M=72;
	public static final int MEDIA_SYM=73;
	public static final int MINUS=74;
	public static final int MOZ_DOCUMENT_SYM=75;
	public static final int MOZ_DOMAIN=76;
	public static final int MOZ_REGEXP=77;
	public static final int MOZ_URL_PREFIX=78;
	public static final int N=79;
	public static final int NAME=80;
	public static final int NAMESPACE_SYM=81;
	public static final int NL=82;
	public static final int NMCHAR=83;
	public static final int NMSTART=84;
	public static final int NONASCII=85;
	public static final int NOT=86;
	public static final int NUMBER=87;
	public static final int O=88;
	public static final int OPEQ=89;
	public static final int P=90;
	public static final int PAGE_SYM=91;
	public static final int PERCENTAGE=92;
	public static final int PERCENTAGE_SYMBOL=93;
	public static final int PIPE=94;
	public static final int PLUS=95;
	public static final int Q=96;
	public static final int R=97;
	public static final int RBRACE=98;
	public static final int RBRACKET=99;
	public static final int REM=100;
	public static final int RESOLUTION=101;
	public static final int RIGHTBOTTOM_SYM=102;
	public static final int RIGHTMIDDLE_SYM=103;
	public static final int RIGHTTOP_SYM=104;
	public static final int RPAREN=105;
	public static final int S=106;
	public static final int SASS_AT_ROOT=107;
	public static final int SASS_CONTENT=108;
	public static final int SASS_DEBUG=109;
	public static final int SASS_DEFAULT=110;
	public static final int SASS_EACH=111;
	public static final int SASS_ELSE=112;
	public static final int SASS_ELSEIF=113;
	public static final int SASS_ERROR=114;
	public static final int SASS_EXTEND=115;
	public static final int SASS_EXTEND_ONLY_SELECTOR=116;
	public static final int SASS_FOR=117;
	public static final int SASS_FORWARD=118;
	public static final int SASS_FUNCTION=119;
	public static final int SASS_GLOBAL=120;
	public static final int SASS_IF=121;
	public static final int SASS_INCLUDE=122;
	public static final int SASS_MIXIN=123;
	public static final int SASS_OPTIONAL=124;
	public static final int SASS_RETURN=125;
	public static final int SASS_USE=126;
	public static final int SASS_VAR=127;
	public static final int SASS_WARN=128;
	public static final int SASS_WHILE=129;
	public static final int SEMI=130;
	public static final int SOLIDUS=131;
	public static final int STAR=132;
	public static final int STRING=133;
	public static final int SUPPORTS_SYM=134;
	public static final int T=135;
	public static final int TILDE=136;
	public static final int TIME=137;
	public static final int TOPCENTER_SYM=138;
	public static final int TOPLEFTCORNER_SYM=139;
	public static final int TOPLEFT_SYM=140;
	public static final int TOPRIGHTCORNER_SYM=141;
	public static final int TOPRIGHT_SYM=142;
	public static final int U=143;
	public static final int UNICODE=144;
	public static final int URANGE=145;
	public static final int URI=146;
	public static final int URL=147;
	public static final int V=148;
	public static final int VARIABLE=149;
	public static final int W=150;
	public static final int WEBKIT_KEYFRAMES_SYM=151;
	public static final int WS=152;
	public static final int X=153;
	public static final int Y=154;
	public static final int Z=155;

	// delegates
	public Parser[] getDelegates() {
		return new Parser[] {};
	}

	// delegators


	public static final String[] ruleNames = new String[] {
		"invalidRule", "less_condition_operator", "synpred48_Css3", "sass_extend_only_selector", 
		"key_and", "syncToFollow", "cp_variable_declaration", "cp_mixin_block", 
		"less_fn_name", "counterStyle", "cp_mixin_call_args", "synpred28_Css3", 
		"namespacePrefixName", "cp_propertyValue", "synpred21_Css3", "unaryOperator", 
		"cp_math_expressions", "synpred9_Css3", "sass_debug", "supportsDisjunction", 
		"page", "synpred51_Css3", "expressionPredicate", "typeSelector", "less_function_in_condition", 
		"atRuleId", "synpred1_Css3", "synpred18_Css3", "synpred41_Css3", "synpred20_Css3", 
		"sass_if", "synpred40_Css3", "mediaBody", "sass_map_name", "synpred32_Css3", 
		"property", "synpred34_Css3", "moz_document", "rule", "mediaQuery", "key_only", 
		"synpred24_Css3", "vendorAtRule", "componentValueOuter", "cssId", "synpred52_Css3", 
		"sass_each_variables", "braceBlock", "term", "generic_at_rule", "webkitKeyframeSelectors", 
		"sass_else", "synpred7_Css3", "sass_extend", "simpleSelectorSequence", 
		"slAttributeName", "synpred12_Css3", "synpred25_Css3", "cp_math_expression_atom", 
		"less_selector_interpolation_exp", "synpred11_Css3", "fnAttributeValue", 
		"synpred38_Css3", "fontFace", "sass_selector_interpolation_exp", "sass_map_pair", 
		"margin", "function", "propertyDeclaration", "synpred30_Css3", "synpred5_Css3", 
		"less_selector_interpolation", "synpred33_Css3", "bodyItem", "cp_mixin_call", 
		"margin_sym", "sass_use", "preservedTokenTopLevel", "resourceIdentifier", 
		"sass_forward_with_declaration", "webkitKeyframesBlock", "synpred44_Css3", 
		"supportsFeature", "pseudoPage", "synpred23_Css3", "fnAttribute", "cp_mixin_declaration", 
		"less_when", "synpred53_Css3", "mediaType", "cp_expression_operator", 
		"cp_math_expression", "operator", "key_or", "supportsWithOperator", "synpred42_Css3", 
		"declaration", "synpred45_Css3", "hexColor", "moz_document_function", 
		"syncTo_RBRACE", "synpred8_Css3", "sass_for", "synpred15_Css3", "cp_term_symbol", 
		"cp_mixin_call_arg", "parenBlock", "synpred46_Css3", "synpred26_Css3", 
		"cp_arg", "cp_variable", "sass_forward", "synpred50_Css3", "sass_function_name", 
		"synpred37_Css3", "combinator", "synpred36_Css3", "mediaExpression", "supportsAtRule", 
		"fnAttributeName", "sass_use_as", "imports", "esPred", "sass_map_pairs", 
		"synpred10_Css3", "selector", "propertyValue", "synpred54_Css3", "mediaQueryOperator", 
		"mediaQueryList", "supportsCondition", "sass_each", "preservedToken", 
		"cp_mixin_name", "syncTo_SEMI", "less_condition", "cp_expression_list", 
		"sass_function_return", "synpred6_Css3", "declarations", "synpred49_Css3", 
		"namespace", "bracketBlock", "mediaFeature", "selectorsGroup", "pseudo", 
		"cp_expression_atom", "synpred4_Css3", "sass_while", "synpred22_Css3", 
		"synpred27_Css3", "importItem", "cssClass", "synpred35_Css3", "fnAttributes", 
		"elementName", "namespaces", "slAttributeValue", "sass_control", "synpred13_Css3", 
		"synpred29_Css3", "synpred31_Css3", "mediaBodyItem", "prio", "synpred19_Css3", 
		"webkitKeyframes", "less_import_types", "cp_args_list", "sass_use_with", 
		"componentValue", "namespacePrefix", "body", "sass_nested_properties", 
		"sass_control_expression", "sass_forward_hide", "sass_content", "sass_forward_with", 
		"cp_expression", "synpred14_Css3", "synpred47_Css3", "sass_use_with_declaration", 
		"elementSubsequent", "supportsDecl", "sass_forward_show", "syncToDeclarationsRule", 
		"synpred43_Css3", "supportsInParens", "charSet", "styleSheet", "sass_map", 
		"synpred3_Css3", "sass_forward_as", "at_rule", "less_mixin_guarded", "ws", 
		"slAttribute", "sass_control_block", "charSetValue", "synpred17_Css3", 
		"sass_function_declaration", "synpred39_Css3", "expression", "synpred2_Css3", 
		"sass_interpolation_expression_var", "synpred16_Css3", "functionName", 
		"supportsConjunction", "sass_error", "media", "mediaFeatureValue"
	};

	public static final boolean[] decisionCanBacktrack = new boolean[] {
		false, // invalid decision
		false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, true, false, false, false, false, false, true, 
		    false, false, false, false, true, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, true, 
		    false, false, false, false, false, false, false, false, true, false, 
		    false, false, false, false, false, false, true, false, false, true, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, true, false, false, false, true, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, true, false, false, false, false, false, true, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, true, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, true, false, false, true, true, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    true, true, false, false, false, false, true, false, false, false, 
		    false, false, true, false, false, false, false, false, false, false, 
		    false, false, false, false, false, true, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, true, false, false, false, 
		    false, false, true, false, false, true, false, false, false, false, 
		    false, false, true, false, false, false, true, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, true, 
		    false, false, false, true, false, false, false, false, false, false, 
		    false, false, false, false, true, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false
	};

 
	public int ruleLevel = 0;
	public int getRuleLevel() { return ruleLevel; }
	public void incRuleLevel() { ruleLevel++; }
	public void decRuleLevel() { ruleLevel--; }
	public Css3Parser(TokenStream input) {
		this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
	}
	public Css3Parser(TokenStream input, int port, RecognizerSharedState state) {
		super(input, state);
		DebugEventSocketProxy proxy =
			new DebugEventSocketProxy(this, port, null);

		setDebugListener(proxy);
		try {
			proxy.handshake();
		}
		catch (IOException ioe) {
			reportError(ioe);
		}
	}

	public Css3Parser(TokenStream input, DebugEventListener dbg) {
		super(input, dbg, new RecognizerSharedState());
	}

	protected boolean evalPredicate(boolean result, String predicate) {
		dbg.semanticPredicate(result, predicate);
		return result;
	}

	@Override public String[] getTokenNames() { return Css3Parser.tokenNames; }
	@Override public String getGrammarFileName() { return "/home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g"; }



	    protected boolean isLessSource() {
	        return false;
	    }

	    protected boolean isScssSource() {
	        return false;
	    }

	    private boolean isCssPreprocessorSource() {
	        return isLessSource() || isScssSource();
	    }

	    private boolean tokenNameEquals(String tokenImage) {
	        return tokenImage.equalsIgnoreCase(input.LT(1).getText());
	    }
	    
	    private boolean tokenNameEquals2(String tokenImage) {
	        return tokenImage.equalsIgnoreCase(input.LT(2).getText());
	    }

	    private boolean tokenNameIs(String[] tokens) {
	        for(String tokenImage : tokens) {
	            if(tokenImage.equalsIgnoreCase(input.LT(1).getText())) {
	                return true;
	            }
	        }
	        return false;
	    }

	    private boolean tokenNameStartsWith(String prefix) {
	        return input.LT(1).getText() != null
	            && input.LT(1).getText().startsWith(prefix);
	    }

	    /**
	     * Use the current stacked followset to work out the valid tokens that
	     * can follow on from the current point in the parse, then recover by
	     * eating tokens that are not a member of the follow set we compute.
	     *
	     * This method is used whenever we wish to force a sync, even though
	     * the parser has not yet checked LA(1) for alt selection. This is useful
	     * in situations where only a subset of tokens can begin a new construct
	     * (such as the start of a new statement in a block) and we want to
	     * proactively detect garbage so that the current rule does not exit on
	     * on an exception.
	     *
	     * We could override recover() to make this the default behavior but that
	     * is too much like using a sledge hammer to crack a nut. We want finer
	     * grained control of the recovery and error mechanisms.
	     */
	    protected void syncToSet()
	    {
	        // Compute the followset that is in context wherever we are in the
	        // rule chain/stack
	        //
	         BitSet follow = state.following[state._fsp]; //computeContextSensitiveRuleFOLLOW();

	         syncToSet(follow);
	    }

	    protected void syncToSet(BitSet follow)
	    {
	        int mark = -1;

	        //create error-recovery node
	        dbg.enterRule(getGrammarFileName(), "recovery");

	        try {

	            mark = input.mark();

	            // Consume all tokens in the stream until we find a member of the follow
	            // set, which means the next production should be guaranteed to be happy.
	            //
	            while (! follow.member(input.LA(1)) ) {

	                if  (input.LA(1) == Token.EOF) {

	                    // Looks like we didn't find anything at all that can help us here
	                    // so we need to rewind to where we were and let normal error handling
	                    // bail out.
	                    //
	                    input.rewind();
	                    mark = -1;
	                    return;
	                }
	                input.consume();

	                // Now here, because you are consuming some tokens, yu will probably want
	                // to raise an error message such as "Spurious elements after the class member were discarded"
	                // using whatever your override of displayRecognitionError() routine does to record
	                // error messages. The exact error my depend on context etc.
	                //
	            }
	        } catch (Exception e) {

	          // Just ignore any errors here, we will just let the recognizer
	          // try to resync as normal - something must be very screwed.
	          //
	        }
	        finally {
	            dbg.exitRule(getGrammarFileName(), "recovery");

	            // Always release the mark we took
	            //
	            if  (mark != -1) {
	                input.release(mark);
	            }
	        }
	    }

	        /**
	         * synces to next RBRACE "}" taking nesting into account
	         */
	        protected void syncToRBRACE(int nest)
	            {

	                int mark = -1;
	                //create error-recovery node
	                //dbg.enterRule(getGrammarFileName(), "recovery");

	                try {
	                    mark = input.mark();
	                    for(;;) {
	                        //read char
	                        int c = input.LA(1);

	                        switch(c) {
	                            case Token.EOF:
	                                input.rewind();
	                                mark = -1;
	                                return ;
	                            case Css3Lexer.LBRACE:
	                                nest++;
	                                break;
	                            case Css3Lexer.RBRACE:
	                                nest--;
	                                if(nest == 0) {
	                                    //do not eat the final RBRACE
	                                    return ;
	                                }
	                        }

	                        input.consume();

	                    }

	                } catch (Exception e) {

	                  // Just ignore any errors here, we will just let the recognizer
	                  // try to resync as normal - something must be very screwed.
	                  //
	                }
	                finally {
	                    if  (mark != -1) {
	                        input.release(mark);
	                    }
	                    //dbg.exitRule(getGrammarFileName(), "recovery");
	                }
	            }




	// $ANTLR start "styleSheet"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:284:1: styleSheet : ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF ;
	public final void styleSheet() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "styleSheet");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(284, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:285:5: ( ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:286:6: ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF
			{
			dbg.location(286,6);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:286:6: ( ws )?
			int alt1=2;
			try { dbg.enterSubRule(1);
			try { dbg.enterDecision(1, decisionCanBacktrack[1]);

			int LA1_0 = input.LA(1);
			if ( (LA1_0==COMMENT||LA1_0==NL||LA1_0==WS) ) {
				alt1=1;
			}
			} finally {dbg.exitDecision(1);}

			switch (alt1) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:286:6: ws
					{
					dbg.location(286,6);
					pushFollow(FOLLOW_ws_in_styleSheet102);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(1);}
			dbg.location(287,6);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:287:6: ( charSet ( ws )? )?
			int alt3=2;
			try { dbg.enterSubRule(3);
			try { dbg.enterDecision(3, decisionCanBacktrack[3]);

			try {
				isCyclicDecision = true;
				alt3 = dfa3.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(3);}

			switch (alt3) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:287:8: charSet ( ws )?
					{
					dbg.location(287,8);
					pushFollow(FOLLOW_charSet_in_styleSheet112);
					charSet();
					state._fsp--;
					if (state.failed) return;dbg.location(287,16);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:287:16: ( ws )?
					int alt2=2;
					try { dbg.enterSubRule(2);
					try { dbg.enterDecision(2, decisionCanBacktrack[2]);

					int LA2_0 = input.LA(1);
					if ( (LA2_0==COMMENT||LA2_0==NL||LA2_0==WS) ) {
						alt2=1;
					}
					} finally {dbg.exitDecision(2);}

					switch (alt2) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:287:16: ws
							{
							dbg.location(287,16);
							pushFollow(FOLLOW_ws_in_styleSheet114);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(2);}

					}
					break;

			}
			} finally {dbg.exitSubRule(3);}
			dbg.location(288,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:288:9: ( imports )?
			int alt4=2;
			try { dbg.enterSubRule(4);
			try { dbg.enterDecision(4, decisionCanBacktrack[4]);

			switch ( input.LA(1) ) {
				case IMPORT_SYM:
					{
					int LA4_1 = input.LA(2);
					if ( (!(evalPredicate(((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))),""))) ) {
						alt4=1;
					}
					}
					break;
				case SASS_USE:
					{
					int LA4_2 = input.LA(2);
					if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
						alt4=1;
					}
					}
					break;
				case SASS_FORWARD:
					{
					int LA4_3 = input.LA(2);
					if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
						alt4=1;
					}
					}
					break;
			}
			} finally {dbg.exitDecision(4);}

			switch (alt4) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:288:9: imports
					{
					dbg.location(288,9);
					pushFollow(FOLLOW_imports_in_styleSheet128);
					imports();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(4);}
			dbg.location(289,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:289:9: ( namespaces )?
			int alt5=2;
			try { dbg.enterSubRule(5);
			try { dbg.enterDecision(5, decisionCanBacktrack[5]);

			try {
				isCyclicDecision = true;
				alt5 = dfa5.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(5);}

			switch (alt5) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:289:9: namespaces
					{
					dbg.location(289,9);
					pushFollow(FOLLOW_namespaces_in_styleSheet139);
					namespaces();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(5);}
			dbg.location(290,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:290:9: ( body )?
			int alt6=2;
			try { dbg.enterSubRule(6);
			try { dbg.enterDecision(6, decisionCanBacktrack[6]);

			int LA6_0 = input.LA(1);
			if ( ((LA6_0 >= AT_IDENT && LA6_0 <= AT_SIGN)||(LA6_0 >= BOTTOMCENTER_SYM && LA6_0 <= BOTTOMRIGHT_SYM)||(LA6_0 >= CHARSET_SYM && LA6_0 <= COLON)||LA6_0==COUNTER_STYLE_SYM||(LA6_0 >= DCOLON && LA6_0 <= DOT)||LA6_0==FONT_FACE_SYM||(LA6_0 >= GEN && LA6_0 <= GREATER)||(LA6_0 >= HASH && LA6_0 <= HASH_SYMBOL)||LA6_0==IDENT||LA6_0==IMPORT_SYM||(LA6_0 >= LBRACKET && LA6_0 <= LEFTTOP_SYM)||LA6_0==LESS_AND||(LA6_0 >= MEDIA_SYM && LA6_0 <= MOZ_DOCUMENT_SYM)||LA6_0==NAMESPACE_SYM||LA6_0==PAGE_SYM||(LA6_0 >= PIPE && LA6_0 <= PLUS)||(LA6_0 >= RIGHTBOTTOM_SYM && LA6_0 <= RIGHTTOP_SYM)||(LA6_0 >= SASS_AT_ROOT && LA6_0 <= SASS_DEBUG)||(LA6_0 >= SASS_EACH && LA6_0 <= SASS_ELSE)||(LA6_0 >= SASS_EXTEND && LA6_0 <= SASS_FUNCTION)||(LA6_0 >= SASS_IF && LA6_0 <= SASS_MIXIN)||(LA6_0 >= SASS_RETURN && LA6_0 <= SEMI)||LA6_0==STAR||LA6_0==SUPPORTS_SYM||LA6_0==TILDE||(LA6_0 >= TOPCENTER_SYM && LA6_0 <= TOPRIGHT_SYM)||LA6_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt6=1;
			}
			} finally {dbg.exitDecision(6);}

			switch (alt6) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:290:9: body
					{
					dbg.location(290,9);
					pushFollow(FOLLOW_body_in_styleSheet150);
					body();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(6);}
			dbg.location(291,6);
			match(input,EOF,FOLLOW_EOF_in_styleSheet158); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(292, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "styleSheet");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "styleSheet"



	// $ANTLR start "namespaces"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:294:1: namespaces : ( namespace ( ws )? )+ ;
	public final void namespaces() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "namespaces");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(294, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:295:2: ( ( namespace ( ws )? )+ )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:296:2: ( namespace ( ws )? )+
			{
			dbg.location(296,2);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:296:2: ( namespace ( ws )? )+
			int cnt8=0;
			try { dbg.enterSubRule(8);

			loop8:
			while (true) {
				int alt8=2;
				try { dbg.enterDecision(8, decisionCanBacktrack[8]);

				try {
					isCyclicDecision = true;
					alt8 = dfa8.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(8);}

				switch (alt8) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:296:4: namespace ( ws )?
					{
					dbg.location(296,4);
					pushFollow(FOLLOW_namespace_in_namespaces175);
					namespace();
					state._fsp--;
					if (state.failed) return;dbg.location(296,14);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:296:14: ( ws )?
					int alt7=2;
					try { dbg.enterSubRule(7);
					try { dbg.enterDecision(7, decisionCanBacktrack[7]);

					int LA7_0 = input.LA(1);
					if ( (LA7_0==COMMENT||LA7_0==NL||LA7_0==WS) ) {
						alt7=1;
					}
					} finally {dbg.exitDecision(7);}

					switch (alt7) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:296:14: ws
							{
							dbg.location(296,14);
							pushFollow(FOLLOW_ws_in_namespaces177);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(7);}

					}
					break;

				default :
					if ( cnt8 >= 1 ) break loop8;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(8, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt8++;
			}
			} finally {dbg.exitSubRule(8);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(297, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "namespaces");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "namespaces"



	// $ANTLR start "namespace"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:299:1: namespace : NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI ;
	public final void namespace() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "namespace");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(299, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:300:3: ( NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:300:5: NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI
			{
			dbg.location(300,5);
			match(input,NAMESPACE_SYM,FOLLOW_NAMESPACE_SYM_in_namespace193); if (state.failed) return;dbg.location(300,19);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:300:19: ( ws )?
			int alt9=2;
			try { dbg.enterSubRule(9);
			try { dbg.enterDecision(9, decisionCanBacktrack[9]);

			int LA9_0 = input.LA(1);
			if ( (LA9_0==COMMENT||LA9_0==NL||LA9_0==WS) ) {
				alt9=1;
			}
			} finally {dbg.exitDecision(9);}

			switch (alt9) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:300:19: ws
					{
					dbg.location(300,19);
					pushFollow(FOLLOW_ws_in_namespace195);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(9);}
			dbg.location(300,23);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:300:23: ( namespacePrefixName ( ws )? )?
			int alt11=2;
			try { dbg.enterSubRule(11);
			try { dbg.enterDecision(11, decisionCanBacktrack[11]);

			int LA11_0 = input.LA(1);
			if ( (LA11_0==IDENT) ) {
				alt11=1;
			}
			} finally {dbg.exitDecision(11);}

			switch (alt11) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:300:24: namespacePrefixName ( ws )?
					{
					dbg.location(300,24);
					pushFollow(FOLLOW_namespacePrefixName_in_namespace199);
					namespacePrefixName();
					state._fsp--;
					if (state.failed) return;dbg.location(300,44);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:300:44: ( ws )?
					int alt10=2;
					try { dbg.enterSubRule(10);
					try { dbg.enterDecision(10, decisionCanBacktrack[10]);

					int LA10_0 = input.LA(1);
					if ( (LA10_0==COMMENT||LA10_0==NL||LA10_0==WS) ) {
						alt10=1;
					}
					} finally {dbg.exitDecision(10);}

					switch (alt10) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:300:44: ws
							{
							dbg.location(300,44);
							pushFollow(FOLLOW_ws_in_namespace201);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(10);}

					}
					break;

			}
			} finally {dbg.exitSubRule(11);}
			dbg.location(300,50);
			pushFollow(FOLLOW_resourceIdentifier_in_namespace206);
			resourceIdentifier();
			state._fsp--;
			if (state.failed) return;dbg.location(300,69);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:300:69: ( ws )?
			int alt12=2;
			try { dbg.enterSubRule(12);
			try { dbg.enterDecision(12, decisionCanBacktrack[12]);

			int LA12_0 = input.LA(1);
			if ( (LA12_0==COMMENT||LA12_0==NL||LA12_0==WS) ) {
				alt12=1;
			}
			} finally {dbg.exitDecision(12);}

			switch (alt12) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:300:69: ws
					{
					dbg.location(300,69);
					pushFollow(FOLLOW_ws_in_namespace208);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(12);}
			dbg.location(300,73);
			match(input,SEMI,FOLLOW_SEMI_in_namespace211); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(301, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "namespace");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "namespace"



	// $ANTLR start "namespacePrefixName"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:303:1: namespacePrefixName : IDENT ;
	public final void namespacePrefixName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "namespacePrefixName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(303, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:304:3: ( IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:304:5: IDENT
			{
			dbg.location(304,5);
			match(input,IDENT,FOLLOW_IDENT_in_namespacePrefixName224); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(305, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "namespacePrefixName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "namespacePrefixName"



	// $ANTLR start "resourceIdentifier"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:307:1: resourceIdentifier : ( STRING | URI );
	public final void resourceIdentifier() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "resourceIdentifier");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(307, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:308:3: ( STRING | URI )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(308,3);
			if ( input.LA(1)==STRING||input.LA(1)==URI ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(309, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "resourceIdentifier");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "resourceIdentifier"



	// $ANTLR start "charSet"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:311:1: charSet : CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI ;
	public final void charSet() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "charSet");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(311, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:312:5: ( CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:312:9: CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI
			{
			dbg.location(312,9);
			match(input,CHARSET_SYM,FOLLOW_CHARSET_SYM_in_charSet258); if (state.failed) return;dbg.location(312,21);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:312:21: ( ws )?
			int alt13=2;
			try { dbg.enterSubRule(13);
			try { dbg.enterDecision(13, decisionCanBacktrack[13]);

			int LA13_0 = input.LA(1);
			if ( (LA13_0==COMMENT||LA13_0==NL||LA13_0==WS) ) {
				alt13=1;
			}
			} finally {dbg.exitDecision(13);}

			switch (alt13) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:312:21: ws
					{
					dbg.location(312,21);
					pushFollow(FOLLOW_ws_in_charSet260);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(13);}
			dbg.location(312,25);
			pushFollow(FOLLOW_charSetValue_in_charSet263);
			charSetValue();
			state._fsp--;
			if (state.failed) return;dbg.location(312,38);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:312:38: ( ws )?
			int alt14=2;
			try { dbg.enterSubRule(14);
			try { dbg.enterDecision(14, decisionCanBacktrack[14]);

			int LA14_0 = input.LA(1);
			if ( (LA14_0==COMMENT||LA14_0==NL||LA14_0==WS) ) {
				alt14=1;
			}
			} finally {dbg.exitDecision(14);}

			switch (alt14) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:312:38: ws
					{
					dbg.location(312,38);
					pushFollow(FOLLOW_ws_in_charSet265);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(14);}
			dbg.location(312,42);
			match(input,SEMI,FOLLOW_SEMI_in_charSet268); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(313, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "charSet");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "charSet"



	// $ANTLR start "charSetValue"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:315:1: charSetValue : STRING ;
	public final void charSetValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "charSetValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(315, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:316:2: ( STRING )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:316:4: STRING
			{
			dbg.location(316,4);
			match(input,STRING,FOLLOW_STRING_in_charSetValue282); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(317, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "charSetValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "charSetValue"



	// $ANTLR start "imports"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:319:1: imports : ( ( importItem ( ws )? SEMI ( ws )? ) |{...}? ( sass_use ( ws )? SEMI ( ws )? ) |{...}? ( sass_forward ( ws )? SEMI ( ws )? ) )+ ;
	public final void imports() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "imports");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(319, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:320:2: ( ( ( importItem ( ws )? SEMI ( ws )? ) |{...}? ( sass_use ( ws )? SEMI ( ws )? ) |{...}? ( sass_forward ( ws )? SEMI ( ws )? ) )+ )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:321:2: ( ( importItem ( ws )? SEMI ( ws )? ) |{...}? ( sass_use ( ws )? SEMI ( ws )? ) |{...}? ( sass_forward ( ws )? SEMI ( ws )? ) )+
			{
			dbg.location(321,2);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:321:2: ( ( importItem ( ws )? SEMI ( ws )? ) |{...}? ( sass_use ( ws )? SEMI ( ws )? ) |{...}? ( sass_forward ( ws )? SEMI ( ws )? ) )+
			int cnt21=0;
			try { dbg.enterSubRule(21);

			loop21:
			while (true) {
				int alt21=4;
				try { dbg.enterDecision(21, decisionCanBacktrack[21]);

				switch ( input.LA(1) ) {
				case IMPORT_SYM:
					{
					int LA21_29 = input.LA(2);
					if ( (!(evalPredicate(((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))),""))) ) {
						alt21=1;
					}

					}
					break;
				case SASS_USE:
					{
					int LA21_36 = input.LA(2);
					if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
						alt21=2;
					}

					}
					break;
				case SASS_FORWARD:
					{
					int LA21_39 = input.LA(2);
					if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
						alt21=3;
					}

					}
					break;
				}
				} finally {dbg.exitDecision(21);}

				switch (alt21) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:322:13: ( importItem ( ws )? SEMI ( ws )? )
					{
					dbg.location(322,13);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:322:13: ( importItem ( ws )? SEMI ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:322:15: importItem ( ws )? SEMI ( ws )?
					{
					dbg.location(322,15);
					pushFollow(FOLLOW_importItem_in_imports310);
					importItem();
					state._fsp--;
					if (state.failed) return;dbg.location(322,26);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:322:26: ( ws )?
					int alt15=2;
					try { dbg.enterSubRule(15);
					try { dbg.enterDecision(15, decisionCanBacktrack[15]);

					int LA15_0 = input.LA(1);
					if ( (LA15_0==COMMENT||LA15_0==NL||LA15_0==WS) ) {
						alt15=1;
					}
					} finally {dbg.exitDecision(15);}

					switch (alt15) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:322:26: ws
							{
							dbg.location(322,26);
							pushFollow(FOLLOW_ws_in_imports312);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(15);}
					dbg.location(322,30);
					match(input,SEMI,FOLLOW_SEMI_in_imports315); if (state.failed) return;dbg.location(322,35);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:322:35: ( ws )?
					int alt16=2;
					try { dbg.enterSubRule(16);
					try { dbg.enterDecision(16, decisionCanBacktrack[16]);

					int LA16_0 = input.LA(1);
					if ( (LA16_0==COMMENT||LA16_0==NL||LA16_0==WS) ) {
						alt16=1;
					}
					} finally {dbg.exitDecision(16);}

					switch (alt16) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:322:35: ws
							{
							dbg.location(322,35);
							pushFollow(FOLLOW_ws_in_imports317);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(16);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:13: {...}? ( sass_use ( ws )? SEMI ( ws )? )
					{
					dbg.location(324,13);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "imports", "isScssSource()");
					}dbg.location(324,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:31: ( sass_use ( ws )? SEMI ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:33: sass_use ( ws )? SEMI ( ws )?
					{
					dbg.location(324,33);
					pushFollow(FOLLOW_sass_use_in_imports352);
					sass_use();
					state._fsp--;
					if (state.failed) return;dbg.location(324,42);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:42: ( ws )?
					int alt17=2;
					try { dbg.enterSubRule(17);
					try { dbg.enterDecision(17, decisionCanBacktrack[17]);

					int LA17_0 = input.LA(1);
					if ( (LA17_0==COMMENT||LA17_0==NL||LA17_0==WS) ) {
						alt17=1;
					}
					} finally {dbg.exitDecision(17);}

					switch (alt17) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:42: ws
							{
							dbg.location(324,42);
							pushFollow(FOLLOW_ws_in_imports354);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(17);}
					dbg.location(324,46);
					match(input,SEMI,FOLLOW_SEMI_in_imports357); if (state.failed) return;dbg.location(324,51);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:51: ( ws )?
					int alt18=2;
					try { dbg.enterSubRule(18);
					try { dbg.enterDecision(18, decisionCanBacktrack[18]);

					int LA18_0 = input.LA(1);
					if ( (LA18_0==COMMENT||LA18_0==NL||LA18_0==WS) ) {
						alt18=1;
					}
					} finally {dbg.exitDecision(18);}

					switch (alt18) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:51: ws
							{
							dbg.location(324,51);
							pushFollow(FOLLOW_ws_in_imports359);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(18);}

					}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:326:13: {...}? ( sass_forward ( ws )? SEMI ( ws )? )
					{
					dbg.location(326,13);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "imports", "isScssSource()");
					}dbg.location(326,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:326:31: ( sass_forward ( ws )? SEMI ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:326:33: sass_forward ( ws )? SEMI ( ws )?
					{
					dbg.location(326,33);
					pushFollow(FOLLOW_sass_forward_in_imports394);
					sass_forward();
					state._fsp--;
					if (state.failed) return;dbg.location(326,46);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:326:46: ( ws )?
					int alt19=2;
					try { dbg.enterSubRule(19);
					try { dbg.enterDecision(19, decisionCanBacktrack[19]);

					int LA19_0 = input.LA(1);
					if ( (LA19_0==COMMENT||LA19_0==NL||LA19_0==WS) ) {
						alt19=1;
					}
					} finally {dbg.exitDecision(19);}

					switch (alt19) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:326:46: ws
							{
							dbg.location(326,46);
							pushFollow(FOLLOW_ws_in_imports396);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(19);}
					dbg.location(326,50);
					match(input,SEMI,FOLLOW_SEMI_in_imports399); if (state.failed) return;dbg.location(326,55);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:326:55: ( ws )?
					int alt20=2;
					try { dbg.enterSubRule(20);
					try { dbg.enterDecision(20, decisionCanBacktrack[20]);

					int LA20_0 = input.LA(1);
					if ( (LA20_0==COMMENT||LA20_0==NL||LA20_0==WS) ) {
						alt20=1;
					}
					} finally {dbg.exitDecision(20);}

					switch (alt20) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:326:55: ws
							{
							dbg.location(326,55);
							pushFollow(FOLLOW_ws_in_imports401);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(20);}

					}

					}
					break;

				default :
					if ( cnt21 >= 1 ) break loop21;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(21, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt21++;
			}
			} finally {dbg.exitSubRule(21);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(328, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "imports");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "imports"



	// $ANTLR start "importItem"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:330:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? ( LPAREN less_import_types RPAREN ( ws )? )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );
	public final void importItem() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "importItem");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(330, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:331:5: ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? ( LPAREN less_import_types RPAREN ( ws )? )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? )
			int alt36=3;
			try { dbg.enterDecision(36, decisionCanBacktrack[36]);

			try {
				isCyclicDecision = true;
				alt36 = dfa36.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(36);}

			switch (alt36) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:9: IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					{
					dbg.location(332,9);
					match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem437); if (state.failed) return;dbg.location(332,20);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:20: ( ws )?
					int alt22=2;
					try { dbg.enterSubRule(22);
					try { dbg.enterDecision(22, decisionCanBacktrack[22]);

					int LA22_0 = input.LA(1);
					if ( (LA22_0==COMMENT||LA22_0==NL||LA22_0==WS) ) {
						alt22=1;
					}
					} finally {dbg.exitDecision(22);}

					switch (alt22) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:20: ws
							{
							dbg.location(332,20);
							pushFollow(FOLLOW_ws_in_importItem439);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(22);}
					dbg.location(332,24);
					pushFollow(FOLLOW_resourceIdentifier_in_importItem442);
					resourceIdentifier();
					state._fsp--;
					if (state.failed) return;dbg.location(332,43);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:43: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					int alt24=2;
					try { dbg.enterSubRule(24);
					try { dbg.enterDecision(24, decisionCanBacktrack[24]);

					int LA24_0 = input.LA(1);
					if ( (LA24_0==COMMENT||LA24_0==NL||LA24_0==WS) ) {
						int LA24_1 = input.LA(2);
						if ( (synpred1_Css3()) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==IDENT) ) {
						int LA24_2 = input.LA(2);
						if ( (synpred1_Css3()) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==NOT) && (synpred1_Css3())) {
						alt24=1;
					}
					else if ( (LA24_0==GEN) ) {
						int LA24_4 = input.LA(2);
						if ( (synpred1_Css3()) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==HASH_SYMBOL) ) {
						int LA24_5 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==LPAREN) && (synpred1_Css3())) {
						alt24=1;
					}
					else if ( (LA24_0==SASS_MIXIN) ) {
						int LA24_7 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==SASS_VAR) ) {
						int LA24_8 = input.LA(2);
						if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==AT_IDENT) ) {
						int LA24_14 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==SASS_INCLUDE) ) {
						int LA24_15 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==SASS_AT_ROOT) ) {
						int LA24_16 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==SASS_DEBUG||LA24_0==SASS_WARN) ) {
						int LA24_17 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==SASS_IF) ) {
						int LA24_28 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==SASS_FOR) ) {
						int LA24_29 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==SASS_EACH) ) {
						int LA24_30 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==SASS_WHILE) ) {
						int LA24_31 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==SASS_CONTENT) ) {
						int LA24_32 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==IMPORT_SYM) ) {
						int LA24_33 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==PAGE_SYM) ) {
						int LA24_34 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==FONT_FACE_SYM) ) {
						int LA24_35 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==MOZ_DOCUMENT_SYM) ) {
						int LA24_36 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==WEBKIT_KEYFRAMES_SYM) ) {
						int LA24_37 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==MEDIA_SYM) ) {
						int LA24_38 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==SASS_EXTEND) ) {
						int LA24_39 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==COUNTER_STYLE_SYM) ) {
						int LA24_41 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt24=1;
						}
					}
					else if ( (LA24_0==SASS_FUNCTION) ) {
						int LA24_43 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt24=1;
						}
					}
					else if ( ((LA24_0 >= BOTTOMCENTER_SYM && LA24_0 <= BOTTOMRIGHT_SYM)||LA24_0==CHARSET_SYM||(LA24_0 >= LEFTBOTTOM_SYM && LA24_0 <= LEFTTOP_SYM)||LA24_0==NAMESPACE_SYM||(LA24_0 >= RIGHTBOTTOM_SYM && LA24_0 <= RIGHTTOP_SYM)||LA24_0==SASS_ELSE||LA24_0==SASS_FORWARD||(LA24_0 >= SASS_RETURN && LA24_0 <= SASS_USE)||(LA24_0 >= TOPCENTER_SYM && LA24_0 <= TOPRIGHT_SYM)) ) {
						int LA24_44 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt24=1;
						}
					}
					} finally {dbg.exitDecision(24);}

					switch (alt24) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:44: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
							{
							dbg.location(332,66);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:66: ( ws )?
							int alt23=2;
							try { dbg.enterSubRule(23);
							try { dbg.enterDecision(23, decisionCanBacktrack[23]);

							int LA23_0 = input.LA(1);
							if ( (LA23_0==COMMENT||LA23_0==NL||LA23_0==WS) ) {
								alt23=1;
							}
							} finally {dbg.exitDecision(23);}

							switch (alt23) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:66: ws
									{
									dbg.location(332,66);
									pushFollow(FOLLOW_ws_in_importItem452);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(23);}
							dbg.location(332,70);
							pushFollow(FOLLOW_mediaQueryList_in_importItem455);
							mediaQueryList();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(24);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:335:9: {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					{
					dbg.location(335,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "importItem", "isScssSource()");
					}dbg.location(335,27);
					match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem488); if (state.failed) return;dbg.location(335,38);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:335:38: ( ws )?
					int alt25=2;
					try { dbg.enterSubRule(25);
					try { dbg.enterDecision(25, decisionCanBacktrack[25]);

					int LA25_0 = input.LA(1);
					if ( (LA25_0==COMMENT||LA25_0==NL||LA25_0==WS) ) {
						alt25=1;
					}
					} finally {dbg.exitDecision(25);}

					switch (alt25) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:335:38: ws
							{
							dbg.location(335,38);
							pushFollow(FOLLOW_ws_in_importItem490);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(25);}
					dbg.location(335,42);
					pushFollow(FOLLOW_resourceIdentifier_in_importItem493);
					resourceIdentifier();
					state._fsp--;
					if (state.failed) return;dbg.location(335,61);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:335:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*
					try { dbg.enterSubRule(28);

					loop28:
					while (true) {
						int alt28=2;
						try { dbg.enterDecision(28, decisionCanBacktrack[28]);

						try {
							isCyclicDecision = true;
							alt28 = dfa28.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(28);}

						switch (alt28) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:335:62: ( ws )? COMMA ( ws )? resourceIdentifier
							{
							dbg.location(335,62);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:335:62: ( ws )?
							int alt26=2;
							try { dbg.enterSubRule(26);
							try { dbg.enterDecision(26, decisionCanBacktrack[26]);

							int LA26_0 = input.LA(1);
							if ( (LA26_0==COMMENT||LA26_0==NL||LA26_0==WS) ) {
								alt26=1;
							}
							} finally {dbg.exitDecision(26);}

							switch (alt26) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:335:62: ws
									{
									dbg.location(335,62);
									pushFollow(FOLLOW_ws_in_importItem496);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(26);}
							dbg.location(335,66);
							match(input,COMMA,FOLLOW_COMMA_in_importItem499); if (state.failed) return;dbg.location(335,72);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:335:72: ( ws )?
							int alt27=2;
							try { dbg.enterSubRule(27);
							try { dbg.enterDecision(27, decisionCanBacktrack[27]);

							int LA27_0 = input.LA(1);
							if ( (LA27_0==COMMENT||LA27_0==NL||LA27_0==WS) ) {
								alt27=1;
							}
							} finally {dbg.exitDecision(27);}

							switch (alt27) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:335:72: ws
									{
									dbg.location(335,72);
									pushFollow(FOLLOW_ws_in_importItem501);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(27);}
							dbg.location(335,76);
							pushFollow(FOLLOW_resourceIdentifier_in_importItem504);
							resourceIdentifier();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop28;
						}
					}
					} finally {dbg.exitSubRule(28);}
					dbg.location(335,97);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:335:97: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					int alt30=2;
					try { dbg.enterSubRule(30);
					try { dbg.enterDecision(30, decisionCanBacktrack[30]);

					int LA30_0 = input.LA(1);
					if ( (LA30_0==COMMENT||LA30_0==NL||LA30_0==WS) ) {
						int LA30_1 = input.LA(2);
						if ( (synpred2_Css3()) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==IDENT) ) {
						int LA30_2 = input.LA(2);
						if ( (synpred2_Css3()) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==NOT) && (synpred2_Css3())) {
						alt30=1;
					}
					else if ( (LA30_0==GEN) ) {
						int LA30_4 = input.LA(2);
						if ( (synpred2_Css3()) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==HASH_SYMBOL) ) {
						int LA30_5 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==LPAREN) && (synpred2_Css3())) {
						alt30=1;
					}
					else if ( (LA30_0==SASS_MIXIN) ) {
						int LA30_7 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==SASS_VAR) ) {
						int LA30_8 = input.LA(2);
						if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==AT_IDENT) ) {
						int LA30_14 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==SASS_INCLUDE) ) {
						int LA30_15 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==SASS_AT_ROOT) ) {
						int LA30_16 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==SASS_DEBUG||LA30_0==SASS_WARN) ) {
						int LA30_17 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==SASS_IF) ) {
						int LA30_28 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==SASS_FOR) ) {
						int LA30_29 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==SASS_EACH) ) {
						int LA30_30 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==SASS_WHILE) ) {
						int LA30_31 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==SASS_CONTENT) ) {
						int LA30_32 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==IMPORT_SYM) ) {
						int LA30_33 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==PAGE_SYM) ) {
						int LA30_34 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==FONT_FACE_SYM) ) {
						int LA30_35 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==MOZ_DOCUMENT_SYM) ) {
						int LA30_36 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==WEBKIT_KEYFRAMES_SYM) ) {
						int LA30_37 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==MEDIA_SYM) ) {
						int LA30_38 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==SASS_EXTEND) ) {
						int LA30_39 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==COUNTER_STYLE_SYM) ) {
						int LA30_41 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt30=1;
						}
					}
					else if ( (LA30_0==SASS_FUNCTION) ) {
						int LA30_43 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt30=1;
						}
					}
					else if ( ((LA30_0 >= BOTTOMCENTER_SYM && LA30_0 <= BOTTOMRIGHT_SYM)||LA30_0==CHARSET_SYM||(LA30_0 >= LEFTBOTTOM_SYM && LA30_0 <= LEFTTOP_SYM)||LA30_0==NAMESPACE_SYM||(LA30_0 >= RIGHTBOTTOM_SYM && LA30_0 <= RIGHTTOP_SYM)||LA30_0==SASS_ELSE||LA30_0==SASS_FORWARD||(LA30_0 >= SASS_RETURN && LA30_0 <= SASS_USE)||(LA30_0 >= TOPCENTER_SYM && LA30_0 <= TOPRIGHT_SYM)) ) {
						int LA30_44 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt30=1;
						}
					}
					} finally {dbg.exitDecision(30);}

					switch (alt30) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:335:98: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
							{
							dbg.location(335,120);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:335:120: ( ws )?
							int alt29=2;
							try { dbg.enterSubRule(29);
							try { dbg.enterDecision(29, decisionCanBacktrack[29]);

							int LA29_0 = input.LA(1);
							if ( (LA29_0==COMMENT||LA29_0==NL||LA29_0==WS) ) {
								alt29=1;
							}
							} finally {dbg.exitDecision(29);}

							switch (alt29) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:335:120: ws
									{
									dbg.location(335,120);
									pushFollow(FOLLOW_ws_in_importItem516);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(29);}
							dbg.location(335,124);
							pushFollow(FOLLOW_mediaQueryList_in_importItem519);
							mediaQueryList();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(30);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:9: {...}? IMPORT_SYM ( ws )? ( LPAREN less_import_types RPAREN ( ws )? )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					{
					dbg.location(337,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "importItem", "isLessSource()");
					}dbg.location(337,27);
					match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem543); if (state.failed) return;dbg.location(337,38);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:38: ( ws )?
					int alt31=2;
					try { dbg.enterSubRule(31);
					try { dbg.enterDecision(31, decisionCanBacktrack[31]);

					int LA31_0 = input.LA(1);
					if ( (LA31_0==COMMENT||LA31_0==NL||LA31_0==WS) ) {
						alt31=1;
					}
					} finally {dbg.exitDecision(31);}

					switch (alt31) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:38: ws
							{
							dbg.location(337,38);
							pushFollow(FOLLOW_ws_in_importItem545);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(31);}
					dbg.location(337,42);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:42: ( LPAREN less_import_types RPAREN ( ws )? )?
					int alt33=2;
					try { dbg.enterSubRule(33);
					try { dbg.enterDecision(33, decisionCanBacktrack[33]);

					int LA33_0 = input.LA(1);
					if ( (LA33_0==LPAREN) ) {
						alt33=1;
					}
					} finally {dbg.exitDecision(33);}

					switch (alt33) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:43: LPAREN less_import_types RPAREN ( ws )?
							{
							dbg.location(337,43);
							match(input,LPAREN,FOLLOW_LPAREN_in_importItem549); if (state.failed) return;dbg.location(337,50);
							pushFollow(FOLLOW_less_import_types_in_importItem551);
							less_import_types();
							state._fsp--;
							if (state.failed) return;dbg.location(337,68);
							match(input,RPAREN,FOLLOW_RPAREN_in_importItem553); if (state.failed) return;dbg.location(337,75);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:75: ( ws )?
							int alt32=2;
							try { dbg.enterSubRule(32);
							try { dbg.enterDecision(32, decisionCanBacktrack[32]);

							int LA32_0 = input.LA(1);
							if ( (LA32_0==COMMENT||LA32_0==NL||LA32_0==WS) ) {
								alt32=1;
							}
							} finally {dbg.exitDecision(32);}

							switch (alt32) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:75: ws
									{
									dbg.location(337,75);
									pushFollow(FOLLOW_ws_in_importItem555);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(32);}

							}
							break;

					}
					} finally {dbg.exitSubRule(33);}
					dbg.location(337,81);
					pushFollow(FOLLOW_resourceIdentifier_in_importItem560);
					resourceIdentifier();
					state._fsp--;
					if (state.failed) return;dbg.location(337,100);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:100: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					int alt35=2;
					try { dbg.enterSubRule(35);
					try { dbg.enterDecision(35, decisionCanBacktrack[35]);

					int LA35_0 = input.LA(1);
					if ( (LA35_0==COMMENT||LA35_0==NL||LA35_0==WS) ) {
						int LA35_1 = input.LA(2);
						if ( (synpred3_Css3()) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==IDENT) ) {
						int LA35_2 = input.LA(2);
						if ( (synpred3_Css3()) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==NOT) && (synpred3_Css3())) {
						alt35=1;
					}
					else if ( (LA35_0==GEN) ) {
						int LA35_4 = input.LA(2);
						if ( (synpred3_Css3()) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==HASH_SYMBOL) ) {
						int LA35_5 = input.LA(2);
						if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==LPAREN) && (synpred3_Css3())) {
						alt35=1;
					}
					else if ( (LA35_0==SASS_MIXIN) ) {
						int LA35_7 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==SASS_VAR) ) {
						int LA35_8 = input.LA(2);
						if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==AT_IDENT) ) {
						int LA35_14 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==SASS_INCLUDE) ) {
						int LA35_15 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==SASS_AT_ROOT) ) {
						int LA35_16 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==SASS_DEBUG||LA35_0==SASS_WARN) ) {
						int LA35_17 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==SASS_IF) ) {
						int LA35_28 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==SASS_FOR) ) {
						int LA35_29 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==SASS_EACH) ) {
						int LA35_30 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==SASS_WHILE) ) {
						int LA35_31 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==SASS_CONTENT) ) {
						int LA35_32 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==IMPORT_SYM) ) {
						int LA35_33 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==PAGE_SYM) ) {
						int LA35_34 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==FONT_FACE_SYM) ) {
						int LA35_35 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==MOZ_DOCUMENT_SYM) ) {
						int LA35_36 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==WEBKIT_KEYFRAMES_SYM) ) {
						int LA35_37 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==MEDIA_SYM) ) {
						int LA35_38 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==SASS_EXTEND) ) {
						int LA35_39 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==COUNTER_STYLE_SYM) ) {
						int LA35_41 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					else if ( (LA35_0==SASS_FUNCTION) ) {
						int LA35_43 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					else if ( ((LA35_0 >= BOTTOMCENTER_SYM && LA35_0 <= BOTTOMRIGHT_SYM)||LA35_0==CHARSET_SYM||(LA35_0 >= LEFTBOTTOM_SYM && LA35_0 <= LEFTTOP_SYM)||LA35_0==NAMESPACE_SYM||(LA35_0 >= RIGHTBOTTOM_SYM && LA35_0 <= RIGHTTOP_SYM)||LA35_0==SASS_ELSE||LA35_0==SASS_FORWARD||(LA35_0 >= SASS_RETURN && LA35_0 <= SASS_USE)||(LA35_0 >= TOPCENTER_SYM && LA35_0 <= TOPRIGHT_SYM)) ) {
						int LA35_44 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt35=1;
						}
					}
					} finally {dbg.exitDecision(35);}

					switch (alt35) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:101: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
							{
							dbg.location(337,123);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:123: ( ws )?
							int alt34=2;
							try { dbg.enterSubRule(34);
							try { dbg.enterDecision(34, decisionCanBacktrack[34]);

							int LA34_0 = input.LA(1);
							if ( (LA34_0==COMMENT||LA34_0==NL||LA34_0==WS) ) {
								alt34=1;
							}
							} finally {dbg.exitDecision(34);}

							switch (alt34) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:123: ws
									{
									dbg.location(337,123);
									pushFollow(FOLLOW_ws_in_importItem570);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(34);}
							dbg.location(337,127);
							pushFollow(FOLLOW_mediaQueryList_in_importItem573);
							mediaQueryList();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(35);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(338, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "importItem");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "importItem"



	// $ANTLR start "sass_use"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:340:1: sass_use : SASS_USE ws resourceIdentifier ( ws sass_use_as )? ( ws sass_use_with )? ;
	public final void sass_use() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_use");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(340, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:341:5: ( SASS_USE ws resourceIdentifier ( ws sass_use_as )? ( ws sass_use_with )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:342:9: SASS_USE ws resourceIdentifier ( ws sass_use_as )? ( ws sass_use_with )?
			{
			dbg.location(342,9);
			match(input,SASS_USE,FOLLOW_SASS_USE_in_sass_use600); if (state.failed) return;dbg.location(342,18);
			pushFollow(FOLLOW_ws_in_sass_use602);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(342,21);
			pushFollow(FOLLOW_resourceIdentifier_in_sass_use604);
			resourceIdentifier();
			state._fsp--;
			if (state.failed) return;dbg.location(342,40);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:342:40: ( ws sass_use_as )?
			int alt37=2;
			try { dbg.enterSubRule(37);
			try { dbg.enterDecision(37, decisionCanBacktrack[37]);

			try {
				isCyclicDecision = true;
				alt37 = dfa37.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(37);}

			switch (alt37) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:342:41: ws sass_use_as
					{
					dbg.location(342,41);
					pushFollow(FOLLOW_ws_in_sass_use607);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(342,44);
					pushFollow(FOLLOW_sass_use_as_in_sass_use609);
					sass_use_as();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(37);}
			dbg.location(342,58);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:342:58: ( ws sass_use_with )?
			int alt38=2;
			try { dbg.enterSubRule(38);
			try { dbg.enterDecision(38, decisionCanBacktrack[38]);

			try {
				isCyclicDecision = true;
				alt38 = dfa38.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(38);}

			switch (alt38) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:342:59: ws sass_use_with
					{
					dbg.location(342,59);
					pushFollow(FOLLOW_ws_in_sass_use614);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(342,62);
					pushFollow(FOLLOW_sass_use_with_in_sass_use616);
					sass_use_with();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(38);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(343, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_use");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_use"



	// $ANTLR start "sass_use_as"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:345:1: sass_use_as :{...}? IDENT ws IDENT ;
	public final void sass_use_as() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_use_as");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(345, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:346:5: ({...}? IDENT ws IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:347:5: {...}? IDENT ws IDENT
			{
			dbg.location(347,5);
			if ( !(evalPredicate(tokenNameEquals("as"),"tokenNameEquals(\"as\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_use_as", "tokenNameEquals(\"as\")");
			}dbg.location(347,30);
			match(input,IDENT,FOLLOW_IDENT_in_sass_use_as641); if (state.failed) return;dbg.location(347,36);
			pushFollow(FOLLOW_ws_in_sass_use_as643);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(347,39);
			match(input,IDENT,FOLLOW_IDENT_in_sass_use_as645); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(348, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_use_as");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_use_as"



	// $ANTLR start "sass_use_with"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:350:1: sass_use_with :{...}? IDENT ( ws )? LPAREN ( ws )? sass_use_with_declaration ( ( ws )? COMMA ( ws )? sass_use_with_declaration )* ( ws )? RPAREN ;
	public final void sass_use_with() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_use_with");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(350, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:351:5: ({...}? IDENT ( ws )? LPAREN ( ws )? sass_use_with_declaration ( ( ws )? COMMA ( ws )? sass_use_with_declaration )* ( ws )? RPAREN )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:5: {...}? IDENT ( ws )? LPAREN ( ws )? sass_use_with_declaration ( ( ws )? COMMA ( ws )? sass_use_with_declaration )* ( ws )? RPAREN
			{
			dbg.location(352,5);
			if ( !(evalPredicate(tokenNameEquals("with"),"tokenNameEquals(\"with\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_use_with", "tokenNameEquals(\"with\")");
			}dbg.location(352,32);
			match(input,IDENT,FOLLOW_IDENT_in_sass_use_with668); if (state.failed) return;dbg.location(352,38);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:38: ( ws )?
			int alt39=2;
			try { dbg.enterSubRule(39);
			try { dbg.enterDecision(39, decisionCanBacktrack[39]);

			int LA39_0 = input.LA(1);
			if ( (LA39_0==COMMENT||LA39_0==NL||LA39_0==WS) ) {
				alt39=1;
			}
			} finally {dbg.exitDecision(39);}

			switch (alt39) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:38: ws
					{
					dbg.location(352,38);
					pushFollow(FOLLOW_ws_in_sass_use_with670);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(39);}
			dbg.location(352,42);
			match(input,LPAREN,FOLLOW_LPAREN_in_sass_use_with673); if (state.failed) return;dbg.location(352,49);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:49: ( ws )?
			int alt40=2;
			try { dbg.enterSubRule(40);
			try { dbg.enterDecision(40, decisionCanBacktrack[40]);

			int LA40_0 = input.LA(1);
			if ( (LA40_0==COMMENT||LA40_0==NL||LA40_0==WS) ) {
				alt40=1;
			}
			} finally {dbg.exitDecision(40);}

			switch (alt40) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:49: ws
					{
					dbg.location(352,49);
					pushFollow(FOLLOW_ws_in_sass_use_with675);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(40);}
			dbg.location(352,53);
			pushFollow(FOLLOW_sass_use_with_declaration_in_sass_use_with678);
			sass_use_with_declaration();
			state._fsp--;
			if (state.failed) return;dbg.location(352,80);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:80: ( ( ws )? COMMA ( ws )? sass_use_with_declaration )*
			try { dbg.enterSubRule(43);

			loop43:
			while (true) {
				int alt43=2;
				try { dbg.enterDecision(43, decisionCanBacktrack[43]);

				try {
					isCyclicDecision = true;
					alt43 = dfa43.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(43);}

				switch (alt43) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:81: ( ws )? COMMA ( ws )? sass_use_with_declaration
					{
					dbg.location(352,81);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:81: ( ws )?
					int alt41=2;
					try { dbg.enterSubRule(41);
					try { dbg.enterDecision(41, decisionCanBacktrack[41]);

					int LA41_0 = input.LA(1);
					if ( (LA41_0==COMMENT||LA41_0==NL||LA41_0==WS) ) {
						alt41=1;
					}
					} finally {dbg.exitDecision(41);}

					switch (alt41) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:81: ws
							{
							dbg.location(352,81);
							pushFollow(FOLLOW_ws_in_sass_use_with682);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(41);}
					dbg.location(352,85);
					match(input,COMMA,FOLLOW_COMMA_in_sass_use_with685); if (state.failed) return;dbg.location(352,91);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:91: ( ws )?
					int alt42=2;
					try { dbg.enterSubRule(42);
					try { dbg.enterDecision(42, decisionCanBacktrack[42]);

					int LA42_0 = input.LA(1);
					if ( (LA42_0==COMMENT||LA42_0==NL||LA42_0==WS) ) {
						alt42=1;
					}
					} finally {dbg.exitDecision(42);}

					switch (alt42) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:91: ws
							{
							dbg.location(352,91);
							pushFollow(FOLLOW_ws_in_sass_use_with687);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(42);}
					dbg.location(352,95);
					pushFollow(FOLLOW_sass_use_with_declaration_in_sass_use_with690);
					sass_use_with_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop43;
				}
			}
			} finally {dbg.exitSubRule(43);}
			dbg.location(352,124);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:124: ( ws )?
			int alt44=2;
			try { dbg.enterSubRule(44);
			try { dbg.enterDecision(44, decisionCanBacktrack[44]);

			int LA44_0 = input.LA(1);
			if ( (LA44_0==COMMENT||LA44_0==NL||LA44_0==WS) ) {
				alt44=1;
			}
			} finally {dbg.exitDecision(44);}

			switch (alt44) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:124: ws
					{
					dbg.location(352,124);
					pushFollow(FOLLOW_ws_in_sass_use_with695);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(44);}
			dbg.location(352,128);
			match(input,RPAREN,FOLLOW_RPAREN_in_sass_use_with698); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(353, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_use_with");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_use_with"



	// $ANTLR start "sass_use_with_declaration"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:355:1: sass_use_with_declaration : cp_variable ( ws )? COLON ( ws )? cp_expression ;
	public final void sass_use_with_declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_use_with_declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(355, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:356:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:357:5: cp_variable ( ws )? COLON ( ws )? cp_expression
			{
			dbg.location(357,5);
			pushFollow(FOLLOW_cp_variable_in_sass_use_with_declaration719);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(357,17);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:357:17: ( ws )?
			int alt45=2;
			try { dbg.enterSubRule(45);
			try { dbg.enterDecision(45, decisionCanBacktrack[45]);

			int LA45_0 = input.LA(1);
			if ( (LA45_0==COMMENT||LA45_0==NL||LA45_0==WS) ) {
				alt45=1;
			}
			} finally {dbg.exitDecision(45);}

			switch (alt45) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:357:17: ws
					{
					dbg.location(357,17);
					pushFollow(FOLLOW_ws_in_sass_use_with_declaration721);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(45);}
			dbg.location(357,21);
			match(input,COLON,FOLLOW_COLON_in_sass_use_with_declaration724); if (state.failed) return;dbg.location(357,27);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:357:27: ( ws )?
			int alt46=2;
			try { dbg.enterSubRule(46);
			try { dbg.enterDecision(46, decisionCanBacktrack[46]);

			int LA46_0 = input.LA(1);
			if ( (LA46_0==COMMENT||LA46_0==NL||LA46_0==WS) ) {
				alt46=1;
			}
			} finally {dbg.exitDecision(46);}

			switch (alt46) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:357:27: ws
					{
					dbg.location(357,27);
					pushFollow(FOLLOW_ws_in_sass_use_with_declaration726);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(46);}
			dbg.location(357,31);
			pushFollow(FOLLOW_cp_expression_in_sass_use_with_declaration729);
			cp_expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(358, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_use_with_declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_use_with_declaration"



	// $ANTLR start "sass_forward"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:361:1: sass_forward : SASS_FORWARD ws resourceIdentifier ( ws ( sass_forward_hide | sass_forward_show ) )? ({...}? ws sass_forward_as )? ({...}? ws sass_forward_with )? ;
	public final void sass_forward() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_forward");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(361, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:362:5: ( SASS_FORWARD ws resourceIdentifier ( ws ( sass_forward_hide | sass_forward_show ) )? ({...}? ws sass_forward_as )? ({...}? ws sass_forward_with )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:9: SASS_FORWARD ws resourceIdentifier ( ws ( sass_forward_hide | sass_forward_show ) )? ({...}? ws sass_forward_as )? ({...}? ws sass_forward_with )?
			{
			dbg.location(363,9);
			match(input,SASS_FORWARD,FOLLOW_SASS_FORWARD_in_sass_forward755); if (state.failed) return;dbg.location(363,22);
			pushFollow(FOLLOW_ws_in_sass_forward757);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(363,25);
			pushFollow(FOLLOW_resourceIdentifier_in_sass_forward759);
			resourceIdentifier();
			state._fsp--;
			if (state.failed) return;dbg.location(363,44);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:44: ( ws ( sass_forward_hide | sass_forward_show ) )?
			int alt48=2;
			try { dbg.enterSubRule(48);
			try { dbg.enterDecision(48, decisionCanBacktrack[48]);

			try {
				isCyclicDecision = true;
				alt48 = dfa48.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(48);}

			switch (alt48) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:46: ws ( sass_forward_hide | sass_forward_show )
					{
					dbg.location(363,46);
					pushFollow(FOLLOW_ws_in_sass_forward763);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(363,49);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:49: ( sass_forward_hide | sass_forward_show )
					int alt47=2;
					try { dbg.enterSubRule(47);
					try { dbg.enterDecision(47, decisionCanBacktrack[47]);

					try {
						isCyclicDecision = true;
						alt47 = dfa47.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(47);}

					switch (alt47) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:51: sass_forward_hide
							{
							dbg.location(363,51);
							pushFollow(FOLLOW_sass_forward_hide_in_sass_forward767);
							sass_forward_hide();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:72: sass_forward_show
							{
							dbg.location(363,72);
							pushFollow(FOLLOW_sass_forward_show_in_sass_forward772);
							sass_forward_show();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(47);}

					}
					break;

			}
			} finally {dbg.exitSubRule(48);}
			dbg.location(363,93);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:93: ({...}? ws sass_forward_as )?
			int alt49=2;
			try { dbg.enterSubRule(49);
			try { dbg.enterDecision(49, decisionCanBacktrack[49]);

			try {
				isCyclicDecision = true;
				alt49 = dfa49.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(49);}

			switch (alt49) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:94: {...}? ws sass_forward_as
					{
					dbg.location(363,94);
					if ( !(evalPredicate(tokenNameEquals2("as"),"tokenNameEquals2(\"as\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "sass_forward", "tokenNameEquals2(\"as\")");
					}dbg.location(363,120);
					pushFollow(FOLLOW_ws_in_sass_forward780);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(363,123);
					pushFollow(FOLLOW_sass_forward_as_in_sass_forward782);
					sass_forward_as();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(49);}
			dbg.location(363,141);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:141: ({...}? ws sass_forward_with )?
			int alt50=2;
			try { dbg.enterSubRule(50);
			try { dbg.enterDecision(50, decisionCanBacktrack[50]);

			try {
				isCyclicDecision = true;
				alt50 = dfa50.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(50);}

			switch (alt50) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:142: {...}? ws sass_forward_with
					{
					dbg.location(363,142);
					if ( !(evalPredicate(tokenNameEquals2("with"),"tokenNameEquals2(\"with\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "sass_forward", "tokenNameEquals2(\"with\")");
					}dbg.location(363,170);
					pushFollow(FOLLOW_ws_in_sass_forward789);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(363,173);
					pushFollow(FOLLOW_sass_forward_with_in_sass_forward791);
					sass_forward_with();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(50);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(364, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_forward");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_forward"



	// $ANTLR start "sass_forward_as"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:1: sass_forward_as :{...}? IDENT ws IDENT ;
	public final void sass_forward_as() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_forward_as");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(366, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:367:5: ({...}? IDENT ws IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:5: {...}? IDENT ws IDENT
			{
			dbg.location(368,5);
			if ( !(evalPredicate(tokenNameEquals("as"),"tokenNameEquals(\"as\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_forward_as", "tokenNameEquals(\"as\")");
			}dbg.location(368,30);
			match(input,IDENT,FOLLOW_IDENT_in_sass_forward_as816); if (state.failed) return;dbg.location(368,36);
			pushFollow(FOLLOW_ws_in_sass_forward_as818);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(368,39);
			match(input,IDENT,FOLLOW_IDENT_in_sass_forward_as820); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(369, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_forward_as");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_forward_as"



	// $ANTLR start "sass_forward_with"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:371:1: sass_forward_with :{...}? IDENT ( ws )? LPAREN ( ws )? sass_forward_with_declaration ( ( ws )? COMMA ( ws )? sass_forward_with_declaration )* ( ws )? RPAREN ;
	public final void sass_forward_with() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_forward_with");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(371, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:5: ({...}? IDENT ( ws )? LPAREN ( ws )? sass_forward_with_declaration ( ( ws )? COMMA ( ws )? sass_forward_with_declaration )* ( ws )? RPAREN )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:5: {...}? IDENT ( ws )? LPAREN ( ws )? sass_forward_with_declaration ( ( ws )? COMMA ( ws )? sass_forward_with_declaration )* ( ws )? RPAREN
			{
			dbg.location(373,5);
			if ( !(evalPredicate(tokenNameEquals("with"),"tokenNameEquals(\"with\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_forward_with", "tokenNameEquals(\"with\")");
			}dbg.location(373,32);
			match(input,IDENT,FOLLOW_IDENT_in_sass_forward_with843); if (state.failed) return;dbg.location(373,38);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:38: ( ws )?
			int alt51=2;
			try { dbg.enterSubRule(51);
			try { dbg.enterDecision(51, decisionCanBacktrack[51]);

			int LA51_0 = input.LA(1);
			if ( (LA51_0==COMMENT||LA51_0==NL||LA51_0==WS) ) {
				alt51=1;
			}
			} finally {dbg.exitDecision(51);}

			switch (alt51) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:38: ws
					{
					dbg.location(373,38);
					pushFollow(FOLLOW_ws_in_sass_forward_with845);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(51);}
			dbg.location(373,42);
			match(input,LPAREN,FOLLOW_LPAREN_in_sass_forward_with848); if (state.failed) return;dbg.location(373,49);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:49: ( ws )?
			int alt52=2;
			try { dbg.enterSubRule(52);
			try { dbg.enterDecision(52, decisionCanBacktrack[52]);

			int LA52_0 = input.LA(1);
			if ( (LA52_0==COMMENT||LA52_0==NL||LA52_0==WS) ) {
				alt52=1;
			}
			} finally {dbg.exitDecision(52);}

			switch (alt52) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:49: ws
					{
					dbg.location(373,49);
					pushFollow(FOLLOW_ws_in_sass_forward_with850);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(52);}
			dbg.location(373,53);
			pushFollow(FOLLOW_sass_forward_with_declaration_in_sass_forward_with853);
			sass_forward_with_declaration();
			state._fsp--;
			if (state.failed) return;dbg.location(373,84);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:84: ( ( ws )? COMMA ( ws )? sass_forward_with_declaration )*
			try { dbg.enterSubRule(55);

			loop55:
			while (true) {
				int alt55=2;
				try { dbg.enterDecision(55, decisionCanBacktrack[55]);

				try {
					isCyclicDecision = true;
					alt55 = dfa55.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(55);}

				switch (alt55) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:85: ( ws )? COMMA ( ws )? sass_forward_with_declaration
					{
					dbg.location(373,85);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:85: ( ws )?
					int alt53=2;
					try { dbg.enterSubRule(53);
					try { dbg.enterDecision(53, decisionCanBacktrack[53]);

					int LA53_0 = input.LA(1);
					if ( (LA53_0==COMMENT||LA53_0==NL||LA53_0==WS) ) {
						alt53=1;
					}
					} finally {dbg.exitDecision(53);}

					switch (alt53) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:85: ws
							{
							dbg.location(373,85);
							pushFollow(FOLLOW_ws_in_sass_forward_with857);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(53);}
					dbg.location(373,89);
					match(input,COMMA,FOLLOW_COMMA_in_sass_forward_with860); if (state.failed) return;dbg.location(373,95);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:95: ( ws )?
					int alt54=2;
					try { dbg.enterSubRule(54);
					try { dbg.enterDecision(54, decisionCanBacktrack[54]);

					int LA54_0 = input.LA(1);
					if ( (LA54_0==COMMENT||LA54_0==NL||LA54_0==WS) ) {
						alt54=1;
					}
					} finally {dbg.exitDecision(54);}

					switch (alt54) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:95: ws
							{
							dbg.location(373,95);
							pushFollow(FOLLOW_ws_in_sass_forward_with862);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(54);}
					dbg.location(373,99);
					pushFollow(FOLLOW_sass_forward_with_declaration_in_sass_forward_with865);
					sass_forward_with_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop55;
				}
			}
			} finally {dbg.exitSubRule(55);}
			dbg.location(373,132);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:132: ( ws )?
			int alt56=2;
			try { dbg.enterSubRule(56);
			try { dbg.enterDecision(56, decisionCanBacktrack[56]);

			int LA56_0 = input.LA(1);
			if ( (LA56_0==COMMENT||LA56_0==NL||LA56_0==WS) ) {
				alt56=1;
			}
			} finally {dbg.exitDecision(56);}

			switch (alt56) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:132: ws
					{
					dbg.location(373,132);
					pushFollow(FOLLOW_ws_in_sass_forward_with870);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(56);}
			dbg.location(373,136);
			match(input,RPAREN,FOLLOW_RPAREN_in_sass_forward_with873); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(374, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_forward_with");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_forward_with"



	// $ANTLR start "sass_forward_with_declaration"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:376:1: sass_forward_with_declaration : cp_variable ( ws )? COLON ( ws )? cp_expression ;
	public final void sass_forward_with_declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_forward_with_declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(376, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:377:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:378:5: cp_variable ( ws )? COLON ( ws )? cp_expression
			{
			dbg.location(378,5);
			pushFollow(FOLLOW_cp_variable_in_sass_forward_with_declaration894);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(378,17);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:378:17: ( ws )?
			int alt57=2;
			try { dbg.enterSubRule(57);
			try { dbg.enterDecision(57, decisionCanBacktrack[57]);

			int LA57_0 = input.LA(1);
			if ( (LA57_0==COMMENT||LA57_0==NL||LA57_0==WS) ) {
				alt57=1;
			}
			} finally {dbg.exitDecision(57);}

			switch (alt57) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:378:17: ws
					{
					dbg.location(378,17);
					pushFollow(FOLLOW_ws_in_sass_forward_with_declaration896);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(57);}
			dbg.location(378,21);
			match(input,COLON,FOLLOW_COLON_in_sass_forward_with_declaration899); if (state.failed) return;dbg.location(378,27);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:378:27: ( ws )?
			int alt58=2;
			try { dbg.enterSubRule(58);
			try { dbg.enterDecision(58, decisionCanBacktrack[58]);

			int LA58_0 = input.LA(1);
			if ( (LA58_0==COMMENT||LA58_0==NL||LA58_0==WS) ) {
				alt58=1;
			}
			} finally {dbg.exitDecision(58);}

			switch (alt58) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:378:27: ws
					{
					dbg.location(378,27);
					pushFollow(FOLLOW_ws_in_sass_forward_with_declaration901);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(58);}
			dbg.location(378,31);
			pushFollow(FOLLOW_cp_expression_in_sass_forward_with_declaration904);
			cp_expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(379, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_forward_with_declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_forward_with_declaration"



	// $ANTLR start "sass_forward_hide"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:1: sass_forward_hide :{...}? IDENT ws IDENT ( ( ws )? COMMA ( ws )? IDENT )* ;
	public final void sass_forward_hide() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_forward_hide");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(381, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:382:5: ({...}? IDENT ws IDENT ( ( ws )? COMMA ( ws )? IDENT )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:5: {...}? IDENT ws IDENT ( ( ws )? COMMA ( ws )? IDENT )*
			{
			dbg.location(383,5);
			if ( !(evalPredicate(tokenNameEquals("hide"),"tokenNameEquals(\"hide\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_forward_hide", "tokenNameEquals(\"hide\")");
			}dbg.location(383,32);
			match(input,IDENT,FOLLOW_IDENT_in_sass_forward_hide927); if (state.failed) return;dbg.location(383,38);
			pushFollow(FOLLOW_ws_in_sass_forward_hide929);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(383,41);
			match(input,IDENT,FOLLOW_IDENT_in_sass_forward_hide931); if (state.failed) return;dbg.location(383,47);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:47: ( ( ws )? COMMA ( ws )? IDENT )*
			try { dbg.enterSubRule(61);

			loop61:
			while (true) {
				int alt61=2;
				try { dbg.enterDecision(61, decisionCanBacktrack[61]);

				try {
					isCyclicDecision = true;
					alt61 = dfa61.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(61);}

				switch (alt61) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:48: ( ws )? COMMA ( ws )? IDENT
					{
					dbg.location(383,48);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:48: ( ws )?
					int alt59=2;
					try { dbg.enterSubRule(59);
					try { dbg.enterDecision(59, decisionCanBacktrack[59]);

					int LA59_0 = input.LA(1);
					if ( (LA59_0==COMMENT||LA59_0==NL||LA59_0==WS) ) {
						alt59=1;
					}
					} finally {dbg.exitDecision(59);}

					switch (alt59) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:48: ws
							{
							dbg.location(383,48);
							pushFollow(FOLLOW_ws_in_sass_forward_hide934);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(59);}
					dbg.location(383,52);
					match(input,COMMA,FOLLOW_COMMA_in_sass_forward_hide937); if (state.failed) return;dbg.location(383,58);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:58: ( ws )?
					int alt60=2;
					try { dbg.enterSubRule(60);
					try { dbg.enterDecision(60, decisionCanBacktrack[60]);

					int LA60_0 = input.LA(1);
					if ( (LA60_0==COMMENT||LA60_0==NL||LA60_0==WS) ) {
						alt60=1;
					}
					} finally {dbg.exitDecision(60);}

					switch (alt60) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:58: ws
							{
							dbg.location(383,58);
							pushFollow(FOLLOW_ws_in_sass_forward_hide939);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(60);}
					dbg.location(383,62);
					match(input,IDENT,FOLLOW_IDENT_in_sass_forward_hide942); if (state.failed) return;
					}
					break;

				default :
					break loop61;
				}
			}
			} finally {dbg.exitSubRule(61);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(384, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_forward_hide");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_forward_hide"



	// $ANTLR start "sass_forward_show"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:386:1: sass_forward_show :{...}? IDENT ws IDENT ( ( ws )? COMMA ( ws )? IDENT )* ;
	public final void sass_forward_show() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_forward_show");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(386, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:387:5: ({...}? IDENT ws IDENT ( ( ws )? COMMA ( ws )? IDENT )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:388:5: {...}? IDENT ws IDENT ( ( ws )? COMMA ( ws )? IDENT )*
			{
			dbg.location(388,5);
			if ( !(evalPredicate(tokenNameEquals("show"),"tokenNameEquals(\"show\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_forward_show", "tokenNameEquals(\"show\")");
			}dbg.location(388,32);
			match(input,IDENT,FOLLOW_IDENT_in_sass_forward_show967); if (state.failed) return;dbg.location(388,38);
			pushFollow(FOLLOW_ws_in_sass_forward_show969);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(388,41);
			match(input,IDENT,FOLLOW_IDENT_in_sass_forward_show971); if (state.failed) return;dbg.location(388,47);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:388:47: ( ( ws )? COMMA ( ws )? IDENT )*
			try { dbg.enterSubRule(64);

			loop64:
			while (true) {
				int alt64=2;
				try { dbg.enterDecision(64, decisionCanBacktrack[64]);

				try {
					isCyclicDecision = true;
					alt64 = dfa64.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(64);}

				switch (alt64) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:388:48: ( ws )? COMMA ( ws )? IDENT
					{
					dbg.location(388,48);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:388:48: ( ws )?
					int alt62=2;
					try { dbg.enterSubRule(62);
					try { dbg.enterDecision(62, decisionCanBacktrack[62]);

					int LA62_0 = input.LA(1);
					if ( (LA62_0==COMMENT||LA62_0==NL||LA62_0==WS) ) {
						alt62=1;
					}
					} finally {dbg.exitDecision(62);}

					switch (alt62) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:388:48: ws
							{
							dbg.location(388,48);
							pushFollow(FOLLOW_ws_in_sass_forward_show974);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(62);}
					dbg.location(388,52);
					match(input,COMMA,FOLLOW_COMMA_in_sass_forward_show977); if (state.failed) return;dbg.location(388,58);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:388:58: ( ws )?
					int alt63=2;
					try { dbg.enterSubRule(63);
					try { dbg.enterDecision(63, decisionCanBacktrack[63]);

					int LA63_0 = input.LA(1);
					if ( (LA63_0==COMMENT||LA63_0==NL||LA63_0==WS) ) {
						alt63=1;
					}
					} finally {dbg.exitDecision(63);}

					switch (alt63) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:388:58: ws
							{
							dbg.location(388,58);
							pushFollow(FOLLOW_ws_in_sass_forward_show979);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(63);}
					dbg.location(388,62);
					match(input,IDENT,FOLLOW_IDENT_in_sass_forward_show982); if (state.failed) return;
					}
					break;

				default :
					break loop64;
				}
			}
			} finally {dbg.exitSubRule(64);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(389, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_forward_show");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_forward_show"



	// $ANTLR start "media"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:1: media : MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE ;
	public final void media() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "media");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(391, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:5: ( MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:7: MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE
			{
			dbg.location(392,7);
			match(input,MEDIA_SYM,FOLLOW_MEDIA_SYM_in_media1001); if (state.failed) return;dbg.location(392,17);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:17: ( ws )?
			int alt65=2;
			try { dbg.enterSubRule(65);
			try { dbg.enterDecision(65, decisionCanBacktrack[65]);

			int LA65_0 = input.LA(1);
			if ( (LA65_0==COMMENT||LA65_0==NL||LA65_0==WS) ) {
				alt65=1;
			}
			} finally {dbg.exitDecision(65);}

			switch (alt65) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:17: ws
					{
					dbg.location(392,17);
					pushFollow(FOLLOW_ws_in_media1003);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(65);}
			dbg.location(393,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:5: ( mediaQueryList )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:10: mediaQueryList
			{
			dbg.location(394,10);
			pushFollow(FOLLOW_mediaQueryList_in_media1021);
			mediaQueryList();
			state._fsp--;
			if (state.failed) return;
			}
			dbg.location(395,7);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:7: ( ws )?
			int alt66=2;
			try { dbg.enterSubRule(66);
			try { dbg.enterDecision(66, decisionCanBacktrack[66]);

			int LA66_0 = input.LA(1);
			if ( (LA66_0==COMMENT||LA66_0==NL||LA66_0==WS) ) {
				alt66=1;
			}
			} finally {dbg.exitDecision(66);}

			switch (alt66) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:7: ws
					{
					dbg.location(395,7);
					pushFollow(FOLLOW_ws_in_media1029);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(66);}
			dbg.location(396,5);
			match(input,LBRACE,FOLLOW_LBRACE_in_media1036); if (state.failed) return;dbg.location(396,12);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:12: ( ws )?
			int alt67=2;
			try { dbg.enterSubRule(67);
			try { dbg.enterDecision(67, decisionCanBacktrack[67]);

			int LA67_0 = input.LA(1);
			if ( (LA67_0==COMMENT||LA67_0==NL||LA67_0==WS) ) {
				alt67=1;
			}
			} finally {dbg.exitDecision(67);}

			switch (alt67) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:12: ws
					{
					dbg.location(396,12);
					pushFollow(FOLLOW_ws_in_media1038);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(67);}
			dbg.location(396,16);
			pushFollow(FOLLOW_syncToFollow_in_media1041);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(397,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:397:9: ( mediaBody )?
			int alt68=2;
			try { dbg.enterSubRule(68);
			try { dbg.enterDecision(68, decisionCanBacktrack[68]);

			int LA68_0 = input.LA(1);
			if ( ((LA68_0 >= AT_IDENT && LA68_0 <= AT_SIGN)||(LA68_0 >= BOTTOMCENTER_SYM && LA68_0 <= BOTTOMRIGHT_SYM)||(LA68_0 >= CHARSET_SYM && LA68_0 <= COLON)||LA68_0==COUNTER_STYLE_SYM||(LA68_0 >= DCOLON && LA68_0 <= DOT)||LA68_0==FONT_FACE_SYM||(LA68_0 >= GEN && LA68_0 <= GREATER)||(LA68_0 >= HASH && LA68_0 <= HASH_SYMBOL)||LA68_0==IDENT||LA68_0==IMPORT_SYM||(LA68_0 >= LBRACKET && LA68_0 <= LEFTTOP_SYM)||LA68_0==LESS_AND||(LA68_0 >= MEDIA_SYM && LA68_0 <= MOZ_DOCUMENT_SYM)||LA68_0==NAMESPACE_SYM||LA68_0==PAGE_SYM||(LA68_0 >= PIPE && LA68_0 <= PLUS)||(LA68_0 >= RIGHTBOTTOM_SYM && LA68_0 <= RIGHTTOP_SYM)||(LA68_0 >= SASS_AT_ROOT && LA68_0 <= SASS_DEBUG)||(LA68_0 >= SASS_EACH && LA68_0 <= SASS_ELSE)||(LA68_0 >= SASS_EXTEND && LA68_0 <= SASS_FUNCTION)||(LA68_0 >= SASS_IF && LA68_0 <= SASS_MIXIN)||(LA68_0 >= SASS_RETURN && LA68_0 <= SEMI)||LA68_0==STAR||LA68_0==SUPPORTS_SYM||LA68_0==TILDE||(LA68_0 >= TOPCENTER_SYM && LA68_0 <= TOPRIGHT_SYM)||LA68_0==VARIABLE||LA68_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt68=1;
			}
			} finally {dbg.exitDecision(68);}

			switch (alt68) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:397:9: mediaBody
					{
					dbg.location(397,9);
					pushFollow(FOLLOW_mediaBody_in_media1051);
					mediaBody();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(68);}
			dbg.location(398,5);
			match(input,RBRACE,FOLLOW_RBRACE_in_media1058); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(399, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "media");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "media"



	// $ANTLR start "mediaBody"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:1: mediaBody : ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) | ({...}? sass_extend ( ws | ( SEMI ) ) ) )+ ;
	public final void mediaBody() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaBody");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(401, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:5: ( ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) | ({...}? sass_extend ( ws | ( SEMI ) ) ) )+ )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:403:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) | ({...}? sass_extend ( ws | ( SEMI ) ) ) )+
			{
			dbg.location(403,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:403:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) | ({...}? sass_extend ( ws | ( SEMI ) ) ) )+
			int cnt74=0;
			try { dbg.enterSubRule(74);

			loop74:
			while (true) {
				int alt74=4;
				try { dbg.enterDecision(74, decisionCanBacktrack[74]);

				switch ( input.LA(1) ) {
				case AT_IDENT:
				case AT_SIGN:
				case BOTTOMCENTER_SYM:
				case BOTTOMLEFTCORNER_SYM:
				case BOTTOMLEFT_SYM:
				case BOTTOMRIGHTCORNER_SYM:
				case BOTTOMRIGHT_SYM:
				case CHARSET_SYM:
				case COLON:
				case COUNTER_STYLE_SYM:
				case DCOLON:
				case DIMENSION:
				case DOT:
				case FONT_FACE_SYM:
				case GEN:
				case GREATER:
				case HASH:
				case HASH_SYMBOL:
				case IDENT:
				case IMPORT_SYM:
				case LBRACKET:
				case LEFTBOTTOM_SYM:
				case LEFTMIDDLE_SYM:
				case LEFTTOP_SYM:
				case LESS_AND:
				case MEDIA_SYM:
				case MINUS:
				case MOZ_DOCUMENT_SYM:
				case NAMESPACE_SYM:
				case PAGE_SYM:
				case PIPE:
				case PLUS:
				case RIGHTBOTTOM_SYM:
				case RIGHTMIDDLE_SYM:
				case RIGHTTOP_SYM:
				case SASS_AT_ROOT:
				case SASS_CONTENT:
				case SASS_DEBUG:
				case SASS_EACH:
				case SASS_ELSE:
				case SASS_EXTEND_ONLY_SELECTOR:
				case SASS_FOR:
				case SASS_FORWARD:
				case SASS_FUNCTION:
				case SASS_IF:
				case SASS_INCLUDE:
				case SASS_MIXIN:
				case SASS_RETURN:
				case SASS_USE:
				case SASS_VAR:
				case SASS_WARN:
				case SASS_WHILE:
				case STAR:
				case SUPPORTS_SYM:
				case TILDE:
				case TOPCENTER_SYM:
				case TOPLEFTCORNER_SYM:
				case TOPLEFT_SYM:
				case TOPRIGHTCORNER_SYM:
				case TOPRIGHT_SYM:
				case VARIABLE:
				case WEBKIT_KEYFRAMES_SYM:
					{
					alt74=1;
					}
					break;
				case SASS_EXTEND:
					{
					int LA74_35 = input.LA(2);
					if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
						alt74=1;
					}
					else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
						alt74=3;
					}

					}
					break;
				case SEMI:
					{
					alt74=2;
					}
					break;
				}
				} finally {dbg.exitDecision(74);}

				switch (alt74) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:404:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					{
					dbg.location(404,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:404:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:404:12: mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
					{
					dbg.location(404,12);
					pushFollow(FOLLOW_mediaBodyItem_in_mediaBody1092);
					mediaBodyItem();
					state._fsp--;
					if (state.failed) return;dbg.location(404,26);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:404:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
					int alt70=2;
					try { dbg.enterSubRule(70);
					try { dbg.enterDecision(70, decisionCanBacktrack[70]);

					try {
						isCyclicDecision = true;
						alt70 = dfa70.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(70);}

					switch (alt70) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:404:27: ( ( ws )? SEMI )=> ( ws )? SEMI
							{
							dbg.location(404,39);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:404:39: ( ws )?
							int alt69=2;
							try { dbg.enterSubRule(69);
							try { dbg.enterDecision(69, decisionCanBacktrack[69]);

							int LA69_0 = input.LA(1);
							if ( (LA69_0==COMMENT||LA69_0==NL||LA69_0==WS) ) {
								alt69=1;
							}
							} finally {dbg.exitDecision(69);}

							switch (alt69) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:404:39: ws
									{
									dbg.location(404,39);
									pushFollow(FOLLOW_ws_in_mediaBody1102);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(69);}
							dbg.location(404,43);
							match(input,SEMI,FOLLOW_SEMI_in_mediaBody1105); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(70);}
					dbg.location(404,50);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:404:50: ( ws )?
					int alt71=2;
					try { dbg.enterSubRule(71);
					try { dbg.enterDecision(71, decisionCanBacktrack[71]);

					int LA71_0 = input.LA(1);
					if ( (LA71_0==COMMENT||LA71_0==NL||LA71_0==WS) ) {
						alt71=1;
					}
					} finally {dbg.exitDecision(71);}

					switch (alt71) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:404:50: ws
							{
							dbg.location(404,50);
							pushFollow(FOLLOW_ws_in_mediaBody1109);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(71);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:10: ( SEMI ( ws )? )
					{
					dbg.location(406,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:10: ( SEMI ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:12: SEMI ( ws )?
					{
					dbg.location(406,12);
					match(input,SEMI,FOLLOW_SEMI_in_mediaBody1136); if (state.failed) return;dbg.location(406,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:17: ( ws )?
					int alt72=2;
					try { dbg.enterSubRule(72);
					try { dbg.enterDecision(72, decisionCanBacktrack[72]);

					int LA72_0 = input.LA(1);
					if ( (LA72_0==COMMENT||LA72_0==NL||LA72_0==WS) ) {
						alt72=1;
					}
					} finally {dbg.exitDecision(72);}

					switch (alt72) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:17: ws
							{
							dbg.location(406,17);
							pushFollow(FOLLOW_ws_in_mediaBody1138);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(72);}

					}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:407:12: ({...}? sass_extend ( ws | ( SEMI ) ) )
					{
					dbg.location(407,12);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:407:12: ({...}? sass_extend ( ws | ( SEMI ) ) )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:407:13: {...}? sass_extend ( ws | ( SEMI ) )
					{
					dbg.location(407,13);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBody", "isScssSource()");
					}dbg.location(407,31);
					pushFollow(FOLLOW_sass_extend_in_mediaBody1157);
					sass_extend();
					state._fsp--;
					if (state.failed) return;dbg.location(407,43);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:407:43: ( ws | ( SEMI ) )
					int alt73=2;
					try { dbg.enterSubRule(73);
					try { dbg.enterDecision(73, decisionCanBacktrack[73]);

					int LA73_0 = input.LA(1);
					if ( (LA73_0==COMMENT||LA73_0==NL||LA73_0==WS) ) {
						alt73=1;
					}
					else if ( (LA73_0==SEMI) ) {
						alt73=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 73, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(73);}

					switch (alt73) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:407:44: ws
							{
							dbg.location(407,44);
							pushFollow(FOLLOW_ws_in_mediaBody1160);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:407:49: ( SEMI )
							{
							dbg.location(407,49);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:407:49: ( SEMI )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:407:50: SEMI
							{
							dbg.location(407,50);
							match(input,SEMI,FOLLOW_SEMI_in_mediaBody1165); if (state.failed) return;
							}

							}
							break;

					}
					} finally {dbg.exitSubRule(73);}

					}

					}
					break;

				default :
					if ( cnt74 >= 1 ) break loop74;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(74, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt74++;
			}
			} finally {dbg.exitSubRule(74);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(409, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaBody");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaBody"



	// $ANTLR start "mediaBodyItem"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:1: mediaBodyItem : ( ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule | ( propertyDeclaration )=> propertyDeclaration |{...}? sass_debug |{...}? sass_control |{...}? sass_content |{...}? importItem | rule | page | fontFace | vendorAtRule | media | supportsAtRule );
	public final void mediaBodyItem() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaBodyItem");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(411, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:412:5: ( ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule | ( propertyDeclaration )=> propertyDeclaration |{...}? sass_debug |{...}? sass_control |{...}? sass_content |{...}? importItem | rule | page | fontFace | vendorAtRule | media | supportsAtRule )
			int alt79=15;
			try { dbg.enterDecision(79, decisionCanBacktrack[79]);

			int LA79_0 = input.LA(1);
			if ( (LA79_0==LESS_AND) ) {
				int LA79_1 = input.LA(2);
				if ( ((synpred5_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt79=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())) ) {
					alt79=2;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred7_Css3())) ) {
					alt79=3;
				}
				else if ( (synpred8_Css3()) ) {
					alt79=4;
				}
				else if ( (true) ) {
					alt79=10;
				}

			}
			else if ( (LA79_0==DOT) ) {
				int LA79_2 = input.LA(2);
				if ( ((synpred5_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt79=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())) ) {
					alt79=2;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred7_Css3())) ) {
					alt79=3;
				}
				else if ( (synpred8_Css3()) ) {
					alt79=4;
				}
				else if ( (true) ) {
					alt79=10;
				}

			}
			else if ( (LA79_0==HASH) ) {
				int LA79_3 = input.LA(2);
				if ( ((synpred5_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt79=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())) ) {
					alt79=2;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred7_Css3())) ) {
					alt79=3;
				}
				else if ( (synpred8_Css3()) ) {
					alt79=4;
				}
				else if ( (true) ) {
					alt79=10;
				}

			}
			else if ( (LA79_0==SASS_MIXIN) ) {
				int LA79_4 = input.LA(2);
				if ( ((synpred5_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt79=1;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt79=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 79, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA79_0==AT_IDENT) ) {
				int LA79_5 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())) ) {
					alt79=2;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred7_Css3())) ) {
					alt79=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt79=5;
				}
				else if ( (true) ) {
					alt79=13;
				}

			}
			else if ( (LA79_0==SASS_INCLUDE) ) {
				int LA79_6 = input.LA(2);
				if ( (((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt79=2;
				}
				else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred7_Css3())) ) {
					alt79=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt79=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 79, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA79_0==SASS_AT_ROOT) ) {
				int LA79_7 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt79=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt79=5;
				}
				else if ( (true) ) {
					alt79=10;
				}

			}
			else if ( (LA79_0==GREATER||LA79_0==PLUS||LA79_0==TILDE) ) {
				int LA79_8 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt79=4;
				}
				else if ( (true) ) {
					alt79=10;
				}

			}
			else if ( (LA79_0==SASS_EXTEND_ONLY_SELECTOR) ) {
				int LA79_9 = input.LA(2);
				if ( ((synpred8_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt79=4;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt79=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 79, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA79_0==HASH_SYMBOL) ) {
				int LA79_10 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt79=4;
				}
				else if ( ((synpred9_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt79=5;
				}
				else if ( (true) ) {
					alt79=10;
				}

			}
			else if ( (LA79_0==DIMENSION) ) {
				int LA79_11 = input.LA(2);
				if ( ((synpred8_Css3()&&evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"))) ) {
					alt79=4;
				}
				else if ( (evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")")) ) {
					alt79=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 79, 11, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA79_0==LBRACKET) ) {
				int LA79_12 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt79=4;
				}
				else if ( (true) ) {
					alt79=10;
				}

			}
			else if ( (LA79_0==COLON||LA79_0==DCOLON) ) {
				int LA79_13 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt79=4;
				}
				else if ( (true) ) {
					alt79=10;
				}

			}
			else if ( (LA79_0==IDENT) ) {
				int LA79_14 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt79=4;
				}
				else if ( (synpred9_Css3()) ) {
					alt79=5;
				}
				else if ( (true) ) {
					alt79=10;
				}

			}
			else if ( (LA79_0==AT_SIGN) ) {
				int LA79_15 = input.LA(2);
				if ( ((synpred8_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt79=4;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred9_Css3())) ) {
					alt79=5;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt79=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 79, 15, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA79_0==MINUS) ) {
				int LA79_16 = input.LA(2);
				if ( ((synpred8_Css3()&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))) ) {
					alt79=4;
				}
				else if ( ((synpred9_Css3()&&((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))||evalPredicate(isScssSource(),"isScssSource()")))) ) {
					alt79=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt79=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 79, 16, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA79_0==STAR) ) {
				int LA79_17 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt79=4;
				}
				else if ( (synpred9_Css3()) ) {
					alt79=5;
				}
				else if ( (true) ) {
					alt79=10;
				}

			}
			else if ( (LA79_0==PIPE) ) {
				int LA79_18 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt79=4;
				}
				else if ( (true) ) {
					alt79=10;
				}

			}
			else if ( (LA79_0==GEN) ) {
				int LA79_19 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt79=4;
				}
				else if ( (synpred9_Css3()) ) {
					alt79=5;
				}
				else if ( (true) ) {
					alt79=10;
				}

			}
			else if ( (LA79_0==VARIABLE) && (synpred9_Css3())) {
				alt79=5;
			}
			else if ( (LA79_0==SASS_DEBUG||LA79_0==SASS_WARN) ) {
				int LA79_21 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt79=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt79=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 79, 21, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA79_0==SASS_VAR) && (synpred9_Css3())) {
				alt79=5;
			}
			else if ( (LA79_0==SASS_IF) ) {
				int LA79_23 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt79=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt79=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 79, 23, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA79_0==SASS_FOR) ) {
				int LA79_24 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt79=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt79=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 79, 24, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA79_0==SASS_EACH) ) {
				int LA79_25 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt79=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt79=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 79, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA79_0==SASS_WHILE) ) {
				int LA79_26 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt79=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt79=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 79, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA79_0==SASS_CONTENT) ) {
				int LA79_27 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt79=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt79=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 79, 27, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA79_0==IMPORT_SYM) ) {
				int LA79_28 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt79=5;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt79=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 79, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA79_0==PAGE_SYM) ) {
				int LA79_29 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt79=5;
				}
				else if ( (true) ) {
					alt79=11;
				}

			}
			else if ( (LA79_0==FONT_FACE_SYM) ) {
				int LA79_30 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt79=5;
				}
				else if ( (true) ) {
					alt79=12;
				}

			}
			else if ( (LA79_0==MOZ_DOCUMENT_SYM) ) {
				int LA79_31 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt79=5;
				}
				else if ( (true) ) {
					alt79=13;
				}

			}
			else if ( (LA79_0==WEBKIT_KEYFRAMES_SYM) ) {
				int LA79_32 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt79=5;
				}
				else if ( (true) ) {
					alt79=13;
				}

			}
			else if ( (LA79_0==MEDIA_SYM) ) {
				int LA79_33 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt79=5;
				}
				else if ( (true) ) {
					alt79=14;
				}

			}
			else if ( ((LA79_0 >= BOTTOMCENTER_SYM && LA79_0 <= BOTTOMRIGHT_SYM)||LA79_0==CHARSET_SYM||LA79_0==COUNTER_STYLE_SYM||(LA79_0 >= LEFTBOTTOM_SYM && LA79_0 <= LEFTTOP_SYM)||LA79_0==NAMESPACE_SYM||(LA79_0 >= RIGHTBOTTOM_SYM && LA79_0 <= RIGHTTOP_SYM)||LA79_0==SASS_ELSE||LA79_0==SASS_EXTEND||(LA79_0 >= SASS_FORWARD && LA79_0 <= SASS_FUNCTION)||(LA79_0 >= SASS_RETURN && LA79_0 <= SASS_USE)||(LA79_0 >= TOPCENTER_SYM && LA79_0 <= TOPRIGHT_SYM)) && (synpred9_Css3())) {
				alt79=5;
			}
			else if ( (LA79_0==SUPPORTS_SYM) ) {
				alt79=15;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 79, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(79);}

			switch (alt79) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:5: ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration
					{
					dbg.location(413,96);
					pushFollow(FOLLOW_cp_mixin_declaration_in_mediaBodyItem1239);
					cp_mixin_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
					{
					dbg.location(415,55);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isLessSource()");
					}dbg.location(415,73);
					pushFollow(FOLLOW_cp_mixin_call_in_mediaBodyItem1272);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;dbg.location(415,87);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:87: ( ( ws )? IMPORTANT_SYM )?
					int alt76=2;
					try { dbg.enterSubRule(76);
					try { dbg.enterDecision(76, decisionCanBacktrack[76]);

					try {
						isCyclicDecision = true;
						alt76 = dfa76.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(76);}

					switch (alt76) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:88: ( ws )? IMPORTANT_SYM
							{
							dbg.location(415,88);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:88: ( ws )?
							int alt75=2;
							try { dbg.enterSubRule(75);
							try { dbg.enterDecision(75, decisionCanBacktrack[75]);

							int LA75_0 = input.LA(1);
							if ( (LA75_0==COMMENT||LA75_0==NL||LA75_0==WS) ) {
								alt75=1;
							}
							} finally {dbg.exitDecision(75);}

							switch (alt75) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:88: ws
									{
									dbg.location(415,88);
									pushFollow(FOLLOW_ws_in_mediaBodyItem1275);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(75);}
							dbg.location(415,92);
							match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_mediaBodyItem1278); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(76);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:7: ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
					{
					dbg.location(416,25);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
					}dbg.location(416,43);
					pushFollow(FOLLOW_cp_mixin_call_in_mediaBodyItem1295);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;dbg.location(416,57);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:57: ( ( ws )? IMPORTANT_SYM )?
					int alt78=2;
					try { dbg.enterSubRule(78);
					try { dbg.enterDecision(78, decisionCanBacktrack[78]);

					try {
						isCyclicDecision = true;
						alt78 = dfa78.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(78);}

					switch (alt78) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:58: ( ws )? IMPORTANT_SYM
							{
							dbg.location(416,58);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:58: ( ws )?
							int alt77=2;
							try { dbg.enterSubRule(77);
							try { dbg.enterDecision(77, decisionCanBacktrack[77]);

							int LA77_0 = input.LA(1);
							if ( (LA77_0==COMMENT||LA77_0==NL||LA77_0==WS) ) {
								alt77=1;
							}
							} finally {dbg.exitDecision(77);}

							switch (alt77) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:58: ws
									{
									dbg.location(416,58);
									pushFollow(FOLLOW_ws_in_mediaBodyItem1298);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(77);}
							dbg.location(416,62);
							match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_mediaBodyItem1301); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(78);}

					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:7: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule
					{
					dbg.location(417,145);
					pushFollow(FOLLOW_rule_in_mediaBodyItem1366);
					rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:418:7: ( propertyDeclaration )=> propertyDeclaration
					{
					dbg.location(418,30);
					pushFollow(FOLLOW_propertyDeclaration_in_mediaBodyItem1378);
					propertyDeclaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:7: {...}? sass_debug
					{
					dbg.location(419,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
					}dbg.location(419,25);
					pushFollow(FOLLOW_sass_debug_in_mediaBodyItem1388);
					sass_debug();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:420:7: {...}? sass_control
					{
					dbg.location(420,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
					}dbg.location(420,25);
					pushFollow(FOLLOW_sass_control_in_mediaBodyItem1398);
					sass_control();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:7: {...}? sass_content
					{
					dbg.location(421,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
					}dbg.location(421,25);
					pushFollow(FOLLOW_sass_content_in_mediaBodyItem1408);
					sass_content();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 9 :
					dbg.enterAlt(9);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:7: {...}? importItem
					{
					dbg.location(422,7);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isCssPreprocessorSource()");
					}dbg.location(422,36);
					pushFollow(FOLLOW_importItem_in_mediaBodyItem1418);
					importItem();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 10 :
					dbg.enterAlt(10);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:7: rule
					{
					dbg.location(423,7);
					pushFollow(FOLLOW_rule_in_mediaBodyItem1426);
					rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 11 :
					dbg.enterAlt(11);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:424:7: page
					{
					dbg.location(424,7);
					pushFollow(FOLLOW_page_in_mediaBodyItem1434);
					page();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 12 :
					dbg.enterAlt(12);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:425:7: fontFace
					{
					dbg.location(425,7);
					pushFollow(FOLLOW_fontFace_in_mediaBodyItem1442);
					fontFace();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 13 :
					dbg.enterAlt(13);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:7: vendorAtRule
					{
					dbg.location(426,7);
					pushFollow(FOLLOW_vendorAtRule_in_mediaBodyItem1450);
					vendorAtRule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 14 :
					dbg.enterAlt(14);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:428:7: media
					{
					dbg.location(428,7);
					pushFollow(FOLLOW_media_in_mediaBodyItem1463);
					media();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 15 :
					dbg.enterAlt(15);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:429:7: supportsAtRule
					{
					dbg.location(429,7);
					pushFollow(FOLLOW_supportsAtRule_in_mediaBodyItem1471);
					supportsAtRule();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(430, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaBodyItem");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaBodyItem"



	// $ANTLR start "mediaQueryList"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:432:1: mediaQueryList : mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* ;
	public final void mediaQueryList() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaQueryList");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(432, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:433:2: ( mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:433:4: mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
			{
			dbg.location(433,4);
			pushFollow(FOLLOW_mediaQuery_in_mediaQueryList1485);
			mediaQuery();
			state._fsp--;
			if (state.failed) return;dbg.location(433,15);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:433:15: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
			try { dbg.enterSubRule(82);

			loop82:
			while (true) {
				int alt82=2;
				try { dbg.enterDecision(82, decisionCanBacktrack[82]);

				try {
					isCyclicDecision = true;
					alt82 = dfa82.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(82);}

				switch (alt82) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:433:17: ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery
					{
					dbg.location(433,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:433:31: ( ws )?
					int alt80=2;
					try { dbg.enterSubRule(80);
					try { dbg.enterDecision(80, decisionCanBacktrack[80]);

					int LA80_0 = input.LA(1);
					if ( (LA80_0==COMMENT||LA80_0==NL||LA80_0==WS) ) {
						alt80=1;
					}
					} finally {dbg.exitDecision(80);}

					switch (alt80) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:433:31: ws
							{
							dbg.location(433,31);
							pushFollow(FOLLOW_ws_in_mediaQueryList1497);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(80);}
					dbg.location(433,35);
					match(input,COMMA,FOLLOW_COMMA_in_mediaQueryList1500); if (state.failed) return;dbg.location(433,41);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:433:41: ( ws )?
					int alt81=2;
					try { dbg.enterSubRule(81);
					try { dbg.enterDecision(81, decisionCanBacktrack[81]);

					int LA81_0 = input.LA(1);
					if ( (LA81_0==COMMENT||LA81_0==NL||LA81_0==WS) ) {
						alt81=1;
					}
					} finally {dbg.exitDecision(81);}

					switch (alt81) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:433:41: ws
							{
							dbg.location(433,41);
							pushFollow(FOLLOW_ws_in_mediaQueryList1502);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(81);}
					dbg.location(433,45);
					pushFollow(FOLLOW_mediaQuery_in_mediaQueryList1505);
					mediaQuery();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop82;
				}
			}
			} finally {dbg.exitSubRule(82);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(434, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaQueryList");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaQueryList"



	// $ANTLR start "mediaQuery"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:436:1: mediaQuery : ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )* | mediaExpression ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )* |{...}? cp_variable );
	public final void mediaQuery() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaQuery");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(436, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:437:2: ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )* | mediaExpression ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )* |{...}? cp_variable )
			int alt91=3;
			try { dbg.enterDecision(91, decisionCanBacktrack[91]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA91_1 = input.LA(2);
				if ( (!(evalPredicate((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()")),""))) ) {
					alt91=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt91=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 91, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GEN:
			case NOT:
				{
				alt91=1;
				}
				break;
			case HASH_SYMBOL:
				{
				int LA91_4 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt91=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt91=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 91, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LPAREN:
				{
				alt91=2;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt91=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 91, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(91);}

			switch (alt91) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:5: ( mediaQueryOperator ( ws )? )? mediaType ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )*
					{
					dbg.location(438,5);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:5: ( mediaQueryOperator ( ws )? )?
					int alt84=2;
					try { dbg.enterSubRule(84);
					try { dbg.enterDecision(84, decisionCanBacktrack[84]);

					int LA84_0 = input.LA(1);
					if ( (LA84_0==IDENT) ) {
						int LA84_1 = input.LA(2);
						if ( (evalPredicate(tokenNameEquals("only"),"tokenNameEquals(\"only\")")) ) {
							alt84=1;
						}
					}
					else if ( (LA84_0==NOT) ) {
						alt84=1;
					}
					} finally {dbg.exitDecision(84);}

					switch (alt84) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:6: mediaQueryOperator ( ws )?
							{
							dbg.location(438,6);
							pushFollow(FOLLOW_mediaQueryOperator_in_mediaQuery1524);
							mediaQueryOperator();
							state._fsp--;
							if (state.failed) return;dbg.location(438,25);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:25: ( ws )?
							int alt83=2;
							try { dbg.enterSubRule(83);
							try { dbg.enterDecision(83, decisionCanBacktrack[83]);

							int LA83_0 = input.LA(1);
							if ( (LA83_0==COMMENT||LA83_0==NL||LA83_0==WS) ) {
								alt83=1;
							}
							} finally {dbg.exitDecision(83);}

							switch (alt83) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:25: ws
									{
									dbg.location(438,25);
									pushFollow(FOLLOW_ws_in_mediaQuery1526);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(83);}

							}
							break;

					}
					} finally {dbg.exitSubRule(84);}
					dbg.location(438,33);
					pushFollow(FOLLOW_mediaType_in_mediaQuery1533);
					mediaType();
					state._fsp--;
					if (state.failed) return;dbg.location(438,43);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:43: ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )*
					try { dbg.enterSubRule(87);

					loop87:
					while (true) {
						int alt87=2;
						try { dbg.enterDecision(87, decisionCanBacktrack[87]);

						int LA87_0 = input.LA(1);
						if ( (LA87_0==COMMENT||LA87_0==NL||LA87_0==WS) ) {
							int LA87_1 = input.LA(2);
							if ( (synpred11_Css3()) ) {
								alt87=1;
							}

						}
						else if ( (LA87_0==IDENT) ) {
							int LA87_18 = input.LA(2);
							if ( ((synpred11_Css3()&&evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")"))) ) {
								alt87=1;
							}

						}

						} finally {dbg.exitDecision(87);}

						switch (alt87) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:44: ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression
							{
							dbg.location(438,60);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:60: ( ws )?
							int alt85=2;
							try { dbg.enterSubRule(85);
							try { dbg.enterDecision(85, decisionCanBacktrack[85]);

							int LA85_0 = input.LA(1);
							if ( (LA85_0==COMMENT||LA85_0==NL||LA85_0==WS) ) {
								alt85=1;
							}
							} finally {dbg.exitDecision(85);}

							switch (alt85) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:60: ws
									{
									dbg.location(438,60);
									pushFollow(FOLLOW_ws_in_mediaQuery1544);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(85);}
							dbg.location(438,64);
							pushFollow(FOLLOW_key_and_in_mediaQuery1547);
							key_and();
							state._fsp--;
							if (state.failed) return;dbg.location(438,72);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:72: ( ws )?
							int alt86=2;
							try { dbg.enterSubRule(86);
							try { dbg.enterDecision(86, decisionCanBacktrack[86]);

							int LA86_0 = input.LA(1);
							if ( (LA86_0==COMMENT||LA86_0==NL||LA86_0==WS) ) {
								alt86=1;
							}
							} finally {dbg.exitDecision(86);}

							switch (alt86) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:72: ws
									{
									dbg.location(438,72);
									pushFollow(FOLLOW_ws_in_mediaQuery1549);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(86);}
							dbg.location(438,76);
							pushFollow(FOLLOW_mediaExpression_in_mediaQuery1552);
							mediaExpression();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop87;
						}
					}
					} finally {dbg.exitSubRule(87);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:7: mediaExpression ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )*
					{
					dbg.location(439,7);
					pushFollow(FOLLOW_mediaExpression_in_mediaQuery1563);
					mediaExpression();
					state._fsp--;
					if (state.failed) return;dbg.location(439,23);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:23: ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )*
					try { dbg.enterSubRule(90);

					loop90:
					while (true) {
						int alt90=2;
						try { dbg.enterDecision(90, decisionCanBacktrack[90]);

						int LA90_0 = input.LA(1);
						if ( (LA90_0==COMMENT||LA90_0==NL||LA90_0==WS) ) {
							int LA90_1 = input.LA(2);
							if ( (synpred12_Css3()) ) {
								alt90=1;
							}

						}
						else if ( (LA90_0==IDENT) ) {
							int LA90_18 = input.LA(2);
							if ( ((evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")")&&synpred12_Css3())) ) {
								alt90=1;
							}

						}

						} finally {dbg.exitDecision(90);}

						switch (alt90) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:24: ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression
							{
							dbg.location(439,40);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:40: ( ws )?
							int alt88=2;
							try { dbg.enterSubRule(88);
							try { dbg.enterDecision(88, decisionCanBacktrack[88]);

							int LA88_0 = input.LA(1);
							if ( (LA88_0==COMMENT||LA88_0==NL||LA88_0==WS) ) {
								alt88=1;
							}
							} finally {dbg.exitDecision(88);}

							switch (alt88) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:40: ws
									{
									dbg.location(439,40);
									pushFollow(FOLLOW_ws_in_mediaQuery1574);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(88);}
							dbg.location(439,44);
							pushFollow(FOLLOW_key_and_in_mediaQuery1577);
							key_and();
							state._fsp--;
							if (state.failed) return;dbg.location(439,52);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:52: ( ws )?
							int alt89=2;
							try { dbg.enterSubRule(89);
							try { dbg.enterDecision(89, decisionCanBacktrack[89]);

							int LA89_0 = input.LA(1);
							if ( (LA89_0==COMMENT||LA89_0==NL||LA89_0==WS) ) {
								alt89=1;
							}
							} finally {dbg.exitDecision(89);}

							switch (alt89) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:52: ws
									{
									dbg.location(439,52);
									pushFollow(FOLLOW_ws_in_mediaQuery1579);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(89);}
							dbg.location(439,56);
							pushFollow(FOLLOW_mediaExpression_in_mediaQuery1582);
							mediaExpression();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop90;
						}
					}
					} finally {dbg.exitSubRule(90);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:440:7: {...}? cp_variable
					{
					dbg.location(440,7);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaQuery", "isLessSource()");
					}dbg.location(440,25);
					pushFollow(FOLLOW_cp_variable_in_mediaQuery1595);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(441, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaQuery");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaQuery"



	// $ANTLR start "mediaQueryOperator"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:443:1: mediaQueryOperator : ( key_only | NOT );
	public final void mediaQueryOperator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaQueryOperator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(443, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:3: ( key_only | NOT )
			int alt92=2;
			try { dbg.enterDecision(92, decisionCanBacktrack[92]);

			int LA92_0 = input.LA(1);
			if ( (LA92_0==IDENT) ) {
				alt92=1;
			}
			else if ( (LA92_0==NOT) ) {
				alt92=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 92, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(92);}

			switch (alt92) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:5: key_only
					{
					dbg.location(444,5);
					pushFollow(FOLLOW_key_only_in_mediaQueryOperator1607);
					key_only();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:16: NOT
					{
					dbg.location(444,16);
					match(input,NOT,FOLLOW_NOT_in_mediaQueryOperator1611); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(445, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaQueryOperator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaQueryOperator"



	// $ANTLR start "mediaType"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:447:1: mediaType : ( IDENT | GEN |{...}? sass_interpolation_expression_var );
	public final void mediaType() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaType");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(447, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:2: ( IDENT | GEN |{...}? sass_interpolation_expression_var )
			int alt93=3;
			try { dbg.enterDecision(93, decisionCanBacktrack[93]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				alt93=1;
				}
				break;
			case GEN:
				{
				alt93=2;
				}
				break;
			case HASH_SYMBOL:
				{
				alt93=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 93, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(93);}

			switch (alt93) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:4: IDENT
					{
					dbg.location(448,4);
					match(input,IDENT,FOLLOW_IDENT_in_mediaType1623); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:12: GEN
					{
					dbg.location(448,12);
					match(input,GEN,FOLLOW_GEN_in_mediaType1627); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:18: {...}? sass_interpolation_expression_var
					{
					dbg.location(448,18);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaType", "isCssPreprocessorSource()");
					}dbg.location(448,47);
					pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaType1633);
					sass_interpolation_expression_var();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(449, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaType");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaType"



	// $ANTLR start "mediaExpression"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:1: mediaExpression : ( ( LPAREN )=> ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN ) | ( HASH )=>{...}? sass_interpolation_expression_var );
	public final void mediaExpression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaExpression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(451, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:452:5: ( ( LPAREN )=> ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN ) | ( HASH )=>{...}? sass_interpolation_expression_var )
			int alt97=2;
			try { dbg.enterDecision(97, decisionCanBacktrack[97]);

			int LA97_0 = input.LA(1);
			if ( (LA97_0==LPAREN) && (synpred13_Css3())) {
				alt97=1;
			}
			else if ( (LA97_0==HASH_SYMBOL) && (synpred14_Css3())) {
				alt97=2;
			}

			} finally {dbg.exitDecision(97);}

			switch (alt97) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:5: ( LPAREN )=> ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN )
					{
					dbg.location(453,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:17: ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:18: LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN
					{
					dbg.location(453,18);
					match(input,LPAREN,FOLLOW_LPAREN_in_mediaExpression1658); if (state.failed) return;dbg.location(453,25);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:25: ( ws )?
					int alt94=2;
					try { dbg.enterSubRule(94);
					try { dbg.enterDecision(94, decisionCanBacktrack[94]);

					int LA94_0 = input.LA(1);
					if ( (LA94_0==COMMENT||LA94_0==NL||LA94_0==WS) ) {
						alt94=1;
					}
					} finally {dbg.exitDecision(94);}

					switch (alt94) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:25: ws
							{
							dbg.location(453,25);
							pushFollow(FOLLOW_ws_in_mediaExpression1660);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(94);}
					dbg.location(453,29);
					pushFollow(FOLLOW_mediaFeature_in_mediaExpression1663);
					mediaFeature();
					state._fsp--;
					if (state.failed) return;dbg.location(453,42);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:42: ( mediaFeatureValue )?
					int alt95=2;
					try { dbg.enterSubRule(95);
					try { dbg.enterDecision(95, decisionCanBacktrack[95]);

					try {
						isCyclicDecision = true;
						alt95 = dfa95.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(95);}

					switch (alt95) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:42: mediaFeatureValue
							{
							dbg.location(453,42);
							pushFollow(FOLLOW_mediaFeatureValue_in_mediaExpression1665);
							mediaFeatureValue();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(95);}
					dbg.location(453,61);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:61: ( ws )?
					int alt96=2;
					try { dbg.enterSubRule(96);
					try { dbg.enterDecision(96, decisionCanBacktrack[96]);

					int LA96_0 = input.LA(1);
					if ( (LA96_0==COMMENT||LA96_0==NL||LA96_0==WS) ) {
						alt96=1;
					}
					} finally {dbg.exitDecision(96);}

					switch (alt96) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:61: ws
							{
							dbg.location(453,61);
							pushFollow(FOLLOW_ws_in_mediaExpression1668);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(96);}
					dbg.location(453,65);
					match(input,RPAREN,FOLLOW_RPAREN_in_mediaExpression1671); if (state.failed) return;
					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:7: ( HASH )=>{...}? sass_interpolation_expression_var
					{
					dbg.location(454,17);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaExpression", "isCssPreprocessorSource()");
					}dbg.location(454,46);
					pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaExpression1688);
					sass_interpolation_expression_var();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(455, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaExpression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaExpression"



	// $ANTLR start "mediaFeatureValue"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:457:1: mediaFeatureValue : ( ws )? COLON ( ws )? ({...}? cp_expression | expression ) ;
	public final void mediaFeatureValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaFeatureValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(457, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:458:5: ( ( ws )? COLON ( ws )? ({...}? cp_expression | expression ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:5: ( ws )? COLON ( ws )? ({...}? cp_expression | expression )
			{
			dbg.location(459,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:5: ( ws )?
			int alt98=2;
			try { dbg.enterSubRule(98);
			try { dbg.enterDecision(98, decisionCanBacktrack[98]);

			int LA98_0 = input.LA(1);
			if ( (LA98_0==COMMENT||LA98_0==NL||LA98_0==WS) ) {
				alt98=1;
			}
			} finally {dbg.exitDecision(98);}

			switch (alt98) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:5: ws
					{
					dbg.location(459,5);
					pushFollow(FOLLOW_ws_in_mediaFeatureValue1709);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(98);}
			dbg.location(459,9);
			match(input,COLON,FOLLOW_COLON_in_mediaFeatureValue1712); if (state.failed) return;dbg.location(459,15);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:15: ( ws )?
			int alt99=2;
			try { dbg.enterSubRule(99);
			try { dbg.enterDecision(99, decisionCanBacktrack[99]);

			int LA99_0 = input.LA(1);
			if ( (LA99_0==COMMENT||LA99_0==NL||LA99_0==WS) ) {
				alt99=1;
			}
			} finally {dbg.exitDecision(99);}

			switch (alt99) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:15: ws
					{
					dbg.location(459,15);
					pushFollow(FOLLOW_ws_in_mediaFeatureValue1714);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(99);}
			dbg.location(460,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:460:5: ({...}? cp_expression | expression )
			int alt100=2;
			try { dbg.enterSubRule(100);
			try { dbg.enterDecision(100, decisionCanBacktrack[100]);

			switch ( input.LA(1) ) {
			case IMPORTANT_SYM:
			case LBRACE:
			case LPAREN:
			case NOT:
				{
				alt100=1;
				}
				break;
			case MINUS:
			case PLUS:
				{
				int LA100_3 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case IDENT:
				{
				int LA100_4 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case VARIABLE:
				{
				int LA100_5 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case LBRACKET:
				{
				int LA100_6 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case NUMBER:
				{
				int LA100_7 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case URANGE:
				{
				int LA100_8 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case PERCENTAGE:
				{
				int LA100_9 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case LENGTH:
				{
				int LA100_10 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case EMS:
				{
				int LA100_11 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case REM:
				{
				int LA100_12 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case EXS:
				{
				int LA100_13 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case ANGLE:
				{
				int LA100_14 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case TIME:
				{
				int LA100_15 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case FREQ:
				{
				int LA100_16 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case RESOLUTION:
				{
				int LA100_17 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case DIMENSION:
				{
				int LA100_18 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case STRING:
				{
				int LA100_19 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case TILDE:
				{
				int LA100_20 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case LESS_JS_STRING:
				{
				int LA100_21 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case GEN:
				{
				int LA100_22 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case URI:
				{
				int LA100_23 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case HASH:
				{
				int LA100_24 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (true) ) {
					alt100=2;
				}

				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA100_25 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt100=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt100=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 100, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA100_26 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt100=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt100=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 100, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LESS_AND:
				{
				int LA100_27 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt100=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt100=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 100, 27, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA100_28 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt100=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt100=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 100, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
				{
				int LA100_29 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt100=1;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt100=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 100, 29, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PERCENTAGE_SYMBOL:
				{
				int LA100_30 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt100=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 100, 30, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 100, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(100);}

			switch (alt100) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:461:9: {...}? cp_expression
					{
					dbg.location(461,9);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaFeatureValue", "isCssPreprocessorSource()");
					}dbg.location(461,38);
					pushFollow(FOLLOW_cp_expression_in_mediaFeatureValue1733);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:463:9: expression
					{
					dbg.location(463,9);
					pushFollow(FOLLOW_expression_in_mediaFeatureValue1753);
					expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(100);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(465, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaFeatureValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaFeatureValue"



	// $ANTLR start "mediaFeature"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:467:1: mediaFeature : ( IDENT | GEN |{...}? ( cp_variable | sass_interpolation_expression_var ) );
	public final void mediaFeature() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaFeature");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(467, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:468:2: ( IDENT | GEN |{...}? ( cp_variable | sass_interpolation_expression_var ) )
			int alt102=3;
			try { dbg.enterDecision(102, decisionCanBacktrack[102]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA102_1 = input.LA(2);
				if ( (LA102_1==DOT) ) {
					alt102=3;
				}
				else if ( (LA102_1==COLON||LA102_1==COMMENT||LA102_1==NL||LA102_1==RPAREN||LA102_1==WS) ) {
					alt102=1;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 102, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GEN:
				{
				alt102=2;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case HASH_SYMBOL:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt102=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 102, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(102);}

			switch (alt102) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:468:4: IDENT
					{
					dbg.location(468,4);
					match(input,IDENT,FOLLOW_IDENT_in_mediaFeature1773); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:468:12: GEN
					{
					dbg.location(468,12);
					match(input,GEN,FOLLOW_GEN_in_mediaFeature1777); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:468:18: {...}? ( cp_variable | sass_interpolation_expression_var )
					{
					dbg.location(468,18);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaFeature", "isCssPreprocessorSource()");
					}dbg.location(468,47);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:468:47: ( cp_variable | sass_interpolation_expression_var )
					int alt101=2;
					try { dbg.enterSubRule(101);
					try { dbg.enterDecision(101, decisionCanBacktrack[101]);

					int LA101_0 = input.LA(1);
					if ( (LA101_0==AT_IDENT||(LA101_0 >= BOTTOMCENTER_SYM && LA101_0 <= BOTTOMRIGHT_SYM)||LA101_0==CHARSET_SYM||LA101_0==COUNTER_STYLE_SYM||LA101_0==FONT_FACE_SYM||LA101_0==IDENT||LA101_0==IMPORT_SYM||(LA101_0 >= LEFTBOTTOM_SYM && LA101_0 <= LEFTTOP_SYM)||LA101_0==MEDIA_SYM||LA101_0==MOZ_DOCUMENT_SYM||LA101_0==NAMESPACE_SYM||LA101_0==PAGE_SYM||(LA101_0 >= RIGHTBOTTOM_SYM && LA101_0 <= RIGHTTOP_SYM)||(LA101_0 >= SASS_AT_ROOT && LA101_0 <= SASS_DEBUG)||(LA101_0 >= SASS_EACH && LA101_0 <= SASS_ELSE)||LA101_0==SASS_EXTEND||(LA101_0 >= SASS_FOR && LA101_0 <= SASS_FUNCTION)||(LA101_0 >= SASS_IF && LA101_0 <= SASS_MIXIN)||(LA101_0 >= SASS_RETURN && LA101_0 <= SASS_WHILE)||(LA101_0 >= TOPCENTER_SYM && LA101_0 <= TOPRIGHT_SYM)||LA101_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt101=1;
					}
					else if ( (LA101_0==HASH_SYMBOL) ) {
						alt101=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 101, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(101);}

					switch (alt101) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:468:49: cp_variable
							{
							dbg.location(468,49);
							pushFollow(FOLLOW_cp_variable_in_mediaFeature1785);
							cp_variable();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:468:63: sass_interpolation_expression_var
							{
							dbg.location(468,63);
							pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaFeature1789);
							sass_interpolation_expression_var();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(101);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(469, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaFeature");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaFeature"



	// $ANTLR start "body"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:2: body : ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
	public final void body() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "body");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(471, 1);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:472:5: ( ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:473:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
			{
			dbg.location(473,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:473:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
			int cnt107=0;
			try { dbg.enterSubRule(107);

			loop107:
			while (true) {
				int alt107=3;
				try { dbg.enterDecision(107, decisionCanBacktrack[107]);

				int LA107_0 = input.LA(1);
				if ( ((LA107_0 >= AT_IDENT && LA107_0 <= AT_SIGN)||(LA107_0 >= BOTTOMCENTER_SYM && LA107_0 <= BOTTOMRIGHT_SYM)||(LA107_0 >= CHARSET_SYM && LA107_0 <= COLON)||LA107_0==COUNTER_STYLE_SYM||(LA107_0 >= DCOLON && LA107_0 <= DOT)||LA107_0==FONT_FACE_SYM||(LA107_0 >= GEN && LA107_0 <= GREATER)||(LA107_0 >= HASH && LA107_0 <= HASH_SYMBOL)||LA107_0==IDENT||LA107_0==IMPORT_SYM||(LA107_0 >= LBRACKET && LA107_0 <= LEFTTOP_SYM)||LA107_0==LESS_AND||(LA107_0 >= MEDIA_SYM && LA107_0 <= MOZ_DOCUMENT_SYM)||LA107_0==NAMESPACE_SYM||LA107_0==PAGE_SYM||(LA107_0 >= PIPE && LA107_0 <= PLUS)||(LA107_0 >= RIGHTBOTTOM_SYM && LA107_0 <= RIGHTTOP_SYM)||(LA107_0 >= SASS_AT_ROOT && LA107_0 <= SASS_DEBUG)||(LA107_0 >= SASS_EACH && LA107_0 <= SASS_ELSE)||(LA107_0 >= SASS_EXTEND && LA107_0 <= SASS_FUNCTION)||(LA107_0 >= SASS_IF && LA107_0 <= SASS_MIXIN)||(LA107_0 >= SASS_RETURN && LA107_0 <= SASS_WHILE)||LA107_0==STAR||LA107_0==SUPPORTS_SYM||LA107_0==TILDE||(LA107_0 >= TOPCENTER_SYM && LA107_0 <= TOPRIGHT_SYM)||LA107_0==WEBKIT_KEYFRAMES_SYM) ) {
					alt107=1;
				}
				else if ( (LA107_0==SEMI) ) {
					alt107=2;
				}

				} finally {dbg.exitDecision(107);}

				switch (alt107) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					{
					dbg.location(474,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:12: bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
					{
					dbg.location(474,12);
					pushFollow(FOLLOW_bodyItem_in_body1823);
					bodyItem();
					state._fsp--;
					if (state.failed) return;dbg.location(474,21);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
					int alt104=2;
					try { dbg.enterSubRule(104);
					try { dbg.enterDecision(104, decisionCanBacktrack[104]);

					try {
						isCyclicDecision = true;
						alt104 = dfa104.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(104);}

					switch (alt104) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:22: ( ( ws )? SEMI )=> ( ws )? SEMI
							{
							dbg.location(474,34);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:34: ( ws )?
							int alt103=2;
							try { dbg.enterSubRule(103);
							try { dbg.enterDecision(103, decisionCanBacktrack[103]);

							int LA103_0 = input.LA(1);
							if ( (LA103_0==COMMENT||LA103_0==NL||LA103_0==WS) ) {
								alt103=1;
							}
							} finally {dbg.exitDecision(103);}

							switch (alt103) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:34: ws
									{
									dbg.location(474,34);
									pushFollow(FOLLOW_ws_in_body1833);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(103);}
							dbg.location(474,38);
							match(input,SEMI,FOLLOW_SEMI_in_body1836); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(104);}
					dbg.location(474,45);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:45: ( ws )?
					int alt105=2;
					try { dbg.enterSubRule(105);
					try { dbg.enterDecision(105, decisionCanBacktrack[105]);

					int LA105_0 = input.LA(1);
					if ( (LA105_0==COMMENT||LA105_0==NL||LA105_0==WS) ) {
						alt105=1;
					}
					} finally {dbg.exitDecision(105);}

					switch (alt105) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:45: ws
							{
							dbg.location(474,45);
							pushFollow(FOLLOW_ws_in_body1840);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(105);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:476:10: ( SEMI ( ws )? )
					{
					dbg.location(476,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:476:10: ( SEMI ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:476:12: SEMI ( ws )?
					{
					dbg.location(476,12);
					match(input,SEMI,FOLLOW_SEMI_in_body1867); if (state.failed) return;dbg.location(476,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:476:17: ( ws )?
					int alt106=2;
					try { dbg.enterSubRule(106);
					try { dbg.enterDecision(106, decisionCanBacktrack[106]);

					int LA106_0 = input.LA(1);
					if ( (LA106_0==COMMENT||LA106_0==NL||LA106_0==WS) ) {
						alt106=1;
					}
					} finally {dbg.exitDecision(106);}

					switch (alt106) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:476:17: ws
							{
							dbg.location(476,17);
							pushFollow(FOLLOW_ws_in_body1869);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(106);}

					}

					}
					break;

				default :
					if ( cnt107 >= 1 ) break loop107;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(107, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt107++;
			}
			} finally {dbg.exitSubRule(107);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(478, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "body");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "body"



	// $ANTLR start "bodyItem"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:1: bodyItem : ( ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call | ( cp_mixin_call )=>{...}? cp_mixin_call | rule | ( cp_variable ( ws )? COLON )=> cp_variable_declaration | ( sass_map )=> sass_map | at_rule |{...}? importItem |{...}? sass_debug |{...}? sass_control |{...}? sass_function_declaration );
	public final void bodyItem() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "bodyItem");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(480, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:481:5: ( ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call | ( cp_mixin_call )=>{...}? cp_mixin_call | rule | ( cp_variable ( ws )? COLON )=> cp_variable_declaration | ( sass_map )=> sass_map | at_rule |{...}? importItem |{...}? sass_debug |{...}? sass_control |{...}? sass_function_declaration )
			int alt108=11;
			try { dbg.enterDecision(108, decisionCanBacktrack[108]);

			switch ( input.LA(1) ) {
			case LESS_AND:
				{
				int LA108_1 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred16_Css3())) ) {
					alt108=1;
				}
				else if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=2;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt108=3;
				}
				else if ( (true) ) {
					alt108=4;
				}

				}
				break;
			case DOT:
				{
				int LA108_2 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred16_Css3())) ) {
					alt108=1;
				}
				else if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=2;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt108=3;
				}
				else if ( (true) ) {
					alt108=4;
				}

				}
				break;
			case HASH:
				{
				int LA108_3 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred16_Css3())) ) {
					alt108=1;
				}
				else if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=2;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt108=3;
				}
				else if ( (true) ) {
					alt108=4;
				}

				}
				break;
			case SASS_MIXIN:
				{
				int LA108_4 = input.LA(2);
				if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred16_Css3())) ) {
					alt108=1;
				}
				else if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt108=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 108, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_IDENT:
				{
				int LA108_5 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=2;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt108=3;
				}
				else if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt108=6;
				}
				else if ( (true) ) {
					alt108=7;
				}

				}
				break;
			case SASS_INCLUDE:
				{
				int LA108_6 = input.LA(2);
				if ( (((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt108=2;
				}
				else if ( ((synpred18_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt108=3;
				}
				else if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt108=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 108, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_AT_ROOT:
				{
				int LA108_7 = input.LA(2);
				if ( (true) ) {
					alt108=4;
				}
				else if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt108=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 108, 7, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
			case COLON:
			case DCOLON:
			case DIMENSION:
			case GEN:
			case GREATER:
			case HASH_SYMBOL:
			case LBRACKET:
			case MINUS:
			case PIPE:
			case PLUS:
			case SASS_EXTEND_ONLY_SELECTOR:
			case STAR:
			case TILDE:
				{
				alt108=4;
				}
				break;
			case IDENT:
				{
				int LA108_14 = input.LA(2);
				if ( (true) ) {
					alt108=4;
				}
				else if ( ((synpred19_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt108=5;
				}
				else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred20_Css3())) ) {
					alt108=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 108, 14, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case MEDIA_SYM:
				{
				int LA108_20 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt108=6;
				}
				else if ( (true) ) {
					alt108=7;
				}

				}
				break;
			case SASS_VAR:
				{
				int LA108_21 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt108=5;
				}
				else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred20_Css3())) ) {
					alt108=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 108, 21, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PAGE_SYM:
				{
				int LA108_22 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt108=6;
				}
				else if ( (true) ) {
					alt108=7;
				}

				}
				break;
			case COUNTER_STYLE_SYM:
				{
				int LA108_23 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt108=6;
				}
				else if ( (true) ) {
					alt108=7;
				}

				}
				break;
			case FONT_FACE_SYM:
				{
				int LA108_24 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt108=6;
				}
				else if ( (true) ) {
					alt108=7;
				}

				}
				break;
			case MOZ_DOCUMENT_SYM:
				{
				int LA108_25 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt108=6;
				}
				else if ( (true) ) {
					alt108=7;
				}

				}
				break;
			case SUPPORTS_SYM:
				{
				alt108=7;
				}
				break;
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA108_27 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt108=6;
				}
				else if ( (true) ) {
					alt108=7;
				}

				}
				break;
			case IMPORT_SYM:
				{
				int LA108_28 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt108=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt108=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 108, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_DEBUG:
			case SASS_WARN:
				{
				int LA108_29 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt108=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt108=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 108, 29, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_IF:
				{
				int LA108_30 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt108=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt108=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 108, 30, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_FOR:
				{
				int LA108_31 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt108=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt108=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 108, 31, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_EACH:
				{
				int LA108_32 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt108=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt108=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 108, 32, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_WHILE:
				{
				int LA108_33 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt108=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt108=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 108, 33, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_FUNCTION:
				{
				int LA108_34 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt108=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt108=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 108, 34, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case NAMESPACE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_CONTENT:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FORWARD:
			case SASS_RETURN:
			case SASS_USE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
				{
				int LA108_35 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt108=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt108=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 108, 35, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 108, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(108);}

			switch (alt108) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:9: ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration
					{
					dbg.location(482,107);
					pushFollow(FOLLOW_cp_mixin_declaration_in_bodyItem1949);
					cp_mixin_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:484:11: ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call
					{
					dbg.location(484,38);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isLessSource()");
					}dbg.location(484,56);
					pushFollow(FOLLOW_cp_mixin_call_in_bodyItem1982);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:485:11: ( cp_mixin_call )=>{...}? cp_mixin_call
					{
					dbg.location(485,29);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
					}dbg.location(485,47);
					pushFollow(FOLLOW_cp_mixin_call_in_bodyItem2001);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:8: rule
					{
					dbg.location(486,8);
					pushFollow(FOLLOW_rule_in_bodyItem2010);
					rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:11: ( cp_variable ( ws )? COLON )=> cp_variable_declaration
					{
					dbg.location(487,37);
					pushFollow(FOLLOW_cp_variable_declaration_in_bodyItem2032);
					cp_variable_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:11: ( sass_map )=> sass_map
					{
					dbg.location(488,24);
					pushFollow(FOLLOW_sass_map_in_bodyItem2049);
					sass_map();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:489:11: at_rule
					{
					dbg.location(489,11);
					pushFollow(FOLLOW_at_rule_in_bodyItem2061);
					at_rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:491:11: {...}? importItem
					{
					dbg.location(491,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isCssPreprocessorSource()");
					}dbg.location(491,40);
					pushFollow(FOLLOW_importItem_in_bodyItem2084);
					importItem();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 9 :
					dbg.enterAlt(9);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:492:11: {...}? sass_debug
					{
					dbg.location(492,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
					}dbg.location(492,29);
					pushFollow(FOLLOW_sass_debug_in_bodyItem2098);
					sass_debug();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 10 :
					dbg.enterAlt(10);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:11: {...}? sass_control
					{
					dbg.location(493,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
					}dbg.location(493,29);
					pushFollow(FOLLOW_sass_control_in_bodyItem2112);
					sass_control();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 11 :
					dbg.enterAlt(11);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:11: {...}? sass_function_declaration
					{
					dbg.location(494,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
					}dbg.location(494,29);
					pushFollow(FOLLOW_sass_function_declaration_in_bodyItem2126);
					sass_function_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(NL));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(495, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "bodyItem");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "bodyItem"



	// $ANTLR start "supportsAtRule"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:500:1: supportsAtRule : SUPPORTS_SYM ( ws )? supportsCondition ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE ;
	public final void supportsAtRule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsAtRule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(500, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:501:2: ( SUPPORTS_SYM ( ws )? supportsCondition ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:2: SUPPORTS_SYM ( ws )? supportsCondition ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE
			{
			dbg.location(502,2);
			match(input,SUPPORTS_SYM,FOLLOW_SUPPORTS_SYM_in_supportsAtRule2146); if (state.failed) return;dbg.location(502,15);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:15: ( ws )?
			int alt109=2;
			try { dbg.enterSubRule(109);
			try { dbg.enterDecision(109, decisionCanBacktrack[109]);

			int LA109_0 = input.LA(1);
			if ( (LA109_0==COMMENT||LA109_0==NL||LA109_0==WS) ) {
				alt109=1;
			}
			} finally {dbg.exitDecision(109);}

			switch (alt109) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:15: ws
					{
					dbg.location(502,15);
					pushFollow(FOLLOW_ws_in_supportsAtRule2148);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(109);}
			dbg.location(502,19);
			pushFollow(FOLLOW_supportsCondition_in_supportsAtRule2151);
			supportsCondition();
			state._fsp--;
			if (state.failed) return;dbg.location(502,37);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:37: ( ws )?
			int alt110=2;
			try { dbg.enterSubRule(110);
			try { dbg.enterDecision(110, decisionCanBacktrack[110]);

			int LA110_0 = input.LA(1);
			if ( (LA110_0==COMMENT||LA110_0==NL||LA110_0==WS) ) {
				alt110=1;
			}
			} finally {dbg.exitDecision(110);}

			switch (alt110) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:37: ws
					{
					dbg.location(502,37);
					pushFollow(FOLLOW_ws_in_supportsAtRule2153);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(110);}
			dbg.location(502,41);
			match(input,LBRACE,FOLLOW_LBRACE_in_supportsAtRule2156); if (state.failed) return;dbg.location(502,48);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:48: ( ws )?
			int alt111=2;
			try { dbg.enterSubRule(111);
			try { dbg.enterDecision(111, decisionCanBacktrack[111]);

			int LA111_0 = input.LA(1);
			if ( (LA111_0==COMMENT||LA111_0==NL||LA111_0==WS) ) {
				alt111=1;
			}
			} finally {dbg.exitDecision(111);}

			switch (alt111) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:48: ws
					{
					dbg.location(502,48);
					pushFollow(FOLLOW_ws_in_supportsAtRule2158);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(111);}
			dbg.location(502,52);
			pushFollow(FOLLOW_syncToFollow_in_supportsAtRule2161);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(502,65);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:65: ( mediaBody )?
			int alt112=2;
			try { dbg.enterSubRule(112);
			try { dbg.enterDecision(112, decisionCanBacktrack[112]);

			int LA112_0 = input.LA(1);
			if ( ((LA112_0 >= AT_IDENT && LA112_0 <= AT_SIGN)||(LA112_0 >= BOTTOMCENTER_SYM && LA112_0 <= BOTTOMRIGHT_SYM)||(LA112_0 >= CHARSET_SYM && LA112_0 <= COLON)||LA112_0==COUNTER_STYLE_SYM||(LA112_0 >= DCOLON && LA112_0 <= DOT)||LA112_0==FONT_FACE_SYM||(LA112_0 >= GEN && LA112_0 <= GREATER)||(LA112_0 >= HASH && LA112_0 <= HASH_SYMBOL)||LA112_0==IDENT||LA112_0==IMPORT_SYM||(LA112_0 >= LBRACKET && LA112_0 <= LEFTTOP_SYM)||LA112_0==LESS_AND||(LA112_0 >= MEDIA_SYM && LA112_0 <= MOZ_DOCUMENT_SYM)||LA112_0==NAMESPACE_SYM||LA112_0==PAGE_SYM||(LA112_0 >= PIPE && LA112_0 <= PLUS)||(LA112_0 >= RIGHTBOTTOM_SYM && LA112_0 <= RIGHTTOP_SYM)||(LA112_0 >= SASS_AT_ROOT && LA112_0 <= SASS_DEBUG)||(LA112_0 >= SASS_EACH && LA112_0 <= SASS_ELSE)||(LA112_0 >= SASS_EXTEND && LA112_0 <= SASS_FUNCTION)||(LA112_0 >= SASS_IF && LA112_0 <= SASS_MIXIN)||(LA112_0 >= SASS_RETURN && LA112_0 <= SEMI)||LA112_0==STAR||LA112_0==SUPPORTS_SYM||LA112_0==TILDE||(LA112_0 >= TOPCENTER_SYM && LA112_0 <= TOPRIGHT_SYM)||LA112_0==VARIABLE||LA112_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt112=1;
			}
			} finally {dbg.exitDecision(112);}

			switch (alt112) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:65: mediaBody
					{
					dbg.location(502,65);
					pushFollow(FOLLOW_mediaBody_in_supportsAtRule2163);
					mediaBody();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(112);}
			dbg.location(502,76);
			match(input,RBRACE,FOLLOW_RBRACE_in_supportsAtRule2166); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(503, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsAtRule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsAtRule"



	// $ANTLR start "supportsCondition"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:506:1: supportsCondition : ( NOT ws supportsInParens | supportsInParens ( ws supportsWithOperator )? );
	public final void supportsCondition() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsCondition");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(506, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:507:2: ( NOT ws supportsInParens | supportsInParens ( ws supportsWithOperator )? )
			int alt114=2;
			try { dbg.enterDecision(114, decisionCanBacktrack[114]);

			int LA114_0 = input.LA(1);
			if ( (LA114_0==NOT) ) {
				alt114=1;
			}
			else if ( (LA114_0==LPAREN) ) {
				alt114=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 114, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(114);}

			switch (alt114) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:2: NOT ws supportsInParens
					{
					dbg.location(508,2);
					match(input,NOT,FOLLOW_NOT_in_supportsCondition2179); if (state.failed) return;dbg.location(508,6);
					pushFollow(FOLLOW_ws_in_supportsCondition2181);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(508,9);
					pushFollow(FOLLOW_supportsInParens_in_supportsCondition2183);
					supportsInParens();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:509:4: supportsInParens ( ws supportsWithOperator )?
					{
					dbg.location(509,4);
					pushFollow(FOLLOW_supportsInParens_in_supportsCondition2188);
					supportsInParens();
					state._fsp--;
					if (state.failed) return;dbg.location(509,21);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:509:21: ( ws supportsWithOperator )?
					int alt113=2;
					try { dbg.enterSubRule(113);
					try { dbg.enterDecision(113, decisionCanBacktrack[113]);

					try {
						isCyclicDecision = true;
						alt113 = dfa113.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(113);}

					switch (alt113) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:509:22: ws supportsWithOperator
							{
							dbg.location(509,22);
							pushFollow(FOLLOW_ws_in_supportsCondition2191);
							ws();
							state._fsp--;
							if (state.failed) return;dbg.location(509,25);
							pushFollow(FOLLOW_supportsWithOperator_in_supportsCondition2193);
							supportsWithOperator();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(113);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(510, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsCondition");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsCondition"



	// $ANTLR start "supportsWithOperator"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:512:1: supportsWithOperator : ( supportsConjunction ( ws supportsConjunction )* | supportsDisjunction ( ws supportsDisjunction )* );
	public final void supportsWithOperator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsWithOperator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(512, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:513:9: ( supportsConjunction ( ws supportsConjunction )* | supportsDisjunction ( ws supportsDisjunction )* )
			int alt117=2;
			try { dbg.enterDecision(117, decisionCanBacktrack[117]);

			int LA117_0 = input.LA(1);
			if ( (LA117_0==IDENT) ) {
				int LA117_1 = input.LA(2);
				if ( (evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")")) ) {
					alt117=1;
				}
				else if ( (evalPredicate(tokenNameEquals("or"),"tokenNameEquals(\"or\")")) ) {
					alt117=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 117, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 117, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(117);}

			switch (alt117) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:514:9: supportsConjunction ( ws supportsConjunction )*
					{
					dbg.location(514,9);
					pushFollow(FOLLOW_supportsConjunction_in_supportsWithOperator2221);
					supportsConjunction();
					state._fsp--;
					if (state.failed) return;dbg.location(514,29);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:514:29: ( ws supportsConjunction )*
					try { dbg.enterSubRule(115);

					loop115:
					while (true) {
						int alt115=2;
						try { dbg.enterDecision(115, decisionCanBacktrack[115]);

						try {
							isCyclicDecision = true;
							alt115 = dfa115.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(115);}

						switch (alt115) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:514:30: ws supportsConjunction
							{
							dbg.location(514,30);
							pushFollow(FOLLOW_ws_in_supportsWithOperator2224);
							ws();
							state._fsp--;
							if (state.failed) return;dbg.location(514,33);
							pushFollow(FOLLOW_supportsConjunction_in_supportsWithOperator2226);
							supportsConjunction();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop115;
						}
					}
					} finally {dbg.exitSubRule(115);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:515:11: supportsDisjunction ( ws supportsDisjunction )*
					{
					dbg.location(515,11);
					pushFollow(FOLLOW_supportsDisjunction_in_supportsWithOperator2240);
					supportsDisjunction();
					state._fsp--;
					if (state.failed) return;dbg.location(515,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:515:31: ( ws supportsDisjunction )*
					try { dbg.enterSubRule(116);

					loop116:
					while (true) {
						int alt116=2;
						try { dbg.enterDecision(116, decisionCanBacktrack[116]);

						try {
							isCyclicDecision = true;
							alt116 = dfa116.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(116);}

						switch (alt116) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:515:32: ws supportsDisjunction
							{
							dbg.location(515,32);
							pushFollow(FOLLOW_ws_in_supportsWithOperator2243);
							ws();
							state._fsp--;
							if (state.failed) return;dbg.location(515,35);
							pushFollow(FOLLOW_supportsDisjunction_in_supportsWithOperator2245);
							supportsDisjunction();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop116;
						}
					}
					} finally {dbg.exitSubRule(116);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(516, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsWithOperator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsWithOperator"



	// $ANTLR start "supportsConjunction"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:518:1: supportsConjunction : ( key_and ws supportsInParens ) ;
	public final void supportsConjunction() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsConjunction");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(518, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:519:9: ( ( key_and ws supportsInParens ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:519:11: ( key_and ws supportsInParens )
			{
			dbg.location(519,11);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:519:11: ( key_and ws supportsInParens )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:519:12: key_and ws supportsInParens
			{
			dbg.location(519,12);
			pushFollow(FOLLOW_key_and_in_supportsConjunction2273);
			key_and();
			state._fsp--;
			if (state.failed) return;dbg.location(519,20);
			pushFollow(FOLLOW_ws_in_supportsConjunction2275);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(519,23);
			pushFollow(FOLLOW_supportsInParens_in_supportsConjunction2277);
			supportsInParens();
			state._fsp--;
			if (state.failed) return;
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(520, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsConjunction");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsConjunction"



	// $ANTLR start "supportsDisjunction"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:522:1: supportsDisjunction : ( key_or ws supportsInParens ) ;
	public final void supportsDisjunction() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsDisjunction");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(522, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:523:9: ( ( key_or ws supportsInParens ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:523:11: ( key_or ws supportsInParens )
			{
			dbg.location(523,11);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:523:11: ( key_or ws supportsInParens )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:523:12: key_or ws supportsInParens
			{
			dbg.location(523,12);
			pushFollow(FOLLOW_key_or_in_supportsDisjunction2304);
			key_or();
			state._fsp--;
			if (state.failed) return;dbg.location(523,19);
			pushFollow(FOLLOW_ws_in_supportsDisjunction2306);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(523,22);
			pushFollow(FOLLOW_supportsInParens_in_supportsDisjunction2308);
			supportsInParens();
			state._fsp--;
			if (state.failed) return;
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(524, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsDisjunction");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsDisjunction"



	// $ANTLR start "supportsInParens"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:526:1: supportsInParens : LPAREN ( ws )? ( supportsCondition | supportsFeature ) ( ws )? RPAREN ;
	public final void supportsInParens() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsInParens");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(526, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:527:2: ( LPAREN ( ws )? ( supportsCondition | supportsFeature ) ( ws )? RPAREN )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:2: LPAREN ( ws )? ( supportsCondition | supportsFeature ) ( ws )? RPAREN
			{
			dbg.location(528,2);
			match(input,LPAREN,FOLLOW_LPAREN_in_supportsInParens2328); if (state.failed) return;dbg.location(528,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:9: ( ws )?
			int alt118=2;
			try { dbg.enterSubRule(118);
			try { dbg.enterDecision(118, decisionCanBacktrack[118]);

			int LA118_0 = input.LA(1);
			if ( (LA118_0==COMMENT||LA118_0==NL||LA118_0==WS) ) {
				alt118=1;
			}
			} finally {dbg.exitDecision(118);}

			switch (alt118) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:9: ws
					{
					dbg.location(528,9);
					pushFollow(FOLLOW_ws_in_supportsInParens2330);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(118);}
			dbg.location(528,13);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:13: ( supportsCondition | supportsFeature )
			int alt119=2;
			try { dbg.enterSubRule(119);
			try { dbg.enterDecision(119, decisionCanBacktrack[119]);

			int LA119_0 = input.LA(1);
			if ( (LA119_0==LPAREN||LA119_0==NOT) ) {
				alt119=1;
			}
			else if ( ((LA119_0 >= AT_IDENT && LA119_0 <= AT_SIGN)||(LA119_0 >= BOTTOMCENTER_SYM && LA119_0 <= BOTTOMRIGHT_SYM)||(LA119_0 >= CHARSET_SYM && LA119_0 <= COLON)||LA119_0==COUNTER_STYLE_SYM||(LA119_0 >= DCOLON && LA119_0 <= DOT)||LA119_0==FONT_FACE_SYM||(LA119_0 >= GEN && LA119_0 <= GREATER)||(LA119_0 >= HASH && LA119_0 <= HASH_SYMBOL)||LA119_0==IDENT||LA119_0==IMPORT_SYM||(LA119_0 >= LBRACKET && LA119_0 <= LEFTTOP_SYM)||LA119_0==LESS_AND||(LA119_0 >= MEDIA_SYM && LA119_0 <= MOZ_DOCUMENT_SYM)||LA119_0==NAMESPACE_SYM||LA119_0==PAGE_SYM||(LA119_0 >= PIPE && LA119_0 <= PLUS)||(LA119_0 >= RIGHTBOTTOM_SYM && LA119_0 <= RIGHTTOP_SYM)||(LA119_0 >= SASS_AT_ROOT && LA119_0 <= SASS_DEBUG)||(LA119_0 >= SASS_EACH && LA119_0 <= SASS_ELSE)||(LA119_0 >= SASS_ERROR && LA119_0 <= SASS_FUNCTION)||(LA119_0 >= SASS_IF && LA119_0 <= SASS_MIXIN)||(LA119_0 >= SASS_RETURN && LA119_0 <= SASS_WHILE)||LA119_0==STAR||LA119_0==SUPPORTS_SYM||LA119_0==TILDE||(LA119_0 >= TOPCENTER_SYM && LA119_0 <= TOPRIGHT_SYM)||LA119_0==VARIABLE||LA119_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt119=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 119, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(119);}

			switch (alt119) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:14: supportsCondition
					{
					dbg.location(528,14);
					pushFollow(FOLLOW_supportsCondition_in_supportsInParens2334);
					supportsCondition();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:34: supportsFeature
					{
					dbg.location(528,34);
					pushFollow(FOLLOW_supportsFeature_in_supportsInParens2338);
					supportsFeature();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(119);}
			dbg.location(528,51);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:51: ( ws )?
			int alt120=2;
			try { dbg.enterSubRule(120);
			try { dbg.enterDecision(120, decisionCanBacktrack[120]);

			int LA120_0 = input.LA(1);
			if ( (LA120_0==COMMENT||LA120_0==NL||LA120_0==WS) ) {
				alt120=1;
			}
			} finally {dbg.exitDecision(120);}

			switch (alt120) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:51: ws
					{
					dbg.location(528,51);
					pushFollow(FOLLOW_ws_in_supportsInParens2341);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(120);}
			dbg.location(528,55);
			match(input,RPAREN,FOLLOW_RPAREN_in_supportsInParens2344); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(529, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsInParens");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsInParens"



	// $ANTLR start "supportsFeature"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:531:1: supportsFeature : supportsDecl ;
	public final void supportsFeature() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsFeature");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(531, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:2: ( supportsDecl )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:533:2: supportsDecl
			{
			dbg.location(533,2);
			pushFollow(FOLLOW_supportsDecl_in_supportsFeature2357);
			supportsDecl();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(534, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsFeature");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsFeature"



	// $ANTLR start "supportsDecl"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:1: supportsDecl : declaration ;
	public final void supportsDecl() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsDecl");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(536, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:537:2: ( declaration )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:538:2: declaration
			{
			dbg.location(538,2);
			pushFollow(FOLLOW_declaration_in_supportsDecl2370);
			declaration();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(539, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsDecl");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsDecl"



	// $ANTLR start "at_rule"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:541:1: at_rule : ( media | page | counterStyle | fontFace | supportsAtRule | vendorAtRule );
	public final void at_rule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "at_rule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(541, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:542:5: ( media | page | counterStyle | fontFace | supportsAtRule | vendorAtRule )
			int alt121=6;
			try { dbg.enterDecision(121, decisionCanBacktrack[121]);

			switch ( input.LA(1) ) {
			case MEDIA_SYM:
				{
				alt121=1;
				}
				break;
			case PAGE_SYM:
				{
				alt121=2;
				}
				break;
			case COUNTER_STYLE_SYM:
				{
				alt121=3;
				}
				break;
			case FONT_FACE_SYM:
				{
				alt121=4;
				}
				break;
			case SUPPORTS_SYM:
				{
				alt121=5;
				}
				break;
			case AT_IDENT:
			case MOZ_DOCUMENT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt121=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 121, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(121);}

			switch (alt121) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:543:5: media
					{
					dbg.location(543,5);
					pushFollow(FOLLOW_media_in_at_rule2388);
					media();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:544:7: page
					{
					dbg.location(544,7);
					pushFollow(FOLLOW_page_in_at_rule2396);
					page();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:545:7: counterStyle
					{
					dbg.location(545,7);
					pushFollow(FOLLOW_counterStyle_in_at_rule2404);
					counterStyle();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:546:7: fontFace
					{
					dbg.location(546,7);
					pushFollow(FOLLOW_fontFace_in_at_rule2412);
					fontFace();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:547:7: supportsAtRule
					{
					dbg.location(547,7);
					pushFollow(FOLLOW_supportsAtRule_in_at_rule2420);
					supportsAtRule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:548:7: vendorAtRule
					{
					dbg.location(548,7);
					pushFollow(FOLLOW_vendorAtRule_in_at_rule2428);
					vendorAtRule();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(549, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "at_rule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "at_rule"



	// $ANTLR start "vendorAtRule"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:551:1: vendorAtRule : ( moz_document | webkitKeyframes | generic_at_rule );
	public final void vendorAtRule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "vendorAtRule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(551, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:552:3: ( moz_document | webkitKeyframes | generic_at_rule )
			int alt122=3;
			try { dbg.enterDecision(122, decisionCanBacktrack[122]);

			switch ( input.LA(1) ) {
			case MOZ_DOCUMENT_SYM:
				{
				alt122=1;
				}
				break;
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt122=2;
				}
				break;
			case AT_IDENT:
				{
				alt122=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 122, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(122);}

			switch (alt122) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:552:3: moz_document
					{
					dbg.location(552,3);
					pushFollow(FOLLOW_moz_document_in_vendorAtRule2441);
					moz_document();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:552:18: webkitKeyframes
					{
					dbg.location(552,18);
					pushFollow(FOLLOW_webkitKeyframes_in_vendorAtRule2445);
					webkitKeyframes();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:552:36: generic_at_rule
					{
					dbg.location(552,36);
					pushFollow(FOLLOW_generic_at_rule_in_vendorAtRule2449);
					generic_at_rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(552, 50);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "vendorAtRule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "vendorAtRule"



	// $ANTLR start "atRuleId"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:554:1: atRuleId : ( IDENT | STRING |{...}? ( cp_variable | sass_interpolation_expression_var ) );
	public final void atRuleId() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "atRuleId");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(554, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:555:2: ( IDENT | STRING |{...}? ( cp_variable | sass_interpolation_expression_var ) )
			int alt124=3;
			try { dbg.enterDecision(124, decisionCanBacktrack[124]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA124_1 = input.LA(2);
				if ( (LA124_1==DOT) ) {
					alt124=3;
				}
				else if ( (LA124_1==COMMENT||LA124_1==LBRACE||LA124_1==NL||LA124_1==WS) ) {
					alt124=1;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 124, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case STRING:
				{
				alt124=2;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case HASH_SYMBOL:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt124=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 124, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(124);}

			switch (alt124) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:556:2: IDENT
					{
					dbg.location(556,2);
					match(input,IDENT,FOLLOW_IDENT_in_atRuleId2459); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:556:10: STRING
					{
					dbg.location(556,10);
					match(input,STRING,FOLLOW_STRING_in_atRuleId2463); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:556:19: {...}? ( cp_variable | sass_interpolation_expression_var )
					{
					dbg.location(556,19);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "atRuleId", "isCssPreprocessorSource()");
					}dbg.location(556,48);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:556:48: ( cp_variable | sass_interpolation_expression_var )
					int alt123=2;
					try { dbg.enterSubRule(123);
					try { dbg.enterDecision(123, decisionCanBacktrack[123]);

					int LA123_0 = input.LA(1);
					if ( (LA123_0==AT_IDENT||(LA123_0 >= BOTTOMCENTER_SYM && LA123_0 <= BOTTOMRIGHT_SYM)||LA123_0==CHARSET_SYM||LA123_0==COUNTER_STYLE_SYM||LA123_0==FONT_FACE_SYM||LA123_0==IDENT||LA123_0==IMPORT_SYM||(LA123_0 >= LEFTBOTTOM_SYM && LA123_0 <= LEFTTOP_SYM)||LA123_0==MEDIA_SYM||LA123_0==MOZ_DOCUMENT_SYM||LA123_0==NAMESPACE_SYM||LA123_0==PAGE_SYM||(LA123_0 >= RIGHTBOTTOM_SYM && LA123_0 <= RIGHTTOP_SYM)||(LA123_0 >= SASS_AT_ROOT && LA123_0 <= SASS_DEBUG)||(LA123_0 >= SASS_EACH && LA123_0 <= SASS_ELSE)||LA123_0==SASS_EXTEND||(LA123_0 >= SASS_FOR && LA123_0 <= SASS_FUNCTION)||(LA123_0 >= SASS_IF && LA123_0 <= SASS_MIXIN)||(LA123_0 >= SASS_RETURN && LA123_0 <= SASS_WHILE)||(LA123_0 >= TOPCENTER_SYM && LA123_0 <= TOPRIGHT_SYM)||LA123_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt123=1;
					}
					else if ( (LA123_0==HASH_SYMBOL) ) {
						alt123=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 123, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(123);}

					switch (alt123) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:556:50: cp_variable
							{
							dbg.location(556,50);
							pushFollow(FOLLOW_cp_variable_in_atRuleId2471);
							cp_variable();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:556:64: sass_interpolation_expression_var
							{
							dbg.location(556,64);
							pushFollow(FOLLOW_sass_interpolation_expression_var_in_atRuleId2475);
							sass_interpolation_expression_var();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(123);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(557, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "atRuleId");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "atRuleId"



	// $ANTLR start "generic_at_rule"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:559:1: generic_at_rule : AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE ;
	public final void generic_at_rule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "generic_at_rule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(559, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:560:5: ( AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:560:7: AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE
			{
			dbg.location(560,7);
			match(input,AT_IDENT,FOLLOW_AT_IDENT_in_generic_at_rule2491); if (state.failed) return;dbg.location(560,16);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:560:16: ( ws )?
			int alt125=2;
			try { dbg.enterSubRule(125);
			try { dbg.enterDecision(125, decisionCanBacktrack[125]);

			int LA125_0 = input.LA(1);
			if ( (LA125_0==COMMENT||LA125_0==NL||LA125_0==WS) ) {
				alt125=1;
			}
			} finally {dbg.exitDecision(125);}

			switch (alt125) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:560:16: ws
					{
					dbg.location(560,16);
					pushFollow(FOLLOW_ws_in_generic_at_rule2493);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(125);}
			dbg.location(560,20);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:560:20: ( atRuleId ( ws )? )?
			int alt127=2;
			try { dbg.enterSubRule(127);
			try { dbg.enterDecision(127, decisionCanBacktrack[127]);

			int LA127_0 = input.LA(1);
			if ( (LA127_0==AT_IDENT||(LA127_0 >= BOTTOMCENTER_SYM && LA127_0 <= BOTTOMRIGHT_SYM)||LA127_0==CHARSET_SYM||LA127_0==COUNTER_STYLE_SYM||LA127_0==FONT_FACE_SYM||LA127_0==HASH_SYMBOL||LA127_0==IDENT||LA127_0==IMPORT_SYM||(LA127_0 >= LEFTBOTTOM_SYM && LA127_0 <= LEFTTOP_SYM)||LA127_0==MEDIA_SYM||LA127_0==MOZ_DOCUMENT_SYM||LA127_0==NAMESPACE_SYM||LA127_0==PAGE_SYM||(LA127_0 >= RIGHTBOTTOM_SYM && LA127_0 <= RIGHTTOP_SYM)||(LA127_0 >= SASS_AT_ROOT && LA127_0 <= SASS_DEBUG)||(LA127_0 >= SASS_EACH && LA127_0 <= SASS_ELSE)||LA127_0==SASS_EXTEND||(LA127_0 >= SASS_FOR && LA127_0 <= SASS_FUNCTION)||(LA127_0 >= SASS_IF && LA127_0 <= SASS_MIXIN)||(LA127_0 >= SASS_RETURN && LA127_0 <= SASS_WHILE)||LA127_0==STRING||(LA127_0 >= TOPCENTER_SYM && LA127_0 <= TOPRIGHT_SYM)||LA127_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt127=1;
			}
			} finally {dbg.exitDecision(127);}

			switch (alt127) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:560:22: atRuleId ( ws )?
					{
					dbg.location(560,22);
					pushFollow(FOLLOW_atRuleId_in_generic_at_rule2498);
					atRuleId();
					state._fsp--;
					if (state.failed) return;dbg.location(560,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:560:31: ( ws )?
					int alt126=2;
					try { dbg.enterSubRule(126);
					try { dbg.enterDecision(126, decisionCanBacktrack[126]);

					int LA126_0 = input.LA(1);
					if ( (LA126_0==COMMENT||LA126_0==NL||LA126_0==WS) ) {
						alt126=1;
					}
					} finally {dbg.exitDecision(126);}

					switch (alt126) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:560:31: ws
							{
							dbg.location(560,31);
							pushFollow(FOLLOW_ws_in_generic_at_rule2500);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(126);}

					}
					break;

			}
			} finally {dbg.exitSubRule(127);}
			dbg.location(561,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_generic_at_rule2514); if (state.failed) return;dbg.location(562,10);
			pushFollow(FOLLOW_syncTo_RBRACE_in_generic_at_rule2525);
			syncTo_RBRACE();
			state._fsp--;
			if (state.failed) return;dbg.location(563,9);
			match(input,RBRACE,FOLLOW_RBRACE_in_generic_at_rule2535); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(564, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "generic_at_rule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "generic_at_rule"



	// $ANTLR start "moz_document"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:565:1: moz_document : MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE ;
	public final void moz_document() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "moz_document");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(565, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:566:2: ( MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:567:2: MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE
			{
			dbg.location(567,2);
			match(input,MOZ_DOCUMENT_SYM,FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document2546); if (state.failed) return;dbg.location(567,19);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:567:19: ( ws )?
			int alt128=2;
			try { dbg.enterSubRule(128);
			try { dbg.enterDecision(128, decisionCanBacktrack[128]);

			int LA128_0 = input.LA(1);
			if ( (LA128_0==COMMENT||LA128_0==NL||LA128_0==WS) ) {
				alt128=1;
			}
			} finally {dbg.exitDecision(128);}

			switch (alt128) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:567:19: ws
					{
					dbg.location(567,19);
					pushFollow(FOLLOW_ws_in_moz_document2548);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(128);}
			dbg.location(567,23);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:567:23: ( moz_document_function ( ws )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:567:25: moz_document_function ( ws )?
			{
			dbg.location(567,25);
			pushFollow(FOLLOW_moz_document_function_in_moz_document2553);
			moz_document_function();
			state._fsp--;
			if (state.failed) return;dbg.location(567,47);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:567:47: ( ws )?
			int alt129=2;
			try { dbg.enterSubRule(129);
			try { dbg.enterDecision(129, decisionCanBacktrack[129]);

			int LA129_0 = input.LA(1);
			if ( (LA129_0==COMMENT||LA129_0==NL||LA129_0==WS) ) {
				alt129=1;
			}
			} finally {dbg.exitDecision(129);}

			switch (alt129) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:567:47: ws
					{
					dbg.location(567,47);
					pushFollow(FOLLOW_ws_in_moz_document2555);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(129);}

			}
			dbg.location(567,52);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:567:52: ( COMMA ( ws )? moz_document_function ( ws )? )*
			try { dbg.enterSubRule(132);

			loop132:
			while (true) {
				int alt132=2;
				try { dbg.enterDecision(132, decisionCanBacktrack[132]);

				int LA132_0 = input.LA(1);
				if ( (LA132_0==COMMA) ) {
					alt132=1;
				}

				} finally {dbg.exitDecision(132);}

				switch (alt132) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:567:54: COMMA ( ws )? moz_document_function ( ws )?
					{
					dbg.location(567,54);
					match(input,COMMA,FOLLOW_COMMA_in_moz_document2561); if (state.failed) return;dbg.location(567,60);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:567:60: ( ws )?
					int alt130=2;
					try { dbg.enterSubRule(130);
					try { dbg.enterDecision(130, decisionCanBacktrack[130]);

					int LA130_0 = input.LA(1);
					if ( (LA130_0==COMMENT||LA130_0==NL||LA130_0==WS) ) {
						alt130=1;
					}
					} finally {dbg.exitDecision(130);}

					switch (alt130) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:567:60: ws
							{
							dbg.location(567,60);
							pushFollow(FOLLOW_ws_in_moz_document2563);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(130);}
					dbg.location(567,64);
					pushFollow(FOLLOW_moz_document_function_in_moz_document2566);
					moz_document_function();
					state._fsp--;
					if (state.failed) return;dbg.location(567,86);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:567:86: ( ws )?
					int alt131=2;
					try { dbg.enterSubRule(131);
					try { dbg.enterDecision(131, decisionCanBacktrack[131]);

					int LA131_0 = input.LA(1);
					if ( (LA131_0==COMMENT||LA131_0==NL||LA131_0==WS) ) {
						alt131=1;
					}
					} finally {dbg.exitDecision(131);}

					switch (alt131) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:567:86: ws
							{
							dbg.location(567,86);
							pushFollow(FOLLOW_ws_in_moz_document2568);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(131);}

					}
					break;

				default :
					break loop132;
				}
			}
			} finally {dbg.exitSubRule(132);}
			dbg.location(568,2);
			match(input,LBRACE,FOLLOW_LBRACE_in_moz_document2575); if (state.failed) return;dbg.location(568,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:568:9: ( ws )?
			int alt133=2;
			try { dbg.enterSubRule(133);
			try { dbg.enterDecision(133, decisionCanBacktrack[133]);

			int LA133_0 = input.LA(1);
			if ( (LA133_0==COMMENT||LA133_0==NL||LA133_0==WS) ) {
				alt133=1;
			}
			} finally {dbg.exitDecision(133);}

			switch (alt133) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:568:9: ws
					{
					dbg.location(568,9);
					pushFollow(FOLLOW_ws_in_moz_document2577);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(133);}
			dbg.location(569,3);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:569:3: ( body )?
			int alt134=2;
			try { dbg.enterSubRule(134);
			try { dbg.enterDecision(134, decisionCanBacktrack[134]);

			int LA134_0 = input.LA(1);
			if ( ((LA134_0 >= AT_IDENT && LA134_0 <= AT_SIGN)||(LA134_0 >= BOTTOMCENTER_SYM && LA134_0 <= BOTTOMRIGHT_SYM)||(LA134_0 >= CHARSET_SYM && LA134_0 <= COLON)||LA134_0==COUNTER_STYLE_SYM||(LA134_0 >= DCOLON && LA134_0 <= DOT)||LA134_0==FONT_FACE_SYM||(LA134_0 >= GEN && LA134_0 <= GREATER)||(LA134_0 >= HASH && LA134_0 <= HASH_SYMBOL)||LA134_0==IDENT||LA134_0==IMPORT_SYM||(LA134_0 >= LBRACKET && LA134_0 <= LEFTTOP_SYM)||LA134_0==LESS_AND||(LA134_0 >= MEDIA_SYM && LA134_0 <= MOZ_DOCUMENT_SYM)||LA134_0==NAMESPACE_SYM||LA134_0==PAGE_SYM||(LA134_0 >= PIPE && LA134_0 <= PLUS)||(LA134_0 >= RIGHTBOTTOM_SYM && LA134_0 <= RIGHTTOP_SYM)||(LA134_0 >= SASS_AT_ROOT && LA134_0 <= SASS_DEBUG)||(LA134_0 >= SASS_EACH && LA134_0 <= SASS_ELSE)||(LA134_0 >= SASS_EXTEND && LA134_0 <= SASS_FUNCTION)||(LA134_0 >= SASS_IF && LA134_0 <= SASS_MIXIN)||(LA134_0 >= SASS_RETURN && LA134_0 <= SEMI)||LA134_0==STAR||LA134_0==SUPPORTS_SYM||LA134_0==TILDE||(LA134_0 >= TOPCENTER_SYM && LA134_0 <= TOPRIGHT_SYM)||LA134_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt134=1;
			}
			} finally {dbg.exitDecision(134);}

			switch (alt134) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:569:3: body
					{
					dbg.location(569,3);
					pushFollow(FOLLOW_body_in_moz_document2582);
					body();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(134);}
			dbg.location(570,2);
			match(input,RBRACE,FOLLOW_RBRACE_in_moz_document2587); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(571, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "moz_document");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "moz_document"



	// $ANTLR start "moz_document_function"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:573:1: moz_document_function : ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP );
	public final void moz_document_function() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "moz_document_function");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(573, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:574:2: ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(574,2);
			if ( (input.LA(1) >= MOZ_DOMAIN && input.LA(1) <= MOZ_URL_PREFIX)||input.LA(1)==URI ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(576, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "moz_document_function");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "moz_document_function"



	// $ANTLR start "webkitKeyframes"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:579:1: webkitKeyframes : WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE ;
	public final void webkitKeyframes() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "webkitKeyframes");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(579, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:580:2: ( WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:581:2: WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE
			{
			dbg.location(581,2);
			match(input,WEBKIT_KEYFRAMES_SYM,FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes2624); if (state.failed) return;dbg.location(581,23);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:581:23: ( ws )?
			int alt135=2;
			try { dbg.enterSubRule(135);
			try { dbg.enterDecision(135, decisionCanBacktrack[135]);

			int LA135_0 = input.LA(1);
			if ( (LA135_0==COMMENT||LA135_0==NL||LA135_0==WS) ) {
				alt135=1;
			}
			} finally {dbg.exitDecision(135);}

			switch (alt135) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:581:23: ws
					{
					dbg.location(581,23);
					pushFollow(FOLLOW_ws_in_webkitKeyframes2626);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(135);}
			dbg.location(581,27);
			pushFollow(FOLLOW_atRuleId_in_webkitKeyframes2629);
			atRuleId();
			state._fsp--;
			if (state.failed) return;dbg.location(581,36);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:581:36: ( ws )?
			int alt136=2;
			try { dbg.enterSubRule(136);
			try { dbg.enterDecision(136, decisionCanBacktrack[136]);

			int LA136_0 = input.LA(1);
			if ( (LA136_0==COMMENT||LA136_0==NL||LA136_0==WS) ) {
				alt136=1;
			}
			} finally {dbg.exitDecision(136);}

			switch (alt136) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:581:36: ws
					{
					dbg.location(581,36);
					pushFollow(FOLLOW_ws_in_webkitKeyframes2631);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(136);}
			dbg.location(582,2);
			match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframes2635); if (state.failed) return;dbg.location(582,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:582:9: ( ws )?
			int alt137=2;
			try { dbg.enterSubRule(137);
			try { dbg.enterDecision(137, decisionCanBacktrack[137]);

			int LA137_0 = input.LA(1);
			if ( (LA137_0==COMMENT||LA137_0==NL||LA137_0==WS) ) {
				alt137=1;
			}
			} finally {dbg.exitDecision(137);}

			switch (alt137) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:582:9: ws
					{
					dbg.location(582,9);
					pushFollow(FOLLOW_ws_in_webkitKeyframes2637);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(137);}
			dbg.location(583,3);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:583:3: ( webkitKeyframesBlock ( ws )? )*
			try { dbg.enterSubRule(139);

			loop139:
			while (true) {
				int alt139=2;
				try { dbg.enterDecision(139, decisionCanBacktrack[139]);

				int LA139_0 = input.LA(1);
				if ( (LA139_0==IDENT||LA139_0==PERCENTAGE||LA139_0==SASS_CONTENT) ) {
					alt139=1;
				}

				} finally {dbg.exitDecision(139);}

				switch (alt139) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:583:5: webkitKeyframesBlock ( ws )?
					{
					dbg.location(583,5);
					pushFollow(FOLLOW_webkitKeyframesBlock_in_webkitKeyframes2644);
					webkitKeyframesBlock();
					state._fsp--;
					if (state.failed) return;dbg.location(583,26);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:583:26: ( ws )?
					int alt138=2;
					try { dbg.enterSubRule(138);
					try { dbg.enterDecision(138, decisionCanBacktrack[138]);

					int LA138_0 = input.LA(1);
					if ( (LA138_0==COMMENT||LA138_0==NL||LA138_0==WS) ) {
						alt138=1;
					}
					} finally {dbg.exitDecision(138);}

					switch (alt138) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:583:26: ws
							{
							dbg.location(583,26);
							pushFollow(FOLLOW_ws_in_webkitKeyframes2646);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(138);}

					}
					break;

				default :
					break loop139;
				}
			}
			} finally {dbg.exitSubRule(139);}
			dbg.location(584,2);
			match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframes2653); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(585, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "webkitKeyframes");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "webkitKeyframes"



	// $ANTLR start "webkitKeyframesBlock"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:587:1: webkitKeyframesBlock : ( webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE |{...}?{...}? sass_content ( SEMI )? );
	public final void webkitKeyframesBlock() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "webkitKeyframesBlock");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(587, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:588:2: ( webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE |{...}?{...}? sass_content ( SEMI )? )
			int alt144=2;
			try { dbg.enterDecision(144, decisionCanBacktrack[144]);

			int LA144_0 = input.LA(1);
			if ( (LA144_0==IDENT||LA144_0==PERCENTAGE) ) {
				alt144=1;
			}
			else if ( (LA144_0==SASS_CONTENT) ) {
				alt144=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 144, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(144);}

			switch (alt144) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:589:2: webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
					{
					dbg.location(589,2);
					pushFollow(FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock2665);
					webkitKeyframeSelectors();
					state._fsp--;
					if (state.failed) return;dbg.location(589,26);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:589:26: ( ws )?
					int alt140=2;
					try { dbg.enterSubRule(140);
					try { dbg.enterDecision(140, decisionCanBacktrack[140]);

					int LA140_0 = input.LA(1);
					if ( (LA140_0==COMMENT||LA140_0==NL||LA140_0==WS) ) {
						alt140=1;
					}
					} finally {dbg.exitDecision(140);}

					switch (alt140) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:589:26: ws
							{
							dbg.location(589,26);
							pushFollow(FOLLOW_ws_in_webkitKeyframesBlock2667);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(140);}
					dbg.location(590,2);
					match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframesBlock2671); if (state.failed) return;dbg.location(590,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:590:10: ( ws )?
					int alt141=2;
					try { dbg.enterSubRule(141);
					try { dbg.enterDecision(141, decisionCanBacktrack[141]);

					int LA141_0 = input.LA(1);
					if ( (LA141_0==COMMENT||LA141_0==NL||LA141_0==WS) ) {
						alt141=1;
					}
					} finally {dbg.exitDecision(141);}

					switch (alt141) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:590:10: ws
							{
							dbg.location(590,10);
							pushFollow(FOLLOW_ws_in_webkitKeyframesBlock2674);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(141);}
					dbg.location(590,14);
					pushFollow(FOLLOW_syncToFollow_in_webkitKeyframesBlock2677);
					syncToFollow();
					state._fsp--;
					if (state.failed) return;dbg.location(591,3);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:591:3: ( declarations )?
					int alt142=2;
					try { dbg.enterSubRule(142);
					try { dbg.enterDecision(142, decisionCanBacktrack[142]);

					int LA142_0 = input.LA(1);
					if ( ((LA142_0 >= AT_IDENT && LA142_0 <= AT_SIGN)||(LA142_0 >= BOTTOMCENTER_SYM && LA142_0 <= BOTTOMRIGHT_SYM)||(LA142_0 >= CHARSET_SYM && LA142_0 <= COLON)||LA142_0==COUNTER_STYLE_SYM||(LA142_0 >= DCOLON && LA142_0 <= DOT)||LA142_0==FONT_FACE_SYM||(LA142_0 >= GEN && LA142_0 <= GREATER)||(LA142_0 >= HASH && LA142_0 <= HASH_SYMBOL)||LA142_0==IDENT||LA142_0==IMPORT_SYM||(LA142_0 >= LBRACKET && LA142_0 <= LEFTTOP_SYM)||LA142_0==LESS_AND||(LA142_0 >= MEDIA_SYM && LA142_0 <= MOZ_DOCUMENT_SYM)||LA142_0==NAMESPACE_SYM||LA142_0==PAGE_SYM||(LA142_0 >= PIPE && LA142_0 <= PLUS)||(LA142_0 >= RIGHTBOTTOM_SYM && LA142_0 <= RIGHTTOP_SYM)||(LA142_0 >= SASS_AT_ROOT && LA142_0 <= SASS_DEBUG)||(LA142_0 >= SASS_EACH && LA142_0 <= SASS_ELSE)||(LA142_0 >= SASS_ERROR && LA142_0 <= SASS_FUNCTION)||(LA142_0 >= SASS_IF && LA142_0 <= SASS_MIXIN)||(LA142_0 >= SASS_RETURN && LA142_0 <= SEMI)||LA142_0==STAR||LA142_0==SUPPORTS_SYM||LA142_0==TILDE||(LA142_0 >= TOPCENTER_SYM && LA142_0 <= TOPRIGHT_SYM)||LA142_0==VARIABLE||LA142_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt142=1;
					}
					} finally {dbg.exitDecision(142);}

					switch (alt142) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:591:3: declarations
							{
							dbg.location(591,3);
							pushFollow(FOLLOW_declarations_in_webkitKeyframesBlock2681);
							declarations();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(142);}
					dbg.location(592,2);
					match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframesBlock2685); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:593:11: {...}?{...}? sass_content ( SEMI )?
					{
					dbg.location(593,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "webkitKeyframesBlock", "isScssSource()");
					}dbg.location(593,30);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "webkitKeyframesBlock", "isScssSource()");
					}dbg.location(593,48);
					pushFollow(FOLLOW_sass_content_in_webkitKeyframesBlock2702);
					sass_content();
					state._fsp--;
					if (state.failed) return;dbg.location(593,61);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:593:61: ( SEMI )?
					int alt143=2;
					try { dbg.enterSubRule(143);
					try { dbg.enterDecision(143, decisionCanBacktrack[143]);

					int LA143_0 = input.LA(1);
					if ( (LA143_0==SEMI) ) {
						alt143=1;
					}
					} finally {dbg.exitDecision(143);}

					switch (alt143) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:593:61: SEMI
							{
							dbg.location(593,61);
							match(input,SEMI,FOLLOW_SEMI_in_webkitKeyframesBlock2704); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(143);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(594, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "webkitKeyframesBlock");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "webkitKeyframesBlock"



	// $ANTLR start "webkitKeyframeSelectors"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:596:1: webkitKeyframeSelectors : ({...}? IDENT |{...}? IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE ) )* ;
	public final void webkitKeyframeSelectors() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "webkitKeyframeSelectors");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(596, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:597:2: ( ({...}? IDENT |{...}? IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE ) )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:2: ({...}? IDENT |{...}? IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE ) )*
			{
			dbg.location(598,2);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:2: ({...}? IDENT |{...}? IDENT | PERCENTAGE )
			int alt145=3;
			try { dbg.enterSubRule(145);
			try { dbg.enterDecision(145, decisionCanBacktrack[145]);

			int LA145_0 = input.LA(1);
			if ( (LA145_0==IDENT) ) {
				int LA145_1 = input.LA(2);
				if ( (evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
					alt145=1;
				}
				else if ( (evalPredicate(tokenNameEquals("to"),"tokenNameEquals(\"to\")")) ) {
					alt145=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 145, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA145_0==PERCENTAGE) ) {
				alt145=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 145, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(145);}

			switch (alt145) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:4: {...}? IDENT
					{
					dbg.location(598,4);
					if ( !(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "webkitKeyframeSelectors", "tokenNameEquals(\"from\")");
					}dbg.location(598,31);
					match(input,IDENT,FOLLOW_IDENT_in_webkitKeyframeSelectors2721); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:39: {...}? IDENT
					{
					dbg.location(598,39);
					if ( !(evalPredicate(tokenNameEquals("to"),"tokenNameEquals(\"to\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "webkitKeyframeSelectors", "tokenNameEquals(\"to\")");
					}dbg.location(598,64);
					match(input,IDENT,FOLLOW_IDENT_in_webkitKeyframeSelectors2727); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:72: PERCENTAGE
					{
					dbg.location(598,72);
					match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_webkitKeyframeSelectors2731); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(145);}
			dbg.location(598,85);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:85: ( ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE ) )*
			try { dbg.enterSubRule(149);

			loop149:
			while (true) {
				int alt149=2;
				try { dbg.enterDecision(149, decisionCanBacktrack[149]);

				try {
					isCyclicDecision = true;
					alt149 = dfa149.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(149);}

				switch (alt149) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:87: ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE )
					{
					dbg.location(598,87);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:87: ( ws )?
					int alt146=2;
					try { dbg.enterSubRule(146);
					try { dbg.enterDecision(146, decisionCanBacktrack[146]);

					int LA146_0 = input.LA(1);
					if ( (LA146_0==COMMENT||LA146_0==NL||LA146_0==WS) ) {
						alt146=1;
					}
					} finally {dbg.exitDecision(146);}

					switch (alt146) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:87: ws
							{
							dbg.location(598,87);
							pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors2737);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(146);}
					dbg.location(598,91);
					match(input,COMMA,FOLLOW_COMMA_in_webkitKeyframeSelectors2740); if (state.failed) return;dbg.location(598,97);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:97: ( ws )?
					int alt147=2;
					try { dbg.enterSubRule(147);
					try { dbg.enterDecision(147, decisionCanBacktrack[147]);

					int LA147_0 = input.LA(1);
					if ( (LA147_0==COMMENT||LA147_0==NL||LA147_0==WS) ) {
						alt147=1;
					}
					} finally {dbg.exitDecision(147);}

					switch (alt147) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:97: ws
							{
							dbg.location(598,97);
							pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors2742);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(147);}
					dbg.location(598,101);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:101: ({...}? IDENT |{...}? IDENT | PERCENTAGE )
					int alt148=3;
					try { dbg.enterSubRule(148);
					try { dbg.enterDecision(148, decisionCanBacktrack[148]);

					int LA148_0 = input.LA(1);
					if ( (LA148_0==IDENT) ) {
						int LA148_1 = input.LA(2);
						if ( (evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
							alt148=1;
						}
						else if ( (evalPredicate(tokenNameEquals("to"),"tokenNameEquals(\"to\")")) ) {
							alt148=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 148, 1, input);
								dbg.recognitionException(nvae);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA148_0==PERCENTAGE) ) {
						alt148=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 148, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(148);}

					switch (alt148) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:103: {...}? IDENT
							{
							dbg.location(598,103);
							if ( !(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "webkitKeyframeSelectors", "tokenNameEquals(\"from\")");
							}dbg.location(598,130);
							match(input,IDENT,FOLLOW_IDENT_in_webkitKeyframeSelectors2749); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:138: {...}? IDENT
							{
							dbg.location(598,138);
							if ( !(evalPredicate(tokenNameEquals("to"),"tokenNameEquals(\"to\")")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "webkitKeyframeSelectors", "tokenNameEquals(\"to\")");
							}dbg.location(598,163);
							match(input,IDENT,FOLLOW_IDENT_in_webkitKeyframeSelectors2755); if (state.failed) return;
							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:171: PERCENTAGE
							{
							dbg.location(598,171);
							match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_webkitKeyframeSelectors2759); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(148);}

					}
					break;

				default :
					break loop149;
				}
			}
			} finally {dbg.exitSubRule(149);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(599, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "webkitKeyframeSelectors");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "webkitKeyframeSelectors"



	// $ANTLR start "page"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:1: page : PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ( ws )? ({...}? ( SEMI ( ws )? ) | ( SEMI ( ws )? )? ) ( propertyDeclaration | margin ) )* ( SEMI )? ( ws )? RBRACE ;
	public final void page() throws RecognitionException {

		    boolean semiRequired = false;

		try { dbg.enterRule(getGrammarFileName(), "page");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(601, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:5: ( PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ( ws )? ({...}? ( SEMI ( ws )? ) | ( SEMI ( ws )? )? ) ( propertyDeclaration | margin ) )* ( SEMI )? ( ws )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:7: PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ( ws )? ({...}? ( SEMI ( ws )? ) | ( SEMI ( ws )? )? ) ( propertyDeclaration | margin ) )* ( SEMI )? ( ws )? RBRACE
			{
			dbg.location(605,7);
			match(input,PAGE_SYM,FOLLOW_PAGE_SYM_in_page2783); if (state.failed) return;dbg.location(605,16);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:16: ( ws )?
			int alt150=2;
			try { dbg.enterSubRule(150);
			try { dbg.enterDecision(150, decisionCanBacktrack[150]);

			int LA150_0 = input.LA(1);
			if ( (LA150_0==COMMENT||LA150_0==NL||LA150_0==WS) ) {
				alt150=1;
			}
			} finally {dbg.exitDecision(150);}

			switch (alt150) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:16: ws
					{
					dbg.location(605,16);
					pushFollow(FOLLOW_ws_in_page2785);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(150);}
			dbg.location(605,20);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:20: ( IDENT ( ws )? )?
			int alt152=2;
			try { dbg.enterSubRule(152);
			try { dbg.enterDecision(152, decisionCanBacktrack[152]);

			int LA152_0 = input.LA(1);
			if ( (LA152_0==IDENT) ) {
				alt152=1;
			}
			} finally {dbg.exitDecision(152);}

			switch (alt152) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:22: IDENT ( ws )?
					{
					dbg.location(605,22);
					match(input,IDENT,FOLLOW_IDENT_in_page2790); if (state.failed) return;dbg.location(605,28);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:28: ( ws )?
					int alt151=2;
					try { dbg.enterSubRule(151);
					try { dbg.enterDecision(151, decisionCanBacktrack[151]);

					int LA151_0 = input.LA(1);
					if ( (LA151_0==COMMENT||LA151_0==NL||LA151_0==WS) ) {
						alt151=1;
					}
					} finally {dbg.exitDecision(151);}

					switch (alt151) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:28: ws
							{
							dbg.location(605,28);
							pushFollow(FOLLOW_ws_in_page2792);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(151);}

					}
					break;

			}
			} finally {dbg.exitSubRule(152);}
			dbg.location(605,35);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:35: ( pseudoPage ( ws )? )?
			int alt154=2;
			try { dbg.enterSubRule(154);
			try { dbg.enterDecision(154, decisionCanBacktrack[154]);

			int LA154_0 = input.LA(1);
			if ( (LA154_0==COLON) ) {
				alt154=1;
			}
			} finally {dbg.exitDecision(154);}

			switch (alt154) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:36: pseudoPage ( ws )?
					{
					dbg.location(605,36);
					pushFollow(FOLLOW_pseudoPage_in_page2799);
					pseudoPage();
					state._fsp--;
					if (state.failed) return;dbg.location(605,47);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:47: ( ws )?
					int alt153=2;
					try { dbg.enterSubRule(153);
					try { dbg.enterDecision(153, decisionCanBacktrack[153]);

					int LA153_0 = input.LA(1);
					if ( (LA153_0==COMMENT||LA153_0==NL||LA153_0==WS) ) {
						alt153=1;
					}
					} finally {dbg.exitDecision(153);}

					switch (alt153) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:47: ws
							{
							dbg.location(605,47);
							pushFollow(FOLLOW_ws_in_page2801);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(153);}

					}
					break;

			}
			} finally {dbg.exitSubRule(154);}
			dbg.location(606,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_page2814); if (state.failed) return;dbg.location(609,13);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:13: ( ( ws )? ({...}? ( SEMI ( ws )? ) | ( SEMI ( ws )? )? ) ( propertyDeclaration | margin ) )*
			try { dbg.enterSubRule(161);

			loop161:
			while (true) {
				int alt161=2;
				try { dbg.enterDecision(161, decisionCanBacktrack[161]);

				try {
					isCyclicDecision = true;
					alt161 = dfa161.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(161);}

				switch (alt161) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:15: ( ws )? ({...}? ( SEMI ( ws )? ) | ( SEMI ( ws )? )? ) ( propertyDeclaration | margin )
					{
					dbg.location(609,15);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:15: ( ws )?
					int alt155=2;
					try { dbg.enterSubRule(155);
					try { dbg.enterDecision(155, decisionCanBacktrack[155]);

					int LA155_0 = input.LA(1);
					if ( (LA155_0==COMMENT||LA155_0==NL||LA155_0==WS) ) {
						alt155=1;
					}
					} finally {dbg.exitDecision(155);}

					switch (alt155) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:15: ws
							{
							dbg.location(609,15);
							pushFollow(FOLLOW_ws_in_page2856);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(155);}
					dbg.location(609,19);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:19: ({...}? ( SEMI ( ws )? ) | ( SEMI ( ws )? )? )
					int alt159=2;
					try { dbg.enterSubRule(159);
					try { dbg.enterDecision(159, decisionCanBacktrack[159]);

					int LA159_0 = input.LA(1);
					if ( (LA159_0==SEMI) ) {
						int LA159_1 = input.LA(2);
						if ( (evalPredicate(semiRequired,"semiRequired")) ) {
							alt159=1;
						}
						else if ( (true) ) {
							alt159=2;
						}

					}
					else if ( ((LA159_0 >= AT_IDENT && LA159_0 <= AT_SIGN)||(LA159_0 >= BOTTOMCENTER_SYM && LA159_0 <= BOTTOMRIGHT_SYM)||LA159_0==CHARSET_SYM||LA159_0==COUNTER_STYLE_SYM||LA159_0==FONT_FACE_SYM||LA159_0==GEN||LA159_0==HASH_SYMBOL||LA159_0==IDENT||LA159_0==IMPORT_SYM||(LA159_0 >= LEFTBOTTOM_SYM && LA159_0 <= LEFTTOP_SYM)||(LA159_0 >= MEDIA_SYM && LA159_0 <= MOZ_DOCUMENT_SYM)||LA159_0==NAMESPACE_SYM||LA159_0==PAGE_SYM||(LA159_0 >= RIGHTBOTTOM_SYM && LA159_0 <= RIGHTTOP_SYM)||(LA159_0 >= SASS_AT_ROOT && LA159_0 <= SASS_DEBUG)||(LA159_0 >= SASS_EACH && LA159_0 <= SASS_ELSE)||LA159_0==SASS_EXTEND||(LA159_0 >= SASS_FOR && LA159_0 <= SASS_FUNCTION)||(LA159_0 >= SASS_IF && LA159_0 <= SASS_MIXIN)||(LA159_0 >= SASS_RETURN && LA159_0 <= SASS_WHILE)||LA159_0==STAR||(LA159_0 >= TOPCENTER_SYM && LA159_0 <= TOPRIGHT_SYM)||LA159_0==VARIABLE||LA159_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt159=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 159, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(159);}

					switch (alt159) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:20: {...}? ( SEMI ( ws )? )
							{
							dbg.location(609,20);
							if ( !(evalPredicate(semiRequired,"semiRequired")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "page", "semiRequired");
							}dbg.location(609,36);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:36: ( SEMI ( ws )? )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:37: SEMI ( ws )?
							{
							dbg.location(609,37);
							match(input,SEMI,FOLLOW_SEMI_in_page2863); if (state.failed) return;dbg.location(609,42);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:42: ( ws )?
							int alt156=2;
							try { dbg.enterSubRule(156);
							try { dbg.enterDecision(156, decisionCanBacktrack[156]);

							int LA156_0 = input.LA(1);
							if ( (LA156_0==COMMENT||LA156_0==NL||LA156_0==WS) ) {
								alt156=1;
							}
							} finally {dbg.exitDecision(156);}

							switch (alt156) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:42: ws
									{
									dbg.location(609,42);
									pushFollow(FOLLOW_ws_in_page2865);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(156);}

							}

							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:49: ( SEMI ( ws )? )?
							{
							dbg.location(609,49);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:49: ( SEMI ( ws )? )?
							int alt158=2;
							try { dbg.enterSubRule(158);
							try { dbg.enterDecision(158, decisionCanBacktrack[158]);

							int LA158_0 = input.LA(1);
							if ( (LA158_0==SEMI) ) {
								alt158=1;
							}
							} finally {dbg.exitDecision(158);}

							switch (alt158) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:50: SEMI ( ws )?
									{
									dbg.location(609,50);
									match(input,SEMI,FOLLOW_SEMI_in_page2872); if (state.failed) return;dbg.location(609,55);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:55: ( ws )?
									int alt157=2;
									try { dbg.enterSubRule(157);
									try { dbg.enterDecision(157, decisionCanBacktrack[157]);

									int LA157_0 = input.LA(1);
									if ( (LA157_0==COMMENT||LA157_0==NL||LA157_0==WS) ) {
										alt157=1;
									}
									} finally {dbg.exitDecision(157);}

									switch (alt157) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:55: ws
											{
											dbg.location(609,55);
											pushFollow(FOLLOW_ws_in_page2874);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(157);}

									}
									break;

							}
							} finally {dbg.exitSubRule(158);}

							}
							break;

					}
					} finally {dbg.exitSubRule(159);}
					dbg.location(609,62);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:62: ( propertyDeclaration | margin )
					int alt160=2;
					try { dbg.enterSubRule(160);
					try { dbg.enterDecision(160, decisionCanBacktrack[160]);

					try {
						isCyclicDecision = true;
						alt160 = dfa160.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(160);}

					switch (alt160) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:63: propertyDeclaration
							{
							dbg.location(609,63);
							pushFollow(FOLLOW_propertyDeclaration_in_page2881);
							propertyDeclaration();
							state._fsp--;
							if (state.failed) return;dbg.location(609,82);
							if ( state.backtracking==0 ) {semiRequired=true;}
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:103: margin
							{
							dbg.location(609,103);
							pushFollow(FOLLOW_margin_in_page2884);
							margin();
							state._fsp--;
							if (state.failed) return;dbg.location(609,109);
							if ( state.backtracking==0 ) {semiRequired=false;}
							}
							break;

					}
					} finally {dbg.exitSubRule(160);}

					}
					break;

				default :
					break loop161;
				}
			}
			} finally {dbg.exitSubRule(161);}
			dbg.location(610,13);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:610:13: ( SEMI )?
			int alt162=2;
			try { dbg.enterSubRule(162);
			try { dbg.enterDecision(162, decisionCanBacktrack[162]);

			int LA162_0 = input.LA(1);
			if ( (LA162_0==SEMI) ) {
				alt162=1;
			}
			} finally {dbg.exitDecision(162);}

			switch (alt162) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:610:13: SEMI
					{
					dbg.location(610,13);
					match(input,SEMI,FOLLOW_SEMI_in_page2902); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(162);}
			dbg.location(611,13);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:611:13: ( ws )?
			int alt163=2;
			try { dbg.enterSubRule(163);
			try { dbg.enterDecision(163, decisionCanBacktrack[163]);

			int LA163_0 = input.LA(1);
			if ( (LA163_0==COMMENT||LA163_0==NL||LA163_0==WS) ) {
				alt163=1;
			}
			} finally {dbg.exitDecision(163);}

			switch (alt163) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:611:13: ws
					{
					dbg.location(611,13);
					pushFollow(FOLLOW_ws_in_page2917);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(163);}
			dbg.location(612,9);
			match(input,RBRACE,FOLLOW_RBRACE_in_page2928); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(613, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "page");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "page"



	// $ANTLR start "counterStyle"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:615:1: counterStyle : COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
	public final void counterStyle() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "counterStyle");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(615, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:616:5: ( COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:616:7: COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
			{
			dbg.location(616,7);
			match(input,COUNTER_STYLE_SYM,FOLLOW_COUNTER_STYLE_SYM_in_counterStyle2945); if (state.failed) return;dbg.location(616,25);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:616:25: ( ws )?
			int alt164=2;
			try { dbg.enterSubRule(164);
			try { dbg.enterDecision(164, decisionCanBacktrack[164]);

			int LA164_0 = input.LA(1);
			if ( (LA164_0==COMMENT||LA164_0==NL||LA164_0==WS) ) {
				alt164=1;
			}
			} finally {dbg.exitDecision(164);}

			switch (alt164) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:616:25: ws
					{
					dbg.location(616,25);
					pushFollow(FOLLOW_ws_in_counterStyle2947);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(164);}
			dbg.location(616,29);
			match(input,IDENT,FOLLOW_IDENT_in_counterStyle2950); if (state.failed) return;dbg.location(616,35);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:616:35: ( ws )?
			int alt165=2;
			try { dbg.enterSubRule(165);
			try { dbg.enterDecision(165, decisionCanBacktrack[165]);

			int LA165_0 = input.LA(1);
			if ( (LA165_0==COMMENT||LA165_0==NL||LA165_0==WS) ) {
				alt165=1;
			}
			} finally {dbg.exitDecision(165);}

			switch (alt165) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:616:35: ws
					{
					dbg.location(616,35);
					pushFollow(FOLLOW_ws_in_counterStyle2952);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(165);}
			dbg.location(617,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_counterStyle2963); if (state.failed) return;dbg.location(617,16);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:617:16: ( ws )?
			int alt166=2;
			try { dbg.enterSubRule(166);
			try { dbg.enterDecision(166, decisionCanBacktrack[166]);

			int LA166_0 = input.LA(1);
			if ( (LA166_0==COMMENT||LA166_0==NL||LA166_0==WS) ) {
				alt166=1;
			}
			} finally {dbg.exitDecision(166);}

			switch (alt166) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:617:16: ws
					{
					dbg.location(617,16);
					pushFollow(FOLLOW_ws_in_counterStyle2965);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(166);}
			dbg.location(617,20);
			pushFollow(FOLLOW_syncToDeclarationsRule_in_counterStyle2968);
			syncToDeclarationsRule();
			state._fsp--;
			if (state.failed) return;dbg.location(618,3);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:618:3: ( declarations )?
			int alt167=2;
			try { dbg.enterSubRule(167);
			try { dbg.enterDecision(167, decisionCanBacktrack[167]);

			int LA167_0 = input.LA(1);
			if ( ((LA167_0 >= AT_IDENT && LA167_0 <= AT_SIGN)||(LA167_0 >= BOTTOMCENTER_SYM && LA167_0 <= BOTTOMRIGHT_SYM)||(LA167_0 >= CHARSET_SYM && LA167_0 <= COLON)||LA167_0==COUNTER_STYLE_SYM||(LA167_0 >= DCOLON && LA167_0 <= DOT)||LA167_0==FONT_FACE_SYM||(LA167_0 >= GEN && LA167_0 <= GREATER)||(LA167_0 >= HASH && LA167_0 <= HASH_SYMBOL)||LA167_0==IDENT||LA167_0==IMPORT_SYM||(LA167_0 >= LBRACKET && LA167_0 <= LEFTTOP_SYM)||LA167_0==LESS_AND||(LA167_0 >= MEDIA_SYM && LA167_0 <= MOZ_DOCUMENT_SYM)||LA167_0==NAMESPACE_SYM||LA167_0==PAGE_SYM||(LA167_0 >= PIPE && LA167_0 <= PLUS)||(LA167_0 >= RIGHTBOTTOM_SYM && LA167_0 <= RIGHTTOP_SYM)||(LA167_0 >= SASS_AT_ROOT && LA167_0 <= SASS_DEBUG)||(LA167_0 >= SASS_EACH && LA167_0 <= SASS_ELSE)||(LA167_0 >= SASS_ERROR && LA167_0 <= SASS_FUNCTION)||(LA167_0 >= SASS_IF && LA167_0 <= SASS_MIXIN)||(LA167_0 >= SASS_RETURN && LA167_0 <= SEMI)||LA167_0==STAR||LA167_0==SUPPORTS_SYM||LA167_0==TILDE||(LA167_0 >= TOPCENTER_SYM && LA167_0 <= TOPRIGHT_SYM)||LA167_0==VARIABLE||LA167_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt167=1;
			}
			} finally {dbg.exitDecision(167);}

			switch (alt167) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:618:3: declarations
					{
					dbg.location(618,3);
					pushFollow(FOLLOW_declarations_in_counterStyle2972);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(167);}
			dbg.location(619,9);
			match(input,RBRACE,FOLLOW_RBRACE_in_counterStyle2983); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(620, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "counterStyle");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "counterStyle"



	// $ANTLR start "fontFace"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:622:1: fontFace : FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
	public final void fontFace() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fontFace");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(622, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:5: ( FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:7: FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
			{
			dbg.location(623,7);
			match(input,FONT_FACE_SYM,FOLLOW_FONT_FACE_SYM_in_fontFace3000); if (state.failed) return;dbg.location(623,21);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:21: ( ws )?
			int alt168=2;
			try { dbg.enterSubRule(168);
			try { dbg.enterDecision(168, decisionCanBacktrack[168]);

			int LA168_0 = input.LA(1);
			if ( (LA168_0==COMMENT||LA168_0==NL||LA168_0==WS) ) {
				alt168=1;
			}
			} finally {dbg.exitDecision(168);}

			switch (alt168) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:21: ws
					{
					dbg.location(623,21);
					pushFollow(FOLLOW_ws_in_fontFace3002);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(168);}
			dbg.location(624,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_fontFace3013); if (state.failed) return;dbg.location(624,16);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:16: ( ws )?
			int alt169=2;
			try { dbg.enterSubRule(169);
			try { dbg.enterDecision(169, decisionCanBacktrack[169]);

			int LA169_0 = input.LA(1);
			if ( (LA169_0==COMMENT||LA169_0==NL||LA169_0==WS) ) {
				alt169=1;
			}
			} finally {dbg.exitDecision(169);}

			switch (alt169) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:16: ws
					{
					dbg.location(624,16);
					pushFollow(FOLLOW_ws_in_fontFace3015);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(169);}
			dbg.location(624,20);
			pushFollow(FOLLOW_syncToDeclarationsRule_in_fontFace3018);
			syncToDeclarationsRule();
			state._fsp--;
			if (state.failed) return;dbg.location(625,3);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:3: ( declarations )?
			int alt170=2;
			try { dbg.enterSubRule(170);
			try { dbg.enterDecision(170, decisionCanBacktrack[170]);

			int LA170_0 = input.LA(1);
			if ( ((LA170_0 >= AT_IDENT && LA170_0 <= AT_SIGN)||(LA170_0 >= BOTTOMCENTER_SYM && LA170_0 <= BOTTOMRIGHT_SYM)||(LA170_0 >= CHARSET_SYM && LA170_0 <= COLON)||LA170_0==COUNTER_STYLE_SYM||(LA170_0 >= DCOLON && LA170_0 <= DOT)||LA170_0==FONT_FACE_SYM||(LA170_0 >= GEN && LA170_0 <= GREATER)||(LA170_0 >= HASH && LA170_0 <= HASH_SYMBOL)||LA170_0==IDENT||LA170_0==IMPORT_SYM||(LA170_0 >= LBRACKET && LA170_0 <= LEFTTOP_SYM)||LA170_0==LESS_AND||(LA170_0 >= MEDIA_SYM && LA170_0 <= MOZ_DOCUMENT_SYM)||LA170_0==NAMESPACE_SYM||LA170_0==PAGE_SYM||(LA170_0 >= PIPE && LA170_0 <= PLUS)||(LA170_0 >= RIGHTBOTTOM_SYM && LA170_0 <= RIGHTTOP_SYM)||(LA170_0 >= SASS_AT_ROOT && LA170_0 <= SASS_DEBUG)||(LA170_0 >= SASS_EACH && LA170_0 <= SASS_ELSE)||(LA170_0 >= SASS_ERROR && LA170_0 <= SASS_FUNCTION)||(LA170_0 >= SASS_IF && LA170_0 <= SASS_MIXIN)||(LA170_0 >= SASS_RETURN && LA170_0 <= SEMI)||LA170_0==STAR||LA170_0==SUPPORTS_SYM||LA170_0==TILDE||(LA170_0 >= TOPCENTER_SYM && LA170_0 <= TOPRIGHT_SYM)||LA170_0==VARIABLE||LA170_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt170=1;
			}
			} finally {dbg.exitDecision(170);}

			switch (alt170) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:3: declarations
					{
					dbg.location(625,3);
					pushFollow(FOLLOW_declarations_in_fontFace3022);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(170);}
			dbg.location(626,9);
			match(input,RBRACE,FOLLOW_RBRACE_in_fontFace3033); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(627, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fontFace");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fontFace"



	// $ANTLR start "margin"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:1: margin : margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
	public final void margin() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "margin");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(629, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:630:2: ( margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:630:4: margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
			{
			dbg.location(630,4);
			pushFollow(FOLLOW_margin_sym_in_margin3047);
			margin_sym();
			state._fsp--;
			if (state.failed) return;dbg.location(630,15);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:630:15: ( ws )?
			int alt171=2;
			try { dbg.enterSubRule(171);
			try { dbg.enterDecision(171, decisionCanBacktrack[171]);

			int LA171_0 = input.LA(1);
			if ( (LA171_0==COMMENT||LA171_0==NL||LA171_0==WS) ) {
				alt171=1;
			}
			} finally {dbg.exitDecision(171);}

			switch (alt171) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:630:15: ws
					{
					dbg.location(630,15);
					pushFollow(FOLLOW_ws_in_margin3049);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(171);}
			dbg.location(630,19);
			match(input,LBRACE,FOLLOW_LBRACE_in_margin3052); if (state.failed) return;dbg.location(630,26);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:630:26: ( ws )?
			int alt172=2;
			try { dbg.enterSubRule(172);
			try { dbg.enterDecision(172, decisionCanBacktrack[172]);

			int LA172_0 = input.LA(1);
			if ( (LA172_0==COMMENT||LA172_0==NL||LA172_0==WS) ) {
				alt172=1;
			}
			} finally {dbg.exitDecision(172);}

			switch (alt172) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:630:26: ws
					{
					dbg.location(630,26);
					pushFollow(FOLLOW_ws_in_margin3054);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(172);}
			dbg.location(630,30);
			pushFollow(FOLLOW_syncToDeclarationsRule_in_margin3057);
			syncToDeclarationsRule();
			state._fsp--;
			if (state.failed) return;dbg.location(630,53);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:630:53: ( declarations )?
			int alt173=2;
			try { dbg.enterSubRule(173);
			try { dbg.enterDecision(173, decisionCanBacktrack[173]);

			int LA173_0 = input.LA(1);
			if ( ((LA173_0 >= AT_IDENT && LA173_0 <= AT_SIGN)||(LA173_0 >= BOTTOMCENTER_SYM && LA173_0 <= BOTTOMRIGHT_SYM)||(LA173_0 >= CHARSET_SYM && LA173_0 <= COLON)||LA173_0==COUNTER_STYLE_SYM||(LA173_0 >= DCOLON && LA173_0 <= DOT)||LA173_0==FONT_FACE_SYM||(LA173_0 >= GEN && LA173_0 <= GREATER)||(LA173_0 >= HASH && LA173_0 <= HASH_SYMBOL)||LA173_0==IDENT||LA173_0==IMPORT_SYM||(LA173_0 >= LBRACKET && LA173_0 <= LEFTTOP_SYM)||LA173_0==LESS_AND||(LA173_0 >= MEDIA_SYM && LA173_0 <= MOZ_DOCUMENT_SYM)||LA173_0==NAMESPACE_SYM||LA173_0==PAGE_SYM||(LA173_0 >= PIPE && LA173_0 <= PLUS)||(LA173_0 >= RIGHTBOTTOM_SYM && LA173_0 <= RIGHTTOP_SYM)||(LA173_0 >= SASS_AT_ROOT && LA173_0 <= SASS_DEBUG)||(LA173_0 >= SASS_EACH && LA173_0 <= SASS_ELSE)||(LA173_0 >= SASS_ERROR && LA173_0 <= SASS_FUNCTION)||(LA173_0 >= SASS_IF && LA173_0 <= SASS_MIXIN)||(LA173_0 >= SASS_RETURN && LA173_0 <= SEMI)||LA173_0==STAR||LA173_0==SUPPORTS_SYM||LA173_0==TILDE||(LA173_0 >= TOPCENTER_SYM && LA173_0 <= TOPRIGHT_SYM)||LA173_0==VARIABLE||LA173_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt173=1;
			}
			} finally {dbg.exitDecision(173);}

			switch (alt173) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:630:53: declarations
					{
					dbg.location(630,53);
					pushFollow(FOLLOW_declarations_in_margin3059);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(173);}
			dbg.location(630,67);
			match(input,RBRACE,FOLLOW_RBRACE_in_margin3062); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(631, 7);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "margin");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "margin"



	// $ANTLR start "margin_sym"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:633:1: margin_sym : ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM );
	public final void margin_sym() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "margin_sym");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(633, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:2: ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(634,2);
			if ( (input.LA(1) >= BOTTOMCENTER_SYM && input.LA(1) <= BOTTOMRIGHT_SYM)||(input.LA(1) >= LEFTBOTTOM_SYM && input.LA(1) <= LEFTTOP_SYM)||(input.LA(1) >= RIGHTBOTTOM_SYM && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= TOPCENTER_SYM && input.LA(1) <= TOPRIGHT_SYM) ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(651, 7);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "margin_sym");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "margin_sym"



	// $ANTLR start "pseudoPage"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:653:1: pseudoPage : COLON IDENT ;
	public final void pseudoPage() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "pseudoPage");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(653, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:5: ( COLON IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:7: COLON IDENT
			{
			dbg.location(654,7);
			match(input,COLON,FOLLOW_COLON_in_pseudoPage3271); if (state.failed) return;dbg.location(654,13);
			match(input,IDENT,FOLLOW_IDENT_in_pseudoPage3273); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(655, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "pseudoPage");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "pseudoPage"



	// $ANTLR start "operator"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:657:1: operator : ( SOLIDUS | COMMA );
	public final void operator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "operator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(657, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:5: ( SOLIDUS | COMMA )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(658,5);
			if ( input.LA(1)==COMMA||input.LA(1)==SOLIDUS ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(660, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "operator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "operator"



	// $ANTLR start "unaryOperator"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:662:1: unaryOperator : ( MINUS | PLUS );
	public final void unaryOperator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "unaryOperator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(662, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:663:5: ( MINUS | PLUS )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(663,5);
			if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(665, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "unaryOperator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "unaryOperator"



	// $ANTLR start "property"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:1: property : ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | VARIABLE | IDENT | GEN |{...}? cp_variable );
	public final void property() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "property");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(667, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:5: ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | VARIABLE | IDENT | GEN |{...}? cp_variable )
			int alt174=6;
			try { dbg.enterDecision(174, decisionCanBacktrack[174]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				switch ( input.LA(2) ) {
				case DOT:
					{
					alt174=6;
					}
					break;
				case HASH_SYMBOL:
					{
					alt174=1;
					}
					break;
				case AT_SIGN:
					{
					alt174=2;
					}
					break;
				case COLON:
				case COMMENT:
				case NL:
				case WS:
					{
					alt174=4;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 174, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case HASH_SYMBOL:
				{
				alt174=1;
				}
				break;
			case AT_SIGN:
				{
				alt174=2;
				}
				break;
			case VARIABLE:
				{
				alt174=3;
				}
				break;
			case MINUS:
				{
				int LA174_5 = input.LA(2);
				if ( (LA174_5==HASH_SYMBOL) ) {
					alt174=1;
				}
				else if ( (LA174_5==AT_SIGN) ) {
					alt174=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 174, 5, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GEN:
				{
				alt174=5;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt174=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 174, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(174);}

			switch (alt174) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:5: {...}? sass_selector_interpolation_exp
					{
					dbg.location(672,5);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "property", "isScssSource()");
					}dbg.location(672,23);
					pushFollow(FOLLOW_sass_selector_interpolation_exp_in_property3357);
					sass_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:673:7: {...}? less_selector_interpolation_exp
					{
					dbg.location(673,7);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "property", "isLessSource()");
					}dbg.location(673,25);
					pushFollow(FOLLOW_less_selector_interpolation_exp_in_property3367);
					less_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:674:7: VARIABLE
					{
					dbg.location(674,7);
					match(input,VARIABLE,FOLLOW_VARIABLE_in_property3375); if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:675:7: IDENT
					{
					dbg.location(675,7);
					match(input,IDENT,FOLLOW_IDENT_in_property3383); if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:676:7: GEN
					{
					dbg.location(676,7);
					match(input,GEN,FOLLOW_GEN_in_property3391); if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:677:7: {...}? cp_variable
					{
					dbg.location(677,7);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "property", "isCssPreprocessorSource()");
					}dbg.location(677,36);
					pushFollow(FOLLOW_cp_variable_in_property3401);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(COLON));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(679, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "property");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "property"



	// $ANTLR start "sass_map"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:684:1: sass_map : sass_map_name COLON ( ws )? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )* ;
	public final void sass_map() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_map");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(684, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:685:5: ( sass_map_name COLON ( ws )? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:686:5: sass_map_name COLON ( ws )? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*
			{
			dbg.location(686,5);
			pushFollow(FOLLOW_sass_map_name_in_sass_map3428);
			sass_map_name();
			state._fsp--;
			if (state.failed) return;dbg.location(686,19);
			match(input,COLON,FOLLOW_COLON_in_sass_map3430); if (state.failed) return;dbg.location(686,25);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:686:25: ( ws )?
			int alt175=2;
			try { dbg.enterSubRule(175);
			try { dbg.enterDecision(175, decisionCanBacktrack[175]);

			int LA175_0 = input.LA(1);
			if ( (LA175_0==COMMENT||LA175_0==NL||LA175_0==WS) ) {
				alt175=1;
			}
			} finally {dbg.exitDecision(175);}

			switch (alt175) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:686:25: ws
					{
					dbg.location(686,25);
					pushFollow(FOLLOW_ws_in_sass_map3432);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(175);}
			dbg.location(686,29);
			match(input,LPAREN,FOLLOW_LPAREN_in_sass_map3435); if (state.failed) return;dbg.location(686,36);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:686:36: ( ws )?
			int alt176=2;
			try { dbg.enterSubRule(176);
			try { dbg.enterDecision(176, decisionCanBacktrack[176]);

			int LA176_0 = input.LA(1);
			if ( (LA176_0==COMMENT||LA176_0==NL||LA176_0==WS) ) {
				alt176=1;
			}
			} finally {dbg.exitDecision(176);}

			switch (alt176) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:686:36: ws
					{
					dbg.location(686,36);
					pushFollow(FOLLOW_ws_in_sass_map3437);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(176);}
			dbg.location(686,40);
			pushFollow(FOLLOW_syncToFollow_in_sass_map3440);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(688,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:688:9: ( sass_map_pairs )?
			int alt177=2;
			try { dbg.enterSubRule(177);
			try { dbg.enterDecision(177, decisionCanBacktrack[177]);

			int LA177_0 = input.LA(1);
			if ( ((LA177_0 >= AT_IDENT && LA177_0 <= AT_SIGN)||(LA177_0 >= BOTTOMCENTER_SYM && LA177_0 <= BOTTOMRIGHT_SYM)||LA177_0==CHARSET_SYM||LA177_0==COMMA||LA177_0==COUNTER_STYLE_SYM||LA177_0==FONT_FACE_SYM||LA177_0==GEN||LA177_0==HASH_SYMBOL||LA177_0==IDENT||LA177_0==IMPORT_SYM||(LA177_0 >= LEFTBOTTOM_SYM && LA177_0 <= LEFTTOP_SYM)||(LA177_0 >= MEDIA_SYM && LA177_0 <= MOZ_DOCUMENT_SYM)||LA177_0==NAMESPACE_SYM||LA177_0==NUMBER||LA177_0==PAGE_SYM||(LA177_0 >= RIGHTBOTTOM_SYM && LA177_0 <= RIGHTTOP_SYM)||(LA177_0 >= SASS_AT_ROOT && LA177_0 <= SASS_DEBUG)||(LA177_0 >= SASS_EACH && LA177_0 <= SASS_ELSE)||LA177_0==SASS_EXTEND||(LA177_0 >= SASS_FOR && LA177_0 <= SASS_FUNCTION)||(LA177_0 >= SASS_IF && LA177_0 <= SASS_MIXIN)||(LA177_0 >= SASS_RETURN && LA177_0 <= SASS_WHILE)||LA177_0==STRING||(LA177_0 >= TOPCENTER_SYM && LA177_0 <= TOPRIGHT_SYM)||LA177_0==VARIABLE||LA177_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt177=1;
			}
			} finally {dbg.exitDecision(177);}

			switch (alt177) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:688:9: sass_map_pairs
					{
					dbg.location(688,9);
					pushFollow(FOLLOW_sass_map_pairs_in_sass_map3459);
					sass_map_pairs();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(177);}
			dbg.location(689,5);
			match(input,RPAREN,FOLLOW_RPAREN_in_sass_map3466); if (state.failed) return;dbg.location(689,12);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:689:12: ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*
			try { dbg.enterSubRule(180);

			loop180:
			while (true) {
				int alt180=3;
				try { dbg.enterDecision(180, decisionCanBacktrack[180]);

				try {
					isCyclicDecision = true;
					alt180 = dfa180.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(180);}

				switch (alt180) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:689:13: ( ( ws )? SASS_DEFAULT )
					{
					dbg.location(689,13);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:689:13: ( ( ws )? SASS_DEFAULT )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:689:14: ( ws )? SASS_DEFAULT
					{
					dbg.location(689,14);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:689:14: ( ws )?
					int alt178=2;
					try { dbg.enterSubRule(178);
					try { dbg.enterDecision(178, decisionCanBacktrack[178]);

					int LA178_0 = input.LA(1);
					if ( (LA178_0==COMMENT||LA178_0==NL||LA178_0==WS) ) {
						alt178=1;
					}
					} finally {dbg.exitDecision(178);}

					switch (alt178) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:689:14: ws
							{
							dbg.location(689,14);
							pushFollow(FOLLOW_ws_in_sass_map3470);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(178);}
					dbg.location(689,18);
					match(input,SASS_DEFAULT,FOLLOW_SASS_DEFAULT_in_sass_map3473); if (state.failed) return;
					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:689:34: ( ( ws )? SASS_GLOBAL )
					{
					dbg.location(689,34);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:689:34: ( ( ws )? SASS_GLOBAL )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:689:35: ( ws )? SASS_GLOBAL
					{
					dbg.location(689,35);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:689:35: ( ws )?
					int alt179=2;
					try { dbg.enterSubRule(179);
					try { dbg.enterDecision(179, decisionCanBacktrack[179]);

					int LA179_0 = input.LA(1);
					if ( (LA179_0==COMMENT||LA179_0==NL||LA179_0==WS) ) {
						alt179=1;
					}
					} finally {dbg.exitDecision(179);}

					switch (alt179) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:689:35: ws
							{
							dbg.location(689,35);
							pushFollow(FOLLOW_ws_in_sass_map3479);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(179);}
					dbg.location(689,39);
					match(input,SASS_GLOBAL,FOLLOW_SASS_GLOBAL_in_sass_map3482); if (state.failed) return;
					}

					}
					break;

				default :
					break loop180;
				}
			}
			} finally {dbg.exitSubRule(180);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(690, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_map");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_map"



	// $ANTLR start "sass_map_name"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:692:1: sass_map_name : cp_variable ;
	public final void sass_map_name() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_map_name");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(692, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:693:5: ( cp_variable )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:694:5: cp_variable
			{
			dbg.location(694,5);
			pushFollow(FOLLOW_cp_variable_in_sass_map_name3506);
			cp_variable();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(695, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_map_name");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_map_name"



	// $ANTLR start "sass_map_pairs"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:697:1: sass_map_pairs : ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+ ;
	public final void sass_map_pairs() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_map_pairs");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(697, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:698:5: ( ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+ )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:699:5: ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+
			{
			dbg.location(699,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:699:5: ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+
			int cnt185=0;
			try { dbg.enterSubRule(185);

			loop185:
			while (true) {
				int alt185=3;
				try { dbg.enterDecision(185, decisionCanBacktrack[185]);

				int LA185_0 = input.LA(1);
				if ( ((LA185_0 >= AT_IDENT && LA185_0 <= AT_SIGN)||(LA185_0 >= BOTTOMCENTER_SYM && LA185_0 <= BOTTOMRIGHT_SYM)||LA185_0==CHARSET_SYM||LA185_0==COUNTER_STYLE_SYM||LA185_0==FONT_FACE_SYM||LA185_0==GEN||LA185_0==HASH_SYMBOL||LA185_0==IDENT||LA185_0==IMPORT_SYM||(LA185_0 >= LEFTBOTTOM_SYM && LA185_0 <= LEFTTOP_SYM)||(LA185_0 >= MEDIA_SYM && LA185_0 <= MOZ_DOCUMENT_SYM)||LA185_0==NAMESPACE_SYM||LA185_0==NUMBER||LA185_0==PAGE_SYM||(LA185_0 >= RIGHTBOTTOM_SYM && LA185_0 <= RIGHTTOP_SYM)||(LA185_0 >= SASS_AT_ROOT && LA185_0 <= SASS_DEBUG)||(LA185_0 >= SASS_EACH && LA185_0 <= SASS_ELSE)||LA185_0==SASS_EXTEND||(LA185_0 >= SASS_FOR && LA185_0 <= SASS_FUNCTION)||(LA185_0 >= SASS_IF && LA185_0 <= SASS_MIXIN)||(LA185_0 >= SASS_RETURN && LA185_0 <= SASS_WHILE)||LA185_0==STRING||(LA185_0 >= TOPCENTER_SYM && LA185_0 <= TOPRIGHT_SYM)||LA185_0==VARIABLE||LA185_0==WEBKIT_KEYFRAMES_SYM) ) {
					alt185=1;
				}
				else if ( (LA185_0==COMMA) ) {
					alt185=2;
				}

				} finally {dbg.exitDecision(185);}

				switch (alt185) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:700:10: ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? )
					{
					dbg.location(700,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:700:10: ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:700:12: sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )?
					{
					dbg.location(700,12);
					pushFollow(FOLLOW_sass_map_pair_in_sass_map_pairs3540);
					sass_map_pair();
					state._fsp--;
					if (state.failed) return;dbg.location(700,26);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:700:26: ( ( ( ws )? COMMA )=> ( ws )? COMMA )?
					int alt182=2;
					try { dbg.enterSubRule(182);
					try { dbg.enterDecision(182, decisionCanBacktrack[182]);

					try {
						isCyclicDecision = true;
						alt182 = dfa182.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(182);}

					switch (alt182) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:700:27: ( ( ws )? COMMA )=> ( ws )? COMMA
							{
							dbg.location(700,40);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:700:40: ( ws )?
							int alt181=2;
							try { dbg.enterSubRule(181);
							try { dbg.enterDecision(181, decisionCanBacktrack[181]);

							int LA181_0 = input.LA(1);
							if ( (LA181_0==COMMENT||LA181_0==NL||LA181_0==WS) ) {
								alt181=1;
							}
							} finally {dbg.exitDecision(181);}

							switch (alt181) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:700:40: ws
									{
									dbg.location(700,40);
									pushFollow(FOLLOW_ws_in_sass_map_pairs3550);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(181);}
							dbg.location(700,44);
							match(input,COMMA,FOLLOW_COMMA_in_sass_map_pairs3553); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(182);}
					dbg.location(700,52);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:700:52: ( ws )?
					int alt183=2;
					try { dbg.enterSubRule(183);
					try { dbg.enterDecision(183, decisionCanBacktrack[183]);

					int LA183_0 = input.LA(1);
					if ( (LA183_0==COMMENT||LA183_0==NL||LA183_0==WS) ) {
						alt183=1;
					}
					} finally {dbg.exitDecision(183);}

					switch (alt183) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:700:52: ws
							{
							dbg.location(700,52);
							pushFollow(FOLLOW_ws_in_sass_map_pairs3557);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(183);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:702:10: ( COMMA ( ws )? )
					{
					dbg.location(702,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:702:10: ( COMMA ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:702:12: COMMA ( ws )?
					{
					dbg.location(702,12);
					match(input,COMMA,FOLLOW_COMMA_in_sass_map_pairs3584); if (state.failed) return;dbg.location(702,18);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:702:18: ( ws )?
					int alt184=2;
					try { dbg.enterSubRule(184);
					try { dbg.enterDecision(184, decisionCanBacktrack[184]);

					int LA184_0 = input.LA(1);
					if ( (LA184_0==COMMENT||LA184_0==NL||LA184_0==WS) ) {
						alt184=1;
					}
					} finally {dbg.exitDecision(184);}

					switch (alt184) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:702:18: ws
							{
							dbg.location(702,18);
							pushFollow(FOLLOW_ws_in_sass_map_pairs3586);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(184);}

					}

					}
					break;

				default :
					if ( cnt185 >= 1 ) break loop185;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(185, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt185++;
			}
			} finally {dbg.exitSubRule(185);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(704, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_map_pairs");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_map_pairs"



	// $ANTLR start "sass_map_pair"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:1: sass_map_pair : ( NUMBER | ( STRING ( ( ws )? STRING )* ) | ( ( function )=> function ) | property | sass_map ) ( ws )? COLON ( ws )? cp_expression ( ( ws )? prio )? ;
	public final void sass_map_pair() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_map_pair");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(706, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:707:5: ( ( NUMBER | ( STRING ( ( ws )? STRING )* ) | ( ( function )=> function ) | property | sass_map ) ( ws )? COLON ( ws )? cp_expression ( ( ws )? prio )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:9: ( NUMBER | ( STRING ( ( ws )? STRING )* ) | ( ( function )=> function ) | property | sass_map ) ( ws )? COLON ( ws )? cp_expression ( ( ws )? prio )?
			{
			dbg.location(708,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:9: ( NUMBER | ( STRING ( ( ws )? STRING )* ) | ( ( function )=> function ) | property | sass_map )
			int alt188=5;
			try { dbg.enterSubRule(188);
			try { dbg.enterDecision(188, decisionCanBacktrack[188]);

			switch ( input.LA(1) ) {
			case NUMBER:
				{
				alt188=1;
				}
				break;
			case STRING:
				{
				alt188=2;
				}
				break;
			case IDENT:
				{
				int LA188_3 = input.LA(2);
				if ( (synpred22_Css3()) ) {
					alt188=3;
				}
				else if ( (true) ) {
					alt188=4;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt188=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
			case GEN:
			case HASH_SYMBOL:
			case MINUS:
			case VARIABLE:
				{
				alt188=4;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA188_9 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=4;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt188=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA188_10 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt188=4;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt188=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 10, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 188, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(188);}

			switch (alt188) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:10: NUMBER
					{
					dbg.location(708,10);
					match(input,NUMBER,FOLLOW_NUMBER_in_sass_map_pair3622); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:17: ( STRING ( ( ws )? STRING )* )
					{
					dbg.location(708,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:17: ( STRING ( ( ws )? STRING )* )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:18: STRING ( ( ws )? STRING )*
					{
					dbg.location(708,18);
					match(input,STRING,FOLLOW_STRING_in_sass_map_pair3625); if (state.failed) return;dbg.location(708,25);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:25: ( ( ws )? STRING )*
					try { dbg.enterSubRule(187);

					loop187:
					while (true) {
						int alt187=2;
						try { dbg.enterDecision(187, decisionCanBacktrack[187]);

						try {
							isCyclicDecision = true;
							alt187 = dfa187.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(187);}

						switch (alt187) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:26: ( ws )? STRING
							{
							dbg.location(708,26);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:26: ( ws )?
							int alt186=2;
							try { dbg.enterSubRule(186);
							try { dbg.enterDecision(186, decisionCanBacktrack[186]);

							int LA186_0 = input.LA(1);
							if ( (LA186_0==COMMENT||LA186_0==NL||LA186_0==WS) ) {
								alt186=1;
							}
							} finally {dbg.exitDecision(186);}

							switch (alt186) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:26: ws
									{
									dbg.location(708,26);
									pushFollow(FOLLOW_ws_in_sass_map_pair3628);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(186);}
							dbg.location(708,30);
							match(input,STRING,FOLLOW_STRING_in_sass_map_pair3631); if (state.failed) return;
							}
							break;

						default :
							break loop187;
						}
					}
					} finally {dbg.exitSubRule(187);}

					}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:40: ( ( function )=> function )
					{
					dbg.location(708,40);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:40: ( ( function )=> function )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:41: ( function )=> function
					{
					dbg.location(708,53);
					pushFollow(FOLLOW_function_in_sass_map_pair3641);
					function();
					state._fsp--;
					if (state.failed) return;
					}

					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:63: property
					{
					dbg.location(708,63);
					pushFollow(FOLLOW_property_in_sass_map_pair3644);
					property();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:72: sass_map
					{
					dbg.location(708,72);
					pushFollow(FOLLOW_sass_map_in_sass_map_pair3646);
					sass_map();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(188);}
			dbg.location(708,82);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:82: ( ws )?
			int alt189=2;
			try { dbg.enterSubRule(189);
			try { dbg.enterDecision(189, decisionCanBacktrack[189]);

			int LA189_0 = input.LA(1);
			if ( (LA189_0==COMMENT||LA189_0==NL||LA189_0==WS) ) {
				alt189=1;
			}
			} finally {dbg.exitDecision(189);}

			switch (alt189) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:82: ws
					{
					dbg.location(708,82);
					pushFollow(FOLLOW_ws_in_sass_map_pair3649);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(189);}
			dbg.location(708,86);
			match(input,COLON,FOLLOW_COLON_in_sass_map_pair3652); if (state.failed) return;dbg.location(708,92);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:92: ( ws )?
			int alt190=2;
			try { dbg.enterSubRule(190);
			try { dbg.enterDecision(190, decisionCanBacktrack[190]);

			int LA190_0 = input.LA(1);
			if ( (LA190_0==COMMENT||LA190_0==NL||LA190_0==WS) ) {
				alt190=1;
			}
			} finally {dbg.exitDecision(190);}

			switch (alt190) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:92: ws
					{
					dbg.location(708,92);
					pushFollow(FOLLOW_ws_in_sass_map_pair3654);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(190);}
			dbg.location(708,96);
			pushFollow(FOLLOW_cp_expression_in_sass_map_pair3657);
			cp_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(708,110);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:110: ( ( ws )? prio )?
			int alt192=2;
			try { dbg.enterSubRule(192);
			try { dbg.enterDecision(192, decisionCanBacktrack[192]);

			try {
				isCyclicDecision = true;
				alt192 = dfa192.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(192);}

			switch (alt192) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:111: ( ws )? prio
					{
					dbg.location(708,111);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:111: ( ws )?
					int alt191=2;
					try { dbg.enterSubRule(191);
					try { dbg.enterDecision(191, decisionCanBacktrack[191]);

					int LA191_0 = input.LA(1);
					if ( (LA191_0==COMMENT||LA191_0==NL||LA191_0==WS) ) {
						alt191=1;
					}
					} finally {dbg.exitDecision(191);}

					switch (alt191) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:111: ws
							{
							dbg.location(708,111);
							pushFollow(FOLLOW_ws_in_sass_map_pair3660);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(191);}
					dbg.location(708,115);
					pushFollow(FOLLOW_prio_in_sass_map_pair3663);
					prio();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(192);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(709, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_map_pair");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_map_pair"



	// $ANTLR start "rule"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:711:1: rule : ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
	public final void rule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "rule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(711, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:712:5: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:713:9: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
			{
			dbg.location(713,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:713:9: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )
			int alt198=3;
			try { dbg.enterSubRule(198);
			try { dbg.enterDecision(198, decisionCanBacktrack[198]);

			try {
				isCyclicDecision = true;
				alt198 = dfa198.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(198);}

			switch (alt198) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:714:13: ( SASS_AT_ROOT ( ws selectorsGroup )? )
					{
					dbg.location(714,13);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:714:13: ( SASS_AT_ROOT ( ws selectorsGroup )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:714:14: SASS_AT_ROOT ( ws selectorsGroup )?
					{
					dbg.location(714,14);
					match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_rule3705); if (state.failed) return;dbg.location(714,27);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:714:27: ( ws selectorsGroup )?
					int alt193=2;
					try { dbg.enterSubRule(193);
					try { dbg.enterDecision(193, decisionCanBacktrack[193]);

					try {
						isCyclicDecision = true;
						alt193 = dfa193.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(193);}

					switch (alt193) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:714:28: ws selectorsGroup
							{
							dbg.location(714,28);
							pushFollow(FOLLOW_ws_in_rule3708);
							ws();
							state._fsp--;
							if (state.failed) return;dbg.location(714,31);
							pushFollow(FOLLOW_selectorsGroup_in_rule3710);
							selectorsGroup();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(193);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:715:15: ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
					{
					dbg.location(715,15);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:715:15: ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:715:16: SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN
					{
					dbg.location(715,16);
					match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_rule3731); if (state.failed) return;dbg.location(715,29);
					pushFollow(FOLLOW_ws_in_rule3733);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(715,32);
					match(input,LPAREN,FOLLOW_LPAREN_in_rule3735); if (state.failed) return;dbg.location(715,39);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:715:39: ( ws )?
					int alt194=2;
					try { dbg.enterSubRule(194);
					try { dbg.enterDecision(194, decisionCanBacktrack[194]);

					int LA194_0 = input.LA(1);
					if ( (LA194_0==COMMENT||LA194_0==NL||LA194_0==WS) ) {
						alt194=1;
					}
					} finally {dbg.exitDecision(194);}

					switch (alt194) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:715:39: ws
							{
							dbg.location(715,39);
							pushFollow(FOLLOW_ws_in_rule3737);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(194);}
					dbg.location(715,43);
					if ( !(evalPredicate(tokenNameEquals("without") || tokenNameEquals("with"),"tokenNameEquals(\"without\") || tokenNameEquals(\"with\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "rule", "tokenNameEquals(\"without\") || tokenNameEquals(\"with\")");
					}dbg.location(715,100);
					match(input,IDENT,FOLLOW_IDENT_in_rule3742); if (state.failed) return;dbg.location(715,128);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:715:128: ( ws )?
					int alt195=2;
					try { dbg.enterSubRule(195);
					try { dbg.enterDecision(195, decisionCanBacktrack[195]);

					int LA195_0 = input.LA(1);
					if ( (LA195_0==COMMENT||LA195_0==NL||LA195_0==WS) ) {
						alt195=1;
					}
					} finally {dbg.exitDecision(195);}

					switch (alt195) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:715:128: ws
							{
							dbg.location(715,128);
							pushFollow(FOLLOW_ws_in_rule3746);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(195);}
					dbg.location(715,132);
					match(input,COLON,FOLLOW_COLON_in_rule3749); if (state.failed) return;dbg.location(715,138);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:715:138: ( ws )?
					int alt196=2;
					try { dbg.enterSubRule(196);
					try { dbg.enterDecision(196, decisionCanBacktrack[196]);

					int LA196_0 = input.LA(1);
					if ( (LA196_0==COMMENT||LA196_0==NL||LA196_0==WS) ) {
						alt196=1;
					}
					} finally {dbg.exitDecision(196);}

					switch (alt196) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:715:138: ws
							{
							dbg.location(715,138);
							pushFollow(FOLLOW_ws_in_rule3751);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(196);}
					dbg.location(715,142);
					match(input,IDENT,FOLLOW_IDENT_in_rule3754); if (state.failed) return;dbg.location(715,148);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:715:148: ( ws )?
					int alt197=2;
					try { dbg.enterSubRule(197);
					try { dbg.enterDecision(197, decisionCanBacktrack[197]);

					int LA197_0 = input.LA(1);
					if ( (LA197_0==COMMENT||LA197_0==NL||LA197_0==WS) ) {
						alt197=1;
					}
					} finally {dbg.exitDecision(197);}

					switch (alt197) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:715:148: ws
							{
							dbg.location(715,148);
							pushFollow(FOLLOW_ws_in_rule3756);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(197);}
					dbg.location(715,152);
					match(input,RPAREN,FOLLOW_RPAREN_in_rule3759); if (state.failed) return;
					}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:716:15: selectorsGroup
					{
					dbg.location(716,15);
					pushFollow(FOLLOW_selectorsGroup_in_rule3777);
					selectorsGroup();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(198);}
			dbg.location(717,11);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:717:11: ( ws )?
			int alt199=2;
			try { dbg.enterSubRule(199);
			try { dbg.enterDecision(199, decisionCanBacktrack[199]);

			int LA199_0 = input.LA(1);
			if ( (LA199_0==COMMENT||LA199_0==NL||LA199_0==WS) ) {
				alt199=1;
			}
			} finally {dbg.exitDecision(199);}

			switch (alt199) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:717:11: ws
					{
					dbg.location(717,11);
					pushFollow(FOLLOW_ws_in_rule3789);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(199);}
			dbg.location(718,5);
			match(input,LBRACE,FOLLOW_LBRACE_in_rule3796); if (state.failed) return;dbg.location(718,12);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:718:12: ( ws )?
			int alt200=2;
			try { dbg.enterSubRule(200);
			try { dbg.enterDecision(200, decisionCanBacktrack[200]);

			int LA200_0 = input.LA(1);
			if ( (LA200_0==COMMENT||LA200_0==NL||LA200_0==WS) ) {
				alt200=1;
			}
			} finally {dbg.exitDecision(200);}

			switch (alt200) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:718:12: ws
					{
					dbg.location(718,12);
					pushFollow(FOLLOW_ws_in_rule3798);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(200);}
			dbg.location(718,16);
			pushFollow(FOLLOW_syncToFollow_in_rule3801);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(719,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:719:9: ( declarations )?
			int alt201=2;
			try { dbg.enterSubRule(201);
			try { dbg.enterDecision(201, decisionCanBacktrack[201]);

			int LA201_0 = input.LA(1);
			if ( ((LA201_0 >= AT_IDENT && LA201_0 <= AT_SIGN)||(LA201_0 >= BOTTOMCENTER_SYM && LA201_0 <= BOTTOMRIGHT_SYM)||(LA201_0 >= CHARSET_SYM && LA201_0 <= COLON)||LA201_0==COUNTER_STYLE_SYM||(LA201_0 >= DCOLON && LA201_0 <= DOT)||LA201_0==FONT_FACE_SYM||(LA201_0 >= GEN && LA201_0 <= GREATER)||(LA201_0 >= HASH && LA201_0 <= HASH_SYMBOL)||LA201_0==IDENT||LA201_0==IMPORT_SYM||(LA201_0 >= LBRACKET && LA201_0 <= LEFTTOP_SYM)||LA201_0==LESS_AND||(LA201_0 >= MEDIA_SYM && LA201_0 <= MOZ_DOCUMENT_SYM)||LA201_0==NAMESPACE_SYM||LA201_0==PAGE_SYM||(LA201_0 >= PIPE && LA201_0 <= PLUS)||(LA201_0 >= RIGHTBOTTOM_SYM && LA201_0 <= RIGHTTOP_SYM)||(LA201_0 >= SASS_AT_ROOT && LA201_0 <= SASS_DEBUG)||(LA201_0 >= SASS_EACH && LA201_0 <= SASS_ELSE)||(LA201_0 >= SASS_ERROR && LA201_0 <= SASS_FUNCTION)||(LA201_0 >= SASS_IF && LA201_0 <= SASS_MIXIN)||(LA201_0 >= SASS_RETURN && LA201_0 <= SEMI)||LA201_0==STAR||LA201_0==SUPPORTS_SYM||LA201_0==TILDE||(LA201_0 >= TOPCENTER_SYM && LA201_0 <= TOPRIGHT_SYM)||LA201_0==VARIABLE||LA201_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt201=1;
			}
			} finally {dbg.exitDecision(201);}

			switch (alt201) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:719:9: declarations
					{
					dbg.location(719,9);
					pushFollow(FOLLOW_declarations_in_rule3811);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(201);}
			dbg.location(720,5);
			match(input,RBRACE,FOLLOW_RBRACE_in_rule3818); if (state.failed) return;
			}

		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(RBRACE));
			        input.consume(); //consume the RBRACE as well
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(721, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "rule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "rule"



	// $ANTLR start "declarations"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:728:1: declarations : ( ( SEMI ( ws )? )* declaration ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )* ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )? | ( SEMI ( ws )? )+ );
	public final void declarations() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "declarations");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(728, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:729:5: ( ( SEMI ( ws )? )* declaration ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )* ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )? | ( SEMI ( ws )? )+ )
			int alt215=2;
			try { dbg.enterDecision(215, decisionCanBacktrack[215]);

			try {
				isCyclicDecision = true;
				alt215 = dfa215.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(215);}

			switch (alt215) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:8: ( SEMI ( ws )? )* declaration ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )* ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )?
					{
					dbg.location(730,8);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:8: ( SEMI ( ws )? )*
					try { dbg.enterSubRule(203);

					loop203:
					while (true) {
						int alt203=2;
						try { dbg.enterDecision(203, decisionCanBacktrack[203]);

						int LA203_0 = input.LA(1);
						if ( (LA203_0==SEMI) ) {
							alt203=1;
						}

						} finally {dbg.exitDecision(203);}

						switch (alt203) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:9: SEMI ( ws )?
							{
							dbg.location(730,9);
							match(input,SEMI,FOLLOW_SEMI_in_declarations3852); if (state.failed) return;dbg.location(730,14);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:14: ( ws )?
							int alt202=2;
							try { dbg.enterSubRule(202);
							try { dbg.enterDecision(202, decisionCanBacktrack[202]);

							int LA202_0 = input.LA(1);
							if ( (LA202_0==COMMENT||LA202_0==NL||LA202_0==WS) ) {
								alt202=1;
							}
							} finally {dbg.exitDecision(202);}

							switch (alt202) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:14: ws
									{
									dbg.location(730,14);
									pushFollow(FOLLOW_ws_in_declarations3854);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(202);}

							}
							break;

						default :
							break loop203;
						}
					}
					} finally {dbg.exitSubRule(203);}
					dbg.location(730,21);
					pushFollow(FOLLOW_declaration_in_declarations3860);
					declaration();
					state._fsp--;
					if (state.failed) return;dbg.location(730,33);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:33: ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )*
					try { dbg.enterSubRule(208);

					loop208:
					while (true) {
						int alt208=2;
						try { dbg.enterDecision(208, decisionCanBacktrack[208]);

						try {
							isCyclicDecision = true;
							alt208 = dfa208.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(208);}

						switch (alt208) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:34: ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration
							{
							dbg.location(730,34);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:34: ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )
							int alt207=2;
							try { dbg.enterSubRule(207);
							try { dbg.enterDecision(207, decisionCanBacktrack[207]);

							try {
								isCyclicDecision = true;
								alt207 = dfa207.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(207);}

							switch (alt207) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:35: ( ( ws )? ( SEMI ( ws )? )+ )
									{
									dbg.location(730,35);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:35: ( ( ws )? ( SEMI ( ws )? )+ )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:36: ( ws )? ( SEMI ( ws )? )+
									{
									dbg.location(730,36);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:36: ( ws )?
									int alt204=2;
									try { dbg.enterSubRule(204);
									try { dbg.enterDecision(204, decisionCanBacktrack[204]);

									int LA204_0 = input.LA(1);
									if ( (LA204_0==COMMENT||LA204_0==NL||LA204_0==WS) ) {
										alt204=1;
									}
									} finally {dbg.exitDecision(204);}

									switch (alt204) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:36: ws
											{
											dbg.location(730,36);
											pushFollow(FOLLOW_ws_in_declarations3865);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(204);}
									dbg.location(730,40);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:40: ( SEMI ( ws )? )+
									int cnt206=0;
									try { dbg.enterSubRule(206);

									loop206:
									while (true) {
										int alt206=2;
										try { dbg.enterDecision(206, decisionCanBacktrack[206]);

										int LA206_0 = input.LA(1);
										if ( (LA206_0==SEMI) ) {
											alt206=1;
										}

										} finally {dbg.exitDecision(206);}

										switch (alt206) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:41: SEMI ( ws )?
											{
											dbg.location(730,41);
											match(input,SEMI,FOLLOW_SEMI_in_declarations3869); if (state.failed) return;dbg.location(730,46);
											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:46: ( ws )?
											int alt205=2;
											try { dbg.enterSubRule(205);
											try { dbg.enterDecision(205, decisionCanBacktrack[205]);

											int LA205_0 = input.LA(1);
											if ( (LA205_0==COMMENT||LA205_0==NL||LA205_0==WS) ) {
												alt205=1;
											}
											} finally {dbg.exitDecision(205);}

											switch (alt205) {
												case 1 :
													dbg.enterAlt(1);

													// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:46: ws
													{
													dbg.location(730,46);
													pushFollow(FOLLOW_ws_in_declarations3871);
													ws();
													state._fsp--;
													if (state.failed) return;
													}
													break;

											}
											} finally {dbg.exitSubRule(205);}

											}
											break;

										default :
											if ( cnt206 >= 1 ) break loop206;
											if (state.backtracking>0) {state.failed=true; return;}
											EarlyExitException eee = new EarlyExitException(206, input);
											dbg.recognitionException(eee);

											throw eee;
										}
										cnt206++;
									}
									} finally {dbg.exitSubRule(206);}

									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:53: ws
									{
									dbg.location(730,53);
									pushFollow(FOLLOW_ws_in_declarations3877);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(207);}
							dbg.location(730,57);
							pushFollow(FOLLOW_declaration_in_declarations3880);
							declaration();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop208;
						}
					}
					} finally {dbg.exitSubRule(208);}
					dbg.location(730,71);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:71: ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )?
					int alt212=3;
					try { dbg.enterSubRule(212);
					try { dbg.enterDecision(212, decisionCanBacktrack[212]);

					try {
						isCyclicDecision = true;
						alt212 = dfa212.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(212);}

					switch (alt212) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:72: ( ( ws )? ( SEMI ( ws )? )+ )
							{
							dbg.location(730,72);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:72: ( ( ws )? ( SEMI ( ws )? )+ )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:73: ( ws )? ( SEMI ( ws )? )+
							{
							dbg.location(730,73);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:73: ( ws )?
							int alt209=2;
							try { dbg.enterSubRule(209);
							try { dbg.enterDecision(209, decisionCanBacktrack[209]);

							int LA209_0 = input.LA(1);
							if ( (LA209_0==COMMENT||LA209_0==NL||LA209_0==WS) ) {
								alt209=1;
							}
							} finally {dbg.exitDecision(209);}

							switch (alt209) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:73: ws
									{
									dbg.location(730,73);
									pushFollow(FOLLOW_ws_in_declarations3886);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(209);}
							dbg.location(730,77);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:77: ( SEMI ( ws )? )+
							int cnt211=0;
							try { dbg.enterSubRule(211);

							loop211:
							while (true) {
								int alt211=2;
								try { dbg.enterDecision(211, decisionCanBacktrack[211]);

								int LA211_0 = input.LA(1);
								if ( (LA211_0==SEMI) ) {
									alt211=1;
								}

								} finally {dbg.exitDecision(211);}

								switch (alt211) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:78: SEMI ( ws )?
									{
									dbg.location(730,78);
									match(input,SEMI,FOLLOW_SEMI_in_declarations3890); if (state.failed) return;dbg.location(730,83);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:83: ( ws )?
									int alt210=2;
									try { dbg.enterSubRule(210);
									try { dbg.enterDecision(210, decisionCanBacktrack[210]);

									int LA210_0 = input.LA(1);
									if ( (LA210_0==COMMENT||LA210_0==NL||LA210_0==WS) ) {
										alt210=1;
									}
									} finally {dbg.exitDecision(210);}

									switch (alt210) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:83: ws
											{
											dbg.location(730,83);
											pushFollow(FOLLOW_ws_in_declarations3892);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(210);}

									}
									break;

								default :
									if ( cnt211 >= 1 ) break loop211;
									if (state.backtracking>0) {state.failed=true; return;}
									EarlyExitException eee = new EarlyExitException(211, input);
									dbg.recognitionException(eee);

									throw eee;
								}
								cnt211++;
							}
							} finally {dbg.exitSubRule(211);}

							}

							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:90: ws
							{
							dbg.location(730,90);
							pushFollow(FOLLOW_ws_in_declarations3898);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(212);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:731:8: ( SEMI ( ws )? )+
					{
					dbg.location(731,8);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:731:8: ( SEMI ( ws )? )+
					int cnt214=0;
					try { dbg.enterSubRule(214);

					loop214:
					while (true) {
						int alt214=2;
						try { dbg.enterDecision(214, decisionCanBacktrack[214]);

						int LA214_0 = input.LA(1);
						if ( (LA214_0==SEMI) ) {
							alt214=1;
						}

						} finally {dbg.exitDecision(214);}

						switch (alt214) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:731:9: SEMI ( ws )?
							{
							dbg.location(731,9);
							match(input,SEMI,FOLLOW_SEMI_in_declarations3910); if (state.failed) return;dbg.location(731,14);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:731:14: ( ws )?
							int alt213=2;
							try { dbg.enterSubRule(213);
							try { dbg.enterDecision(213, decisionCanBacktrack[213]);

							int LA213_0 = input.LA(1);
							if ( (LA213_0==COMMENT||LA213_0==NL||LA213_0==WS) ) {
								alt213=1;
							}
							} finally {dbg.exitDecision(213);}

							switch (alt213) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:731:14: ws
									{
									dbg.location(731,14);
									pushFollow(FOLLOW_ws_in_declarations3912);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(213);}

							}
							break;

						default :
							if ( cnt214 >= 1 ) break loop214;
							if (state.backtracking>0) {state.failed=true; return;}
							EarlyExitException eee = new EarlyExitException(214, input);
							dbg.recognitionException(eee);

							throw eee;
						}
						cnt214++;
					}
					} finally {dbg.exitSubRule(214);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(732, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "declarations");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "declarations"



	// $ANTLR start "declaration"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:734:1: declaration : ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_map )=> sass_map | ( sass_nested_properties )=> sass_nested_properties | ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( cp_mixin_declaration )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? |{...}? at_rule |{...}? sass_control |{...}? sass_extend |{...}? sass_debug |{...}? sass_content |{...}? sass_function_return |{...}? sass_error |{...}? importItem | GEN );
	public final void declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(734, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:735:5: ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_map )=> sass_map | ( sass_nested_properties )=> sass_nested_properties | ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( cp_mixin_declaration )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? |{...}? at_rule |{...}? sass_control |{...}? sass_extend |{...}? sass_debug |{...}? sass_content |{...}? sass_function_return |{...}? sass_error |{...}? importItem | GEN )
			int alt220=18;
			try { dbg.enterDecision(220, decisionCanBacktrack[220]);

			int LA220_0 = input.LA(1);
			if ( (LA220_0==SASS_AT_ROOT) ) {
				int LA220_1 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( (synpred26_Css3()) ) {
					alt220=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt220=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==SASS_VAR) ) {
				int LA220_2 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred25_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt220=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred27_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt220=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==IDENT) ) {
				int LA220_3 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (synpred25_Css3()) ) {
					alt220=3;
				}
				else if ( (synpred26_Css3()) ) {
					alt220=4;
				}
				else if ( (synpred27_Css3()) ) {
					alt220=5;
				}
				else if ( (synpred28_Css3()) ) {
					alt220=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==MINUS) ) {
				int LA220_4 = input.LA(2);
				if ( (((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()"))&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( ((synpred26_Css3()&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))) ) {
					alt220=4;
				}
				else if ( ((synpred27_Css3()&&((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))||evalPredicate(isScssSource(),"isScssSource()")))) ) {
					alt220=5;
				}
				else if ( ((((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))||evalPredicate(isScssSource(),"isScssSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==HASH_SYMBOL) ) {
				int LA220_5 = input.LA(2);
				if ( ((synpred25_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt220=3;
				}
				else if ( (synpred26_Css3()) ) {
					alt220=4;
				}
				else if ( ((synpred27_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt220=5;
				}
				else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred28_Css3())) ) {
					alt220=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 5, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==AT_SIGN) ) {
				int LA220_6 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=4;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred27_Css3())) ) {
					alt220=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred28_Css3())) ) {
					alt220=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==VARIABLE) ) {
				int LA220_7 = input.LA(2);
				if ( (synpred25_Css3()) ) {
					alt220=3;
				}
				else if ( (synpred27_Css3()) ) {
					alt220=5;
				}
				else if ( (synpred28_Css3()) ) {
					alt220=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 7, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==GEN) ) {
				int LA220_8 = input.LA(2);
				if ( (synpred25_Css3()) ) {
					alt220=3;
				}
				else if ( (synpred26_Css3()) ) {
					alt220=4;
				}
				else if ( (synpred27_Css3()) ) {
					alt220=5;
				}
				else if ( (synpred28_Css3()) ) {
					alt220=6;
				}
				else if ( (true) ) {
					alt220=18;
				}

			}
			else if ( (LA220_0==SASS_MIXIN) ) {
				int LA220_9 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt220=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}
				else if ( ((synpred29_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt220=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==GREATER||LA220_0==PLUS||LA220_0==TILDE) && (synpred26_Css3())) {
				alt220=4;
			}
			else if ( (LA220_0==SASS_EXTEND_ONLY_SELECTOR) && (synpred26_Css3())) {
				alt220=4;
			}
			else if ( (LA220_0==LESS_AND) ) {
				int LA220_12 = input.LA(2);
				if ( (synpred26_Css3()) ) {
					alt220=4;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred29_Css3())) ) {
					alt220=7;
				}
				else if ( ((synpred30_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=8;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&synpred31_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt220=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 12, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==HASH) ) {
				int LA220_13 = input.LA(2);
				if ( (synpred26_Css3()) ) {
					alt220=4;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred29_Css3())) ) {
					alt220=7;
				}
				else if ( ((synpred30_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=8;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&synpred31_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt220=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 13, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==DOT) ) {
				int LA220_14 = input.LA(2);
				if ( (synpred26_Css3()) ) {
					alt220=4;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred29_Css3())) ) {
					alt220=7;
				}
				else if ( ((synpred30_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=8;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&synpred31_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt220=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 14, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==DIMENSION) && (synpred26_Css3())) {
				alt220=4;
			}
			else if ( (LA220_0==LBRACKET) && (synpred26_Css3())) {
				alt220=4;
			}
			else if ( (LA220_0==COLON||LA220_0==DCOLON) && (synpred26_Css3())) {
				alt220=4;
			}
			else if ( (LA220_0==STAR) ) {
				int LA220_18 = input.LA(2);
				if ( (synpred26_Css3()) ) {
					alt220=4;
				}
				else if ( (synpred27_Css3()) ) {
					alt220=5;
				}
				else if ( (synpred28_Css3()) ) {
					alt220=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 18, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==PIPE) && (synpred26_Css3())) {
				alt220=4;
			}
			else if ( (LA220_0==AT_IDENT) ) {
				int LA220_20 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt220=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}
				else if ( ((synpred30_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=8;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&synpred31_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt220=9;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt220=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 20, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==SASS_INCLUDE) ) {
				int LA220_21 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt220=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}
				else if ( ((synpred30_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt220=8;
				}
				else if ( ((synpred31_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt220=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 21, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==MEDIA_SYM) ) {
				int LA220_22 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt220=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt220=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 22, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==PAGE_SYM) ) {
				int LA220_23 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt220=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt220=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 23, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==COUNTER_STYLE_SYM) ) {
				int LA220_24 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt220=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt220=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 24, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==FONT_FACE_SYM) ) {
				int LA220_25 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt220=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt220=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==MOZ_DOCUMENT_SYM) ) {
				int LA220_26 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt220=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt220=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==SUPPORTS_SYM) ) {
				alt220=10;
			}
			else if ( (LA220_0==WEBKIT_KEYFRAMES_SYM) ) {
				int LA220_28 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt220=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt220=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==SASS_IF) ) {
				int LA220_29 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt220=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt220=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 29, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==SASS_FOR) ) {
				int LA220_30 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt220=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt220=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 30, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==SASS_EACH) ) {
				int LA220_31 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt220=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt220=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 31, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==SASS_WHILE) ) {
				int LA220_32 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt220=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt220=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 32, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==SASS_EXTEND) ) {
				int LA220_33 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt220=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt220=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 33, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==SASS_DEBUG||LA220_0==SASS_WARN) ) {
				int LA220_34 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt220=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt220=13;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 34, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==SASS_CONTENT) ) {
				int LA220_35 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt220=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt220=14;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 35, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==SASS_RETURN) ) {
				int LA220_36 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt220=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt220=15;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 36, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==IMPORT_SYM) ) {
				int LA220_37 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt220=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt220=17;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 37, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA220_0==SASS_ERROR) ) {
				alt220=16;
			}
			else if ( ((LA220_0 >= BOTTOMCENTER_SYM && LA220_0 <= BOTTOMRIGHT_SYM)||LA220_0==CHARSET_SYM||(LA220_0 >= LEFTBOTTOM_SYM && LA220_0 <= LEFTTOP_SYM)||LA220_0==NAMESPACE_SYM||(LA220_0 >= RIGHTBOTTOM_SYM && LA220_0 <= RIGHTTOP_SYM)||LA220_0==SASS_ELSE||(LA220_0 >= SASS_FORWARD && LA220_0 <= SASS_FUNCTION)||LA220_0==SASS_USE||(LA220_0 >= TOPCENTER_SYM && LA220_0 <= TOPRIGHT_SYM)) ) {
				int LA220_39 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt220=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt220=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt220=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt220=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt220=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 39, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 220, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(220);}

			switch (alt220) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:736:5: ( cp_variable_declaration )=> cp_variable_declaration
					{
					dbg.location(736,32);
					pushFollow(FOLLOW_cp_variable_declaration_in_declaration3941);
					cp_variable_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:737:7: ( sass_map )=> sass_map
					{
					dbg.location(737,20);
					pushFollow(FOLLOW_sass_map_in_declaration3954);
					sass_map();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:738:7: ( sass_nested_properties )=> sass_nested_properties
					{
					dbg.location(738,33);
					pushFollow(FOLLOW_sass_nested_properties_in_declaration3966);
					sass_nested_properties();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:7: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule
					{
					dbg.location(739,145);
					pushFollow(FOLLOW_rule_in_declaration4029);
					rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:740:7: ( propertyDeclaration )=> propertyDeclaration
					{
					dbg.location(740,30);
					pushFollow(FOLLOW_propertyDeclaration_in_declaration4041);
					propertyDeclaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:7: ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration
					{
					dbg.location(742,67);
					pushFollow(FOLLOW_propertyDeclaration_in_declaration4080);
					propertyDeclaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:743:7: ( cp_mixin_declaration )=> cp_mixin_declaration
					{
					dbg.location(743,31);
					pushFollow(FOLLOW_cp_mixin_declaration_in_declaration4092);
					cp_mixin_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:744:7: ( cp_mixin_call )=> cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
					{
					dbg.location(744,25);
					pushFollow(FOLLOW_cp_mixin_call_in_declaration4105);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;dbg.location(744,39);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:744:39: ( ( ws )? IMPORTANT_SYM )?
					int alt217=2;
					try { dbg.enterSubRule(217);
					try { dbg.enterDecision(217, decisionCanBacktrack[217]);

					try {
						isCyclicDecision = true;
						alt217 = dfa217.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(217);}

					switch (alt217) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:744:40: ( ws )? IMPORTANT_SYM
							{
							dbg.location(744,40);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:744:40: ( ws )?
							int alt216=2;
							try { dbg.enterSubRule(216);
							try { dbg.enterDecision(216, decisionCanBacktrack[216]);

							int LA216_0 = input.LA(1);
							if ( (LA216_0==COMMENT||LA216_0==NL||LA216_0==WS) ) {
								alt216=1;
							}
							} finally {dbg.exitDecision(216);}

							switch (alt216) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:744:40: ws
									{
									dbg.location(744,40);
									pushFollow(FOLLOW_ws_in_declaration4108);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(216);}
							dbg.location(744,44);
							match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_declaration4111); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(217);}

					}
					break;
				case 9 :
					dbg.enterAlt(9);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:745:7: ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
					{
					dbg.location(745,25);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(745,43);
					pushFollow(FOLLOW_cp_mixin_call_in_declaration4128);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;dbg.location(745,57);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:745:57: ( ( ws )? IMPORTANT_SYM )?
					int alt219=2;
					try { dbg.enterSubRule(219);
					try { dbg.enterDecision(219, decisionCanBacktrack[219]);

					try {
						isCyclicDecision = true;
						alt219 = dfa219.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(219);}

					switch (alt219) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:745:58: ( ws )? IMPORTANT_SYM
							{
							dbg.location(745,58);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:745:58: ( ws )?
							int alt218=2;
							try { dbg.enterSubRule(218);
							try { dbg.enterDecision(218, decisionCanBacktrack[218]);

							int LA218_0 = input.LA(1);
							if ( (LA218_0==COMMENT||LA218_0==NL||LA218_0==WS) ) {
								alt218=1;
							}
							} finally {dbg.exitDecision(218);}

							switch (alt218) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:745:58: ws
									{
									dbg.location(745,58);
									pushFollow(FOLLOW_ws_in_declaration4131);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(218);}
							dbg.location(745,62);
							match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_declaration4134); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(219);}

					}
					break;
				case 10 :
					dbg.enterAlt(10);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:7: {...}? at_rule
					{
					dbg.location(746,7);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isCssPreprocessorSource()");
					}dbg.location(746,36);
					pushFollow(FOLLOW_at_rule_in_declaration4150);
					at_rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 11 :
					dbg.enterAlt(11);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:747:7: {...}? sass_control
					{
					dbg.location(747,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(747,25);
					pushFollow(FOLLOW_sass_control_in_declaration4160);
					sass_control();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 12 :
					dbg.enterAlt(12);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:748:7: {...}? sass_extend
					{
					dbg.location(748,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(748,25);
					pushFollow(FOLLOW_sass_extend_in_declaration4170);
					sass_extend();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 13 :
					dbg.enterAlt(13);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:749:7: {...}? sass_debug
					{
					dbg.location(749,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(749,25);
					pushFollow(FOLLOW_sass_debug_in_declaration4180);
					sass_debug();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 14 :
					dbg.enterAlt(14);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:750:7: {...}? sass_content
					{
					dbg.location(750,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(750,25);
					pushFollow(FOLLOW_sass_content_in_declaration4190);
					sass_content();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 15 :
					dbg.enterAlt(15);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:751:7: {...}? sass_function_return
					{
					dbg.location(751,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(751,25);
					pushFollow(FOLLOW_sass_function_return_in_declaration4200);
					sass_function_return();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 16 :
					dbg.enterAlt(16);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:752:7: {...}? sass_error
					{
					dbg.location(752,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(752,25);
					pushFollow(FOLLOW_sass_error_in_declaration4210);
					sass_error();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 17 :
					dbg.enterAlt(17);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:753:7: {...}? importItem
					{
					dbg.location(753,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(753,25);
					pushFollow(FOLLOW_importItem_in_declaration4220);
					importItem();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 18 :
					dbg.enterAlt(18);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:754:7: GEN
					{
					dbg.location(754,7);
					match(input,GEN,FOLLOW_GEN_in_declaration4228); if (state.failed) return;
					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(SEMI));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(755, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "declaration"



	// $ANTLR start "selectorsGroup"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:761:1: selectorsGroup : selector ( ( ws )? COMMA ( ws )? selector )* ({...}? COMMA )? ;
	public final void selectorsGroup() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "selectorsGroup");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(761, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:762:5: ( selector ( ( ws )? COMMA ( ws )? selector )* ({...}? COMMA )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:9: selector ( ( ws )? COMMA ( ws )? selector )* ({...}? COMMA )?
			{
			dbg.location(763,9);
			pushFollow(FOLLOW_selector_in_selectorsGroup4262);
			selector();
			state._fsp--;
			if (state.failed) return;dbg.location(763,18);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:18: ( ( ws )? COMMA ( ws )? selector )*
			try { dbg.enterSubRule(223);

			loop223:
			while (true) {
				int alt223=2;
				try { dbg.enterDecision(223, decisionCanBacktrack[223]);

				try {
					isCyclicDecision = true;
					alt223 = dfa223.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(223);}

				switch (alt223) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:19: ( ws )? COMMA ( ws )? selector
					{
					dbg.location(763,19);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:19: ( ws )?
					int alt221=2;
					try { dbg.enterSubRule(221);
					try { dbg.enterDecision(221, decisionCanBacktrack[221]);

					int LA221_0 = input.LA(1);
					if ( (LA221_0==COMMENT||LA221_0==NL||LA221_0==WS) ) {
						alt221=1;
					}
					} finally {dbg.exitDecision(221);}

					switch (alt221) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:19: ws
							{
							dbg.location(763,19);
							pushFollow(FOLLOW_ws_in_selectorsGroup4265);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(221);}
					dbg.location(763,23);
					match(input,COMMA,FOLLOW_COMMA_in_selectorsGroup4268); if (state.failed) return;dbg.location(763,29);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:29: ( ws )?
					int alt222=2;
					try { dbg.enterSubRule(222);
					try { dbg.enterDecision(222, decisionCanBacktrack[222]);

					int LA222_0 = input.LA(1);
					if ( (LA222_0==COMMENT||LA222_0==NL||LA222_0==WS) ) {
						alt222=1;
					}
					} finally {dbg.exitDecision(222);}

					switch (alt222) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:29: ws
							{
							dbg.location(763,29);
							pushFollow(FOLLOW_ws_in_selectorsGroup4270);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(222);}
					dbg.location(763,33);
					pushFollow(FOLLOW_selector_in_selectorsGroup4273);
					selector();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop223;
				}
			}
			} finally {dbg.exitSubRule(223);}
			dbg.location(763,44);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:44: ({...}? COMMA )?
			int alt224=2;
			try { dbg.enterSubRule(224);
			try { dbg.enterDecision(224, decisionCanBacktrack[224]);

			int LA224_0 = input.LA(1);
			if ( (LA224_0==COMMA) ) {
				alt224=1;
			}
			} finally {dbg.exitDecision(224);}

			switch (alt224) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:45: {...}? COMMA
					{
					dbg.location(763,45);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "selectorsGroup", "isCssPreprocessorSource()");
					}dbg.location(763,74);
					match(input,COMMA,FOLLOW_COMMA_in_selectorsGroup4280); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(224);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(764, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "selectorsGroup");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "selectorsGroup"



	// $ANTLR start "selector"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:766:1: selector : ( ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )* |{...}? combinator );
	public final void selector() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "selector");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(766, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:5: ( ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )* |{...}? combinator )
			int alt231=2;
			try { dbg.enterDecision(231, decisionCanBacktrack[231]);

			try {
				isCyclicDecision = true;
				alt231 = dfa231.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(231);}

			switch (alt231) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:8: ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )*
					{
					dbg.location(767,8);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:8: ( combinator ( ws )? )?
					int alt226=2;
					try { dbg.enterSubRule(226);
					try { dbg.enterDecision(226, decisionCanBacktrack[226]);

					int LA226_0 = input.LA(1);
					if ( (LA226_0==GREATER||LA226_0==PLUS||LA226_0==TILDE) ) {
						alt226=1;
					}
					} finally {dbg.exitDecision(226);}

					switch (alt226) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:9: combinator ( ws )?
							{
							dbg.location(767,9);
							pushFollow(FOLLOW_combinator_in_selector4301);
							combinator();
							state._fsp--;
							if (state.failed) return;dbg.location(767,20);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:20: ( ws )?
							int alt225=2;
							try { dbg.enterSubRule(225);
							try { dbg.enterDecision(225, decisionCanBacktrack[225]);

							int LA225_0 = input.LA(1);
							if ( (LA225_0==COMMENT||LA225_0==NL||LA225_0==WS) ) {
								alt225=1;
							}
							} finally {dbg.exitDecision(225);}

							switch (alt225) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:20: ws
									{
									dbg.location(767,20);
									pushFollow(FOLLOW_ws_in_selector4303);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(225);}

							}
							break;

					}
					} finally {dbg.exitSubRule(226);}
					dbg.location(767,26);
					pushFollow(FOLLOW_simpleSelectorSequence_in_selector4308);
					simpleSelectorSequence();
					state._fsp--;
					if (state.failed) return;dbg.location(767,49);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:49: ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )*
					try { dbg.enterSubRule(230);

					loop230:
					while (true) {
						int alt230=2;
						try { dbg.enterDecision(230, decisionCanBacktrack[230]);

						try {
							isCyclicDecision = true;
							alt230 = dfa230.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(230);}

						switch (alt230) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:51: ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence
							{
							dbg.location(767,51);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:51: ( ( ( ws )? combinator ( ws )? ) | ws )
							int alt229=2;
							try { dbg.enterSubRule(229);
							try { dbg.enterDecision(229, decisionCanBacktrack[229]);

							try {
								isCyclicDecision = true;
								alt229 = dfa229.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(229);}

							switch (alt229) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:52: ( ( ws )? combinator ( ws )? )
									{
									dbg.location(767,52);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:52: ( ( ws )? combinator ( ws )? )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:53: ( ws )? combinator ( ws )?
									{
									dbg.location(767,53);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:53: ( ws )?
									int alt227=2;
									try { dbg.enterSubRule(227);
									try { dbg.enterDecision(227, decisionCanBacktrack[227]);

									int LA227_0 = input.LA(1);
									if ( (LA227_0==COMMENT||LA227_0==NL||LA227_0==WS) ) {
										alt227=1;
									}
									} finally {dbg.exitDecision(227);}

									switch (alt227) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:53: ws
											{
											dbg.location(767,53);
											pushFollow(FOLLOW_ws_in_selector4314);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(227);}
									dbg.location(767,57);
									pushFollow(FOLLOW_combinator_in_selector4317);
									combinator();
									state._fsp--;
									if (state.failed) return;dbg.location(767,68);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:68: ( ws )?
									int alt228=2;
									try { dbg.enterSubRule(228);
									try { dbg.enterDecision(228, decisionCanBacktrack[228]);

									int LA228_0 = input.LA(1);
									if ( (LA228_0==COMMENT||LA228_0==NL||LA228_0==WS) ) {
										alt228=1;
									}
									} finally {dbg.exitDecision(228);}

									switch (alt228) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:68: ws
											{
											dbg.location(767,68);
											pushFollow(FOLLOW_ws_in_selector4319);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(228);}

									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:73: ws
									{
									dbg.location(767,73);
									pushFollow(FOLLOW_ws_in_selector4323);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(229);}
							dbg.location(767,77);
							pushFollow(FOLLOW_simpleSelectorSequence_in_selector4326);
							simpleSelectorSequence();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop230;
						}
					}
					} finally {dbg.exitSubRule(230);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:10: {...}? combinator
					{
					dbg.location(768,10);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "selector", "isScssSource()");
					}dbg.location(768,28);
					pushFollow(FOLLOW_combinator_in_selector4341);
					combinator();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(769, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "selector");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "selector"



	// $ANTLR start "combinator"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:771:1: combinator : ( PLUS | GREATER | TILDE );
	public final void combinator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "combinator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(771, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:772:5: ( PLUS | GREATER | TILDE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(772,5);
			if ( input.LA(1)==GREATER||input.LA(1)==PLUS||input.LA(1)==TILDE ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(774, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "combinator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "combinator"



	// $ANTLR start "simpleSelectorSequence"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:776:1: simpleSelectorSequence : ( ( elementSubsequent |{...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) ) )* | ( typeSelector )=> typeSelector ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp ) )* );
	public final void simpleSelectorSequence() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "simpleSelectorSequence");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(776, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:2: ( ( elementSubsequent |{...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) ) )* | ( typeSelector )=> typeSelector ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp ) )* )
			int alt240=2;
			try { dbg.enterDecision(240, decisionCanBacktrack[240]);

			int LA240_0 = input.LA(1);
			if ( (LA240_0==AT_SIGN||LA240_0==COLON||(LA240_0 >= DCOLON && LA240_0 <= DOT)||(LA240_0 >= HASH && LA240_0 <= HASH_SYMBOL)||LA240_0==LBRACKET||LA240_0==MINUS||LA240_0==SASS_EXTEND_ONLY_SELECTOR) ) {
				alt240=1;
			}
			else if ( (LA240_0==LESS_AND) ) {
				int LA240_2 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt240=1;
				}
				else if ( (synpred33_Css3()) ) {
					alt240=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 240, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA240_0==IDENT) ) {
				int LA240_3 = input.LA(2);
				if ( (LA240_3==HASH_SYMBOL) ) {
					int LA240_7 = input.LA(3);
					if ( (LA240_7==LBRACE) ) {
						alt240=1;
					}
					else if ( (LA240_7==NAME) && (synpred33_Css3())) {
						alt240=2;
					}
					else if ( (LA240_7==IDENT||LA240_7==MINUS) && (synpred33_Css3())) {
						alt240=2;
					}
					else if ( (LA240_7==AT_SIGN) && (synpred33_Css3())) {
						alt240=2;
					}

				}
				else if ( (LA240_3==AT_SIGN) ) {
					alt240=1;
				}
				else if ( (LA240_3==PIPE) && (synpred33_Css3())) {
					alt240=2;
				}
				else if ( (LA240_3==COMMENT||LA240_3==NL||LA240_3==WS) && (synpred33_Css3())) {
					alt240=2;
				}
				else if ( (LA240_3==SASS_EXTEND_ONLY_SELECTOR) && (synpred33_Css3())) {
					alt240=2;
				}
				else if ( (LA240_3==LESS_AND) && (synpred33_Css3())) {
					alt240=2;
				}
				else if ( (LA240_3==HASH) && (synpred33_Css3())) {
					alt240=2;
				}
				else if ( (LA240_3==DOT) && (synpred33_Css3())) {
					alt240=2;
				}
				else if ( (LA240_3==DIMENSION) && (synpred33_Css3())) {
					alt240=2;
				}
				else if ( (LA240_3==LBRACKET) && (synpred33_Css3())) {
					alt240=2;
				}
				else if ( (LA240_3==COLON||LA240_3==DCOLON) && (synpred33_Css3())) {
					alt240=2;
				}
				else if ( (LA240_3==GREATER||LA240_3==PLUS||LA240_3==TILDE) && (synpred33_Css3())) {
					alt240=2;
				}
				else if ( (LA240_3==COMMA) && (synpred33_Css3())) {
					alt240=2;
				}
				else if ( (LA240_3==LBRACE) && (synpred33_Css3())) {
					alt240=2;
				}
				else if ( (LA240_3==RPAREN) && (synpred33_Css3())) {
					alt240=2;
				}
				else if ( (LA240_3==SEMI) && (synpred33_Css3())) {
					alt240=2;
				}
				else if ( (LA240_3==RBRACE) && (synpred33_Css3())) {
					alt240=2;
				}

			}
			else if ( (LA240_0==STAR) && (synpred33_Css3())) {
				alt240=2;
			}
			else if ( (LA240_0==PIPE) && (synpred33_Css3())) {
				alt240=2;
			}
			else if ( (LA240_0==GEN) && (synpred33_Css3())) {
				alt240=2;
			}

			} finally {dbg.exitDecision(240);}

			switch (alt240) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:9: ( elementSubsequent |{...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) ) )*
					{
					dbg.location(778,9);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:9: ( elementSubsequent |{...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp )
					int alt232=3;
					try { dbg.enterSubRule(232);
					try { dbg.enterDecision(232, decisionCanBacktrack[232]);

					switch ( input.LA(1) ) {
					case COLON:
					case DCOLON:
					case DIMENSION:
					case DOT:
					case HASH:
					case LBRACKET:
					case LESS_AND:
					case SASS_EXTEND_ONLY_SELECTOR:
						{
						alt232=1;
						}
						break;
					case HASH_SYMBOL:
						{
						int LA232_2 = input.LA(2);
						if ( (LA232_2==LBRACE) ) {
							alt232=2;
						}
						else if ( (LA232_2==AT_SIGN||LA232_2==IDENT||LA232_2==MINUS||LA232_2==NAME) ) {
							alt232=1;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 232, 2, input);
								dbg.recognitionException(nvae);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case IDENT:
					case MINUS:
						{
						int LA232_3 = input.LA(2);
						if ( (LA232_3==HASH_SYMBOL) ) {
							alt232=2;
						}
						else if ( (LA232_3==AT_SIGN) ) {
							alt232=3;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 232, 3, input);
								dbg.recognitionException(nvae);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case AT_SIGN:
						{
						alt232=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 232, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(232);}

					switch (alt232) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:10: elementSubsequent
							{
							dbg.location(778,10);
							pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence4393);
							elementSubsequent();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:30: {...}? sass_selector_interpolation_exp
							{
							dbg.location(778,30);
							if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "simpleSelectorSequence", "isScssSource()");
							}dbg.location(778,48);
							pushFollow(FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence4399);
							sass_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:11: {...}? less_selector_interpolation_exp
							{
							dbg.location(779,11);
							if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "simpleSelectorSequence", "isLessSource()");
							}dbg.location(779,29);
							pushFollow(FOLLOW_less_selector_interpolation_exp_in_simpleSelectorSequence4413);
							less_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(232);}
					dbg.location(779,64);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:64: ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) ) )*
					try { dbg.enterSubRule(236);

					loop236:
					while (true) {
						int alt236=2;
						try { dbg.enterDecision(236, decisionCanBacktrack[236]);

						int LA236_0 = input.LA(1);
						if ( (LA236_0==COMMENT||LA236_0==NL||LA236_0==WS) ) {
							int LA236_1 = input.LA(2);
							if ( (synpred32_Css3()) ) {
								alt236=1;
							}

						}
						else if ( (LA236_0==SASS_EXTEND_ONLY_SELECTOR) && (synpred32_Css3())) {
							alt236=1;
						}
						else if ( (LA236_0==LESS_AND) && (synpred32_Css3())) {
							alt236=1;
						}
						else if ( (LA236_0==HASH) && (synpred32_Css3())) {
							alt236=1;
						}
						else if ( (LA236_0==HASH_SYMBOL) && (synpred32_Css3())) {
							alt236=1;
						}
						else if ( (LA236_0==DOT) && (synpred32_Css3())) {
							alt236=1;
						}
						else if ( (LA236_0==DIMENSION) && (synpred32_Css3())) {
							alt236=1;
						}
						else if ( (LA236_0==LBRACKET) && (synpred32_Css3())) {
							alt236=1;
						}
						else if ( (LA236_0==COLON||LA236_0==DCOLON) && (synpred32_Css3())) {
							alt236=1;
						}

						} finally {dbg.exitDecision(236);}

						switch (alt236) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:65: ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) )
							{
							dbg.location(779,79);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:79: ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) )
							int alt235=2;
							try { dbg.enterSubRule(235);
							try { dbg.enterDecision(235, decisionCanBacktrack[235]);

							try {
								isCyclicDecision = true;
								alt235 = dfa235.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(235);}

							switch (alt235) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:80: ( ( ws )? elementSubsequent )
									{
									dbg.location(779,80);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:80: ( ( ws )? elementSubsequent )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:81: ( ws )? elementSubsequent
									{
									dbg.location(779,81);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:81: ( ws )?
									int alt233=2;
									try { dbg.enterSubRule(233);
									try { dbg.enterDecision(233, decisionCanBacktrack[233]);

									int LA233_0 = input.LA(1);
									if ( (LA233_0==COMMENT||LA233_0==NL||LA233_0==WS) ) {
										alt233=1;
									}
									} finally {dbg.exitDecision(233);}

									switch (alt233) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:81: ws
											{
											dbg.location(779,81);
											pushFollow(FOLLOW_ws_in_simpleSelectorSequence4428);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(233);}
									dbg.location(779,85);
									pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence4431);
									elementSubsequent();
									state._fsp--;
									if (state.failed) return;
									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:105: ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) )
									{
									dbg.location(779,105);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:105: ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:106: ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp )
									{
									dbg.location(779,106);
									pushFollow(FOLLOW_ws_in_simpleSelectorSequence4436);
									ws();
									state._fsp--;
									if (state.failed) return;dbg.location(779,109);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:109: ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp )
									int alt234=2;
									try { dbg.enterSubRule(234);
									try { dbg.enterDecision(234, decisionCanBacktrack[234]);

									switch ( input.LA(1) ) {
									case IDENT:
									case MINUS:
										{
										int LA234_1 = input.LA(2);
										if ( (LA234_1==HASH_SYMBOL) ) {
											alt234=1;
										}
										else if ( (LA234_1==AT_SIGN) ) {
											alt234=2;
										}

										else {
											if (state.backtracking>0) {state.failed=true; return;}
											int nvaeMark = input.mark();
											try {
												input.consume();
												NoViableAltException nvae =
													new NoViableAltException("", 234, 1, input);
												dbg.recognitionException(nvae);
												throw nvae;
											} finally {
												input.rewind(nvaeMark);
											}
										}

										}
										break;
									case HASH_SYMBOL:
										{
										alt234=1;
										}
										break;
									case AT_SIGN:
										{
										alt234=2;
										}
										break;
									default:
										if (state.backtracking>0) {state.failed=true; return;}
										NoViableAltException nvae =
											new NoViableAltException("", 234, 0, input);
										dbg.recognitionException(nvae);
										throw nvae;
									}
									} finally {dbg.exitDecision(234);}

									switch (alt234) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:110: {...}? sass_selector_interpolation_exp
											{
											dbg.location(779,110);
											if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
												if (state.backtracking>0) {state.failed=true; return;}
												throw new FailedPredicateException(input, "simpleSelectorSequence", "isScssSource()");
											}dbg.location(779,128);
											pushFollow(FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence4441);
											sass_selector_interpolation_exp();
											state._fsp--;
											if (state.failed) return;
											}
											break;
										case 2 :
											dbg.enterAlt(2);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:162: {...}? less_selector_interpolation_exp
											{
											dbg.location(779,162);
											if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
												if (state.backtracking>0) {state.failed=true; return;}
												throw new FailedPredicateException(input, "simpleSelectorSequence", "isLessSource()");
											}dbg.location(779,180);
											pushFollow(FOLLOW_less_selector_interpolation_exp_in_simpleSelectorSequence4447);
											less_selector_interpolation_exp();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(234);}

									}

									}
									break;

							}
							} finally {dbg.exitSubRule(235);}

							}
							break;

						default :
							break loop236;
						}
					}
					} finally {dbg.exitSubRule(236);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:4: ( typeSelector )=> typeSelector ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp ) )*
					{
					dbg.location(780,20);
					pushFollow(FOLLOW_typeSelector_in_simpleSelectorSequence4461);
					typeSelector();
					state._fsp--;
					if (state.failed) return;dbg.location(780,33);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:33: ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp ) )*
					try { dbg.enterSubRule(239);

					loop239:
					while (true) {
						int alt239=2;
						try { dbg.enterDecision(239, decisionCanBacktrack[239]);

						int LA239_0 = input.LA(1);
						if ( (LA239_0==COMMENT||LA239_0==NL||LA239_0==WS) ) {
							int LA239_1 = input.LA(2);
							if ( (synpred34_Css3()) ) {
								alt239=1;
							}

						}
						else if ( (LA239_0==SASS_EXTEND_ONLY_SELECTOR) && (synpred34_Css3())) {
							alt239=1;
						}
						else if ( (LA239_0==LESS_AND) && (synpred34_Css3())) {
							alt239=1;
						}
						else if ( (LA239_0==HASH) && (synpred34_Css3())) {
							alt239=1;
						}
						else if ( (LA239_0==HASH_SYMBOL) && (synpred34_Css3())) {
							alt239=1;
						}
						else if ( (LA239_0==DOT) && (synpred34_Css3())) {
							alt239=1;
						}
						else if ( (LA239_0==DIMENSION) && (synpred34_Css3())) {
							alt239=1;
						}
						else if ( (LA239_0==LBRACKET) && (synpred34_Css3())) {
							alt239=1;
						}
						else if ( (LA239_0==COLON||LA239_0==DCOLON) && (synpred34_Css3())) {
							alt239=1;
						}

						} finally {dbg.exitDecision(239);}

						switch (alt239) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:34: ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp )
							{
							dbg.location(780,48);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:48: ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp )
							int alt238=2;
							try { dbg.enterSubRule(238);
							try { dbg.enterDecision(238, decisionCanBacktrack[238]);

							try {
								isCyclicDecision = true;
								alt238 = dfa238.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(238);}

							switch (alt238) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:49: ( ( ws )? elementSubsequent )
									{
									dbg.location(780,49);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:49: ( ( ws )? elementSubsequent )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:50: ( ws )? elementSubsequent
									{
									dbg.location(780,50);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:50: ( ws )?
									int alt237=2;
									try { dbg.enterSubRule(237);
									try { dbg.enterDecision(237, decisionCanBacktrack[237]);

									int LA237_0 = input.LA(1);
									if ( (LA237_0==COMMENT||LA237_0==NL||LA237_0==WS) ) {
										alt237=1;
									}
									} finally {dbg.exitDecision(237);}

									switch (alt237) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:50: ws
											{
											dbg.location(780,50);
											pushFollow(FOLLOW_ws_in_simpleSelectorSequence4473);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(237);}
									dbg.location(780,54);
									pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence4476);
									elementSubsequent();
									state._fsp--;
									if (state.failed) return;
									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:75: {...}? ws sass_selector_interpolation_exp
									{
									dbg.location(780,75);
									if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
										if (state.backtracking>0) {state.failed=true; return;}
										throw new FailedPredicateException(input, "simpleSelectorSequence", "isScssSource()");
									}dbg.location(780,93);
									pushFollow(FOLLOW_ws_in_simpleSelectorSequence4483);
									ws();
									state._fsp--;
									if (state.failed) return;dbg.location(780,96);
									pushFollow(FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence4485);
									sass_selector_interpolation_exp();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(238);}

							}
							break;

						default :
							break loop239;
						}
					}
					} finally {dbg.exitSubRule(239);}

					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			            reportError(rce);
			            consumeUntil(input, BitSet.of(LBRACE));
			        
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(781, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "simpleSelectorSequence");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "simpleSelectorSequence"



	// $ANTLR start "esPred"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:1: esPred : ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR |{...}? LESS_AND );
	public final void esPred() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "esPred");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(788, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:789:5: ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR |{...}? LESS_AND )
			int alt241=8;
			try { dbg.enterDecision(241, decisionCanBacktrack[241]);

			switch ( input.LA(1) ) {
			case HASH_SYMBOL:
				{
				alt241=1;
				}
				break;
			case HASH:
				{
				alt241=2;
				}
				break;
			case DOT:
				{
				alt241=3;
				}
				break;
			case LBRACKET:
				{
				alt241=4;
				}
				break;
			case COLON:
				{
				alt241=5;
				}
				break;
			case DCOLON:
				{
				alt241=6;
				}
				break;
			case SASS_EXTEND_ONLY_SELECTOR:
				{
				alt241=7;
				}
				break;
			case LESS_AND:
				{
				alt241=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 241, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(241);}

			switch (alt241) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:789:7: HASH_SYMBOL
					{
					dbg.location(789,7);
					match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_esPred4510); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:789:21: HASH
					{
					dbg.location(789,21);
					match(input,HASH,FOLLOW_HASH_in_esPred4514); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:789:28: DOT
					{
					dbg.location(789,28);
					match(input,DOT,FOLLOW_DOT_in_esPred4518); if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:789:34: LBRACKET
					{
					dbg.location(789,34);
					match(input,LBRACKET,FOLLOW_LBRACKET_in_esPred4522); if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:789:45: COLON
					{
					dbg.location(789,45);
					match(input,COLON,FOLLOW_COLON_in_esPred4526); if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:789:53: DCOLON
					{
					dbg.location(789,53);
					match(input,DCOLON,FOLLOW_DCOLON_in_esPred4530); if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:789:62: SASS_EXTEND_ONLY_SELECTOR
					{
					dbg.location(789,62);
					match(input,SASS_EXTEND_ONLY_SELECTOR,FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_esPred4534); if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:789:90: {...}? LESS_AND
					{
					dbg.location(789,90);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "esPred", "isCssPreprocessorSource()");
					}dbg.location(789,119);
					match(input,LESS_AND,FOLLOW_LESS_AND_in_esPred4540); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(790, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "esPred");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "esPred"



	// $ANTLR start "typeSelector"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:1: typeSelector options {k=2; } : ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName ;
	public final void typeSelector() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "typeSelector");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(792, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:794:3: ( ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:794:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName
			{
			dbg.location(794,6);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:794:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )?
			int alt242=2;
			try { dbg.enterSubRule(242);
			try { dbg.enterDecision(242, decisionCanBacktrack[242]);

			int LA242_0 = input.LA(1);
			if ( (LA242_0==IDENT) ) {
				int LA242_1 = input.LA(2);
				if ( (LA242_1==PIPE) && (synpred35_Css3())) {
					alt242=1;
				}
			}
			else if ( (LA242_0==STAR) ) {
				int LA242_2 = input.LA(2);
				if ( (LA242_2==PIPE) && (synpred35_Css3())) {
					alt242=1;
				}
			}
			else if ( (LA242_0==PIPE) && (synpred35_Css3())) {
				alt242=1;
			}
			} finally {dbg.exitDecision(242);}

			switch (alt242) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:794:7: ( ( IDENT | STAR )? PIPE )=> namespacePrefix
					{
					dbg.location(794,31);
					pushFollow(FOLLOW_namespacePrefix_in_typeSelector4582);
					namespacePrefix();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(242);}
			dbg.location(794,49);
			pushFollow(FOLLOW_elementName_in_typeSelector4586);
			elementName();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(795, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "typeSelector");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "typeSelector"



	// $ANTLR start "namespacePrefix"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:797:1: namespacePrefix : ( namespacePrefixName | STAR )? PIPE ;
	public final void namespacePrefix() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "namespacePrefix");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(797, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:798:3: ( ( namespacePrefixName | STAR )? PIPE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:798:5: ( namespacePrefixName | STAR )? PIPE
			{
			dbg.location(798,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:798:5: ( namespacePrefixName | STAR )?
			int alt243=3;
			try { dbg.enterSubRule(243);
			try { dbg.enterDecision(243, decisionCanBacktrack[243]);

			int LA243_0 = input.LA(1);
			if ( (LA243_0==IDENT) ) {
				alt243=1;
			}
			else if ( (LA243_0==STAR) ) {
				alt243=2;
			}
			} finally {dbg.exitDecision(243);}

			switch (alt243) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:798:7: namespacePrefixName
					{
					dbg.location(798,7);
					pushFollow(FOLLOW_namespacePrefixName_in_namespacePrefix4601);
					namespacePrefixName();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:798:29: STAR
					{
					dbg.location(798,29);
					match(input,STAR,FOLLOW_STAR_in_namespacePrefix4605); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(243);}
			dbg.location(798,36);
			match(input,PIPE,FOLLOW_PIPE_in_namespacePrefix4609); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(799, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "namespacePrefix");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "namespacePrefix"



	// $ANTLR start "elementSubsequent"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:802:1: elementSubsequent : ({...}? sass_extend_only_selector |{...}? LESS_AND ( IDENT | NUMBER |{...}? sass_interpolation_expression_var )* |{...}? LESS_AND less_selector_interpolation_exp | cssId | cssClass | slAttribute | pseudo ) ;
	public final void elementSubsequent() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "elementSubsequent");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(802, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:803:5: ( ({...}? sass_extend_only_selector |{...}? LESS_AND ( IDENT | NUMBER |{...}? sass_interpolation_expression_var )* |{...}? LESS_AND less_selector_interpolation_exp | cssId | cssClass | slAttribute | pseudo ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:804:5: ({...}? sass_extend_only_selector |{...}? LESS_AND ( IDENT | NUMBER |{...}? sass_interpolation_expression_var )* |{...}? LESS_AND less_selector_interpolation_exp | cssId | cssClass | slAttribute | pseudo )
			{
			dbg.location(804,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:804:5: ({...}? sass_extend_only_selector |{...}? LESS_AND ( IDENT | NUMBER |{...}? sass_interpolation_expression_var )* |{...}? LESS_AND less_selector_interpolation_exp | cssId | cssClass | slAttribute | pseudo )
			int alt245=7;
			try { dbg.enterSubRule(245);
			try { dbg.enterDecision(245, decisionCanBacktrack[245]);

			switch ( input.LA(1) ) {
			case SASS_EXTEND_ONLY_SELECTOR:
				{
				alt245=1;
				}
				break;
			case LESS_AND:
				{
				switch ( input.LA(2) ) {
				case IDENT:
					{
					int LA245_7 = input.LA(3);
					if ( ((LA245_7 >= COLON && LA245_7 <= COMMENT)||(LA245_7 >= DCOLON && LA245_7 <= DOT)||LA245_7==GREATER||(LA245_7 >= HASH && LA245_7 <= HASH_SYMBOL)||LA245_7==IDENT||(LA245_7 >= LBRACE && LA245_7 <= LBRACKET)||LA245_7==LESS_AND||LA245_7==NL||LA245_7==NUMBER||LA245_7==PLUS||LA245_7==RBRACE||LA245_7==RPAREN||LA245_7==SASS_EXTEND_ONLY_SELECTOR||LA245_7==SEMI||LA245_7==TILDE||LA245_7==WS) ) {
						alt245=2;
					}
					else if ( (LA245_7==AT_SIGN) ) {
						alt245=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 245, 7, input);
							dbg.recognitionException(nvae);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case COLON:
				case COMMA:
				case COMMENT:
				case DCOLON:
				case DIMENSION:
				case DOT:
				case GREATER:
				case HASH:
				case HASH_SYMBOL:
				case LBRACE:
				case LBRACKET:
				case LESS_AND:
				case NL:
				case NUMBER:
				case PLUS:
				case RBRACE:
				case RPAREN:
				case SASS_EXTEND_ONLY_SELECTOR:
				case SEMI:
				case TILDE:
				case WS:
					{
					alt245=2;
					}
					break;
				case AT_SIGN:
				case MINUS:
					{
					alt245=3;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 245, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case HASH:
			case HASH_SYMBOL:
				{
				alt245=4;
				}
				break;
			case DIMENSION:
			case DOT:
				{
				alt245=5;
				}
				break;
			case LBRACKET:
				{
				alt245=6;
				}
				break;
			case COLON:
			case DCOLON:
				{
				alt245=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 245, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(245);}

			switch (alt245) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:805:9: {...}? sass_extend_only_selector
					{
					dbg.location(805,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "elementSubsequent", "isScssSource()");
					}dbg.location(805,27);
					pushFollow(FOLLOW_sass_extend_only_selector_in_elementSubsequent4641);
					sass_extend_only_selector();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:806:11: {...}? LESS_AND ( IDENT | NUMBER |{...}? sass_interpolation_expression_var )*
					{
					dbg.location(806,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "elementSubsequent", "isCssPreprocessorSource()");
					}dbg.location(806,40);
					match(input,LESS_AND,FOLLOW_LESS_AND_in_elementSubsequent4655); if (state.failed) return;dbg.location(806,49);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:806:49: ( IDENT | NUMBER |{...}? sass_interpolation_expression_var )*
					try { dbg.enterSubRule(244);

					loop244:
					while (true) {
						int alt244=4;
						try { dbg.enterDecision(244, decisionCanBacktrack[244]);

						switch ( input.LA(1) ) {
						case HASH_SYMBOL:
							{
							int LA244_2 = input.LA(2);
							if ( (LA244_2==LBRACE) ) {
								alt244=3;
							}

							}
							break;
						case IDENT:
							{
							alt244=1;
							}
							break;
						case NUMBER:
							{
							alt244=2;
							}
							break;
						}
						} finally {dbg.exitDecision(244);}

						switch (alt244) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:806:50: IDENT
							{
							dbg.location(806,50);
							match(input,IDENT,FOLLOW_IDENT_in_elementSubsequent4658); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:806:58: NUMBER
							{
							dbg.location(806,58);
							match(input,NUMBER,FOLLOW_NUMBER_in_elementSubsequent4662); if (state.failed) return;
							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:806:67: {...}? sass_interpolation_expression_var
							{
							dbg.location(806,67);
							if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "elementSubsequent", "isScssSource()");
							}dbg.location(806,85);
							pushFollow(FOLLOW_sass_interpolation_expression_var_in_elementSubsequent4668);
							sass_interpolation_expression_var();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop244;
						}
					}
					} finally {dbg.exitSubRule(244);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:807:11: {...}? LESS_AND less_selector_interpolation_exp
					{
					dbg.location(807,11);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "elementSubsequent", "isLessSource()");
					}dbg.location(807,29);
					match(input,LESS_AND,FOLLOW_LESS_AND_in_elementSubsequent4684); if (state.failed) return;dbg.location(807,38);
					pushFollow(FOLLOW_less_selector_interpolation_exp_in_elementSubsequent4686);
					less_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:808:8: cssId
					{
					dbg.location(808,8);
					pushFollow(FOLLOW_cssId_in_elementSubsequent4695);
					cssId();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:809:8: cssClass
					{
					dbg.location(809,8);
					pushFollow(FOLLOW_cssClass_in_elementSubsequent4704);
					cssClass();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:810:11: slAttribute
					{
					dbg.location(810,11);
					pushFollow(FOLLOW_slAttribute_in_elementSubsequent4716);
					slAttribute();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:811:11: pseudo
					{
					dbg.location(811,11);
					pushFollow(FOLLOW_pseudo_in_elementSubsequent4728);
					pseudo();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(245);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(813, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "elementSubsequent");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "elementSubsequent"



	// $ANTLR start "cssId"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:816:1: cssId : ( HASH ({...}? sass_selector_interpolation_exp )? | ( HASH_SYMBOL ( NAME |{...}? less_selector_interpolation_exp ) ) );
	public final void cssId() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cssId");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(816, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:5: ( HASH ({...}? sass_selector_interpolation_exp )? | ( HASH_SYMBOL ( NAME |{...}? less_selector_interpolation_exp ) ) )
			int alt248=2;
			try { dbg.enterDecision(248, decisionCanBacktrack[248]);

			int LA248_0 = input.LA(1);
			if ( (LA248_0==HASH) ) {
				alt248=1;
			}
			else if ( (LA248_0==HASH_SYMBOL) ) {
				alt248=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 248, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(248);}

			switch (alt248) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:7: HASH ({...}? sass_selector_interpolation_exp )?
					{
					dbg.location(817,7);
					match(input,HASH,FOLLOW_HASH_in_cssId4752); if (state.failed) return;dbg.location(817,12);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:12: ({...}? sass_selector_interpolation_exp )?
					int alt246=2;
					try { dbg.enterSubRule(246);
					try { dbg.enterDecision(246, decisionCanBacktrack[246]);

					int LA246_0 = input.LA(1);
					if ( (LA246_0==IDENT||LA246_0==MINUS) ) {
						alt246=1;
					}
					else if ( (LA246_0==HASH_SYMBOL) ) {
						int LA246_2 = input.LA(2);
						if ( (LA246_2==LBRACE) ) {
							alt246=1;
						}
					}
					} finally {dbg.exitDecision(246);}

					switch (alt246) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:13: {...}? sass_selector_interpolation_exp
							{
							dbg.location(817,13);
							if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "cssId", "isScssSource()");
							}dbg.location(817,31);
							pushFollow(FOLLOW_sass_selector_interpolation_exp_in_cssId4757);
							sass_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(246);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:819:9: ( HASH_SYMBOL ( NAME |{...}? less_selector_interpolation_exp ) )
					{
					dbg.location(819,9);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:819:9: ( HASH_SYMBOL ( NAME |{...}? less_selector_interpolation_exp ) )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:819:11: HASH_SYMBOL ( NAME |{...}? less_selector_interpolation_exp )
					{
					dbg.location(819,11);
					match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_cssId4779); if (state.failed) return;dbg.location(820,13);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:820:13: ( NAME |{...}? less_selector_interpolation_exp )
					int alt247=2;
					try { dbg.enterSubRule(247);
					try { dbg.enterDecision(247, decisionCanBacktrack[247]);

					int LA247_0 = input.LA(1);
					if ( (LA247_0==NAME) ) {
						alt247=1;
					}
					else if ( (LA247_0==AT_SIGN||LA247_0==IDENT||LA247_0==MINUS) ) {
						alt247=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 247, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(247);}

					switch (alt247) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:820:15: NAME
							{
							dbg.location(820,15);
							match(input,NAME,FOLLOW_NAME_in_cssId4795); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:17: {...}? less_selector_interpolation_exp
							{
							dbg.location(821,17);
							if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "cssId", "isLessSource()");
							}dbg.location(821,35);
							pushFollow(FOLLOW_less_selector_interpolation_exp_in_cssId4815);
							less_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(247);}

					}

					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(WS, IDENT, LBRACE));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(824, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cssId");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cssId"



	// $ANTLR start "cssClass"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:830:1: cssClass : ( ( DOT ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN ) ) |{...}? DIMENSION );
	public final void cssClass() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cssClass");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(830, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:5: ( ( DOT ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN ) ) |{...}? DIMENSION )
			int alt250=2;
			try { dbg.enterDecision(250, decisionCanBacktrack[250]);

			int LA250_0 = input.LA(1);
			if ( (LA250_0==DOT) ) {
				alt250=1;
			}
			else if ( (LA250_0==DIMENSION) ) {
				alt250=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 250, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(250);}

			switch (alt250) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:7: ( DOT ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN ) )
					{
					dbg.location(831,7);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:7: ( DOT ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN ) )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:8: DOT ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN )
					{
					dbg.location(831,8);
					match(input,DOT,FOLLOW_DOT_in_cssClass4867); if (state.failed) return;dbg.location(832,9);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:9: ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN )
					int alt249=5;
					try { dbg.enterSubRule(249);
					try { dbg.enterDecision(249, decisionCanBacktrack[249]);

					switch ( input.LA(1) ) {
					case IDENT:
						{
						switch ( input.LA(2) ) {
						case HASH_SYMBOL:
							{
							int LA249_7 = input.LA(3);
							if ( (LA249_7==LBRACE) ) {
								alt249=1;
							}
							else if ( (LA249_7==AT_SIGN||LA249_7==IDENT||LA249_7==MINUS||LA249_7==NAME) ) {
								alt249=3;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 249, 7, input);
									dbg.recognitionException(nvae);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

							}
							break;
						case AT_SIGN:
							{
							alt249=2;
							}
							break;
						case COLON:
						case COMMA:
						case COMMENT:
						case DCOLON:
						case DIMENSION:
						case DOT:
						case GREATER:
						case HASH:
						case LBRACE:
						case LBRACKET:
						case LESS_AND:
						case NL:
						case PLUS:
						case RBRACE:
						case RPAREN:
						case SASS_EXTEND_ONLY_SELECTOR:
						case SEMI:
						case TILDE:
						case WS:
							{
							alt249=3;
							}
							break;
						default:
							if (state.backtracking>0) {state.failed=true; return;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 249, 1, input);
								dbg.recognitionException(nvae);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}
						}
						break;
					case HASH_SYMBOL:
						{
						alt249=1;
						}
						break;
					case AT_SIGN:
						{
						alt249=2;
						}
						break;
					case MINUS:
						{
						int LA249_4 = input.LA(2);
						if ( (LA249_4==HASH_SYMBOL) ) {
							alt249=1;
						}
						else if ( (LA249_4==AT_SIGN) ) {
							alt249=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 249, 4, input);
								dbg.recognitionException(nvae);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case NOT:
						{
						alt249=4;
						}
						break;
					case GEN:
						{
						alt249=5;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 249, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(249);}

					switch (alt249) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:833:14: {...}? sass_selector_interpolation_exp
							{
							dbg.location(833,14);
							if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "cssClass", "isScssSource()");
							}dbg.location(833,33);
							pushFollow(FOLLOW_sass_selector_interpolation_exp_in_cssClass4895);
							sass_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:834:15: {...}? less_selector_interpolation_exp
							{
							dbg.location(834,15);
							if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "cssClass", "isLessSource()");
							}dbg.location(834,33);
							pushFollow(FOLLOW_less_selector_interpolation_exp_in_cssClass4913);
							less_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:835:15: IDENT
							{
							dbg.location(835,15);
							match(input,IDENT,FOLLOW_IDENT_in_cssClass4929); if (state.failed) return;
							}
							break;
						case 4 :
							dbg.enterAlt(4);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:836:15: NOT
							{
							dbg.location(836,15);
							match(input,NOT,FOLLOW_NOT_in_cssClass4945); if (state.failed) return;
							}
							break;
						case 5 :
							dbg.enterAlt(5);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:837:15: GEN
							{
							dbg.location(837,15);
							match(input,GEN,FOLLOW_GEN_in_cssClass4961); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(249);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:839:11: {...}? DIMENSION
					{
					dbg.location(839,11);
					if ( !(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cssClass", "tokenNameStartsWith(\".\")");
					}dbg.location(839,39);
					match(input,DIMENSION,FOLLOW_DIMENSION_in_cssClass4985); if (state.failed) return;
					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(WS, IDENT, LBRACE));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(840, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cssClass");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cssClass"



	// $ANTLR start "elementName"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:847:1: elementName : ( IDENT | GEN | LESS_AND | STAR );
	public final void elementName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "elementName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(847, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:848:5: ( IDENT | GEN | LESS_AND | STAR )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(848,5);
			if ( input.LA(1)==GEN||input.LA(1)==IDENT||input.LA(1)==LESS_AND||input.LA(1)==STAR ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(849, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "elementName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "elementName"



	// $ANTLR start "slAttribute"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:851:1: slAttribute : LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET ;
	public final void slAttribute() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "slAttribute");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(851, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:852:5: ( LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:852:7: LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET
			{
			dbg.location(852,7);
			match(input,LBRACKET,FOLLOW_LBRACKET_in_slAttribute5041); if (state.failed) return;dbg.location(853,6);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:853:6: ( namespacePrefix )?
			int alt251=2;
			try { dbg.enterSubRule(251);
			try { dbg.enterDecision(251, decisionCanBacktrack[251]);

			int LA251_0 = input.LA(1);
			if ( (LA251_0==IDENT) ) {
				int LA251_1 = input.LA(2);
				if ( (LA251_1==PIPE) ) {
					alt251=1;
				}
			}
			else if ( (LA251_0==PIPE||LA251_0==STAR) ) {
				alt251=1;
			}
			} finally {dbg.exitDecision(251);}

			switch (alt251) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:853:6: namespacePrefix
					{
					dbg.location(853,6);
					pushFollow(FOLLOW_namespacePrefix_in_slAttribute5048);
					namespacePrefix();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(251);}
			dbg.location(853,23);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:853:23: ( ws )?
			int alt252=2;
			try { dbg.enterSubRule(252);
			try { dbg.enterDecision(252, decisionCanBacktrack[252]);

			int LA252_0 = input.LA(1);
			if ( (LA252_0==COMMENT||LA252_0==NL||LA252_0==WS) ) {
				alt252=1;
			}
			} finally {dbg.exitDecision(252);}

			switch (alt252) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:853:23: ws
					{
					dbg.location(853,23);
					pushFollow(FOLLOW_ws_in_slAttribute5051);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(252);}
			dbg.location(854,9);
			pushFollow(FOLLOW_slAttributeName_in_slAttribute5062);
			slAttributeName();
			state._fsp--;
			if (state.failed) return;dbg.location(854,25);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:854:25: ( ws )?
			int alt253=2;
			try { dbg.enterSubRule(253);
			try { dbg.enterDecision(253, decisionCanBacktrack[253]);

			int LA253_0 = input.LA(1);
			if ( (LA253_0==COMMENT||LA253_0==NL||LA253_0==WS) ) {
				alt253=1;
			}
			} finally {dbg.exitDecision(253);}

			switch (alt253) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:854:25: ws
					{
					dbg.location(854,25);
					pushFollow(FOLLOW_ws_in_slAttribute5064);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(253);}
			dbg.location(856,13);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:856:13: ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )?
			int alt256=2;
			try { dbg.enterSubRule(256);
			try { dbg.enterDecision(256, decisionCanBacktrack[256]);

			int LA256_0 = input.LA(1);
			if ( (LA256_0==BEGINS||LA256_0==CONTAINS||LA256_0==DASHMATCH||LA256_0==ENDS||LA256_0==INCLUDES||LA256_0==OPEQ) ) {
				alt256=1;
			}
			} finally {dbg.exitDecision(256);}

			switch (alt256) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:857:17: ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )?
					{
					dbg.location(857,17);
					if ( input.LA(1)==BEGINS||input.LA(1)==CONTAINS||input.LA(1)==DASHMATCH||input.LA(1)==ENDS||input.LA(1)==INCLUDES||input.LA(1)==OPEQ ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(865,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:17: ( ws )?
					int alt254=2;
					try { dbg.enterSubRule(254);
					try { dbg.enterDecision(254, decisionCanBacktrack[254]);

					int LA254_0 = input.LA(1);
					if ( (LA254_0==COMMENT||LA254_0==NL||LA254_0==WS) ) {
						alt254=1;
					}
					} finally {dbg.exitDecision(254);}

					switch (alt254) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:17: ws
							{
							dbg.location(865,17);
							pushFollow(FOLLOW_ws_in_slAttribute5278);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(254);}
					dbg.location(866,17);
					pushFollow(FOLLOW_slAttributeValue_in_slAttribute5297);
					slAttributeValue();
					state._fsp--;
					if (state.failed) return;dbg.location(867,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:867:17: ( ws )?
					int alt255=2;
					try { dbg.enterSubRule(255);
					try { dbg.enterDecision(255, decisionCanBacktrack[255]);

					int LA255_0 = input.LA(1);
					if ( (LA255_0==COMMENT||LA255_0==NL||LA255_0==WS) ) {
						alt255=1;
					}
					} finally {dbg.exitDecision(255);}

					switch (alt255) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:867:17: ws
							{
							dbg.location(867,17);
							pushFollow(FOLLOW_ws_in_slAttribute5315);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(255);}

					}
					break;

			}
			} finally {dbg.exitSubRule(256);}
			dbg.location(870,7);
			match(input,RBRACKET,FOLLOW_RBRACKET_in_slAttribute5340); if (state.failed) return;
			}

		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(IDENT, LBRACE));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(871, 0);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "slAttribute");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "slAttribute"



	// $ANTLR start "slAttributeName"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:878:1: slAttributeName : IDENT ;
	public final void slAttributeName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "slAttributeName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(878, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:879:2: ( IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:879:4: IDENT
			{
			dbg.location(879,4);
			match(input,IDENT,FOLLOW_IDENT_in_slAttributeName5356); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(880, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "slAttributeName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "slAttributeName"



	// $ANTLR start "slAttributeValue"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:882:1: slAttributeValue : ( IDENT | STRING ) ;
	public final void slAttributeValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "slAttributeValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(882, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:883:2: ( ( IDENT | STRING ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(883,2);
			if ( input.LA(1)==IDENT||input.LA(1)==STRING ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(888, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "slAttributeValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "slAttributeValue"



	// $ANTLR start "pseudo"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:890:1: pseudo : ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) |{...}? sass_interpolation_expression_var | ( NOT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) |{...}? ( IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) | ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN ) ) ;
	public final void pseudo() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "pseudo");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(890, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:891:5: ( ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) |{...}? sass_interpolation_expression_var | ( NOT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) |{...}? ( IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) | ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN ) ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:891:7: ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) |{...}? sass_interpolation_expression_var | ( NOT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) |{...}? ( IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) | ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN ) )
			{
			dbg.location(891,7);
			if ( input.LA(1)==COLON||input.LA(1)==DCOLON ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}dbg.location(892,14);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:892:14: ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) |{...}? sass_interpolation_expression_var | ( NOT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) |{...}? ( IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) | ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN ) )
			int alt273=5;
			try { dbg.enterSubRule(273);
			try { dbg.enterDecision(273, decisionCanBacktrack[273]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA273_1 = input.LA(2);
				if ( (!(evalPredicate(((evalPredicate(tokenNameEquals("extend"),"tokenNameEquals(\"extend\")")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(tokenNameEquals("is") || tokenNameEquals("where") || tokenNameEquals("has"),"tokenNameEquals(\"is\") || tokenNameEquals(\"where\") || tokenNameEquals(\"has\")")),""))) ) {
					alt273=1;
				}
				else if ( (evalPredicate(tokenNameEquals("is") || tokenNameEquals("where") || tokenNameEquals("has"),"tokenNameEquals(\"is\") || tokenNameEquals(\"where\") || tokenNameEquals(\"has\")")) ) {
					alt273=4;
				}
				else if ( ((evalPredicate(tokenNameEquals("extend"),"tokenNameEquals(\"extend\")")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt273=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 273, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYMBOL:
				{
				alt273=2;
				}
				break;
			case NOT:
				{
				alt273=3;
				}
				break;
			case GEN:
				{
				alt273=1;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 273, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(273);}

			switch (alt273) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:893:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
					{
					dbg.location(893,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:893:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:21: ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
					{
					dbg.location(894,21);
					if ( input.LA(1)==GEN||input.LA(1)==IDENT ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(895,21);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:895:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
					int alt261=2;
					try { dbg.enterSubRule(261);
					try { dbg.enterDecision(261, decisionCanBacktrack[261]);

					try {
						isCyclicDecision = true;
						alt261 = dfa261.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(261);}

					switch (alt261) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:25: ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN
							{
							dbg.location(896,25);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:25: ( ws )?
							int alt257=2;
							try { dbg.enterSubRule(257);
							try { dbg.enterDecision(257, decisionCanBacktrack[257]);

							int LA257_0 = input.LA(1);
							if ( (LA257_0==COMMENT||LA257_0==NL||LA257_0==WS) ) {
								alt257=1;
							}
							} finally {dbg.exitDecision(257);}

							switch (alt257) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:25: ws
									{
									dbg.location(896,25);
									pushFollow(FOLLOW_ws_in_pseudo5548);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(257);}
							dbg.location(896,29);
							match(input,LPAREN,FOLLOW_LPAREN_in_pseudo5551); if (state.failed) return;dbg.location(896,36);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:36: ( ws )?
							int alt258=2;
							try { dbg.enterSubRule(258);
							try { dbg.enterDecision(258, decisionCanBacktrack[258]);

							int LA258_0 = input.LA(1);
							if ( (LA258_0==COMMENT||LA258_0==NL||LA258_0==WS) ) {
								alt258=1;
							}
							} finally {dbg.exitDecision(258);}

							switch (alt258) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:36: ws
									{
									dbg.location(896,36);
									pushFollow(FOLLOW_ws_in_pseudo5553);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(258);}
							dbg.location(896,40);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:40: ( ( expression ( ws )? ) | STAR )?
							int alt260=3;
							try { dbg.enterSubRule(260);
							try { dbg.enterDecision(260, decisionCanBacktrack[260]);

							int LA260_0 = input.LA(1);
							if ( ((LA260_0 >= ANGLE && LA260_0 <= AT_SIGN)||(LA260_0 >= BOTTOMCENTER_SYM && LA260_0 <= BOTTOMRIGHT_SYM)||LA260_0==CHARSET_SYM||LA260_0==COUNTER_STYLE_SYM||LA260_0==DIMENSION||LA260_0==EMS||LA260_0==EXS||(LA260_0 >= FONT_FACE_SYM && LA260_0 <= FREQ)||LA260_0==GEN||(LA260_0 >= HASH && LA260_0 <= HASH_SYMBOL)||LA260_0==IDENT||LA260_0==IMPORT_SYM||(LA260_0 >= LBRACKET && LA260_0 <= LENGTH)||(LA260_0 >= LESS_AND && LA260_0 <= LESS_JS_STRING)||(LA260_0 >= MEDIA_SYM && LA260_0 <= MOZ_DOCUMENT_SYM)||LA260_0==NAMESPACE_SYM||LA260_0==NUMBER||(LA260_0 >= PAGE_SYM && LA260_0 <= PERCENTAGE_SYMBOL)||LA260_0==PLUS||(LA260_0 >= REM && LA260_0 <= RIGHTTOP_SYM)||(LA260_0 >= SASS_AT_ROOT && LA260_0 <= SASS_DEBUG)||(LA260_0 >= SASS_EACH && LA260_0 <= SASS_ELSE)||LA260_0==SASS_EXTEND||(LA260_0 >= SASS_FOR && LA260_0 <= SASS_FUNCTION)||(LA260_0 >= SASS_IF && LA260_0 <= SASS_MIXIN)||(LA260_0 >= SASS_RETURN && LA260_0 <= SASS_WHILE)||LA260_0==STRING||(LA260_0 >= TILDE && LA260_0 <= TOPRIGHT_SYM)||(LA260_0 >= URANGE && LA260_0 <= URI)||LA260_0==VARIABLE||LA260_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt260=1;
							}
							else if ( (LA260_0==STAR) ) {
								alt260=2;
							}
							} finally {dbg.exitDecision(260);}

							switch (alt260) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:42: ( expression ( ws )? )
									{
									dbg.location(896,42);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:42: ( expression ( ws )? )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:43: expression ( ws )?
									{
									dbg.location(896,43);
									pushFollow(FOLLOW_expression_in_pseudo5559);
									expression();
									state._fsp--;
									if (state.failed) return;dbg.location(896,54);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:54: ( ws )?
									int alt259=2;
									try { dbg.enterSubRule(259);
									try { dbg.enterDecision(259, decisionCanBacktrack[259]);

									int LA259_0 = input.LA(1);
									if ( (LA259_0==COMMENT||LA259_0==NL||LA259_0==WS) ) {
										alt259=1;
									}
									} finally {dbg.exitDecision(259);}

									switch (alt259) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:54: ws
											{
											dbg.location(896,54);
											pushFollow(FOLLOW_ws_in_pseudo5561);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(259);}

									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:61: STAR
									{
									dbg.location(896,61);
									match(input,STAR,FOLLOW_STAR_in_pseudo5567); if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(260);}
							dbg.location(896,69);
							match(input,RPAREN,FOLLOW_RPAREN_in_pseudo5572); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(261);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:899:19: {...}? sass_interpolation_expression_var
					{
					dbg.location(899,19);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "pseudo", "isScssSource()");
					}dbg.location(899,37);
					pushFollow(FOLLOW_sass_interpolation_expression_var_in_pseudo5635);
					sass_interpolation_expression_var();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:19: ( NOT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN )
					{
					dbg.location(900,19);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:19: ( NOT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:21: NOT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN
					{
					dbg.location(900,21);
					match(input,NOT,FOLLOW_NOT_in_pseudo5657); if (state.failed) return;dbg.location(900,25);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:25: ( ws )?
					int alt262=2;
					try { dbg.enterSubRule(262);
					try { dbg.enterDecision(262, decisionCanBacktrack[262]);

					int LA262_0 = input.LA(1);
					if ( (LA262_0==COMMENT||LA262_0==NL||LA262_0==WS) ) {
						alt262=1;
					}
					} finally {dbg.exitDecision(262);}

					switch (alt262) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:25: ws
							{
							dbg.location(900,25);
							pushFollow(FOLLOW_ws_in_pseudo5659);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(262);}
					dbg.location(900,29);
					match(input,LPAREN,FOLLOW_LPAREN_in_pseudo5662); if (state.failed) return;dbg.location(900,36);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:36: ( ws )?
					int alt263=2;
					try { dbg.enterSubRule(263);
					try { dbg.enterDecision(263, decisionCanBacktrack[263]);

					int LA263_0 = input.LA(1);
					if ( (LA263_0==COMMENT||LA263_0==NL||LA263_0==WS) ) {
						alt263=1;
					}
					} finally {dbg.exitDecision(263);}

					switch (alt263) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:36: ws
							{
							dbg.location(900,36);
							pushFollow(FOLLOW_ws_in_pseudo5664);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(263);}
					dbg.location(900,40);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:40: ( selectorsGroup ( ws )? )?
					int alt265=2;
					try { dbg.enterSubRule(265);
					try { dbg.enterDecision(265, decisionCanBacktrack[265]);

					int LA265_0 = input.LA(1);
					if ( (LA265_0==AT_SIGN||LA265_0==COLON||(LA265_0 >= DCOLON && LA265_0 <= DOT)||(LA265_0 >= GEN && LA265_0 <= GREATER)||(LA265_0 >= HASH && LA265_0 <= HASH_SYMBOL)||LA265_0==IDENT||LA265_0==LBRACKET||LA265_0==LESS_AND||LA265_0==MINUS||(LA265_0 >= PIPE && LA265_0 <= PLUS)||LA265_0==SASS_EXTEND_ONLY_SELECTOR||LA265_0==STAR||LA265_0==TILDE) ) {
						alt265=1;
					}
					} finally {dbg.exitDecision(265);}

					switch (alt265) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:42: selectorsGroup ( ws )?
							{
							dbg.location(900,42);
							pushFollow(FOLLOW_selectorsGroup_in_pseudo5669);
							selectorsGroup();
							state._fsp--;
							if (state.failed) return;dbg.location(900,57);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:57: ( ws )?
							int alt264=2;
							try { dbg.enterSubRule(264);
							try { dbg.enterDecision(264, decisionCanBacktrack[264]);

							int LA264_0 = input.LA(1);
							if ( (LA264_0==COMMENT||LA264_0==NL||LA264_0==WS) ) {
								alt264=1;
							}
							} finally {dbg.exitDecision(264);}

							switch (alt264) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:57: ws
									{
									dbg.location(900,57);
									pushFollow(FOLLOW_ws_in_pseudo5671);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(264);}

							}
							break;

					}
					} finally {dbg.exitSubRule(265);}
					dbg.location(900,63);
					match(input,RPAREN,FOLLOW_RPAREN_in_pseudo5676); if (state.failed) return;
					}

					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:19: {...}? ( IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN )
					{
					dbg.location(901,19);
					if ( !(evalPredicate(tokenNameEquals("is") || tokenNameEquals("where") || tokenNameEquals("has"),"tokenNameEquals(\"is\") || tokenNameEquals(\"where\") || tokenNameEquals(\"has\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "pseudo", "tokenNameEquals(\"is\") || tokenNameEquals(\"where\") || tokenNameEquals(\"has\")");
					}dbg.location(901,98);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:98: ( IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:100: IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN
					{
					dbg.location(901,100);
					match(input,IDENT,FOLLOW_IDENT_in_pseudo5702); if (state.failed) return;dbg.location(901,106);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:106: ( ws )?
					int alt266=2;
					try { dbg.enterSubRule(266);
					try { dbg.enterDecision(266, decisionCanBacktrack[266]);

					int LA266_0 = input.LA(1);
					if ( (LA266_0==COMMENT||LA266_0==NL||LA266_0==WS) ) {
						alt266=1;
					}
					} finally {dbg.exitDecision(266);}

					switch (alt266) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:106: ws
							{
							dbg.location(901,106);
							pushFollow(FOLLOW_ws_in_pseudo5704);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(266);}
					dbg.location(901,110);
					match(input,LPAREN,FOLLOW_LPAREN_in_pseudo5707); if (state.failed) return;dbg.location(901,117);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:117: ( ws )?
					int alt267=2;
					try { dbg.enterSubRule(267);
					try { dbg.enterDecision(267, decisionCanBacktrack[267]);

					int LA267_0 = input.LA(1);
					if ( (LA267_0==COMMENT||LA267_0==NL||LA267_0==WS) ) {
						alt267=1;
					}
					} finally {dbg.exitDecision(267);}

					switch (alt267) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:117: ws
							{
							dbg.location(901,117);
							pushFollow(FOLLOW_ws_in_pseudo5709);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(267);}
					dbg.location(901,121);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:121: ( selectorsGroup ( ws )? )?
					int alt269=2;
					try { dbg.enterSubRule(269);
					try { dbg.enterDecision(269, decisionCanBacktrack[269]);

					int LA269_0 = input.LA(1);
					if ( (LA269_0==AT_SIGN||LA269_0==COLON||(LA269_0 >= DCOLON && LA269_0 <= DOT)||(LA269_0 >= GEN && LA269_0 <= GREATER)||(LA269_0 >= HASH && LA269_0 <= HASH_SYMBOL)||LA269_0==IDENT||LA269_0==LBRACKET||LA269_0==LESS_AND||LA269_0==MINUS||(LA269_0 >= PIPE && LA269_0 <= PLUS)||LA269_0==SASS_EXTEND_ONLY_SELECTOR||LA269_0==STAR||LA269_0==TILDE) ) {
						alt269=1;
					}
					} finally {dbg.exitDecision(269);}

					switch (alt269) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:123: selectorsGroup ( ws )?
							{
							dbg.location(901,123);
							pushFollow(FOLLOW_selectorsGroup_in_pseudo5714);
							selectorsGroup();
							state._fsp--;
							if (state.failed) return;dbg.location(901,138);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:138: ( ws )?
							int alt268=2;
							try { dbg.enterSubRule(268);
							try { dbg.enterDecision(268, decisionCanBacktrack[268]);

							int LA268_0 = input.LA(1);
							if ( (LA268_0==COMMENT||LA268_0==NL||LA268_0==WS) ) {
								alt268=1;
							}
							} finally {dbg.exitDecision(268);}

							switch (alt268) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:138: ws
									{
									dbg.location(901,138);
									pushFollow(FOLLOW_ws_in_pseudo5716);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(268);}

							}
							break;

					}
					} finally {dbg.exitSubRule(269);}
					dbg.location(901,144);
					match(input,RPAREN,FOLLOW_RPAREN_in_pseudo5721); if (state.failed) return;
					}

					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:902:19: ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN )
					{
					dbg.location(902,19);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:902:19: ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:902:20: {...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN
					{
					dbg.location(902,20);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "pseudo", "isLessSource()");
					}dbg.location(902,38);
					if ( !(evalPredicate(tokenNameEquals("extend"),"tokenNameEquals(\"extend\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "pseudo", "tokenNameEquals(\"extend\")");
					}dbg.location(902,67);
					match(input,IDENT,FOLLOW_IDENT_in_pseudo5748); if (state.failed) return;dbg.location(902,73);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:902:73: ( ws )?
					int alt270=2;
					try { dbg.enterSubRule(270);
					try { dbg.enterDecision(270, decisionCanBacktrack[270]);

					int LA270_0 = input.LA(1);
					if ( (LA270_0==COMMENT||LA270_0==NL||LA270_0==WS) ) {
						alt270=1;
					}
					} finally {dbg.exitDecision(270);}

					switch (alt270) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:902:73: ws
							{
							dbg.location(902,73);
							pushFollow(FOLLOW_ws_in_pseudo5750);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(270);}
					dbg.location(902,77);
					match(input,LPAREN,FOLLOW_LPAREN_in_pseudo5753); if (state.failed) return;dbg.location(902,84);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:902:84: ( ws )?
					int alt271=2;
					try { dbg.enterSubRule(271);
					try { dbg.enterDecision(271, decisionCanBacktrack[271]);

					int LA271_0 = input.LA(1);
					if ( (LA271_0==COMMENT||LA271_0==NL||LA271_0==WS) ) {
						alt271=1;
					}
					} finally {dbg.exitDecision(271);}

					switch (alt271) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:902:84: ws
							{
							dbg.location(902,84);
							pushFollow(FOLLOW_ws_in_pseudo5755);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(271);}
					dbg.location(902,88);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:902:88: ( selectorsGroup )?
					int alt272=2;
					try { dbg.enterSubRule(272);
					try { dbg.enterDecision(272, decisionCanBacktrack[272]);

					int LA272_0 = input.LA(1);
					if ( (LA272_0==AT_SIGN||LA272_0==COLON||(LA272_0 >= DCOLON && LA272_0 <= DOT)||(LA272_0 >= GEN && LA272_0 <= GREATER)||(LA272_0 >= HASH && LA272_0 <= HASH_SYMBOL)||LA272_0==IDENT||LA272_0==LBRACKET||LA272_0==LESS_AND||LA272_0==MINUS||(LA272_0 >= PIPE && LA272_0 <= PLUS)||LA272_0==SASS_EXTEND_ONLY_SELECTOR||LA272_0==STAR||LA272_0==TILDE) ) {
						alt272=1;
					}
					} finally {dbg.exitDecision(272);}

					switch (alt272) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:902:88: selectorsGroup
							{
							dbg.location(902,88);
							pushFollow(FOLLOW_selectorsGroup_in_pseudo5758);
							selectorsGroup();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(272);}
					dbg.location(902,104);
					match(input,RPAREN,FOLLOW_RPAREN_in_pseudo5761); if (state.failed) return;
					}

					}
					break;

			}
			} finally {dbg.exitSubRule(273);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(904, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "pseudo");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "pseudo"



	// $ANTLR start "propertyDeclaration"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:906:1: propertyDeclaration : ({...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue |{...}? property ( ws )? COLON ( ws )? ( componentValueOuter )? | ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? );
	public final void propertyDeclaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "propertyDeclaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(906, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:907:5: ({...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue |{...}? property ( ws )? COLON ( ws )? ( componentValueOuter )? | ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? )
			int alt285=3;
			try { dbg.enterDecision(285, decisionCanBacktrack[285]);

			switch ( input.LA(1) ) {
			case STAR:
				{
				int LA285_1 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")) ) {
					alt285=1;
				}
				else if ( (true) ) {
					alt285=3;
				}

				}
				break;
			case IDENT:
				{
				int LA285_2 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")) ) {
					alt285=1;
				}
				else if ( (evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")) ) {
					alt285=2;
				}
				else if ( (true) ) {
					alt285=3;
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA285_3 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt285=1;
				}
				else if ( ((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt285=2;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt285=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 285, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
				{
				int LA285_4 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt285=1;
				}
				else if ( ((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt285=2;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt285=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 285, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case VARIABLE:
				{
				int LA285_5 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")) ) {
					alt285=1;
				}
				else if ( (evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")) ) {
					alt285=2;
				}
				else if ( (true) ) {
					alt285=3;
				}

				}
				break;
			case MINUS:
				{
				int LA285_6 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))) ) {
					alt285=1;
				}
				else if ( ((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))) ) {
					alt285=2;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt285=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 285, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GEN:
				{
				int LA285_7 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")) ) {
					alt285=1;
				}
				else if ( (evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")) ) {
					alt285=2;
				}
				else if ( (true) ) {
					alt285=3;
				}

				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA285_8 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt285=1;
				}
				else if ( (((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt285=2;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt285=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 285, 8, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA285_9 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt285=1;
				}
				else if ( (((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt285=2;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt285=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 285, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 285, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(285);}

			switch (alt285) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:908:7: {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue
					{
					dbg.location(908,7);
					if ( !(evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "propertyDeclaration", "isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")");
					}dbg.location(908,66);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:908:66: ( STAR )?
					int alt274=2;
					try { dbg.enterSubRule(274);
					try { dbg.enterDecision(274, decisionCanBacktrack[274]);

					int LA274_0 = input.LA(1);
					if ( (LA274_0==STAR) ) {
						alt274=1;
					}
					} finally {dbg.exitDecision(274);}

					switch (alt274) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:908:66: STAR
							{
							dbg.location(908,66);
							match(input,STAR,FOLLOW_STAR_in_propertyDeclaration5803); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(274);}
					dbg.location(908,72);
					pushFollow(FOLLOW_property_in_propertyDeclaration5806);
					property();
					state._fsp--;
					if (state.failed) return;dbg.location(908,81);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:908:81: ( ws )?
					int alt275=2;
					try { dbg.enterSubRule(275);
					try { dbg.enterDecision(275, decisionCanBacktrack[275]);

					int LA275_0 = input.LA(1);
					if ( (LA275_0==COMMENT||LA275_0==NL||LA275_0==WS) ) {
						alt275=1;
					}
					} finally {dbg.exitDecision(275);}

					switch (alt275) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:908:81: ws
							{
							dbg.location(908,81);
							pushFollow(FOLLOW_ws_in_propertyDeclaration5808);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(275);}
					dbg.location(908,85);
					match(input,COLON,FOLLOW_COLON_in_propertyDeclaration5811); if (state.failed) return;dbg.location(908,91);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:908:91: ( ws )?
					int alt276=2;
					try { dbg.enterSubRule(276);
					try { dbg.enterDecision(276, decisionCanBacktrack[276]);

					int LA276_0 = input.LA(1);
					if ( (LA276_0==COMMENT||LA276_0==NL||LA276_0==WS) ) {
						alt276=1;
					}
					} finally {dbg.exitDecision(276);}

					switch (alt276) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:908:91: ws
							{
							dbg.location(908,91);
							pushFollow(FOLLOW_ws_in_propertyDeclaration5813);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(276);}
					dbg.location(908,95);
					pushFollow(FOLLOW_cp_propertyValue_in_propertyDeclaration5816);
					cp_propertyValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:7: {...}? property ( ws )? COLON ( ws )? ( componentValueOuter )?
					{
					dbg.location(909,7);
					if ( !(evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "propertyDeclaration", "tokenNameStartsWith(\"--\")");
					}dbg.location(909,36);
					pushFollow(FOLLOW_property_in_propertyDeclaration5827);
					property();
					state._fsp--;
					if (state.failed) return;dbg.location(909,45);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:45: ( ws )?
					int alt277=2;
					try { dbg.enterSubRule(277);
					try { dbg.enterDecision(277, decisionCanBacktrack[277]);

					int LA277_0 = input.LA(1);
					if ( (LA277_0==COMMENT||LA277_0==NL||LA277_0==WS) ) {
						alt277=1;
					}
					} finally {dbg.exitDecision(277);}

					switch (alt277) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:45: ws
							{
							dbg.location(909,45);
							pushFollow(FOLLOW_ws_in_propertyDeclaration5829);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(277);}
					dbg.location(909,49);
					match(input,COLON,FOLLOW_COLON_in_propertyDeclaration5832); if (state.failed) return;dbg.location(909,55);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:55: ( ws )?
					int alt278=2;
					try { dbg.enterSubRule(278);
					try { dbg.enterDecision(278, decisionCanBacktrack[278]);

					int LA278_0 = input.LA(1);
					if ( (LA278_0==COMMENT||LA278_0==NL||LA278_0==WS) ) {
						alt278=1;
					}
					} finally {dbg.exitDecision(278);}

					switch (alt278) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:55: ws
							{
							dbg.location(909,55);
							pushFollow(FOLLOW_ws_in_propertyDeclaration5834);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(278);}
					dbg.location(909,59);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:59: ( componentValueOuter )?
					int alt279=2;
					try { dbg.enterSubRule(279);
					try { dbg.enterDecision(279, decisionCanBacktrack[279]);

					switch ( input.LA(1) ) {
						case LBRACE:
						case LPAREN:
							{
							alt279=1;
							}
							break;
						case LBRACKET:
							{
							alt279=1;
							}
							break;
						case IDENT:
							{
							alt279=1;
							}
							break;
						case COMMENT:
						case NL:
						case WS:
							{
							alt279=1;
							}
							break;
						case LESS_AND:
							{
							alt279=1;
							}
							break;
						case DOT:
							{
							alt279=1;
							}
							break;
						case HASH:
							{
							alt279=1;
							}
							break;
						case SASS_MIXIN:
							{
							alt279=1;
							}
							break;
						case AT_IDENT:
							{
							alt279=1;
							}
							break;
						case SASS_INCLUDE:
							{
							alt279=1;
							}
							break;
						case SASS_AT_ROOT:
							{
							alt279=1;
							}
							break;
						case GREATER:
						case PLUS:
						case TILDE:
							{
							alt279=1;
							}
							break;
						case SASS_EXTEND_ONLY_SELECTOR:
							{
							int LA279_16 = input.LA(2);
							if ( (!(evalPredicate(evalPredicate(isScssSource(),"isScssSource()"),""))) ) {
								alt279=1;
							}
							}
							break;
						case HASH_SYMBOL:
							{
							alt279=1;
							}
							break;
						case DIMENSION:
							{
							int LA279_18 = input.LA(2);
							if ( (!(evalPredicate(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"),""))) ) {
								alt279=1;
							}
							}
							break;
						case COLON:
						case DCOLON:
							{
							alt279=1;
							}
							break;
						case MINUS:
							{
							alt279=1;
							}
							break;
						case AT_SIGN:
							{
							alt279=1;
							}
							break;
						case STAR:
							{
							alt279=1;
							}
							break;
						case PIPE:
							{
							alt279=1;
							}
							break;
						case GEN:
							{
							alt279=1;
							}
							break;
						case VARIABLE:
							{
							alt279=1;
							}
							break;
						case SASS_DEBUG:
						case SASS_WARN:
							{
							alt279=1;
							}
							break;
						case SASS_VAR:
							{
							alt279=1;
							}
							break;
						case SUPPORTS_SYM:
							{
							alt279=1;
							}
							break;
						case SASS_IF:
							{
							alt279=1;
							}
							break;
						case SASS_FOR:
							{
							alt279=1;
							}
							break;
						case SASS_EACH:
							{
							alt279=1;
							}
							break;
						case SASS_WHILE:
							{
							alt279=1;
							}
							break;
						case A:
						case ANGLE:
						case B:
						case BEGINS:
						case C:
						case CDC:
						case CDO:
						case COMMA:
						case CONTAINS:
						case CP_DOTS:
						case CP_EQ:
						case CP_NOT_EQ:
						case D:
						case DASHMATCH:
						case E:
						case EMS:
						case ENDS:
						case ESCAPE:
						case EXCLAMATION_MARK:
						case EXS:
						case F:
						case FREQ:
						case G:
						case GREATER_OR_EQ:
						case H:
						case HEXCHAR:
						case HEXCHAR_WILDCARD:
						case I:
						case IMPORTANT_SYM:
						case INCLUDES:
						case INVALID:
						case J:
						case K:
						case L:
						case LENGTH:
						case LESS:
						case LESS_JS_STRING:
						case LESS_OR_EQ:
						case LESS_REST:
						case LINE_COMMENT:
						case M:
						case MOZ_DOMAIN:
						case MOZ_REGEXP:
						case MOZ_URL_PREFIX:
						case N:
						case NAME:
						case NMCHAR:
						case NMSTART:
						case NONASCII:
						case NOT:
						case NUMBER:
						case O:
						case OPEQ:
						case P:
						case PERCENTAGE:
						case PERCENTAGE_SYMBOL:
						case Q:
						case R:
						case REM:
						case RESOLUTION:
						case S:
						case SASS_CONTENT:
						case SASS_DEFAULT:
						case SASS_ELSEIF:
						case SASS_ERROR:
						case SASS_GLOBAL:
						case SASS_OPTIONAL:
						case SOLIDUS:
						case STRING:
						case T:
						case TIME:
						case U:
						case UNICODE:
						case URANGE:
						case URI:
						case URL:
						case V:
						case W:
						case X:
						case Y:
						case Z:
							{
							alt279=1;
							}
							break;
						case IMPORT_SYM:
							{
							alt279=1;
							}
							break;
						case PAGE_SYM:
							{
							alt279=1;
							}
							break;
						case FONT_FACE_SYM:
							{
							alt279=1;
							}
							break;
						case MOZ_DOCUMENT_SYM:
							{
							alt279=1;
							}
							break;
						case WEBKIT_KEYFRAMES_SYM:
							{
							alt279=1;
							}
							break;
						case MEDIA_SYM:
							{
							alt279=1;
							}
							break;
						case SASS_EXTEND:
							{
							alt279=1;
							}
							break;
						case BOTTOMCENTER_SYM:
						case BOTTOMLEFTCORNER_SYM:
						case BOTTOMLEFT_SYM:
						case BOTTOMRIGHTCORNER_SYM:
						case BOTTOMRIGHT_SYM:
						case LEFTBOTTOM_SYM:
						case LEFTMIDDLE_SYM:
						case LEFTTOP_SYM:
						case RIGHTBOTTOM_SYM:
						case RIGHTMIDDLE_SYM:
						case RIGHTTOP_SYM:
						case TOPCENTER_SYM:
						case TOPLEFTCORNER_SYM:
						case TOPLEFT_SYM:
						case TOPRIGHTCORNER_SYM:
						case TOPRIGHT_SYM:
							{
							alt279=1;
							}
							break;
						case CHARSET_SYM:
						case COUNTER_STYLE_SYM:
						case NAMESPACE_SYM:
						case SASS_ELSE:
						case SASS_FORWARD:
						case SASS_FUNCTION:
						case SASS_RETURN:
						case SASS_USE:
							{
							alt279=1;
							}
							break;
					}
					} finally {dbg.exitDecision(279);}

					switch (alt279) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:59: componentValueOuter
							{
							dbg.location(909,59);
							pushFollow(FOLLOW_componentValueOuter_in_propertyDeclaration5837);
							componentValueOuter();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(279);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:910:7: ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )?
					{
					dbg.location(910,7);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:910:7: ( STAR )?
					int alt280=2;
					try { dbg.enterSubRule(280);
					try { dbg.enterDecision(280, decisionCanBacktrack[280]);

					int LA280_0 = input.LA(1);
					if ( (LA280_0==STAR) ) {
						alt280=1;
					}
					} finally {dbg.exitDecision(280);}

					switch (alt280) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:910:7: STAR
							{
							dbg.location(910,7);
							match(input,STAR,FOLLOW_STAR_in_propertyDeclaration5846); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(280);}
					dbg.location(910,13);
					pushFollow(FOLLOW_property_in_propertyDeclaration5849);
					property();
					state._fsp--;
					if (state.failed) return;dbg.location(910,22);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:910:22: ( ws )?
					int alt281=2;
					try { dbg.enterSubRule(281);
					try { dbg.enterDecision(281, decisionCanBacktrack[281]);

					int LA281_0 = input.LA(1);
					if ( (LA281_0==COMMENT||LA281_0==NL||LA281_0==WS) ) {
						alt281=1;
					}
					} finally {dbg.exitDecision(281);}

					switch (alt281) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:910:22: ws
							{
							dbg.location(910,22);
							pushFollow(FOLLOW_ws_in_propertyDeclaration5851);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(281);}
					dbg.location(910,26);
					match(input,COLON,FOLLOW_COLON_in_propertyDeclaration5854); if (state.failed) return;dbg.location(910,32);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:910:32: ( ws )?
					int alt282=2;
					try { dbg.enterSubRule(282);
					try { dbg.enterDecision(282, decisionCanBacktrack[282]);

					int LA282_0 = input.LA(1);
					if ( (LA282_0==COMMENT||LA282_0==NL||LA282_0==WS) ) {
						alt282=1;
					}
					} finally {dbg.exitDecision(282);}

					switch (alt282) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:910:32: ws
							{
							dbg.location(910,32);
							pushFollow(FOLLOW_ws_in_propertyDeclaration5856);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(282);}
					dbg.location(910,36);
					pushFollow(FOLLOW_propertyValue_in_propertyDeclaration5859);
					propertyValue();
					state._fsp--;
					if (state.failed) return;dbg.location(910,50);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:910:50: ( ( ws )? prio )?
					int alt284=2;
					try { dbg.enterSubRule(284);
					try { dbg.enterDecision(284, decisionCanBacktrack[284]);

					try {
						isCyclicDecision = true;
						alt284 = dfa284.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(284);}

					switch (alt284) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:910:51: ( ws )? prio
							{
							dbg.location(910,51);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:910:51: ( ws )?
							int alt283=2;
							try { dbg.enterSubRule(283);
							try { dbg.enterDecision(283, decisionCanBacktrack[283]);

							int LA283_0 = input.LA(1);
							if ( (LA283_0==COMMENT||LA283_0==NL||LA283_0==WS) ) {
								alt283=1;
							}
							} finally {dbg.exitDecision(283);}

							switch (alt283) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:910:51: ws
									{
									dbg.location(910,51);
									pushFollow(FOLLOW_ws_in_propertyDeclaration5862);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(283);}
							dbg.location(910,55);
							pushFollow(FOLLOW_prio_in_propertyDeclaration5865);
							prio();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(284);}

					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        //recovery: if an mismatched token occures inside a declaration is found,
			        //then skip all tokens until an end of the rule is found represented by right curly brace
			        consumeUntil(input, BitSet.of(SEMI, RBRACE));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(912, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "propertyDeclaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "propertyDeclaration"



	// $ANTLR start "cp_propertyValue"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:921:1: cp_propertyValue : ({...}? cp_expression_list | propertyValue );
	public final void cp_propertyValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_propertyValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(921, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:922:5: ({...}? cp_expression_list | propertyValue )
			int alt286=2;
			try { dbg.enterDecision(286, decisionCanBacktrack[286]);

			switch ( input.LA(1) ) {
			case IMPORTANT_SYM:
			case LBRACE:
			case LPAREN:
			case NOT:
				{
				alt286=1;
				}
				break;
			case MINUS:
			case PLUS:
				{
				int LA286_3 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case IDENT:
				{
				int LA286_4 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case VARIABLE:
				{
				int LA286_5 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case LBRACKET:
				{
				int LA286_6 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case NUMBER:
				{
				int LA286_7 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case URANGE:
				{
				int LA286_8 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case PERCENTAGE:
				{
				int LA286_9 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case LENGTH:
				{
				int LA286_10 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case EMS:
				{
				int LA286_11 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case REM:
				{
				int LA286_12 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case EXS:
				{
				int LA286_13 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case ANGLE:
				{
				int LA286_14 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case TIME:
				{
				int LA286_15 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case FREQ:
				{
				int LA286_16 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case RESOLUTION:
				{
				int LA286_17 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case DIMENSION:
				{
				int LA286_18 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case STRING:
				{
				int LA286_19 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case TILDE:
				{
				int LA286_20 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case LESS_JS_STRING:
				{
				int LA286_21 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case GEN:
				{
				int LA286_22 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case URI:
				{
				int LA286_23 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case HASH:
				{
				int LA286_24 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (true) ) {
					alt286=2;
				}

				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA286_25 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt286=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt286=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 286, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA286_26 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt286=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt286=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 286, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LESS_AND:
				{
				int LA286_27 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt286=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt286=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 286, 27, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA286_28 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt286=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt286=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 286, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
				{
				int LA286_29 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt286=1;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt286=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 286, 29, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PERCENTAGE_SYMBOL:
				{
				int LA286_30 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt286=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 286, 30, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 286, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(286);}

			switch (alt286) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:923:5: {...}? cp_expression_list
					{
					dbg.location(923,5);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_propertyValue", "isCssPreprocessorSource()");
					}dbg.location(923,34);
					pushFollow(FOLLOW_cp_expression_list_in_cp_propertyValue5905);
					cp_expression_list();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:924:7: propertyValue
					{
					dbg.location(924,7);
					pushFollow(FOLLOW_propertyValue_in_cp_propertyValue5913);
					propertyValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(925, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_propertyValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_propertyValue"



	// $ANTLR start "propertyValue"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:1: propertyValue : expression ;
	public final void propertyValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "propertyValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(927, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:2: ( expression )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:929:9: expression
			{
			dbg.location(929,9);
			pushFollow(FOLLOW_expression_in_propertyValue5935);
			expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(930, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "propertyValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "propertyValue"



	// $ANTLR start "expressionPredicate"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:933:1: expressionPredicate options {k=1; } : (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) ;
	public final void expressionPredicate() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "expressionPredicate");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(933, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:935:5: ( (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:936:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE )
			{
			dbg.location(936,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:936:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+
			int cnt287=0;
			try { dbg.enterSubRule(287);

			loop287:
			while (true) {
				int alt287=2;
				try { dbg.enterDecision(287, decisionCanBacktrack[287]);

				int LA287_0 = input.LA(1);
				if ( ((LA287_0 >= A && LA287_0 <= ANGLE)||(LA287_0 >= AT_SIGN && LA287_0 <= L)||(LA287_0 >= LBRACKET && LA287_0 <= R)||(LA287_0 >= RBRACKET && LA287_0 <= SASS_USE)||(LA287_0 >= SASS_WARN && LA287_0 <= SASS_WHILE)||(LA287_0 >= STRING && LA287_0 <= Z)) ) {
					alt287=1;
				}

				} finally {dbg.exitDecision(287);}

				switch (alt287) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
					{
					dbg.location(936,5);
					if ( (input.LA(1) >= A && input.LA(1) <= ANGLE)||(input.LA(1) >= AT_SIGN && input.LA(1) <= L)||(input.LA(1) >= LBRACKET && input.LA(1) <= R)||(input.LA(1) >= RBRACKET && input.LA(1) <= SASS_USE)||(input.LA(1) >= SASS_WARN && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= STRING && input.LA(1) <= Z) ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;

				default :
					if ( cnt287 >= 1 ) break loop287;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(287, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt287++;
			}
			} finally {dbg.exitSubRule(287);}
			dbg.location(936,76);
			if ( input.LA(1)==RBRACE||input.LA(1)==SEMI ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(937, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "expressionPredicate");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "expressionPredicate"



	// $ANTLR start "preservedToken"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:939:1: preservedToken : ~ ( LPAREN | LBRACE | LBRACKET | RPAREN | RBRACE | RBRACKET ) ;
	public final void preservedToken() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "preservedToken");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(939, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:939:15: (~ ( LPAREN | LBRACE | LBRACKET | RPAREN | RBRACE | RBRACKET ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(939,15);
			if ( (input.LA(1) >= A && input.LA(1) <= L)||(input.LA(1) >= LEFTBOTTOM_SYM && input.LA(1) <= LINE_COMMENT)||(input.LA(1) >= M && input.LA(1) <= R)||(input.LA(1) >= REM && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= S && input.LA(1) <= Z) ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(939, 75);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "preservedToken");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "preservedToken"



	// $ANTLR start "preservedTokenTopLevel"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:941:1: preservedTokenTopLevel : ~ ( LPAREN | LBRACE | LBRACKET | RPAREN | RBRACE | RBRACKET | SEMI ) ;
	public final void preservedTokenTopLevel() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "preservedTokenTopLevel");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(941, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:941:23: (~ ( LPAREN | LBRACE | LBRACKET | RPAREN | RBRACE | RBRACKET | SEMI ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(941,23);
			if ( (input.LA(1) >= A && input.LA(1) <= L)||(input.LA(1) >= LEFTBOTTOM_SYM && input.LA(1) <= LINE_COMMENT)||(input.LA(1) >= M && input.LA(1) <= R)||(input.LA(1) >= REM && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= S && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(941, 91);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "preservedTokenTopLevel");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "preservedTokenTopLevel"



	// $ANTLR start "braceBlock"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:1: braceBlock : LBRACE ( componentValue )+ RBRACE ;
	public final void braceBlock() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "braceBlock");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(943, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:11: ( LBRACE ( componentValue )+ RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:13: LBRACE ( componentValue )+ RBRACE
			{
			dbg.location(943,13);
			match(input,LBRACE,FOLLOW_LBRACE_in_braceBlock6091); if (state.failed) return;dbg.location(943,20);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:20: ( componentValue )+
			int cnt288=0;
			try { dbg.enterSubRule(288);

			loop288:
			while (true) {
				int alt288=2;
				try { dbg.enterDecision(288, decisionCanBacktrack[288]);

				int LA288_0 = input.LA(1);
				if ( ((LA288_0 >= A && LA288_0 <= R)||(LA288_0 >= REM && LA288_0 <= RIGHTTOP_SYM)||(LA288_0 >= S && LA288_0 <= Z)) ) {
					alt288=1;
				}

				} finally {dbg.exitDecision(288);}

				switch (alt288) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:20: componentValue
					{
					dbg.location(943,20);
					pushFollow(FOLLOW_componentValue_in_braceBlock6093);
					componentValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					if ( cnt288 >= 1 ) break loop288;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(288, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt288++;
			}
			} finally {dbg.exitSubRule(288);}
			dbg.location(943,36);
			match(input,RBRACE,FOLLOW_RBRACE_in_braceBlock6096); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(943, 41);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "braceBlock");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "braceBlock"



	// $ANTLR start "bracketBlock"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:945:1: bracketBlock : LBRACKET ( componentValue )+ RBRACKET ;
	public final void bracketBlock() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "bracketBlock");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(945, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:945:13: ( LBRACKET ( componentValue )+ RBRACKET )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:945:15: LBRACKET ( componentValue )+ RBRACKET
			{
			dbg.location(945,15);
			match(input,LBRACKET,FOLLOW_LBRACKET_in_bracketBlock6103); if (state.failed) return;dbg.location(945,24);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:945:24: ( componentValue )+
			int cnt289=0;
			try { dbg.enterSubRule(289);

			loop289:
			while (true) {
				int alt289=2;
				try { dbg.enterDecision(289, decisionCanBacktrack[289]);

				int LA289_0 = input.LA(1);
				if ( ((LA289_0 >= A && LA289_0 <= R)||(LA289_0 >= REM && LA289_0 <= RIGHTTOP_SYM)||(LA289_0 >= S && LA289_0 <= Z)) ) {
					alt289=1;
				}

				} finally {dbg.exitDecision(289);}

				switch (alt289) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:945:24: componentValue
					{
					dbg.location(945,24);
					pushFollow(FOLLOW_componentValue_in_bracketBlock6105);
					componentValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					if ( cnt289 >= 1 ) break loop289;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(289, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt289++;
			}
			} finally {dbg.exitSubRule(289);}
			dbg.location(945,40);
			match(input,RBRACKET,FOLLOW_RBRACKET_in_bracketBlock6108); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(945, 47);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "bracketBlock");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "bracketBlock"



	// $ANTLR start "parenBlock"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:1: parenBlock : LPAREN ( componentValue )+ RPAREN ;
	public final void parenBlock() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "parenBlock");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(947, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:11: ( LPAREN ( componentValue )+ RPAREN )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:13: LPAREN ( componentValue )+ RPAREN
			{
			dbg.location(947,13);
			match(input,LPAREN,FOLLOW_LPAREN_in_parenBlock6115); if (state.failed) return;dbg.location(947,20);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:20: ( componentValue )+
			int cnt290=0;
			try { dbg.enterSubRule(290);

			loop290:
			while (true) {
				int alt290=2;
				try { dbg.enterDecision(290, decisionCanBacktrack[290]);

				int LA290_0 = input.LA(1);
				if ( ((LA290_0 >= A && LA290_0 <= R)||(LA290_0 >= REM && LA290_0 <= RIGHTTOP_SYM)||(LA290_0 >= S && LA290_0 <= Z)) ) {
					alt290=1;
				}

				} finally {dbg.exitDecision(290);}

				switch (alt290) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:20: componentValue
					{
					dbg.location(947,20);
					pushFollow(FOLLOW_componentValue_in_parenBlock6117);
					componentValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					if ( cnt290 >= 1 ) break loop290;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(290, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt290++;
			}
			} finally {dbg.exitSubRule(290);}
			dbg.location(947,36);
			match(input,RPAREN,FOLLOW_RPAREN_in_parenBlock6120); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(947, 41);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "parenBlock");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "parenBlock"



	// $ANTLR start "componentValue"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:949:1: componentValue : ( parenBlock | braceBlock | bracketBlock | ( functionName ( ws )? LPAREN )=> function | preservedToken );
	public final void componentValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "componentValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(949, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:949:15: ( parenBlock | braceBlock | bracketBlock | ( functionName ( ws )? LPAREN )=> function | preservedToken )
			int alt291=5;
			try { dbg.enterDecision(291, decisionCanBacktrack[291]);

			switch ( input.LA(1) ) {
			case LPAREN:
				{
				alt291=1;
				}
				break;
			case LBRACE:
				{
				alt291=2;
				}
				break;
			case LBRACKET:
				{
				alt291=3;
				}
				break;
			case IDENT:
				{
				int LA291_4 = input.LA(2);
				if ( (synpred36_Css3()) ) {
					alt291=4;
				}
				else if ( (true) ) {
					alt291=5;
				}

				}
				break;
			case A:
			case ANGLE:
			case AT_IDENT:
			case AT_SIGN:
			case B:
			case BEGINS:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case C:
			case CDC:
			case CDO:
			case CHARSET_SYM:
			case COLON:
			case COMMA:
			case COMMENT:
			case CONTAINS:
			case COUNTER_STYLE_SYM:
			case CP_DOTS:
			case CP_EQ:
			case CP_NOT_EQ:
			case D:
			case DASHMATCH:
			case DCOLON:
			case DIMENSION:
			case DOT:
			case E:
			case EMS:
			case ENDS:
			case ESCAPE:
			case EXCLAMATION_MARK:
			case EXS:
			case F:
			case FONT_FACE_SYM:
			case FREQ:
			case G:
			case GEN:
			case GREATER:
			case GREATER_OR_EQ:
			case H:
			case HASH:
			case HASH_SYMBOL:
			case HEXCHAR:
			case HEXCHAR_WILDCARD:
			case I:
			case IMPORTANT_SYM:
			case IMPORT_SYM:
			case INCLUDES:
			case INVALID:
			case J:
			case K:
			case L:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case LENGTH:
			case LESS:
			case LESS_AND:
			case LESS_JS_STRING:
			case LESS_OR_EQ:
			case LESS_REST:
			case LINE_COMMENT:
			case M:
			case MEDIA_SYM:
			case MINUS:
			case MOZ_DOCUMENT_SYM:
			case MOZ_DOMAIN:
			case MOZ_REGEXP:
			case MOZ_URL_PREFIX:
			case N:
			case NAME:
			case NAMESPACE_SYM:
			case NL:
			case NMCHAR:
			case NMSTART:
			case NONASCII:
			case NOT:
			case NUMBER:
			case O:
			case OPEQ:
			case P:
			case PAGE_SYM:
			case PERCENTAGE:
			case PERCENTAGE_SYMBOL:
			case PIPE:
			case PLUS:
			case Q:
			case R:
			case REM:
			case RESOLUTION:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case S:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_DEFAULT:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_ELSEIF:
			case SASS_ERROR:
			case SASS_EXTEND:
			case SASS_EXTEND_ONLY_SELECTOR:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_GLOBAL:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_OPTIONAL:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case SEMI:
			case SOLIDUS:
			case STAR:
			case STRING:
			case SUPPORTS_SYM:
			case T:
			case TILDE:
			case TIME:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case U:
			case UNICODE:
			case URANGE:
			case URI:
			case URL:
			case V:
			case VARIABLE:
			case W:
			case WEBKIT_KEYFRAMES_SYM:
			case WS:
			case X:
			case Y:
			case Z:
				{
				alt291=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 291, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(291);}

			switch (alt291) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:949:17: parenBlock
					{
					dbg.location(949,17);
					pushFollow(FOLLOW_parenBlock_in_componentValue6127);
					parenBlock();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:949:30: braceBlock
					{
					dbg.location(949,30);
					pushFollow(FOLLOW_braceBlock_in_componentValue6131);
					braceBlock();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:949:43: bracketBlock
					{
					dbg.location(949,43);
					pushFollow(FOLLOW_bracketBlock_in_componentValue6135);
					bracketBlock();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:949:58: ( functionName ( ws )? LPAREN )=> function
					{
					dbg.location(949,87);
					pushFollow(FOLLOW_function_in_componentValue6150);
					function();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:949:98: preservedToken
					{
					dbg.location(949,98);
					pushFollow(FOLLOW_preservedToken_in_componentValue6154);
					preservedToken();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(949, 111);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "componentValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "componentValue"



	// $ANTLR start "componentValueOuter"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:1: componentValueOuter : ( parenBlock | braceBlock | bracketBlock | ( functionName ( ws )? LPAREN )=> function | preservedTokenTopLevel ) ( componentValueOuter )* ;
	public final void componentValueOuter() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "componentValueOuter");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(951, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:20: ( ( parenBlock | braceBlock | bracketBlock | ( functionName ( ws )? LPAREN )=> function | preservedTokenTopLevel ) ( componentValueOuter )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:22: ( parenBlock | braceBlock | bracketBlock | ( functionName ( ws )? LPAREN )=> function | preservedTokenTopLevel ) ( componentValueOuter )*
			{
			dbg.location(951,22);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:22: ( parenBlock | braceBlock | bracketBlock | ( functionName ( ws )? LPAREN )=> function | preservedTokenTopLevel )
			int alt292=5;
			try { dbg.enterSubRule(292);
			try { dbg.enterDecision(292, decisionCanBacktrack[292]);

			switch ( input.LA(1) ) {
			case LPAREN:
				{
				alt292=1;
				}
				break;
			case LBRACE:
				{
				alt292=2;
				}
				break;
			case LBRACKET:
				{
				alt292=3;
				}
				break;
			case IDENT:
				{
				int LA292_4 = input.LA(2);
				if ( (synpred37_Css3()) ) {
					alt292=4;
				}
				else if ( (true) ) {
					alt292=5;
				}

				}
				break;
			case A:
			case ANGLE:
			case AT_IDENT:
			case AT_SIGN:
			case B:
			case BEGINS:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case C:
			case CDC:
			case CDO:
			case CHARSET_SYM:
			case COLON:
			case COMMA:
			case COMMENT:
			case CONTAINS:
			case COUNTER_STYLE_SYM:
			case CP_DOTS:
			case CP_EQ:
			case CP_NOT_EQ:
			case D:
			case DASHMATCH:
			case DCOLON:
			case DIMENSION:
			case DOT:
			case E:
			case EMS:
			case ENDS:
			case ESCAPE:
			case EXCLAMATION_MARK:
			case EXS:
			case F:
			case FONT_FACE_SYM:
			case FREQ:
			case G:
			case GEN:
			case GREATER:
			case GREATER_OR_EQ:
			case H:
			case HASH:
			case HASH_SYMBOL:
			case HEXCHAR:
			case HEXCHAR_WILDCARD:
			case I:
			case IMPORTANT_SYM:
			case IMPORT_SYM:
			case INCLUDES:
			case INVALID:
			case J:
			case K:
			case L:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case LENGTH:
			case LESS:
			case LESS_AND:
			case LESS_JS_STRING:
			case LESS_OR_EQ:
			case LESS_REST:
			case LINE_COMMENT:
			case M:
			case MEDIA_SYM:
			case MINUS:
			case MOZ_DOCUMENT_SYM:
			case MOZ_DOMAIN:
			case MOZ_REGEXP:
			case MOZ_URL_PREFIX:
			case N:
			case NAME:
			case NAMESPACE_SYM:
			case NL:
			case NMCHAR:
			case NMSTART:
			case NONASCII:
			case NOT:
			case NUMBER:
			case O:
			case OPEQ:
			case P:
			case PAGE_SYM:
			case PERCENTAGE:
			case PERCENTAGE_SYMBOL:
			case PIPE:
			case PLUS:
			case Q:
			case R:
			case REM:
			case RESOLUTION:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case S:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_DEFAULT:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_ELSEIF:
			case SASS_ERROR:
			case SASS_EXTEND:
			case SASS_EXTEND_ONLY_SELECTOR:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_GLOBAL:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_OPTIONAL:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case SOLIDUS:
			case STAR:
			case STRING:
			case SUPPORTS_SYM:
			case T:
			case TILDE:
			case TIME:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case U:
			case UNICODE:
			case URANGE:
			case URI:
			case URL:
			case V:
			case VARIABLE:
			case W:
			case WEBKIT_KEYFRAMES_SYM:
			case WS:
			case X:
			case Y:
			case Z:
				{
				alt292=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 292, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(292);}

			switch (alt292) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:23: parenBlock
					{
					dbg.location(951,23);
					pushFollow(FOLLOW_parenBlock_in_componentValueOuter6162);
					parenBlock();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:36: braceBlock
					{
					dbg.location(951,36);
					pushFollow(FOLLOW_braceBlock_in_componentValueOuter6166);
					braceBlock();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:49: bracketBlock
					{
					dbg.location(951,49);
					pushFollow(FOLLOW_bracketBlock_in_componentValueOuter6170);
					bracketBlock();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:64: ( functionName ( ws )? LPAREN )=> function
					{
					dbg.location(951,93);
					pushFollow(FOLLOW_function_in_componentValueOuter6185);
					function();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:104: preservedTokenTopLevel
					{
					dbg.location(951,104);
					pushFollow(FOLLOW_preservedTokenTopLevel_in_componentValueOuter6189);
					preservedTokenTopLevel();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(292);}
			dbg.location(951,128);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:128: ( componentValueOuter )*
			try { dbg.enterSubRule(293);

			loop293:
			while (true) {
				int alt293=2;
				try { dbg.enterDecision(293, decisionCanBacktrack[293]);

				switch ( input.LA(1) ) {
				case COMMENT:
				case NL:
				case WS:
					{
					alt293=1;
					}
					break;
				case LESS_AND:
					{
					alt293=1;
					}
					break;
				case DOT:
					{
					alt293=1;
					}
					break;
				case HASH:
					{
					alt293=1;
					}
					break;
				case SASS_MIXIN:
					{
					alt293=1;
					}
					break;
				case AT_IDENT:
					{
					alt293=1;
					}
					break;
				case SASS_INCLUDE:
					{
					alt293=1;
					}
					break;
				case SASS_AT_ROOT:
					{
					alt293=1;
					}
					break;
				case GREATER:
				case PLUS:
				case TILDE:
					{
					alt293=1;
					}
					break;
				case SASS_EXTEND_ONLY_SELECTOR:
					{
					alt293=1;
					}
					break;
				case HASH_SYMBOL:
					{
					alt293=1;
					}
					break;
				case DIMENSION:
					{
					alt293=1;
					}
					break;
				case LBRACKET:
					{
					alt293=1;
					}
					break;
				case COLON:
				case DCOLON:
					{
					alt293=1;
					}
					break;
				case IDENT:
					{
					alt293=1;
					}
					break;
				case AT_SIGN:
					{
					alt293=1;
					}
					break;
				case MINUS:
					{
					alt293=1;
					}
					break;
				case STAR:
					{
					alt293=1;
					}
					break;
				case PIPE:
					{
					alt293=1;
					}
					break;
				case GEN:
					{
					alt293=1;
					}
					break;
				case VARIABLE:
					{
					alt293=1;
					}
					break;
				case SASS_DEBUG:
				case SASS_WARN:
					{
					alt293=1;
					}
					break;
				case SASS_VAR:
					{
					alt293=1;
					}
					break;
				case SASS_IF:
					{
					alt293=1;
					}
					break;
				case SASS_FOR:
					{
					alt293=1;
					}
					break;
				case SASS_EACH:
					{
					alt293=1;
					}
					break;
				case SASS_WHILE:
					{
					alt293=1;
					}
					break;
				case SASS_CONTENT:
					{
					alt293=1;
					}
					break;
				case IMPORT_SYM:
					{
					alt293=1;
					}
					break;
				case PAGE_SYM:
					{
					alt293=1;
					}
					break;
				case FONT_FACE_SYM:
					{
					alt293=1;
					}
					break;
				case MOZ_DOCUMENT_SYM:
					{
					alt293=1;
					}
					break;
				case WEBKIT_KEYFRAMES_SYM:
					{
					alt293=1;
					}
					break;
				case MEDIA_SYM:
					{
					alt293=1;
					}
					break;
				case SASS_EXTEND:
					{
					alt293=1;
					}
					break;
				case SUPPORTS_SYM:
					{
					alt293=1;
					}
					break;
				case BOTTOMCENTER_SYM:
				case BOTTOMLEFTCORNER_SYM:
				case BOTTOMLEFT_SYM:
				case BOTTOMRIGHTCORNER_SYM:
				case BOTTOMRIGHT_SYM:
				case LEFTBOTTOM_SYM:
				case LEFTMIDDLE_SYM:
				case LEFTTOP_SYM:
				case RIGHTBOTTOM_SYM:
				case RIGHTMIDDLE_SYM:
				case RIGHTTOP_SYM:
				case TOPCENTER_SYM:
				case TOPLEFTCORNER_SYM:
				case TOPLEFT_SYM:
				case TOPRIGHTCORNER_SYM:
				case TOPRIGHT_SYM:
					{
					alt293=1;
					}
					break;
				case CHARSET_SYM:
				case COUNTER_STYLE_SYM:
				case NAMESPACE_SYM:
				case SASS_ELSE:
				case SASS_FORWARD:
				case SASS_FUNCTION:
				case SASS_RETURN:
				case SASS_USE:
					{
					alt293=1;
					}
					break;
				case LPAREN:
					{
					alt293=1;
					}
					break;
				case LBRACE:
					{
					alt293=1;
					}
					break;
				case A:
				case ANGLE:
				case B:
				case BEGINS:
				case C:
				case CDC:
				case CDO:
				case COMMA:
				case CONTAINS:
				case CP_DOTS:
				case CP_EQ:
				case CP_NOT_EQ:
				case D:
				case DASHMATCH:
				case E:
				case EMS:
				case ENDS:
				case ESCAPE:
				case EXCLAMATION_MARK:
				case EXS:
				case F:
				case FREQ:
				case G:
				case GREATER_OR_EQ:
				case H:
				case HEXCHAR:
				case HEXCHAR_WILDCARD:
				case I:
				case IMPORTANT_SYM:
				case INCLUDES:
				case INVALID:
				case J:
				case K:
				case L:
				case LENGTH:
				case LESS:
				case LESS_JS_STRING:
				case LESS_OR_EQ:
				case LESS_REST:
				case LINE_COMMENT:
				case M:
				case MOZ_DOMAIN:
				case MOZ_REGEXP:
				case MOZ_URL_PREFIX:
				case N:
				case NAME:
				case NMCHAR:
				case NMSTART:
				case NONASCII:
				case NOT:
				case NUMBER:
				case O:
				case OPEQ:
				case P:
				case PERCENTAGE:
				case PERCENTAGE_SYMBOL:
				case Q:
				case R:
				case REM:
				case RESOLUTION:
				case S:
				case SASS_DEFAULT:
				case SASS_ELSEIF:
				case SASS_ERROR:
				case SASS_GLOBAL:
				case SASS_OPTIONAL:
				case SOLIDUS:
				case STRING:
				case T:
				case TIME:
				case U:
				case UNICODE:
				case URANGE:
				case URI:
				case URL:
				case V:
				case W:
				case X:
				case Y:
				case Z:
					{
					alt293=1;
					}
					break;
				}
				} finally {dbg.exitDecision(293);}

				switch (alt293) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:128: componentValueOuter
					{
					dbg.location(951,128);
					pushFollow(FOLLOW_componentValueOuter_in_componentValueOuter6192);
					componentValueOuter();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop293;
				}
			}
			} finally {dbg.exitSubRule(293);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(951, 147);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "componentValueOuter");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "componentValueOuter"



	// $ANTLR start "syncToDeclarationsRule"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:955:1: syncToDeclarationsRule :;
	public final void syncToDeclarationsRule() throws RecognitionException {

		        //why sync to DOT? - LESS allows class rules nested
		        syncToSet(BitSet.of(IDENT, RBRACE, STAR, DOT));
		    
		try { dbg.enterRule(getGrammarFileName(), "syncToDeclarationsRule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(955, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:960:6: ()
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:6: 
			{
			}

		}
		finally {
			// do for sure before leaving
		}
		dbg.location(961, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "syncToDeclarationsRule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "syncToDeclarationsRule"



	// $ANTLR start "syncTo_RBRACE"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:963:1: syncTo_RBRACE :;
	public final void syncTo_RBRACE() throws RecognitionException {

		        syncToRBRACE(1); //initial nest == 1
		    
		try { dbg.enterRule(getGrammarFileName(), "syncTo_RBRACE");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(963, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:967:6: ()
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:968:6: 
			{
			}

		}
		finally {
			// do for sure before leaving
		}
		dbg.location(968, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "syncTo_RBRACE");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "syncTo_RBRACE"



	// $ANTLR start "syncTo_SEMI"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:970:1: syncTo_SEMI : SEMI ;
	public final void syncTo_SEMI() throws RecognitionException {

		        syncToSet(BitSet.of(SEMI));
		    
		try { dbg.enterRule(getGrammarFileName(), "syncTo_SEMI");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(970, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:974:6: ( SEMI )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:975:13: SEMI
			{
			dbg.location(975,13);
			match(input,SEMI,FOLLOW_SEMI_in_syncTo_SEMI6281); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(976, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "syncTo_SEMI");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "syncTo_SEMI"



	// $ANTLR start "syncToFollow"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:1: syncToFollow :;
	public final void syncToFollow() throws RecognitionException {

		        syncToSet();
		    
		try { dbg.enterRule(getGrammarFileName(), "syncToFollow");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(979, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:6: ()
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:984:6: 
			{
			}

		}
		finally {
			// do for sure before leaving
		}
		dbg.location(984, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "syncToFollow");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "syncToFollow"



	// $ANTLR start "prio"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:986:1: prio : IMPORTANT_SYM ;
	public final void prio() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "prio");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(986, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:987:5: ( IMPORTANT_SYM )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:987:7: IMPORTANT_SYM
			{
			dbg.location(987,7);
			match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_prio6326); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(988, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "prio");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "prio"



	// $ANTLR start "expression"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:990:1: expression : term ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )* ;
	public final void expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(990, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:5: ( term ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:7: term ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )*
			{
			dbg.location(991,7);
			pushFollow(FOLLOW_term_in_expression6343);
			term();
			state._fsp--;
			if (state.failed) return;dbg.location(991,12);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )*
			try { dbg.enterSubRule(297);

			loop297:
			while (true) {
				int alt297=2;
				try { dbg.enterDecision(297, decisionCanBacktrack[297]);

				try {
					isCyclicDecision = true;
					alt297 = dfa297.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(297);}

				switch (alt297) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:14: ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term
					{
					dbg.location(991,66);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:66: ( ws | ( ( ws )? operator ( ws )? ) |)
					int alt296=3;
					try { dbg.enterSubRule(296);
					try { dbg.enterDecision(296, decisionCanBacktrack[296]);

					try {
						isCyclicDecision = true;
						alt296 = dfa296.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(296);}

					switch (alt296) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:68: ws
							{
							dbg.location(991,68);
							pushFollow(FOLLOW_ws_in_expression6375);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:73: ( ( ws )? operator ( ws )? )
							{
							dbg.location(991,73);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:73: ( ( ws )? operator ( ws )? )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:74: ( ws )? operator ( ws )?
							{
							dbg.location(991,74);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:74: ( ws )?
							int alt294=2;
							try { dbg.enterSubRule(294);
							try { dbg.enterDecision(294, decisionCanBacktrack[294]);

							int LA294_0 = input.LA(1);
							if ( (LA294_0==COMMENT||LA294_0==NL||LA294_0==WS) ) {
								alt294=1;
							}
							} finally {dbg.exitDecision(294);}

							switch (alt294) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:74: ws
									{
									dbg.location(991,74);
									pushFollow(FOLLOW_ws_in_expression6380);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(294);}
							dbg.location(991,78);
							pushFollow(FOLLOW_operator_in_expression6383);
							operator();
							state._fsp--;
							if (state.failed) return;dbg.location(991,87);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:87: ( ws )?
							int alt295=2;
							try { dbg.enterSubRule(295);
							try { dbg.enterDecision(295, decisionCanBacktrack[295]);

							int LA295_0 = input.LA(1);
							if ( (LA295_0==COMMENT||LA295_0==NL||LA295_0==WS) ) {
								alt295=1;
							}
							} finally {dbg.exitDecision(295);}

							switch (alt295) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:87: ws
									{
									dbg.location(991,87);
									pushFollow(FOLLOW_ws_in_expression6385);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(295);}

							}

							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:107: 
							{
							}
							break;

					}
					} finally {dbg.exitSubRule(296);}
					dbg.location(991,109);
					pushFollow(FOLLOW_term_in_expression6394);
					term();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop297;
				}
			}
			} finally {dbg.exitSubRule(297);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(992, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "expression"



	// $ANTLR start "term"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:994:1: term : ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | VARIABLE |{...}? IDENT | ( LBRACKET ( WS )? IDENT ( WS IDENT )* ( WS )? RBRACKET ) | NUMBER | URANGE | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor |{...}? cp_variable |{...}? LESS_AND |{...}? sass_interpolation_expression_var |{...}? less_selector_interpolation |{...}? cp_term_symbol ) ;
	public final void term() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "term");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(994, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:995:5: ( ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | VARIABLE |{...}? IDENT | ( LBRACKET ( WS )? IDENT ( WS IDENT )* ( WS )? RBRACKET ) | NUMBER | URANGE | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor |{...}? cp_variable |{...}? LESS_AND |{...}? sass_interpolation_expression_var |{...}? less_selector_interpolation |{...}? cp_term_symbol ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:996:5: ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | VARIABLE |{...}? IDENT | ( LBRACKET ( WS )? IDENT ( WS IDENT )* ( WS )? RBRACKET ) | NUMBER | URANGE | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor |{...}? cp_variable |{...}? LESS_AND |{...}? sass_interpolation_expression_var |{...}? less_selector_interpolation |{...}? cp_term_symbol )
			{
			dbg.location(996,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:996:5: ( unaryOperator ( ws )? )?
			int alt299=2;
			try { dbg.enterSubRule(299);
			try { dbg.enterDecision(299, decisionCanBacktrack[299]);

			int LA299_0 = input.LA(1);
			if ( (LA299_0==MINUS||LA299_0==PLUS) ) {
				alt299=1;
			}
			} finally {dbg.exitDecision(299);}

			switch (alt299) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:996:7: unaryOperator ( ws )?
					{
					dbg.location(996,7);
					pushFollow(FOLLOW_unaryOperator_in_term6419);
					unaryOperator();
					state._fsp--;
					if (state.failed) return;dbg.location(996,21);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:996:21: ( ws )?
					int alt298=2;
					try { dbg.enterSubRule(298);
					try { dbg.enterDecision(298, decisionCanBacktrack[298]);

					int LA298_0 = input.LA(1);
					if ( (LA298_0==COMMENT||LA298_0==NL||LA298_0==WS) ) {
						alt298=1;
					}
					} finally {dbg.exitDecision(298);}

					switch (alt298) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:996:21: ws
							{
							dbg.location(996,21);
							pushFollow(FOLLOW_ws_in_term6421);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(298);}

					}
					break;

			}
			} finally {dbg.exitSubRule(299);}
			dbg.location(997,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:997:5: ( ( functionName ( ws )? LPAREN )=> function | VARIABLE |{...}? IDENT | ( LBRACKET ( WS )? IDENT ( WS IDENT )* ( WS )? RBRACKET ) | NUMBER | URANGE | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor |{...}? cp_variable |{...}? LESS_AND |{...}? sass_interpolation_expression_var |{...}? less_selector_interpolation |{...}? cp_term_symbol )
			int alt303=27;
			try { dbg.enterSubRule(303);
			try { dbg.enterDecision(303, decisionCanBacktrack[303]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA303_1 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt303=1;
				}
				else if ( (evalPredicate(! (isScssSource() && tokenNameEquals2(".")),"! (isScssSource() && tokenNameEquals2(\".\"))")) ) {
					alt303=3;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt303=23;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 303, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case VARIABLE:
				{
				alt303=2;
				}
				break;
			case LBRACKET:
				{
				alt303=4;
				}
				break;
			case NUMBER:
				{
				alt303=5;
				}
				break;
			case URANGE:
				{
				alt303=6;
				}
				break;
			case PERCENTAGE:
				{
				alt303=7;
				}
				break;
			case LENGTH:
				{
				alt303=8;
				}
				break;
			case EMS:
				{
				alt303=9;
				}
				break;
			case REM:
				{
				alt303=10;
				}
				break;
			case EXS:
				{
				alt303=11;
				}
				break;
			case ANGLE:
				{
				alt303=12;
				}
				break;
			case TIME:
				{
				alt303=13;
				}
				break;
			case FREQ:
				{
				alt303=14;
				}
				break;
			case RESOLUTION:
				{
				alt303=15;
				}
				break;
			case DIMENSION:
				{
				alt303=16;
				}
				break;
			case STRING:
				{
				alt303=17;
				}
				break;
			case TILDE:
				{
				alt303=18;
				}
				break;
			case LESS_JS_STRING:
				{
				alt303=19;
				}
				break;
			case GEN:
				{
				alt303=20;
				}
				break;
			case URI:
				{
				alt303=21;
				}
				break;
			case HASH:
				{
				alt303=22;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt303=23;
				}
				break;
			case LESS_AND:
				{
				alt303=24;
				}
				break;
			case HASH_SYMBOL:
				{
				alt303=25;
				}
				break;
			case AT_SIGN:
				{
				alt303=26;
				}
				break;
			case PERCENTAGE_SYMBOL:
				{
				alt303=27;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 303, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(303);}

			switch (alt303) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:9: ( functionName ( ws )? LPAREN )=> function
					{
					dbg.location(998,36);
					pushFollow(FOLLOW_function_in_term6450);
					function();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:999:11: VARIABLE
					{
					dbg.location(999,11);
					match(input,VARIABLE,FOLLOW_VARIABLE_in_term6463); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1000:11: {...}? IDENT
					{
					dbg.location(1000,11);
					if ( !(evalPredicate(! (isScssSource() && tokenNameEquals2(".")),"! (isScssSource() && tokenNameEquals2(\".\"))")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "! (isScssSource() && tokenNameEquals2(\".\"))");
					}dbg.location(1000,58);
					match(input,IDENT,FOLLOW_IDENT_in_term6477); if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:11: ( LBRACKET ( WS )? IDENT ( WS IDENT )* ( WS )? RBRACKET )
					{
					dbg.location(1001,11);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:11: ( LBRACKET ( WS )? IDENT ( WS IDENT )* ( WS )? RBRACKET )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:12: LBRACKET ( WS )? IDENT ( WS IDENT )* ( WS )? RBRACKET
					{
					dbg.location(1001,12);
					match(input,LBRACKET,FOLLOW_LBRACKET_in_term6490); if (state.failed) return;dbg.location(1001,21);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:21: ( WS )?
					int alt300=2;
					try { dbg.enterSubRule(300);
					try { dbg.enterDecision(300, decisionCanBacktrack[300]);

					int LA300_0 = input.LA(1);
					if ( (LA300_0==WS) ) {
						alt300=1;
					}
					} finally {dbg.exitDecision(300);}

					switch (alt300) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:21: WS
							{
							dbg.location(1001,21);
							match(input,WS,FOLLOW_WS_in_term6492); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(300);}
					dbg.location(1001,25);
					match(input,IDENT,FOLLOW_IDENT_in_term6495); if (state.failed) return;dbg.location(1001,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:31: ( WS IDENT )*
					try { dbg.enterSubRule(301);

					loop301:
					while (true) {
						int alt301=2;
						try { dbg.enterDecision(301, decisionCanBacktrack[301]);

						int LA301_0 = input.LA(1);
						if ( (LA301_0==WS) ) {
							int LA301_1 = input.LA(2);
							if ( (LA301_1==IDENT) ) {
								alt301=1;
							}

						}

						} finally {dbg.exitDecision(301);}

						switch (alt301) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:32: WS IDENT
							{
							dbg.location(1001,32);
							match(input,WS,FOLLOW_WS_in_term6498); if (state.failed) return;dbg.location(1001,35);
							match(input,IDENT,FOLLOW_IDENT_in_term6500); if (state.failed) return;
							}
							break;

						default :
							break loop301;
						}
					}
					} finally {dbg.exitSubRule(301);}
					dbg.location(1001,43);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:43: ( WS )?
					int alt302=2;
					try { dbg.enterSubRule(302);
					try { dbg.enterDecision(302, decisionCanBacktrack[302]);

					int LA302_0 = input.LA(1);
					if ( (LA302_0==WS) ) {
						alt302=1;
					}
					} finally {dbg.exitDecision(302);}

					switch (alt302) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:43: WS
							{
							dbg.location(1001,43);
							match(input,WS,FOLLOW_WS_in_term6504); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(302);}
					dbg.location(1001,47);
					match(input,RBRACKET,FOLLOW_RBRACKET_in_term6507); if (state.failed) return;
					}

					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1002:11: NUMBER
					{
					dbg.location(1002,11);
					match(input,NUMBER,FOLLOW_NUMBER_in_term6520); if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1003:11: URANGE
					{
					dbg.location(1003,11);
					match(input,URANGE,FOLLOW_URANGE_in_term6532); if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:11: PERCENTAGE
					{
					dbg.location(1004,11);
					match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_term6544); if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1005:11: LENGTH
					{
					dbg.location(1005,11);
					match(input,LENGTH,FOLLOW_LENGTH_in_term6556); if (state.failed) return;
					}
					break;
				case 9 :
					dbg.enterAlt(9);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:11: EMS
					{
					dbg.location(1006,11);
					match(input,EMS,FOLLOW_EMS_in_term6568); if (state.failed) return;
					}
					break;
				case 10 :
					dbg.enterAlt(10);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1007:11: REM
					{
					dbg.location(1007,11);
					match(input,REM,FOLLOW_REM_in_term6580); if (state.failed) return;
					}
					break;
				case 11 :
					dbg.enterAlt(11);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1008:11: EXS
					{
					dbg.location(1008,11);
					match(input,EXS,FOLLOW_EXS_in_term6592); if (state.failed) return;
					}
					break;
				case 12 :
					dbg.enterAlt(12);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1009:11: ANGLE
					{
					dbg.location(1009,11);
					match(input,ANGLE,FOLLOW_ANGLE_in_term6604); if (state.failed) return;
					}
					break;
				case 13 :
					dbg.enterAlt(13);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1010:11: TIME
					{
					dbg.location(1010,11);
					match(input,TIME,FOLLOW_TIME_in_term6616); if (state.failed) return;
					}
					break;
				case 14 :
					dbg.enterAlt(14);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1011:11: FREQ
					{
					dbg.location(1011,11);
					match(input,FREQ,FOLLOW_FREQ_in_term6628); if (state.failed) return;
					}
					break;
				case 15 :
					dbg.enterAlt(15);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1012:11: RESOLUTION
					{
					dbg.location(1012,11);
					match(input,RESOLUTION,FOLLOW_RESOLUTION_in_term6640); if (state.failed) return;
					}
					break;
				case 16 :
					dbg.enterAlt(16);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1013:11: DIMENSION
					{
					dbg.location(1013,11);
					match(input,DIMENSION,FOLLOW_DIMENSION_in_term6652); if (state.failed) return;
					}
					break;
				case 17 :
					dbg.enterAlt(17);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:11: STRING
					{
					dbg.location(1014,11);
					match(input,STRING,FOLLOW_STRING_in_term6669); if (state.failed) return;
					}
					break;
				case 18 :
					dbg.enterAlt(18);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1015:11: TILDE ( STRING | LESS_JS_STRING )
					{
					dbg.location(1015,11);
					match(input,TILDE,FOLLOW_TILDE_in_term6681); if (state.failed) return;dbg.location(1015,17);
					if ( input.LA(1)==LESS_JS_STRING||input.LA(1)==STRING ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;
				case 19 :
					dbg.enterAlt(19);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1016:11: LESS_JS_STRING
					{
					dbg.location(1016,11);
					match(input,LESS_JS_STRING,FOLLOW_LESS_JS_STRING_in_term6704); if (state.failed) return;
					}
					break;
				case 20 :
					dbg.enterAlt(20);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1017:11: GEN
					{
					dbg.location(1017,11);
					match(input,GEN,FOLLOW_GEN_in_term6719); if (state.failed) return;
					}
					break;
				case 21 :
					dbg.enterAlt(21);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1018:11: URI
					{
					dbg.location(1018,11);
					match(input,URI,FOLLOW_URI_in_term6731); if (state.failed) return;
					}
					break;
				case 22 :
					dbg.enterAlt(22);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1019:11: hexColor
					{
					dbg.location(1019,11);
					pushFollow(FOLLOW_hexColor_in_term6743);
					hexColor();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 23 :
					dbg.enterAlt(23);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1020:11: {...}? cp_variable
					{
					dbg.location(1020,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
					}dbg.location(1020,40);
					pushFollow(FOLLOW_cp_variable_in_term6757);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 24 :
					dbg.enterAlt(24);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1021:11: {...}? LESS_AND
					{
					dbg.location(1021,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isScssSource()");
					}dbg.location(1021,29);
					match(input,LESS_AND,FOLLOW_LESS_AND_in_term6771); if (state.failed) return;
					}
					break;
				case 25 :
					dbg.enterAlt(25);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1022:11: {...}? sass_interpolation_expression_var
					{
					dbg.location(1022,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isScssSource()");
					}dbg.location(1022,29);
					pushFollow(FOLLOW_sass_interpolation_expression_var_in_term6785);
					sass_interpolation_expression_var();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 26 :
					dbg.enterAlt(26);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1023:11: {...}? less_selector_interpolation
					{
					dbg.location(1023,11);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isLessSource()");
					}dbg.location(1023,29);
					pushFollow(FOLLOW_less_selector_interpolation_in_term6799);
					less_selector_interpolation();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 27 :
					dbg.enterAlt(27);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1024:11: {...}? cp_term_symbol
					{
					dbg.location(1024,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
					}dbg.location(1024,40);
					pushFollow(FOLLOW_cp_term_symbol_in_term6813);
					cp_term_symbol();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(303);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1026, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "term");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "term"



	// $ANTLR start "cp_term_symbol"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:1: cp_term_symbol : PERCENTAGE_SYMBOL ;
	public final void cp_term_symbol() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_term_symbol");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1031, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:5: ( PERCENTAGE_SYMBOL )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:7: PERCENTAGE_SYMBOL
			{
			dbg.location(1032,7);
			match(input,PERCENTAGE_SYMBOL,FOLLOW_PERCENTAGE_SYMBOL_in_cp_term_symbol6840); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1033, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_term_symbol");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_term_symbol"



	// $ANTLR start "function"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:1: function : functionName ( ws )? LPAREN ( ws )? ( fnAttributes |) RPAREN ;
	public final void function() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "function");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1035, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1036:2: ( functionName ( ws )? LPAREN ( ws )? ( fnAttributes |) RPAREN )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1036:5: functionName ( ws )? LPAREN ( ws )? ( fnAttributes |) RPAREN
			{
			dbg.location(1036,5);
			pushFollow(FOLLOW_functionName_in_function6856);
			functionName();
			state._fsp--;
			if (state.failed) return;dbg.location(1036,18);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1036:18: ( ws )?
			int alt304=2;
			try { dbg.enterSubRule(304);
			try { dbg.enterDecision(304, decisionCanBacktrack[304]);

			int LA304_0 = input.LA(1);
			if ( (LA304_0==COMMENT||LA304_0==NL||LA304_0==WS) ) {
				alt304=1;
			}
			} finally {dbg.exitDecision(304);}

			switch (alt304) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1036:18: ws
					{
					dbg.location(1036,18);
					pushFollow(FOLLOW_ws_in_function6858);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(304);}
			dbg.location(1037,3);
			match(input,LPAREN,FOLLOW_LPAREN_in_function6863); if (state.failed) return;dbg.location(1037,10);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1037:10: ( ws )?
			int alt305=2;
			try { dbg.enterSubRule(305);
			try { dbg.enterDecision(305, decisionCanBacktrack[305]);

			int LA305_0 = input.LA(1);
			if ( (LA305_0==COMMENT||LA305_0==NL||LA305_0==WS) ) {
				alt305=1;
			}
			} finally {dbg.exitDecision(305);}

			switch (alt305) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1037:10: ws
					{
					dbg.location(1037,10);
					pushFollow(FOLLOW_ws_in_function6865);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(305);}
			dbg.location(1038,3);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1038:3: ( fnAttributes |)
			int alt306=2;
			try { dbg.enterSubRule(306);
			try { dbg.enterDecision(306, decisionCanBacktrack[306]);

			int LA306_0 = input.LA(1);
			if ( ((LA306_0 >= ANGLE && LA306_0 <= AT_SIGN)||(LA306_0 >= BOTTOMCENTER_SYM && LA306_0 <= BOTTOMRIGHT_SYM)||LA306_0==CHARSET_SYM||LA306_0==COUNTER_STYLE_SYM||LA306_0==DIMENSION||LA306_0==EMS||LA306_0==EXS||(LA306_0 >= FONT_FACE_SYM && LA306_0 <= FREQ)||LA306_0==GEN||(LA306_0 >= HASH && LA306_0 <= HASH_SYMBOL)||(LA306_0 >= IDENT && LA306_0 <= IMPORT_SYM)||(LA306_0 >= LBRACE && LA306_0 <= LENGTH)||(LA306_0 >= LESS_AND && LA306_0 <= LESS_JS_STRING)||LA306_0==LPAREN||(LA306_0 >= MEDIA_SYM && LA306_0 <= MOZ_DOCUMENT_SYM)||LA306_0==NAMESPACE_SYM||(LA306_0 >= NOT && LA306_0 <= NUMBER)||(LA306_0 >= PAGE_SYM && LA306_0 <= PERCENTAGE_SYMBOL)||LA306_0==PLUS||(LA306_0 >= REM && LA306_0 <= RIGHTTOP_SYM)||(LA306_0 >= SASS_AT_ROOT && LA306_0 <= SASS_DEBUG)||(LA306_0 >= SASS_EACH && LA306_0 <= SASS_ELSE)||LA306_0==SASS_EXTEND||(LA306_0 >= SASS_FOR && LA306_0 <= SASS_FUNCTION)||(LA306_0 >= SASS_IF && LA306_0 <= SASS_MIXIN)||(LA306_0 >= SASS_RETURN && LA306_0 <= SASS_WHILE)||LA306_0==STRING||(LA306_0 >= TILDE && LA306_0 <= TOPRIGHT_SYM)||(LA306_0 >= URANGE && LA306_0 <= URI)||LA306_0==VARIABLE||LA306_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt306=1;
			}
			else if ( (LA306_0==RPAREN) ) {
				alt306=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 306, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(306);}

			switch (alt306) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:21: fnAttributes
					{
					dbg.location(1039,21);
					pushFollow(FOLLOW_fnAttributes_in_function6892);
					fnAttributes();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:3: 
					{
					}
					break;

			}
			} finally {dbg.exitSubRule(306);}
			dbg.location(1042,3);
			match(input,RPAREN,FOLLOW_RPAREN_in_function6923); if (state.failed) return;
			}

		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(RPAREN, SEMI, RBRACE));

		}

		finally {
			// do for sure before leaving
		}
		dbg.location(1043, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "function");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "function"



	// $ANTLR start "functionName"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1049:1: functionName : ( IDENT COLON )? IDENT ( DOT IDENT )* ;
	public final void functionName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "functionName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1049, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:2: ( ( IDENT COLON )? IDENT ( DOT IDENT )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:9: ( IDENT COLON )? IDENT ( DOT IDENT )*
			{
			dbg.location(1054,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:9: ( IDENT COLON )?
			int alt307=2;
			try { dbg.enterSubRule(307);
			try { dbg.enterDecision(307, decisionCanBacktrack[307]);

			int LA307_0 = input.LA(1);
			if ( (LA307_0==IDENT) ) {
				int LA307_1 = input.LA(2);
				if ( (LA307_1==COLON) ) {
					alt307=1;
				}
			}
			} finally {dbg.exitDecision(307);}

			switch (alt307) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:10: IDENT COLON
					{
					dbg.location(1054,10);
					match(input,IDENT,FOLLOW_IDENT_in_functionName6975); if (state.failed) return;dbg.location(1054,16);
					match(input,COLON,FOLLOW_COLON_in_functionName6977); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(307);}
			dbg.location(1054,24);
			match(input,IDENT,FOLLOW_IDENT_in_functionName6981); if (state.failed) return;dbg.location(1054,30);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:30: ( DOT IDENT )*
			try { dbg.enterSubRule(308);

			loop308:
			while (true) {
				int alt308=2;
				try { dbg.enterDecision(308, decisionCanBacktrack[308]);

				int LA308_0 = input.LA(1);
				if ( (LA308_0==DOT) ) {
					alt308=1;
				}

				} finally {dbg.exitDecision(308);}

				switch (alt308) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:31: DOT IDENT
					{
					dbg.location(1054,31);
					match(input,DOT,FOLLOW_DOT_in_functionName6984); if (state.failed) return;dbg.location(1054,35);
					match(input,IDENT,FOLLOW_IDENT_in_functionName6986); if (state.failed) return;
					}
					break;

				default :
					break loop308;
				}
			}
			} finally {dbg.exitSubRule(308);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1055, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "functionName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "functionName"



	// $ANTLR start "fnAttributes"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1057:1: fnAttributes : fnAttribute ( ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute )* ( ws )? ;
	public final void fnAttributes() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fnAttributes");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1057, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1058:5: ( fnAttribute ( ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute )* ( ws )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:5: fnAttribute ( ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute )* ( ws )?
			{
			dbg.location(1059,5);
			pushFollow(FOLLOW_fnAttribute_in_fnAttributes7010);
			fnAttribute();
			state._fsp--;
			if (state.failed) return;dbg.location(1059,17);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:17: ( ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute )*
			try { dbg.enterSubRule(312);

			loop312:
			while (true) {
				int alt312=2;
				try { dbg.enterDecision(312, decisionCanBacktrack[312]);

				try {
					isCyclicDecision = true;
					alt312 = dfa312.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(312);}

				switch (alt312) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:18: ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute
					{
					dbg.location(1059,18);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:18: ( ws )?
					int alt309=2;
					try { dbg.enterSubRule(309);
					try { dbg.enterDecision(309, decisionCanBacktrack[309]);

					int LA309_0 = input.LA(1);
					if ( (LA309_0==COMMENT||LA309_0==NL||LA309_0==WS) ) {
						alt309=1;
					}
					} finally {dbg.exitDecision(309);}

					switch (alt309) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:18: ws
							{
							dbg.location(1059,18);
							pushFollow(FOLLOW_ws_in_fnAttributes7013);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(309);}
					dbg.location(1059,22);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:22: ( COMMA |{...}? SEMI )
					int alt310=2;
					try { dbg.enterSubRule(310);
					try { dbg.enterDecision(310, decisionCanBacktrack[310]);

					int LA310_0 = input.LA(1);
					if ( (LA310_0==COMMA) ) {
						alt310=1;
					}
					else if ( (LA310_0==SEMI) ) {
						alt310=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 310, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(310);}

					switch (alt310) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:23: COMMA
							{
							dbg.location(1059,23);
							match(input,COMMA,FOLLOW_COMMA_in_fnAttributes7017); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:31: {...}? SEMI
							{
							dbg.location(1059,31);
							if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "fnAttributes", "isLessSource()");
							}dbg.location(1059,49);
							match(input,SEMI,FOLLOW_SEMI_in_fnAttributes7023); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(310);}
					dbg.location(1059,55);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:55: ( ws )?
					int alt311=2;
					try { dbg.enterSubRule(311);
					try { dbg.enterDecision(311, decisionCanBacktrack[311]);

					int LA311_0 = input.LA(1);
					if ( (LA311_0==COMMENT||LA311_0==NL||LA311_0==WS) ) {
						alt311=1;
					}
					} finally {dbg.exitDecision(311);}

					switch (alt311) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:55: ws
							{
							dbg.location(1059,55);
							pushFollow(FOLLOW_ws_in_fnAttributes7026);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(311);}
					dbg.location(1059,59);
					pushFollow(FOLLOW_fnAttribute_in_fnAttributes7029);
					fnAttribute();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop312;
				}
			}
			} finally {dbg.exitSubRule(312);}
			dbg.location(1059,73);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:73: ( ws )?
			int alt313=2;
			try { dbg.enterSubRule(313);
			try { dbg.enterDecision(313, decisionCanBacktrack[313]);

			int LA313_0 = input.LA(1);
			if ( (LA313_0==COMMENT||LA313_0==NL||LA313_0==WS) ) {
				alt313=1;
			}
			} finally {dbg.exitDecision(313);}

			switch (alt313) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:73: ws
					{
					dbg.location(1059,73);
					pushFollow(FOLLOW_ws_in_fnAttributes7033);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(313);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1060, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fnAttributes");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fnAttributes"



	// $ANTLR start "fnAttribute"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1062:1: fnAttribute : ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | ( cp_expression )=> cp_expression | expression );
	public final void fnAttribute() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fnAttribute");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1062, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1063:2: ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | ( cp_expression )=> cp_expression | expression )
			int alt316=3;
			try { dbg.enterDecision(316, decisionCanBacktrack[316]);

			int LA316_0 = input.LA(1);
			if ( (LA316_0==IDENT) ) {
				int LA316_1 = input.LA(2);
				if ( (synpred40_Css3()) ) {
					alt316=1;
				}
				else if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==AT_IDENT||(LA316_0 >= BOTTOMCENTER_SYM && LA316_0 <= BOTTOMRIGHT_SYM)||LA316_0==CHARSET_SYM||LA316_0==COUNTER_STYLE_SYM||LA316_0==FONT_FACE_SYM||LA316_0==IMPORT_SYM||(LA316_0 >= LEFTBOTTOM_SYM && LA316_0 <= LEFTTOP_SYM)||LA316_0==MEDIA_SYM||LA316_0==MOZ_DOCUMENT_SYM||LA316_0==NAMESPACE_SYM||LA316_0==PAGE_SYM||(LA316_0 >= RIGHTBOTTOM_SYM && LA316_0 <= RIGHTTOP_SYM)||(LA316_0 >= SASS_AT_ROOT && LA316_0 <= SASS_DEBUG)||(LA316_0 >= SASS_EACH && LA316_0 <= SASS_ELSE)||LA316_0==SASS_EXTEND||(LA316_0 >= SASS_FOR && LA316_0 <= SASS_FUNCTION)||(LA316_0 >= SASS_IF && LA316_0 <= SASS_MIXIN)||(LA316_0 >= SASS_RETURN && LA316_0 <= SASS_USE)||(LA316_0 >= SASS_WARN && LA316_0 <= SASS_WHILE)||(LA316_0 >= TOPCENTER_SYM && LA316_0 <= TOPRIGHT_SYM)||LA316_0==WEBKIT_KEYFRAMES_SYM) ) {
				int LA316_2 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred40_Css3())) ) {
					alt316=1;
				}
				else if ( (((synpred41_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt316=2;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt316=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 316, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA316_0==SASS_VAR) ) {
				int LA316_3 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred40_Css3())) ) {
					alt316=1;
				}
				else if ( (((synpred41_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt316=2;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt316=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 316, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA316_0==LBRACE) && (synpred41_Css3())) {
				alt316=2;
			}
			else if ( (LA316_0==NOT) && (synpred41_Css3())) {
				alt316=2;
			}
			else if ( (LA316_0==MINUS||LA316_0==PLUS) ) {
				int LA316_6 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==VARIABLE) ) {
				int LA316_7 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==LBRACKET) ) {
				int LA316_8 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==NUMBER) ) {
				int LA316_9 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==URANGE) ) {
				int LA316_10 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==PERCENTAGE) ) {
				int LA316_11 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==LENGTH) ) {
				int LA316_12 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==EMS) ) {
				int LA316_13 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==REM) ) {
				int LA316_14 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==EXS) ) {
				int LA316_15 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==ANGLE) ) {
				int LA316_16 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==TIME) ) {
				int LA316_17 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==FREQ) ) {
				int LA316_18 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==RESOLUTION) ) {
				int LA316_19 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==DIMENSION) ) {
				int LA316_20 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==STRING) ) {
				int LA316_21 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==TILDE) ) {
				int LA316_22 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==LESS_JS_STRING) ) {
				int LA316_23 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==GEN) ) {
				int LA316_24 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==URI) ) {
				int LA316_25 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==HASH) ) {
				int LA316_26 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt316=2;
				}
				else if ( (true) ) {
					alt316=3;
				}

			}
			else if ( (LA316_0==LESS_AND) ) {
				int LA316_27 = input.LA(2);
				if ( ((synpred41_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt316=2;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt316=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 316, 27, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA316_0==HASH_SYMBOL) ) {
				int LA316_28 = input.LA(2);
				if ( ((synpred41_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt316=2;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt316=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 316, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA316_0==AT_SIGN) ) {
				int LA316_29 = input.LA(2);
				if ( ((synpred41_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt316=2;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt316=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 316, 29, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA316_0==PERCENTAGE_SYMBOL) ) {
				int LA316_30 = input.LA(2);
				if ( ((synpred41_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {
					alt316=2;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt316=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 316, 30, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA316_0==IMPORTANT_SYM) && (synpred41_Css3())) {
				alt316=2;
			}
			else if ( (LA316_0==LPAREN) && (synpred41_Css3())) {
				alt316=2;
			}

			} finally {dbg.exitDecision(316);}

			switch (alt316) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1064:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue
					{
					dbg.location(1064,46);
					pushFollow(FOLLOW_fnAttributeName_in_fnAttribute7070);
					fnAttributeName();
					state._fsp--;
					if (state.failed) return;dbg.location(1064,62);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1064:62: ( ws )?
					int alt314=2;
					try { dbg.enterSubRule(314);
					try { dbg.enterDecision(314, decisionCanBacktrack[314]);

					int LA314_0 = input.LA(1);
					if ( (LA314_0==COMMENT||LA314_0==NL||LA314_0==WS) ) {
						alt314=1;
					}
					} finally {dbg.exitDecision(314);}

					switch (alt314) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1064:62: ws
							{
							dbg.location(1064,62);
							pushFollow(FOLLOW_ws_in_fnAttribute7072);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(314);}
					dbg.location(1064,66);
					if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(1064,79);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1064:79: ( ws )?
					int alt315=2;
					try { dbg.enterSubRule(315);
					try { dbg.enterDecision(315, decisionCanBacktrack[315]);

					int LA315_0 = input.LA(1);
					if ( (LA315_0==COMMENT||LA315_0==NL||LA315_0==WS) ) {
						alt315=1;
					}
					} finally {dbg.exitDecision(315);}

					switch (alt315) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1064:79: ws
							{
							dbg.location(1064,79);
							pushFollow(FOLLOW_ws_in_fnAttribute7081);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(315);}
					dbg.location(1064,83);
					pushFollow(FOLLOW_fnAttributeValue_in_fnAttribute7084);
					fnAttributeValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:11: ( cp_expression )=> cp_expression
					{
					dbg.location(1065,29);
					pushFollow(FOLLOW_cp_expression_in_fnAttribute7101);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1066:11: expression
					{
					dbg.location(1066,11);
					pushFollow(FOLLOW_expression_in_fnAttribute7113);
					expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1067, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fnAttribute");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fnAttribute"



	// $ANTLR start "fnAttributeName"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:1: fnAttributeName : ( IDENT ( DOT IDENT )* |{...}? cp_variable );
	public final void fnAttributeName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fnAttributeName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1069, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1070:2: ( IDENT ( DOT IDENT )* |{...}? cp_variable )
			int alt318=2;
			try { dbg.enterDecision(318, decisionCanBacktrack[318]);

			int LA318_0 = input.LA(1);
			if ( (LA318_0==IDENT) ) {
				int LA318_1 = input.LA(2);
				if ( (LA318_1==DOT) ) {
					int LA318_3 = input.LA(3);
					if ( (LA318_3==SASS_VAR) ) {
						alt318=2;
					}
					else if ( (LA318_3==IDENT) ) {
						alt318=1;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 318, 3, input);
							dbg.recognitionException(nvae);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA318_1==COLON||LA318_1==COMMENT||LA318_1==NL||LA318_1==OPEQ||LA318_1==WS) ) {
					alt318=1;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 318, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA318_0==AT_IDENT||(LA318_0 >= BOTTOMCENTER_SYM && LA318_0 <= BOTTOMRIGHT_SYM)||LA318_0==CHARSET_SYM||LA318_0==COUNTER_STYLE_SYM||LA318_0==FONT_FACE_SYM||LA318_0==IMPORT_SYM||(LA318_0 >= LEFTBOTTOM_SYM && LA318_0 <= LEFTTOP_SYM)||LA318_0==MEDIA_SYM||LA318_0==MOZ_DOCUMENT_SYM||LA318_0==NAMESPACE_SYM||LA318_0==PAGE_SYM||(LA318_0 >= RIGHTBOTTOM_SYM && LA318_0 <= RIGHTTOP_SYM)||(LA318_0 >= SASS_AT_ROOT && LA318_0 <= SASS_DEBUG)||(LA318_0 >= SASS_EACH && LA318_0 <= SASS_ELSE)||LA318_0==SASS_EXTEND||(LA318_0 >= SASS_FOR && LA318_0 <= SASS_FUNCTION)||(LA318_0 >= SASS_IF && LA318_0 <= SASS_MIXIN)||(LA318_0 >= SASS_RETURN && LA318_0 <= SASS_WHILE)||(LA318_0 >= TOPCENTER_SYM && LA318_0 <= TOPRIGHT_SYM)||LA318_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt318=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 318, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(318);}

			switch (alt318) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:13: IDENT ( DOT IDENT )*
					{
					dbg.location(1071,13);
					match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName7136); if (state.failed) return;dbg.location(1071,19);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:19: ( DOT IDENT )*
					try { dbg.enterSubRule(317);

					loop317:
					while (true) {
						int alt317=2;
						try { dbg.enterDecision(317, decisionCanBacktrack[317]);

						int LA317_0 = input.LA(1);
						if ( (LA317_0==DOT) ) {
							alt317=1;
						}

						} finally {dbg.exitDecision(317);}

						switch (alt317) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:20: DOT IDENT
							{
							dbg.location(1071,20);
							match(input,DOT,FOLLOW_DOT_in_fnAttributeName7139); if (state.failed) return;dbg.location(1071,24);
							match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName7141); if (state.failed) return;
							}
							break;

						default :
							break loop317;
						}
					}
					} finally {dbg.exitSubRule(317);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:15: {...}? cp_variable
					{
					dbg.location(1072,15);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "fnAttributeName", "isCssPreprocessorSource()");
					}dbg.location(1072,44);
					pushFollow(FOLLOW_cp_variable_in_fnAttributeName7161);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1073, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fnAttributeName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fnAttributeName"



	// $ANTLR start "fnAttributeValue"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:1: fnAttributeValue : ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )* |{...}? cp_math_expression );
	public final void fnAttributeValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fnAttributeValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1075, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1076:2: ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )* |{...}? cp_math_expression )
			int alt323=2;
			try { dbg.enterDecision(323, decisionCanBacktrack[323]);

			switch ( input.LA(1) ) {
			case MINUS:
			case PLUS:
				{
				int LA323_1 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case IDENT:
				{
				int LA323_2 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case VARIABLE:
				{
				int LA323_3 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LBRACKET:
				{
				int LA323_4 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NUMBER:
				{
				int LA323_5 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 5, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case URANGE:
				{
				int LA323_6 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PERCENTAGE:
				{
				int LA323_7 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 7, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LENGTH:
				{
				int LA323_8 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 8, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EMS:
				{
				int LA323_9 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REM:
				{
				int LA323_10 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 10, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXS:
				{
				int LA323_11 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 11, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ANGLE:
				{
				int LA323_12 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 12, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TIME:
				{
				int LA323_13 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 13, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case FREQ:
				{
				int LA323_14 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 14, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case RESOLUTION:
				{
				int LA323_15 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 15, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DIMENSION:
				{
				int LA323_16 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 16, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case STRING:
				{
				int LA323_17 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 17, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TILDE:
				{
				int LA323_18 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 18, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LESS_JS_STRING:
				{
				int LA323_19 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 19, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GEN:
				{
				int LA323_20 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 20, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case URI:
				{
				int LA323_21 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 21, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH:
				{
				int LA323_22 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 22, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA323_23 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt323=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 23, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA323_24 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt323=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 24, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LESS_AND:
				{
				int LA323_25 = input.LA(2);
				if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt323=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA323_26 = input.LA(2);
				if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt323=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
				{
				int LA323_27 = input.LA(2);
				if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt323=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 27, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PERCENTAGE_SYMBOL:
				{
				int LA323_28 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt323=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 323, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case IMPORTANT_SYM:
			case LPAREN:
				{
				alt323=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 323, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(323);}

			switch (alt323) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:13: term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )*
					{
					dbg.location(1077,13);
					pushFollow(FOLLOW_term_in_fnAttributeValue7184);
					term();
					state._fsp--;
					if (state.failed) return;dbg.location(1077,18);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )*
					try { dbg.enterSubRule(322);

					loop322:
					while (true) {
						int alt322=2;
						try { dbg.enterDecision(322, decisionCanBacktrack[322]);

						try {
							isCyclicDecision = true;
							alt322 = dfa322.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(322);}

						switch (alt322) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term
							{
							dbg.location(1077,71);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |)
							int alt321=3;
							try { dbg.enterSubRule(321);
							try { dbg.enterDecision(321, decisionCanBacktrack[321]);

							try {
								isCyclicDecision = true;
								alt321 = dfa321.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(321);}

							switch (alt321) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:73: ws
									{
									dbg.location(1077,73);
									pushFollow(FOLLOW_ws_in_fnAttributeValue7216);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:78: ( ( ws )? SOLIDUS ( ws )? )
									{
									dbg.location(1077,78);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:78: ( ( ws )? SOLIDUS ( ws )? )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:79: ( ws )? SOLIDUS ( ws )?
									{
									dbg.location(1077,79);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:79: ( ws )?
									int alt319=2;
									try { dbg.enterSubRule(319);
									try { dbg.enterDecision(319, decisionCanBacktrack[319]);

									int LA319_0 = input.LA(1);
									if ( (LA319_0==COMMENT||LA319_0==NL||LA319_0==WS) ) {
										alt319=1;
									}
									} finally {dbg.exitDecision(319);}

									switch (alt319) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:79: ws
											{
											dbg.location(1077,79);
											pushFollow(FOLLOW_ws_in_fnAttributeValue7221);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(319);}
									dbg.location(1077,83);
									match(input,SOLIDUS,FOLLOW_SOLIDUS_in_fnAttributeValue7224); if (state.failed) return;dbg.location(1077,91);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:91: ( ws )?
									int alt320=2;
									try { dbg.enterSubRule(320);
									try { dbg.enterDecision(320, decisionCanBacktrack[320]);

									int LA320_0 = input.LA(1);
									if ( (LA320_0==COMMENT||LA320_0==NL||LA320_0==WS) ) {
										alt320=1;
									}
									} finally {dbg.exitDecision(320);}

									switch (alt320) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:91: ws
											{
											dbg.location(1077,91);
											pushFollow(FOLLOW_ws_in_fnAttributeValue7226);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(320);}

									}

									}
									break;
								case 3 :
									dbg.enterAlt(3);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:111: 
									{
									}
									break;

							}
							} finally {dbg.exitSubRule(321);}
							dbg.location(1077,113);
							pushFollow(FOLLOW_term_in_fnAttributeValue7235);
							term();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop322;
						}
					}
					} finally {dbg.exitSubRule(322);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1078:15: {...}? cp_math_expression
					{
					dbg.location(1078,15);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "fnAttributeValue", "isCssPreprocessorSource()");
					}dbg.location(1078,44);
					pushFollow(FOLLOW_cp_math_expression_in_fnAttributeValue7256);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1079, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fnAttributeValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fnAttributeValue"



	// $ANTLR start "hexColor"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:1: hexColor : HASH ;
	public final void hexColor() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "hexColor");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1081, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1082:5: ( HASH )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1082:7: HASH
			{
			dbg.location(1082,7);
			match(input,HASH,FOLLOW_HASH_in_hexColor7270); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1083, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "hexColor");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "hexColor"



	// $ANTLR start "ws"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1085:1: ws : ( WS | NL | COMMENT )+ ;
	public final void ws() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "ws");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1085, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1086:5: ( ( WS | NL | COMMENT )+ )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1086:7: ( WS | NL | COMMENT )+
			{
			dbg.location(1086,7);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1086:7: ( WS | NL | COMMENT )+
			int cnt324=0;
			try { dbg.enterSubRule(324);

			loop324:
			while (true) {
				int alt324=2;
				try { dbg.enterDecision(324, decisionCanBacktrack[324]);

				int LA324_0 = input.LA(1);
				if ( (LA324_0==COMMENT||LA324_0==NL||LA324_0==WS) ) {
					alt324=1;
				}

				} finally {dbg.exitDecision(324);}

				switch (alt324) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
					{
					dbg.location(1086,7);
					if ( input.LA(1)==COMMENT||input.LA(1)==NL||input.LA(1)==WS ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;

				default :
					if ( cnt324 >= 1 ) break loop324;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(324, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt324++;
			}
			} finally {dbg.exitSubRule(324);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1087, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "ws");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "ws"



	// $ANTLR start "cp_variable_declaration"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:1: cp_variable_declaration : ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list |{...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )* );
	public final void cp_variable_declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_variable_declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1092, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:5: ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list |{...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )* )
			int alt332=2;
			try { dbg.enterDecision(332, decisionCanBacktrack[332]);

			switch ( input.LA(1) ) {
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA332_1 = input.LA(2);
				if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt332=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt332=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 332, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA332_2 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt332=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt332=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 332, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case IDENT:
				{
				int LA332_3 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt332=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt332=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 332, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 332, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(332);}

			switch (alt332) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list
					{
					dbg.location(1094,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_variable_declaration", "isLessSource()");
					}dbg.location(1094,27);
					pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration7330);
					cp_variable();
					state._fsp--;
					if (state.failed) return;dbg.location(1094,39);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:39: ( ws )?
					int alt325=2;
					try { dbg.enterSubRule(325);
					try { dbg.enterDecision(325, decisionCanBacktrack[325]);

					int LA325_0 = input.LA(1);
					if ( (LA325_0==COMMENT||LA325_0==NL||LA325_0==WS) ) {
						alt325=1;
					}
					} finally {dbg.exitDecision(325);}

					switch (alt325) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:39: ws
							{
							dbg.location(1094,39);
							pushFollow(FOLLOW_ws_in_cp_variable_declaration7332);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(325);}
					dbg.location(1094,43);
					match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration7335); if (state.failed) return;dbg.location(1094,49);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:49: ( ws )?
					int alt326=2;
					try { dbg.enterSubRule(326);
					try { dbg.enterDecision(326, decisionCanBacktrack[326]);

					int LA326_0 = input.LA(1);
					if ( (LA326_0==COMMENT||LA326_0==NL||LA326_0==WS) ) {
						alt326=1;
					}
					} finally {dbg.exitDecision(326);}

					switch (alt326) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:49: ws
							{
							dbg.location(1094,49);
							pushFollow(FOLLOW_ws_in_cp_variable_declaration7337);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(326);}
					dbg.location(1094,53);
					pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration7340);
					cp_expression_list();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*
					{
					dbg.location(1096,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_variable_declaration", "isScssSource()");
					}dbg.location(1096,27);
					pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration7362);
					cp_variable();
					state._fsp--;
					if (state.failed) return;dbg.location(1096,39);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:39: ( ws )?
					int alt327=2;
					try { dbg.enterSubRule(327);
					try { dbg.enterDecision(327, decisionCanBacktrack[327]);

					int LA327_0 = input.LA(1);
					if ( (LA327_0==COMMENT||LA327_0==NL||LA327_0==WS) ) {
						alt327=1;
					}
					} finally {dbg.exitDecision(327);}

					switch (alt327) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:39: ws
							{
							dbg.location(1096,39);
							pushFollow(FOLLOW_ws_in_cp_variable_declaration7364);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(327);}
					dbg.location(1096,43);
					match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration7367); if (state.failed) return;dbg.location(1096,49);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:49: ( ws )?
					int alt328=2;
					try { dbg.enterSubRule(328);
					try { dbg.enterDecision(328, decisionCanBacktrack[328]);

					int LA328_0 = input.LA(1);
					if ( (LA328_0==COMMENT||LA328_0==NL||LA328_0==WS) ) {
						alt328=1;
					}
					} finally {dbg.exitDecision(328);}

					switch (alt328) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:49: ws
							{
							dbg.location(1096,49);
							pushFollow(FOLLOW_ws_in_cp_variable_declaration7369);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(328);}
					dbg.location(1096,53);
					pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration7372);
					cp_expression_list();
					state._fsp--;
					if (state.failed) return;dbg.location(1096,72);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:72: ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*
					try { dbg.enterSubRule(331);

					loop331:
					while (true) {
						int alt331=3;
						try { dbg.enterDecision(331, decisionCanBacktrack[331]);

						try {
							isCyclicDecision = true;
							alt331 = dfa331.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(331);}

						switch (alt331) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:73: ( ( ws )? SASS_DEFAULT )
							{
							dbg.location(1096,73);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:73: ( ( ws )? SASS_DEFAULT )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:74: ( ws )? SASS_DEFAULT
							{
							dbg.location(1096,74);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:74: ( ws )?
							int alt329=2;
							try { dbg.enterSubRule(329);
							try { dbg.enterDecision(329, decisionCanBacktrack[329]);

							int LA329_0 = input.LA(1);
							if ( (LA329_0==COMMENT||LA329_0==NL||LA329_0==WS) ) {
								alt329=1;
							}
							} finally {dbg.exitDecision(329);}

							switch (alt329) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:74: ws
									{
									dbg.location(1096,74);
									pushFollow(FOLLOW_ws_in_cp_variable_declaration7376);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(329);}
							dbg.location(1096,78);
							match(input,SASS_DEFAULT,FOLLOW_SASS_DEFAULT_in_cp_variable_declaration7379); if (state.failed) return;
							}

							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:94: ( ( ws )? SASS_GLOBAL )
							{
							dbg.location(1096,94);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:94: ( ( ws )? SASS_GLOBAL )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:95: ( ws )? SASS_GLOBAL
							{
							dbg.location(1096,95);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:95: ( ws )?
							int alt330=2;
							try { dbg.enterSubRule(330);
							try { dbg.enterDecision(330, decisionCanBacktrack[330]);

							int LA330_0 = input.LA(1);
							if ( (LA330_0==COMMENT||LA330_0==NL||LA330_0==WS) ) {
								alt330=1;
							}
							} finally {dbg.exitDecision(330);}

							switch (alt330) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:95: ws
									{
									dbg.location(1096,95);
									pushFollow(FOLLOW_ws_in_cp_variable_declaration7385);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(330);}
							dbg.location(1096,99);
							match(input,SASS_GLOBAL,FOLLOW_SASS_GLOBAL_in_cp_variable_declaration7388); if (state.failed) return;
							}

							}
							break;

						default :
							break loop331;
						}
					}
					} finally {dbg.exitSubRule(331);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1097, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_variable_declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_variable_declaration"



	// $ANTLR start "cp_variable"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1100:1: cp_variable : ({...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE | SASS_AT_ROOT | SASS_USE | SASS_FORWARD ) |{...}? ( SASS_VAR | IDENT DOT SASS_VAR ) );
	public final void cp_variable() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_variable");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1100, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1101:5: ({...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE | SASS_AT_ROOT | SASS_USE | SASS_FORWARD ) |{...}? ( SASS_VAR | IDENT DOT SASS_VAR ) )
			int alt334=2;
			try { dbg.enterDecision(334, decisionCanBacktrack[334]);

			int LA334_0 = input.LA(1);
			if ( (LA334_0==AT_IDENT||(LA334_0 >= BOTTOMCENTER_SYM && LA334_0 <= BOTTOMRIGHT_SYM)||LA334_0==CHARSET_SYM||LA334_0==COUNTER_STYLE_SYM||LA334_0==FONT_FACE_SYM||LA334_0==IMPORT_SYM||(LA334_0 >= LEFTBOTTOM_SYM && LA334_0 <= LEFTTOP_SYM)||LA334_0==MEDIA_SYM||LA334_0==MOZ_DOCUMENT_SYM||LA334_0==NAMESPACE_SYM||LA334_0==PAGE_SYM||(LA334_0 >= RIGHTBOTTOM_SYM && LA334_0 <= RIGHTTOP_SYM)||(LA334_0 >= SASS_AT_ROOT && LA334_0 <= SASS_DEBUG)||(LA334_0 >= SASS_EACH && LA334_0 <= SASS_ELSE)||LA334_0==SASS_EXTEND||(LA334_0 >= SASS_FOR && LA334_0 <= SASS_FUNCTION)||(LA334_0 >= SASS_IF && LA334_0 <= SASS_MIXIN)||(LA334_0 >= SASS_RETURN && LA334_0 <= SASS_USE)||(LA334_0 >= SASS_WARN && LA334_0 <= SASS_WHILE)||(LA334_0 >= TOPCENTER_SYM && LA334_0 <= TOPRIGHT_SYM)||LA334_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt334=1;
			}
			else if ( (LA334_0==IDENT||LA334_0==SASS_VAR) ) {
				alt334=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 334, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(334);}

			switch (alt334) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1103:9: {...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE | SASS_AT_ROOT | SASS_USE | SASS_FORWARD )
					{
					dbg.location(1103,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_variable", "isLessSource()");
					}dbg.location(1103,27);
					if ( input.LA(1)==AT_IDENT||(input.LA(1) >= BOTTOMCENTER_SYM && input.LA(1) <= BOTTOMRIGHT_SYM)||input.LA(1)==CHARSET_SYM||input.LA(1)==COUNTER_STYLE_SYM||input.LA(1)==FONT_FACE_SYM||input.LA(1)==IMPORT_SYM||(input.LA(1) >= LEFTBOTTOM_SYM && input.LA(1) <= LEFTTOP_SYM)||input.LA(1)==MEDIA_SYM||input.LA(1)==MOZ_DOCUMENT_SYM||input.LA(1)==NAMESPACE_SYM||input.LA(1)==PAGE_SYM||(input.LA(1) >= RIGHTBOTTOM_SYM && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= SASS_AT_ROOT && input.LA(1) <= SASS_DEBUG)||(input.LA(1) >= SASS_EACH && input.LA(1) <= SASS_ELSE)||input.LA(1)==SASS_EXTEND||(input.LA(1) >= SASS_FOR && input.LA(1) <= SASS_FUNCTION)||(input.LA(1) >= SASS_IF && input.LA(1) <= SASS_MIXIN)||(input.LA(1) >= SASS_RETURN && input.LA(1) <= SASS_USE)||(input.LA(1) >= SASS_WARN && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= TOPCENTER_SYM && input.LA(1) <= TOPRIGHT_SYM)||input.LA(1)==WEBKIT_KEYFRAMES_SYM ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1105:9: {...}? ( SASS_VAR | IDENT DOT SASS_VAR )
					{
					dbg.location(1105,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_variable", "isScssSource()");
					}dbg.location(1105,27);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1105:27: ( SASS_VAR | IDENT DOT SASS_VAR )
					int alt333=2;
					try { dbg.enterSubRule(333);
					try { dbg.enterDecision(333, decisionCanBacktrack[333]);

					int LA333_0 = input.LA(1);
					if ( (LA333_0==SASS_VAR) ) {
						alt333=1;
					}
					else if ( (LA333_0==IDENT) ) {
						alt333=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 333, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(333);}

					switch (alt333) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1105:29: SASS_VAR
							{
							dbg.location(1105,29);
							match(input,SASS_VAR,FOLLOW_SASS_VAR_in_cp_variable7620); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1105:40: IDENT DOT SASS_VAR
							{
							dbg.location(1105,40);
							match(input,IDENT,FOLLOW_IDENT_in_cp_variable7624); if (state.failed) return;dbg.location(1105,46);
							match(input,DOT,FOLLOW_DOT_in_cp_variable7626); if (state.failed) return;dbg.location(1105,50);
							match(input,SASS_VAR,FOLLOW_SASS_VAR_in_cp_variable7628); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(333);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1106, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_variable");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_variable"



	// $ANTLR start "cp_expression_list"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1109:1: cp_expression_list : ( cp_expression )=> cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* ;
	public final void cp_expression_list() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_expression_list");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1109, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1110:5: ( ( cp_expression )=> cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:5: ( cp_expression )=> cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
			{
			dbg.location(1111,24);
			pushFollow(FOLLOW_cp_expression_in_cp_expression_list7658);
			cp_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1112,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1112:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
			try { dbg.enterSubRule(337);

			loop337:
			while (true) {
				int alt337=2;
				try { dbg.enterDecision(337, decisionCanBacktrack[337]);

				try {
					isCyclicDecision = true;
					alt337 = dfa337.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(337);}

				switch (alt337) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1112:6: ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression
					{
					dbg.location(1112,37);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1112:37: ( ws )?
					int alt335=2;
					try { dbg.enterSubRule(335);
					try { dbg.enterDecision(335, decisionCanBacktrack[335]);

					int LA335_0 = input.LA(1);
					if ( (LA335_0==COMMENT||LA335_0==NL||LA335_0==WS) ) {
						alt335=1;
					}
					} finally {dbg.exitDecision(335);}

					switch (alt335) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1112:37: ws
							{
							dbg.location(1112,37);
							pushFollow(FOLLOW_ws_in_cp_expression_list7677);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(335);}
					dbg.location(1112,41);
					match(input,COMMA,FOLLOW_COMMA_in_cp_expression_list7680); if (state.failed) return;dbg.location(1112,47);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1112:47: ( ws )?
					int alt336=2;
					try { dbg.enterSubRule(336);
					try { dbg.enterDecision(336, decisionCanBacktrack[336]);

					int LA336_0 = input.LA(1);
					if ( (LA336_0==COMMENT||LA336_0==NL||LA336_0==WS) ) {
						alt336=1;
					}
					} finally {dbg.exitDecision(336);}

					switch (alt336) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1112:47: ws
							{
							dbg.location(1112,47);
							pushFollow(FOLLOW_ws_in_cp_expression_list7682);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(336);}
					dbg.location(1112,51);
					pushFollow(FOLLOW_cp_expression_in_cp_expression_list7685);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop337;
				}
			}
			} finally {dbg.exitSubRule(337);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1113, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_expression_list");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_expression_list"



	// $ANTLR start "cp_expression"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1125:1: cp_expression : ({...}? ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ) | ( cp_expression_atom )=> ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* ) |{...}? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN );
	public final void cp_expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1125, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:5: ({...}? ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ) | ( cp_expression_atom )=> ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* ) |{...}? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN )
			int alt346=3;
			try { dbg.enterDecision(346, decisionCanBacktrack[346]);

			int LA346_0 = input.LA(1);
			if ( (LA346_0==LBRACE) ) {
				alt346=1;
			}
			else if ( (LA346_0==NOT) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==MINUS||LA346_0==PLUS) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==IDENT) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==VARIABLE) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==LBRACKET) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==NUMBER) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==URANGE) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==PERCENTAGE) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==LENGTH) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==EMS) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==REM) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==EXS) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==ANGLE) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==TIME) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==FREQ) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==RESOLUTION) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==DIMENSION) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==STRING) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==TILDE) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==LESS_JS_STRING) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==GEN) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==URI) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==HASH) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==AT_IDENT||(LA346_0 >= BOTTOMCENTER_SYM && LA346_0 <= BOTTOMRIGHT_SYM)||LA346_0==CHARSET_SYM||LA346_0==COUNTER_STYLE_SYM||LA346_0==FONT_FACE_SYM||LA346_0==IMPORT_SYM||(LA346_0 >= LEFTBOTTOM_SYM && LA346_0 <= LEFTTOP_SYM)||LA346_0==MEDIA_SYM||LA346_0==MOZ_DOCUMENT_SYM||LA346_0==NAMESPACE_SYM||LA346_0==PAGE_SYM||(LA346_0 >= RIGHTBOTTOM_SYM && LA346_0 <= RIGHTTOP_SYM)||(LA346_0 >= SASS_AT_ROOT && LA346_0 <= SASS_DEBUG)||(LA346_0 >= SASS_EACH && LA346_0 <= SASS_ELSE)||LA346_0==SASS_EXTEND||(LA346_0 >= SASS_FOR && LA346_0 <= SASS_FUNCTION)||(LA346_0 >= SASS_IF && LA346_0 <= SASS_MIXIN)||(LA346_0 >= SASS_RETURN && LA346_0 <= SASS_USE)||(LA346_0 >= SASS_WARN && LA346_0 <= SASS_WHILE)||(LA346_0 >= TOPCENTER_SYM && LA346_0 <= TOPRIGHT_SYM)||LA346_0==WEBKIT_KEYFRAMES_SYM) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==SASS_VAR) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==LESS_AND) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==HASH_SYMBOL) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==AT_SIGN) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==PERCENTAGE_SYMBOL) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==IMPORTANT_SYM) && (synpred45_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==LPAREN) ) {
				int LA346_32 = input.LA(2);
				if ( (synpred45_Css3()) ) {
					alt346=2;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt346=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 32, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 346, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(346);}

			switch (alt346) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1127:5: {...}? ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
					{
					dbg.location(1127,5);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_expression", "isLessSource()");
					}dbg.location(1127,23);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1127:23: ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1127:24: LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
					{
					dbg.location(1127,24);
					match(input,LBRACE,FOLLOW_LBRACE_in_cp_expression7721); if (state.failed) return;dbg.location(1127,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1127:31: ( ws )?
					int alt338=2;
					try { dbg.enterSubRule(338);
					try { dbg.enterDecision(338, decisionCanBacktrack[338]);

					int LA338_0 = input.LA(1);
					if ( (LA338_0==COMMENT||LA338_0==NL||LA338_0==WS) ) {
						alt338=1;
					}
					} finally {dbg.exitDecision(338);}

					switch (alt338) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1127:31: ws
							{
							dbg.location(1127,31);
							pushFollow(FOLLOW_ws_in_cp_expression7723);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(338);}
					dbg.location(1127,35);
					pushFollow(FOLLOW_syncToFollow_in_cp_expression7726);
					syncToFollow();
					state._fsp--;
					if (state.failed) return;dbg.location(1127,48);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1127:48: ( declarations )?
					int alt339=2;
					try { dbg.enterSubRule(339);
					try { dbg.enterDecision(339, decisionCanBacktrack[339]);

					int LA339_0 = input.LA(1);
					if ( ((LA339_0 >= AT_IDENT && LA339_0 <= AT_SIGN)||(LA339_0 >= BOTTOMCENTER_SYM && LA339_0 <= BOTTOMRIGHT_SYM)||(LA339_0 >= CHARSET_SYM && LA339_0 <= COLON)||LA339_0==COUNTER_STYLE_SYM||(LA339_0 >= DCOLON && LA339_0 <= DOT)||LA339_0==FONT_FACE_SYM||(LA339_0 >= GEN && LA339_0 <= GREATER)||(LA339_0 >= HASH && LA339_0 <= HASH_SYMBOL)||LA339_0==IDENT||LA339_0==IMPORT_SYM||(LA339_0 >= LBRACKET && LA339_0 <= LEFTTOP_SYM)||LA339_0==LESS_AND||(LA339_0 >= MEDIA_SYM && LA339_0 <= MOZ_DOCUMENT_SYM)||LA339_0==NAMESPACE_SYM||LA339_0==PAGE_SYM||(LA339_0 >= PIPE && LA339_0 <= PLUS)||(LA339_0 >= RIGHTBOTTOM_SYM && LA339_0 <= RIGHTTOP_SYM)||(LA339_0 >= SASS_AT_ROOT && LA339_0 <= SASS_DEBUG)||(LA339_0 >= SASS_EACH && LA339_0 <= SASS_ELSE)||(LA339_0 >= SASS_ERROR && LA339_0 <= SASS_FUNCTION)||(LA339_0 >= SASS_IF && LA339_0 <= SASS_MIXIN)||(LA339_0 >= SASS_RETURN && LA339_0 <= SEMI)||LA339_0==STAR||LA339_0==SUPPORTS_SYM||LA339_0==TILDE||(LA339_0 >= TOPCENTER_SYM && LA339_0 <= TOPRIGHT_SYM)||LA339_0==VARIABLE||LA339_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt339=1;
					}
					} finally {dbg.exitDecision(339);}

					switch (alt339) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1127:48: declarations
							{
							dbg.location(1127,48);
							pushFollow(FOLLOW_declarations_in_cp_expression7728);
							declarations();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(339);}
					dbg.location(1127,62);
					match(input,RBRACE,FOLLOW_RBRACE_in_cp_expression7731); if (state.failed) return;
					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1128:7: ( cp_expression_atom )=> ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* )
					{
					dbg.location(1128,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1128:31: ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1128:32: cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
					{
					dbg.location(1128,32);
					pushFollow(FOLLOW_cp_expression_atom_in_cp_expression7747);
					cp_expression_atom();
					state._fsp--;
					if (state.failed) return;dbg.location(1129,5);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1129:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
					try { dbg.enterSubRule(343);

					loop343:
					while (true) {
						int alt343=3;
						try { dbg.enterDecision(343, decisionCanBacktrack[343]);

						try {
							isCyclicDecision = true;
							alt343 = dfa343.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(343);}

						switch (alt343) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:9: ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom
							{
							dbg.location(1130,39);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:39: ( ( ws )? cp_expression_operator ( ws )? )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:40: ( ws )? cp_expression_operator ( ws )?
							{
							dbg.location(1130,40);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:40: ( ws )?
							int alt340=2;
							try { dbg.enterSubRule(340);
							try { dbg.enterDecision(340, decisionCanBacktrack[340]);

							int LA340_0 = input.LA(1);
							if ( (LA340_0==COMMENT||LA340_0==NL||LA340_0==WS) ) {
								alt340=1;
							}
							} finally {dbg.exitDecision(340);}

							switch (alt340) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:40: ws
									{
									dbg.location(1130,40);
									pushFollow(FOLLOW_ws_in_cp_expression7771);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(340);}
							dbg.location(1130,44);
							pushFollow(FOLLOW_cp_expression_operator_in_cp_expression7774);
							cp_expression_operator();
							state._fsp--;
							if (state.failed) return;dbg.location(1130,67);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:67: ( ws )?
							int alt341=2;
							try { dbg.enterSubRule(341);
							try { dbg.enterDecision(341, decisionCanBacktrack[341]);

							int LA341_0 = input.LA(1);
							if ( (LA341_0==COMMENT||LA341_0==NL||LA341_0==WS) ) {
								alt341=1;
							}
							} finally {dbg.exitDecision(341);}

							switch (alt341) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:67: ws
									{
									dbg.location(1130,67);
									pushFollow(FOLLOW_ws_in_cp_expression7776);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(341);}

							}
							dbg.location(1130,72);
							pushFollow(FOLLOW_cp_expression_atom_in_cp_expression7780);
							cp_expression_atom();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:11: ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom
							{
							dbg.location(1131,37);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:37: ( ws )?
							int alt342=2;
							try { dbg.enterSubRule(342);
							try { dbg.enterDecision(342, decisionCanBacktrack[342]);

							int LA342_0 = input.LA(1);
							if ( (LA342_0==COMMENT||LA342_0==NL||LA342_0==WS) ) {
								alt342=1;
							}
							} finally {dbg.exitDecision(342);}

							switch (alt342) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:37: ws
									{
									dbg.location(1131,37);
									pushFollow(FOLLOW_ws_in_cp_expression7799);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(342);}
							dbg.location(1131,41);
							pushFollow(FOLLOW_cp_expression_atom_in_cp_expression7802);
							cp_expression_atom();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop343;
						}
					}
					} finally {dbg.exitSubRule(343);}

					}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1133:7: {...}? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN
					{
					dbg.location(1133,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_expression", "isScssSource()");
					}dbg.location(1133,25);
					match(input,LPAREN,FOLLOW_LPAREN_in_cp_expression7820); if (state.failed) return;dbg.location(1133,32);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1133:32: ( ws )?
					int alt344=2;
					try { dbg.enterSubRule(344);
					try { dbg.enterDecision(344, decisionCanBacktrack[344]);

					int LA344_0 = input.LA(1);
					if ( (LA344_0==COMMENT||LA344_0==NL||LA344_0==WS) ) {
						alt344=1;
					}
					} finally {dbg.exitDecision(344);}

					switch (alt344) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1133:32: ws
							{
							dbg.location(1133,32);
							pushFollow(FOLLOW_ws_in_cp_expression7822);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(344);}
					dbg.location(1133,36);
					pushFollow(FOLLOW_syncToFollow_in_cp_expression7825);
					syncToFollow();
					state._fsp--;
					if (state.failed) return;dbg.location(1133,49);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1133:49: ( sass_map_pairs )?
					int alt345=2;
					try { dbg.enterSubRule(345);
					try { dbg.enterDecision(345, decisionCanBacktrack[345]);

					int LA345_0 = input.LA(1);
					if ( ((LA345_0 >= AT_IDENT && LA345_0 <= AT_SIGN)||(LA345_0 >= BOTTOMCENTER_SYM && LA345_0 <= BOTTOMRIGHT_SYM)||LA345_0==CHARSET_SYM||LA345_0==COMMA||LA345_0==COUNTER_STYLE_SYM||LA345_0==FONT_FACE_SYM||LA345_0==GEN||LA345_0==HASH_SYMBOL||LA345_0==IDENT||LA345_0==IMPORT_SYM||(LA345_0 >= LEFTBOTTOM_SYM && LA345_0 <= LEFTTOP_SYM)||(LA345_0 >= MEDIA_SYM && LA345_0 <= MOZ_DOCUMENT_SYM)||LA345_0==NAMESPACE_SYM||LA345_0==NUMBER||LA345_0==PAGE_SYM||(LA345_0 >= RIGHTBOTTOM_SYM && LA345_0 <= RIGHTTOP_SYM)||(LA345_0 >= SASS_AT_ROOT && LA345_0 <= SASS_DEBUG)||(LA345_0 >= SASS_EACH && LA345_0 <= SASS_ELSE)||LA345_0==SASS_EXTEND||(LA345_0 >= SASS_FOR && LA345_0 <= SASS_FUNCTION)||(LA345_0 >= SASS_IF && LA345_0 <= SASS_MIXIN)||(LA345_0 >= SASS_RETURN && LA345_0 <= SASS_WHILE)||LA345_0==STRING||(LA345_0 >= TOPCENTER_SYM && LA345_0 <= TOPRIGHT_SYM)||LA345_0==VARIABLE||LA345_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt345=1;
					}
					} finally {dbg.exitDecision(345);}

					switch (alt345) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1133:49: sass_map_pairs
							{
							dbg.location(1133,49);
							pushFollow(FOLLOW_sass_map_pairs_in_cp_expression7827);
							sass_map_pairs();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(345);}
					dbg.location(1133,65);
					match(input,RPAREN,FOLLOW_RPAREN_in_cp_expression7830); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1134, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_expression"



	// $ANTLR start "cp_expression_operator"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1136:1: cp_expression_operator : ( key_or | key_and | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ );
	public final void cp_expression_operator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_expression_operator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1136, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1137:5: ( key_or | key_and | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ )
			int alt347=8;
			try { dbg.enterDecision(347, decisionCanBacktrack[347]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA347_1 = input.LA(2);
				if ( (evalPredicate(tokenNameEquals("or"),"tokenNameEquals(\"or\")")) ) {
					alt347=1;
				}
				else if ( (evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")")) ) {
					alt347=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 347, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CP_EQ:
				{
				alt347=3;
				}
				break;
			case CP_NOT_EQ:
				{
				alt347=4;
				}
				break;
			case LESS:
				{
				alt347=5;
				}
				break;
			case LESS_OR_EQ:
				{
				alt347=6;
				}
				break;
			case GREATER:
				{
				alt347=7;
				}
				break;
			case GREATER_OR_EQ:
				{
				alt347=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 347, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(347);}

			switch (alt347) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:5: key_or
					{
					dbg.location(1138,5);
					pushFollow(FOLLOW_key_or_in_cp_expression_operator7851);
					key_or();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:14: key_and
					{
					dbg.location(1138,14);
					pushFollow(FOLLOW_key_and_in_cp_expression_operator7855);
					key_and();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:25: CP_EQ
					{
					dbg.location(1138,25);
					match(input,CP_EQ,FOLLOW_CP_EQ_in_cp_expression_operator7860); if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:33: CP_NOT_EQ
					{
					dbg.location(1138,33);
					match(input,CP_NOT_EQ,FOLLOW_CP_NOT_EQ_in_cp_expression_operator7864); if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:45: LESS
					{
					dbg.location(1138,45);
					match(input,LESS,FOLLOW_LESS_in_cp_expression_operator7868); if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:52: LESS_OR_EQ
					{
					dbg.location(1138,52);
					match(input,LESS_OR_EQ,FOLLOW_LESS_OR_EQ_in_cp_expression_operator7872); if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:65: GREATER
					{
					dbg.location(1138,65);
					match(input,GREATER,FOLLOW_GREATER_in_cp_expression_operator7876); if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:75: GREATER_OR_EQ
					{
					dbg.location(1138,75);
					match(input,GREATER_OR_EQ,FOLLOW_GREATER_OR_EQ_in_cp_expression_operator7880); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1139, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_expression_operator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_expression_operator"



	// $ANTLR start "cp_expression_atom"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1141:1: cp_expression_atom : ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN ) ;
	public final void cp_expression_atom() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_expression_atom");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1141, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:5: ( ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1143:9: ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN )
			{
			dbg.location(1143,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1143:9: ( NOT ( ws )? )?
			int alt349=2;
			try { dbg.enterSubRule(349);
			try { dbg.enterDecision(349, decisionCanBacktrack[349]);

			int LA349_0 = input.LA(1);
			if ( (LA349_0==NOT) ) {
				alt349=1;
			}
			} finally {dbg.exitDecision(349);}

			switch (alt349) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1143:10: NOT ( ws )?
					{
					dbg.location(1143,10);
					match(input,NOT,FOLLOW_NOT_in_cp_expression_atom7906); if (state.failed) return;dbg.location(1143,14);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1143:14: ( ws )?
					int alt348=2;
					try { dbg.enterSubRule(348);
					try { dbg.enterDecision(348, decisionCanBacktrack[348]);

					int LA348_0 = input.LA(1);
					if ( (LA348_0==COMMENT||LA348_0==NL||LA348_0==WS) ) {
						alt348=1;
					}
					} finally {dbg.exitDecision(348);}

					switch (alt348) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1143:14: ws
							{
							dbg.location(1143,14);
							pushFollow(FOLLOW_ws_in_cp_expression_atom7908);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(348);}

					}
					break;

			}
			} finally {dbg.exitSubRule(349);}
			dbg.location(1144,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1144:9: ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN )
			int alt353=2;
			try { dbg.enterSubRule(353);
			try { dbg.enterDecision(353, decisionCanBacktrack[353]);

			int LA353_0 = input.LA(1);
			if ( (LA353_0==MINUS||LA353_0==PLUS) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==IDENT) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==VARIABLE) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==LBRACKET) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==NUMBER) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==URANGE) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==PERCENTAGE) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==LENGTH) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==EMS) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==REM) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==EXS) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==ANGLE) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==TIME) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==FREQ) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==RESOLUTION) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==DIMENSION) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==STRING) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==TILDE) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==LESS_JS_STRING) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==GEN) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==URI) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==HASH) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==AT_IDENT||(LA353_0 >= BOTTOMCENTER_SYM && LA353_0 <= BOTTOMRIGHT_SYM)||LA353_0==CHARSET_SYM||LA353_0==COUNTER_STYLE_SYM||LA353_0==FONT_FACE_SYM||LA353_0==IMPORT_SYM||(LA353_0 >= LEFTBOTTOM_SYM && LA353_0 <= LEFTTOP_SYM)||LA353_0==MEDIA_SYM||LA353_0==MOZ_DOCUMENT_SYM||LA353_0==NAMESPACE_SYM||LA353_0==PAGE_SYM||(LA353_0 >= RIGHTBOTTOM_SYM && LA353_0 <= RIGHTTOP_SYM)||(LA353_0 >= SASS_AT_ROOT && LA353_0 <= SASS_DEBUG)||(LA353_0 >= SASS_EACH && LA353_0 <= SASS_ELSE)||LA353_0==SASS_EXTEND||(LA353_0 >= SASS_FOR && LA353_0 <= SASS_FUNCTION)||(LA353_0 >= SASS_IF && LA353_0 <= SASS_MIXIN)||(LA353_0 >= SASS_RETURN && LA353_0 <= SASS_USE)||(LA353_0 >= SASS_WARN && LA353_0 <= SASS_WHILE)||(LA353_0 >= TOPCENTER_SYM && LA353_0 <= TOPRIGHT_SYM)||LA353_0==WEBKIT_KEYFRAMES_SYM) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==SASS_VAR) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==LESS_AND) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==HASH_SYMBOL) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==AT_SIGN) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==PERCENTAGE_SYMBOL) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==IMPORTANT_SYM) && (synpred48_Css3())) {
				alt353=1;
			}
			else if ( (LA353_0==LPAREN) ) {
				int LA353_30 = input.LA(2);
				if ( (synpred48_Css3()) ) {
					alt353=1;
				}
				else if ( (true) ) {
					alt353=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 353, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(353);}

			switch (alt353) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1145:13: ( cp_math_expression )=> cp_math_expression
					{
					dbg.location(1145,35);
					pushFollow(FOLLOW_cp_math_expression_in_cp_expression_atom7939);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:15: LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN
					{
					dbg.location(1146,15);
					match(input,LPAREN,FOLLOW_LPAREN_in_cp_expression_atom7955); if (state.failed) return;dbg.location(1146,22);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:22: ( ws )?
					int alt350=2;
					try { dbg.enterSubRule(350);
					try { dbg.enterDecision(350, decisionCanBacktrack[350]);

					int LA350_0 = input.LA(1);
					if ( (LA350_0==COMMENT||LA350_0==NL||LA350_0==WS) ) {
						alt350=1;
					}
					} finally {dbg.exitDecision(350);}

					switch (alt350) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:22: ws
							{
							dbg.location(1146,22);
							pushFollow(FOLLOW_ws_in_cp_expression_atom7957);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(350);}
					dbg.location(1146,26);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:26: ( cp_expression_list ( ws )? )?
					int alt352=2;
					try { dbg.enterSubRule(352);
					try { dbg.enterDecision(352, decisionCanBacktrack[352]);

					int LA352_0 = input.LA(1);
					if ( ((LA352_0 >= ANGLE && LA352_0 <= AT_SIGN)||(LA352_0 >= BOTTOMCENTER_SYM && LA352_0 <= BOTTOMRIGHT_SYM)||LA352_0==CHARSET_SYM||LA352_0==COUNTER_STYLE_SYM||LA352_0==DIMENSION||LA352_0==EMS||LA352_0==EXS||(LA352_0 >= FONT_FACE_SYM && LA352_0 <= FREQ)||LA352_0==GEN||(LA352_0 >= HASH && LA352_0 <= HASH_SYMBOL)||(LA352_0 >= IDENT && LA352_0 <= IMPORT_SYM)||(LA352_0 >= LBRACE && LA352_0 <= LENGTH)||(LA352_0 >= LESS_AND && LA352_0 <= LESS_JS_STRING)||LA352_0==LPAREN||(LA352_0 >= MEDIA_SYM && LA352_0 <= MOZ_DOCUMENT_SYM)||LA352_0==NAMESPACE_SYM||(LA352_0 >= NOT && LA352_0 <= NUMBER)||(LA352_0 >= PAGE_SYM && LA352_0 <= PERCENTAGE_SYMBOL)||LA352_0==PLUS||(LA352_0 >= REM && LA352_0 <= RIGHTTOP_SYM)||(LA352_0 >= SASS_AT_ROOT && LA352_0 <= SASS_DEBUG)||(LA352_0 >= SASS_EACH && LA352_0 <= SASS_ELSE)||LA352_0==SASS_EXTEND||(LA352_0 >= SASS_FOR && LA352_0 <= SASS_FUNCTION)||(LA352_0 >= SASS_IF && LA352_0 <= SASS_MIXIN)||(LA352_0 >= SASS_RETURN && LA352_0 <= SASS_WHILE)||LA352_0==STRING||(LA352_0 >= TILDE && LA352_0 <= TOPRIGHT_SYM)||(LA352_0 >= URANGE && LA352_0 <= URI)||LA352_0==VARIABLE||LA352_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt352=1;
					}
					} finally {dbg.exitDecision(352);}

					switch (alt352) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:27: cp_expression_list ( ws )?
							{
							dbg.location(1146,27);
							pushFollow(FOLLOW_cp_expression_list_in_cp_expression_atom7961);
							cp_expression_list();
							state._fsp--;
							if (state.failed) return;dbg.location(1146,46);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:46: ( ws )?
							int alt351=2;
							try { dbg.enterSubRule(351);
							try { dbg.enterDecision(351, decisionCanBacktrack[351]);

							int LA351_0 = input.LA(1);
							if ( (LA351_0==COMMENT||LA351_0==NL||LA351_0==WS) ) {
								alt351=1;
							}
							} finally {dbg.exitDecision(351);}

							switch (alt351) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:46: ws
									{
									dbg.location(1146,46);
									pushFollow(FOLLOW_ws_in_cp_expression_atom7963);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(351);}

							}
							break;

					}
					} finally {dbg.exitSubRule(352);}
					dbg.location(1146,52);
					match(input,RPAREN,FOLLOW_RPAREN_in_cp_expression_atom7968); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(353);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1148, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_expression_atom");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_expression_atom"



	// $ANTLR start "cp_math_expressions"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1151:1: cp_math_expressions : cp_math_expression ( ws cp_math_expression )* ;
	public final void cp_math_expressions() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_math_expressions");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1151, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1152:5: ( cp_math_expression ( ws cp_math_expression )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1153:5: cp_math_expression ( ws cp_math_expression )*
			{
			dbg.location(1153,5);
			pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions8000);
			cp_math_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1154,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:5: ( ws cp_math_expression )*
			try { dbg.enterSubRule(354);

			loop354:
			while (true) {
				int alt354=2;
				try { dbg.enterDecision(354, decisionCanBacktrack[354]);

				int LA354_0 = input.LA(1);
				if ( (LA354_0==COMMENT||LA354_0==NL||LA354_0==WS) ) {
					alt354=1;
				}

				} finally {dbg.exitDecision(354);}

				switch (alt354) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:6: ws cp_math_expression
					{
					dbg.location(1154,6);
					pushFollow(FOLLOW_ws_in_cp_math_expressions8007);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(1154,9);
					pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions8009);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop354;
				}
			}
			} finally {dbg.exitSubRule(354);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1155, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_math_expressions");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_math_expressions"



	// $ANTLR start "cp_math_expression"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1169:1: cp_math_expression : cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* ;
	public final void cp_math_expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_math_expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1169, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1170:5: ( cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1170:10: cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
			{
			dbg.location(1170,10);
			pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression8043);
			cp_math_expression_atom();
			state._fsp--;
			if (state.failed) return;dbg.location(1171,10);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
			try { dbg.enterSubRule(357);

			loop357:
			while (true) {
				int alt357=2;
				try { dbg.enterDecision(357, decisionCanBacktrack[357]);

				try {
					isCyclicDecision = true;
					alt357 = dfa357.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(357);}

				switch (alt357) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1172:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom
					{
					dbg.location(1172,48);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1172:48: ( ws )?
					int alt355=2;
					try { dbg.enterSubRule(355);
					try { dbg.enterDecision(355, decisionCanBacktrack[355]);

					int LA355_0 = input.LA(1);
					if ( (LA355_0==COMMENT||LA355_0==NL||LA355_0==WS) ) {
						alt355=1;
					}
					} finally {dbg.exitDecision(355);}

					switch (alt355) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1172:48: ws
							{
							dbg.location(1172,48);
							pushFollow(FOLLOW_ws_in_cp_math_expression8085);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(355);}
					dbg.location(1172,52);
					if ( input.LA(1)==MINUS||input.LA(1)==PLUS||(input.LA(1) >= SOLIDUS && input.LA(1) <= STAR) ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(1172,78);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1172:78: ( ws )?
					int alt356=2;
					try { dbg.enterSubRule(356);
					try { dbg.enterDecision(356, decisionCanBacktrack[356]);

					int LA356_0 = input.LA(1);
					if ( (LA356_0==COMMENT||LA356_0==NL||LA356_0==WS) ) {
						alt356=1;
					}
					} finally {dbg.exitDecision(356);}

					switch (alt356) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1172:78: ws
							{
							dbg.location(1172,78);
							pushFollow(FOLLOW_ws_in_cp_math_expression8098);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(356);}
					dbg.location(1172,82);
					pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression8101);
					cp_math_expression_atom();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop357;
				}
			}
			} finally {dbg.exitSubRule(357);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1174, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_math_expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_math_expression"



	// $ANTLR start "cp_math_expression_atom"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1176:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );
	public final void cp_math_expression_atom() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_math_expression_atom");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1176, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1177:5: ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN )
			int alt362=3;
			try { dbg.enterDecision(362, decisionCanBacktrack[362]);

			try {
				isCyclicDecision = true;
				alt362 = dfa362.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(362);}

			switch (alt362) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1178:5: term
					{
					dbg.location(1178,5);
					pushFollow(FOLLOW_term_in_cp_math_expression_atom8134);
					term();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:7: IMPORTANT_SYM
					{
					dbg.location(1179,7);
					match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom8142); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1180:7: ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN
					{
					dbg.location(1180,7);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1180:7: ( unaryOperator ( ws )? )?
					int alt359=2;
					try { dbg.enterSubRule(359);
					try { dbg.enterDecision(359, decisionCanBacktrack[359]);

					int LA359_0 = input.LA(1);
					if ( (LA359_0==MINUS||LA359_0==PLUS) ) {
						alt359=1;
					}
					} finally {dbg.exitDecision(359);}

					switch (alt359) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1180:9: unaryOperator ( ws )?
							{
							dbg.location(1180,9);
							pushFollow(FOLLOW_unaryOperator_in_cp_math_expression_atom8153);
							unaryOperator();
							state._fsp--;
							if (state.failed) return;dbg.location(1180,23);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1180:23: ( ws )?
							int alt358=2;
							try { dbg.enterSubRule(358);
							try { dbg.enterDecision(358, decisionCanBacktrack[358]);

							int LA358_0 = input.LA(1);
							if ( (LA358_0==COMMENT||LA358_0==NL||LA358_0==WS) ) {
								alt358=1;
							}
							} finally {dbg.exitDecision(358);}

							switch (alt358) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1180:23: ws
									{
									dbg.location(1180,23);
									pushFollow(FOLLOW_ws_in_cp_math_expression_atom8155);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(358);}

							}
							break;

					}
					} finally {dbg.exitSubRule(359);}
					dbg.location(1180,30);
					match(input,LPAREN,FOLLOW_LPAREN_in_cp_math_expression_atom8161); if (state.failed) return;dbg.location(1180,37);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1180:37: ( ws )?
					int alt360=2;
					try { dbg.enterSubRule(360);
					try { dbg.enterDecision(360, decisionCanBacktrack[360]);

					int LA360_0 = input.LA(1);
					if ( (LA360_0==COMMENT||LA360_0==NL||LA360_0==WS) ) {
						alt360=1;
					}
					} finally {dbg.exitDecision(360);}

					switch (alt360) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1180:37: ws
							{
							dbg.location(1180,37);
							pushFollow(FOLLOW_ws_in_cp_math_expression_atom8163);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(360);}
					dbg.location(1180,41);
					pushFollow(FOLLOW_cp_math_expression_in_cp_math_expression_atom8166);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;dbg.location(1180,60);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1180:60: ( ws )?
					int alt361=2;
					try { dbg.enterSubRule(361);
					try { dbg.enterDecision(361, decisionCanBacktrack[361]);

					int LA361_0 = input.LA(1);
					if ( (LA361_0==COMMENT||LA361_0==NL||LA361_0==WS) ) {
						alt361=1;
					}
					} finally {dbg.exitDecision(361);}

					switch (alt361) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1180:60: ws
							{
							dbg.location(1180,60);
							pushFollow(FOLLOW_ws_in_cp_math_expression_atom8168);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(361);}
					dbg.location(1180,64);
					match(input,RPAREN,FOLLOW_RPAREN_in_cp_math_expression_atom8171); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1181, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_math_expression_atom");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_math_expression_atom"



	// $ANTLR start "cp_mixin_declaration"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1189:1: cp_mixin_declaration : ({...}? ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) ) ( ( ws )? less_mixin_guarded )? |{...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block ;
	public final void cp_mixin_declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1189, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1190:5: ( ({...}? ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) ) ( ( ws )? less_mixin_guarded )? |{...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1191:5: ({...}? ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) ) ( ( ws )? less_mixin_guarded )? |{...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block
			{
			dbg.location(1191,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1191:5: ({...}? ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) ) ( ( ws )? less_mixin_guarded )? |{...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? )
			int alt374=2;
			try { dbg.enterSubRule(374);
			try { dbg.enterDecision(374, decisionCanBacktrack[374]);

			int LA374_0 = input.LA(1);
			if ( (LA374_0==DOT||LA374_0==HASH||LA374_0==LESS_AND) ) {
				alt374=1;
			}
			else if ( (LA374_0==SASS_MIXIN) ) {
				alt374=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 374, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(374);}

			switch (alt374) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:9: {...}? ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) ) ( ( ws )? less_mixin_guarded )?
					{
					dbg.location(1192,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_mixin_declaration", "isLessSource()");
					}dbg.location(1192,27);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:27: ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) )
					int alt367=2;
					try { dbg.enterSubRule(367);
					try { dbg.enterDecision(367, decisionCanBacktrack[367]);

					int LA367_0 = input.LA(1);
					if ( (LA367_0==LESS_AND) ) {
						alt367=1;
					}
					else if ( (LA367_0==DOT||LA367_0==HASH) ) {
						alt367=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 367, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(367);}

					switch (alt367) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:28: LESS_AND
							{
							dbg.location(1192,28);
							match(input,LESS_AND,FOLLOW_LESS_AND_in_cp_mixin_declaration8211); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:39: ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )
							{
							dbg.location(1192,39);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:39: ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:40: ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN
							{
							dbg.location(1192,40);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:40: ( ( DOT cp_mixin_name ) | HASH )
							int alt363=2;
							try { dbg.enterSubRule(363);
							try { dbg.enterDecision(363, decisionCanBacktrack[363]);

							int LA363_0 = input.LA(1);
							if ( (LA363_0==DOT) ) {
								alt363=1;
							}
							else if ( (LA363_0==HASH) ) {
								alt363=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return;}
								NoViableAltException nvae =
									new NoViableAltException("", 363, 0, input);
								dbg.recognitionException(nvae);
								throw nvae;
							}

							} finally {dbg.exitDecision(363);}

							switch (alt363) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:41: ( DOT cp_mixin_name )
									{
									dbg.location(1192,41);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:41: ( DOT cp_mixin_name )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:42: DOT cp_mixin_name
									{
									dbg.location(1192,42);
									match(input,DOT,FOLLOW_DOT_in_cp_mixin_declaration8218); if (state.failed) return;dbg.location(1192,46);
									pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration8220);
									cp_mixin_name();
									state._fsp--;
									if (state.failed) return;
									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:63: HASH
									{
									dbg.location(1192,63);
									match(input,HASH,FOLLOW_HASH_in_cp_mixin_declaration8225); if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(363);}
							dbg.location(1192,69);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:69: ( ws )?
							int alt364=2;
							try { dbg.enterSubRule(364);
							try { dbg.enterDecision(364, decisionCanBacktrack[364]);

							int LA364_0 = input.LA(1);
							if ( (LA364_0==COMMENT||LA364_0==NL||LA364_0==WS) ) {
								alt364=1;
							}
							} finally {dbg.exitDecision(364);}

							switch (alt364) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:69: ws
									{
									dbg.location(1192,69);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration8228);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(364);}
							dbg.location(1192,73);
							match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration8231); if (state.failed) return;dbg.location(1192,80);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:80: ( ws )?
							int alt365=2;
							try { dbg.enterSubRule(365);
							try { dbg.enterDecision(365, decisionCanBacktrack[365]);

							int LA365_0 = input.LA(1);
							if ( (LA365_0==COMMENT||LA365_0==NL||LA365_0==WS) ) {
								alt365=1;
							}
							} finally {dbg.exitDecision(365);}

							switch (alt365) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:80: ws
									{
									dbg.location(1192,80);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration8233);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(365);}
							dbg.location(1192,84);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:84: ( cp_args_list )?
							int alt366=2;
							try { dbg.enterSubRule(366);
							try { dbg.enterDecision(366, decisionCanBacktrack[366]);

							int LA366_0 = input.LA(1);
							if ( (LA366_0==AT_IDENT||(LA366_0 >= BOTTOMCENTER_SYM && LA366_0 <= BOTTOMRIGHT_SYM)||LA366_0==CHARSET_SYM||(LA366_0 >= COUNTER_STYLE_SYM && LA366_0 <= CP_DOTS)||LA366_0==FONT_FACE_SYM||LA366_0==IDENT||LA366_0==IMPORT_SYM||(LA366_0 >= LEFTBOTTOM_SYM && LA366_0 <= LEFTTOP_SYM)||LA366_0==LESS_REST||LA366_0==MEDIA_SYM||LA366_0==MOZ_DOCUMENT_SYM||LA366_0==NAMESPACE_SYM||LA366_0==PAGE_SYM||(LA366_0 >= RIGHTBOTTOM_SYM && LA366_0 <= RIGHTTOP_SYM)||(LA366_0 >= SASS_AT_ROOT && LA366_0 <= SASS_DEBUG)||(LA366_0 >= SASS_EACH && LA366_0 <= SASS_ELSE)||LA366_0==SASS_EXTEND||(LA366_0 >= SASS_FOR && LA366_0 <= SASS_FUNCTION)||(LA366_0 >= SASS_IF && LA366_0 <= SASS_MIXIN)||(LA366_0 >= SASS_RETURN && LA366_0 <= SASS_WHILE)||(LA366_0 >= TOPCENTER_SYM && LA366_0 <= TOPRIGHT_SYM)||LA366_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt366=1;
							}
							} finally {dbg.exitDecision(366);}

							switch (alt366) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:84: cp_args_list
									{
									dbg.location(1192,84);
									pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration8236);
									cp_args_list();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(366);}
							dbg.location(1192,98);
							match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration8239); if (state.failed) return;
							}

							}
							break;

					}
					} finally {dbg.exitSubRule(367);}
					dbg.location(1192,107);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:107: ( ( ws )? less_mixin_guarded )?
					int alt369=2;
					try { dbg.enterSubRule(369);
					try { dbg.enterDecision(369, decisionCanBacktrack[369]);

					try {
						isCyclicDecision = true;
						alt369 = dfa369.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(369);}

					switch (alt369) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:108: ( ws )? less_mixin_guarded
							{
							dbg.location(1192,108);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:108: ( ws )?
							int alt368=2;
							try { dbg.enterSubRule(368);
							try { dbg.enterDecision(368, decisionCanBacktrack[368]);

							int LA368_0 = input.LA(1);
							if ( (LA368_0==COMMENT||LA368_0==NL||LA368_0==WS) ) {
								alt368=1;
							}
							} finally {dbg.exitDecision(368);}

							switch (alt368) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:108: ws
									{
									dbg.location(1192,108);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration8244);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(368);}
							dbg.location(1192,112);
							pushFollow(FOLLOW_less_mixin_guarded_in_cp_mixin_declaration8247);
							less_mixin_guarded();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(369);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1194:9: {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
					{
					dbg.location(1194,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_mixin_declaration", "isScssSource()");
					}dbg.location(1194,27);
					match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_cp_mixin_declaration8271); if (state.failed) return;dbg.location(1194,38);
					pushFollow(FOLLOW_ws_in_cp_mixin_declaration8273);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(1194,41);
					pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration8275);
					cp_mixin_name();
					state._fsp--;
					if (state.failed) return;dbg.location(1194,55);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1194:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
					int alt373=2;
					try { dbg.enterSubRule(373);
					try { dbg.enterDecision(373, decisionCanBacktrack[373]);

					try {
						isCyclicDecision = true;
						alt373 = dfa373.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(373);}

					switch (alt373) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1194:56: ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN
							{
							dbg.location(1194,56);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1194:56: ( ws )?
							int alt370=2;
							try { dbg.enterSubRule(370);
							try { dbg.enterDecision(370, decisionCanBacktrack[370]);

							int LA370_0 = input.LA(1);
							if ( (LA370_0==COMMENT||LA370_0==NL||LA370_0==WS) ) {
								alt370=1;
							}
							} finally {dbg.exitDecision(370);}

							switch (alt370) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1194:56: ws
									{
									dbg.location(1194,56);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration8278);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(370);}
							dbg.location(1194,60);
							match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration8281); if (state.failed) return;dbg.location(1194,67);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1194:67: ( ws )?
							int alt371=2;
							try { dbg.enterSubRule(371);
							try { dbg.enterDecision(371, decisionCanBacktrack[371]);

							int LA371_0 = input.LA(1);
							if ( (LA371_0==COMMENT||LA371_0==NL||LA371_0==WS) ) {
								alt371=1;
							}
							} finally {dbg.exitDecision(371);}

							switch (alt371) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1194:67: ws
									{
									dbg.location(1194,67);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration8283);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(371);}
							dbg.location(1194,71);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1194:71: ( cp_args_list )?
							int alt372=2;
							try { dbg.enterSubRule(372);
							try { dbg.enterDecision(372, decisionCanBacktrack[372]);

							int LA372_0 = input.LA(1);
							if ( (LA372_0==AT_IDENT||(LA372_0 >= BOTTOMCENTER_SYM && LA372_0 <= BOTTOMRIGHT_SYM)||LA372_0==CHARSET_SYM||(LA372_0 >= COUNTER_STYLE_SYM && LA372_0 <= CP_DOTS)||LA372_0==FONT_FACE_SYM||LA372_0==IDENT||LA372_0==IMPORT_SYM||(LA372_0 >= LEFTBOTTOM_SYM && LA372_0 <= LEFTTOP_SYM)||LA372_0==LESS_REST||LA372_0==MEDIA_SYM||LA372_0==MOZ_DOCUMENT_SYM||LA372_0==NAMESPACE_SYM||LA372_0==PAGE_SYM||(LA372_0 >= RIGHTBOTTOM_SYM && LA372_0 <= RIGHTTOP_SYM)||(LA372_0 >= SASS_AT_ROOT && LA372_0 <= SASS_DEBUG)||(LA372_0 >= SASS_EACH && LA372_0 <= SASS_ELSE)||LA372_0==SASS_EXTEND||(LA372_0 >= SASS_FOR && LA372_0 <= SASS_FUNCTION)||(LA372_0 >= SASS_IF && LA372_0 <= SASS_MIXIN)||(LA372_0 >= SASS_RETURN && LA372_0 <= SASS_WHILE)||(LA372_0 >= TOPCENTER_SYM && LA372_0 <= TOPRIGHT_SYM)||LA372_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt372=1;
							}
							} finally {dbg.exitDecision(372);}

							switch (alt372) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1194:71: cp_args_list
									{
									dbg.location(1194,71);
									pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration8286);
									cp_args_list();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(372);}
							dbg.location(1194,85);
							match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration8289); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(373);}

					}
					break;

			}
			} finally {dbg.exitSubRule(374);}
			dbg.location(1196,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1196:5: ( ws )?
			int alt375=2;
			try { dbg.enterSubRule(375);
			try { dbg.enterDecision(375, decisionCanBacktrack[375]);

			int LA375_0 = input.LA(1);
			if ( (LA375_0==COMMENT||LA375_0==NL||LA375_0==WS) ) {
				alt375=1;
			}
			} finally {dbg.exitDecision(375);}

			switch (alt375) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1196:5: ws
					{
					dbg.location(1196,5);
					pushFollow(FOLLOW_ws_in_cp_mixin_declaration8303);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(375);}
			dbg.location(1196,9);
			pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_declaration8306);
			cp_mixin_block();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1197, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_declaration"



	// $ANTLR start "cp_mixin_call"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1201:1: cp_mixin_call : ({...}? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )* ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )? |{...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) ;
	public final void cp_mixin_call() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1201, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1202:5: ( ({...}? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )* ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )? |{...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1203:5: ({...}? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )* ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )? |{...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
			{
			dbg.location(1203,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1203:5: ({...}? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )* ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )? |{...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
			int alt391=2;
			try { dbg.enterSubRule(391);
			try { dbg.enterDecision(391, decisionCanBacktrack[391]);

			int LA391_0 = input.LA(1);
			if ( (LA391_0==AT_IDENT||LA391_0==DOT||LA391_0==HASH||LA391_0==LESS_AND) ) {
				alt391=1;
			}
			else if ( (LA391_0==SASS_INCLUDE) ) {
				alt391=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 391, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(391);}

			switch (alt391) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:9: {...}? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )* ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )?
					{
					dbg.location(1204,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_mixin_call", "isLessSource()");
					}dbg.location(1204,27);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:27: ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND )
					int alt376=4;
					try { dbg.enterSubRule(376);
					try { dbg.enterDecision(376, decisionCanBacktrack[376]);

					switch ( input.LA(1) ) {
					case DOT:
						{
						alt376=1;
						}
						break;
					case HASH:
						{
						alt376=2;
						}
						break;
					case AT_IDENT:
						{
						alt376=3;
						}
						break;
					case LESS_AND:
						{
						alt376=4;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 376, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(376);}

					switch (alt376) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:28: DOT cp_mixin_name
							{
							dbg.location(1204,28);
							match(input,DOT,FOLLOW_DOT_in_cp_mixin_call8342); if (state.failed) return;dbg.location(1204,32);
							pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call8344);
							cp_mixin_name();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:48: HASH
							{
							dbg.location(1204,48);
							match(input,HASH,FOLLOW_HASH_in_cp_mixin_call8348); if (state.failed) return;
							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:55: AT_IDENT
							{
							dbg.location(1204,55);
							match(input,AT_IDENT,FOLLOW_AT_IDENT_in_cp_mixin_call8352); if (state.failed) return;
							}
							break;
						case 4 :
							dbg.enterAlt(4);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:66: LESS_AND
							{
							dbg.location(1204,66);
							match(input,LESS_AND,FOLLOW_LESS_AND_in_cp_mixin_call8356); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(376);}
					dbg.location(1204,76);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:76: ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )*
					try { dbg.enterSubRule(380);

					loop380:
					while (true) {
						int alt380=2;
						try { dbg.enterDecision(380, decisionCanBacktrack[380]);

						int LA380_0 = input.LA(1);
						if ( (LA380_0==COMMENT||LA380_0==NL||LA380_0==WS) ) {
							int LA380_2 = input.LA(2);
							if ( (synpred50_Css3()) ) {
								alt380=1;
							}

						}
						else if ( (LA380_0==GREATER||LA380_0==PLUS||LA380_0==TILDE) ) {
							int LA380_14 = input.LA(2);
							if ( (synpred50_Css3()) ) {
								alt380=1;
							}

						}

						} finally {dbg.exitDecision(380);}

						switch (alt380) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:77: ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND )
							{
							dbg.location(1204,101);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:101: ( ws )?
							int alt377=2;
							try { dbg.enterSubRule(377);
							try { dbg.enterDecision(377, decisionCanBacktrack[377]);

							int LA377_0 = input.LA(1);
							if ( (LA377_0==COMMENT||LA377_0==NL||LA377_0==WS) ) {
								alt377=1;
							}
							} finally {dbg.exitDecision(377);}

							switch (alt377) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:101: ws
									{
									dbg.location(1204,101);
									pushFollow(FOLLOW_ws_in_cp_mixin_call8372);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(377);}
							dbg.location(1204,105);
							pushFollow(FOLLOW_combinator_in_cp_mixin_call8375);
							combinator();
							state._fsp--;
							if (state.failed) return;dbg.location(1204,116);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:116: ( ws )?
							int alt378=2;
							try { dbg.enterSubRule(378);
							try { dbg.enterDecision(378, decisionCanBacktrack[378]);

							int LA378_0 = input.LA(1);
							if ( (LA378_0==COMMENT||LA378_0==NL||LA378_0==WS) ) {
								alt378=1;
							}
							} finally {dbg.exitDecision(378);}

							switch (alt378) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:116: ws
									{
									dbg.location(1204,116);
									pushFollow(FOLLOW_ws_in_cp_mixin_call8377);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(378);}
							dbg.location(1204,120);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:120: ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND )
							int alt379=4;
							try { dbg.enterSubRule(379);
							try { dbg.enterDecision(379, decisionCanBacktrack[379]);

							switch ( input.LA(1) ) {
							case DOT:
								{
								alt379=1;
								}
								break;
							case HASH:
								{
								alt379=2;
								}
								break;
							case AT_IDENT:
								{
								alt379=3;
								}
								break;
							case LESS_AND:
								{
								alt379=4;
								}
								break;
							default:
								if (state.backtracking>0) {state.failed=true; return;}
								NoViableAltException nvae =
									new NoViableAltException("", 379, 0, input);
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(379);}

							switch (alt379) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:121: DOT cp_mixin_name
									{
									dbg.location(1204,121);
									match(input,DOT,FOLLOW_DOT_in_cp_mixin_call8381); if (state.failed) return;dbg.location(1204,125);
									pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call8383);
									cp_mixin_name();
									state._fsp--;
									if (state.failed) return;
									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:141: HASH
									{
									dbg.location(1204,141);
									match(input,HASH,FOLLOW_HASH_in_cp_mixin_call8387); if (state.failed) return;
									}
									break;
								case 3 :
									dbg.enterAlt(3);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:148: AT_IDENT
									{
									dbg.location(1204,148);
									match(input,AT_IDENT,FOLLOW_AT_IDENT_in_cp_mixin_call8391); if (state.failed) return;
									}
									break;
								case 4 :
									dbg.enterAlt(4);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:159: LESS_AND
									{
									dbg.location(1204,159);
									match(input,LESS_AND,FOLLOW_LESS_AND_in_cp_mixin_call8395); if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(379);}

							}
							break;

						default :
							break loop380;
						}
					}
					} finally {dbg.exitSubRule(380);}
					dbg.location(1204,171);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:171: ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )?
					int alt384=3;
					try { dbg.enterSubRule(384);
					try { dbg.enterDecision(384, decisionCanBacktrack[384]);

					int LA384_0 = input.LA(1);
					if ( (LA384_0==COLON||LA384_0==DCOLON) ) {
						int LA384_1 = input.LA(2);
						if ( (synpred51_Css3()) ) {
							alt384=1;
						}
					}
					else if ( (LA384_0==COMMENT||LA384_0==NL||LA384_0==WS) ) {
						int LA384_2 = input.LA(2);
						if ( (synpred52_Css3()) ) {
							alt384=2;
						}
					}
					else if ( (LA384_0==LPAREN) && (synpred52_Css3())) {
						alt384=2;
					}
					} finally {dbg.exitDecision(384);}

					switch (alt384) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:172: ( pseudo )=> pseudo
							{
							dbg.location(1204,182);
							pushFollow(FOLLOW_pseudo_in_cp_mixin_call8405);
							pseudo();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:191: ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )
							{
							dbg.location(1204,205);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:205: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:206: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
							{
							dbg.location(1204,206);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:206: ( ws )?
							int alt381=2;
							try { dbg.enterSubRule(381);
							try { dbg.enterDecision(381, decisionCanBacktrack[381]);

							int LA381_0 = input.LA(1);
							if ( (LA381_0==COMMENT||LA381_0==NL||LA381_0==WS) ) {
								alt381=1;
							}
							} finally {dbg.exitDecision(381);}

							switch (alt381) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:206: ws
									{
									dbg.location(1204,206);
									pushFollow(FOLLOW_ws_in_cp_mixin_call8417);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(381);}
							dbg.location(1204,210);
							match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call8420); if (state.failed) return;dbg.location(1204,217);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:217: ( ws )?
							int alt382=2;
							try { dbg.enterSubRule(382);
							try { dbg.enterDecision(382, decisionCanBacktrack[382]);

							int LA382_0 = input.LA(1);
							if ( (LA382_0==COMMENT||LA382_0==NL||LA382_0==WS) ) {
								alt382=1;
							}
							} finally {dbg.exitDecision(382);}

							switch (alt382) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:217: ws
									{
									dbg.location(1204,217);
									pushFollow(FOLLOW_ws_in_cp_mixin_call8422);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(382);}
							dbg.location(1204,221);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:221: ( cp_mixin_call_args )?
							int alt383=2;
							try { dbg.enterSubRule(383);
							try { dbg.enterDecision(383, decisionCanBacktrack[383]);

							int LA383_0 = input.LA(1);
							if ( ((LA383_0 >= ANGLE && LA383_0 <= AT_SIGN)||(LA383_0 >= BOTTOMCENTER_SYM && LA383_0 <= BOTTOMRIGHT_SYM)||LA383_0==CHARSET_SYM||LA383_0==COUNTER_STYLE_SYM||LA383_0==DIMENSION||LA383_0==EMS||LA383_0==EXS||(LA383_0 >= FONT_FACE_SYM && LA383_0 <= FREQ)||LA383_0==GEN||(LA383_0 >= HASH && LA383_0 <= HASH_SYMBOL)||(LA383_0 >= IDENT && LA383_0 <= IMPORT_SYM)||(LA383_0 >= LBRACE && LA383_0 <= LENGTH)||(LA383_0 >= LESS_AND && LA383_0 <= LESS_JS_STRING)||LA383_0==LPAREN||(LA383_0 >= MEDIA_SYM && LA383_0 <= MOZ_DOCUMENT_SYM)||LA383_0==NAMESPACE_SYM||(LA383_0 >= NOT && LA383_0 <= NUMBER)||(LA383_0 >= PAGE_SYM && LA383_0 <= PERCENTAGE_SYMBOL)||LA383_0==PLUS||(LA383_0 >= REM && LA383_0 <= RIGHTTOP_SYM)||(LA383_0 >= SASS_AT_ROOT && LA383_0 <= SASS_DEBUG)||(LA383_0 >= SASS_EACH && LA383_0 <= SASS_ELSE)||LA383_0==SASS_EXTEND||(LA383_0 >= SASS_FOR && LA383_0 <= SASS_FUNCTION)||(LA383_0 >= SASS_IF && LA383_0 <= SASS_MIXIN)||(LA383_0 >= SASS_RETURN && LA383_0 <= SASS_WHILE)||LA383_0==STRING||(LA383_0 >= TILDE && LA383_0 <= TOPRIGHT_SYM)||(LA383_0 >= URANGE && LA383_0 <= URI)||LA383_0==VARIABLE||LA383_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt383=1;
							}
							} finally {dbg.exitDecision(383);}

							switch (alt383) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:221: cp_mixin_call_args
									{
									dbg.location(1204,221);
									pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call8425);
									cp_mixin_call_args();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(383);}
							dbg.location(1204,241);
							match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call8428); if (state.failed) return;
							}

							}
							break;

					}
					} finally {dbg.exitSubRule(384);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:9: {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )?
					{
					dbg.location(1206,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_mixin_call", "isScssSource()");
					}dbg.location(1206,27);
					match(input,SASS_INCLUDE,FOLLOW_SASS_INCLUDE_in_cp_mixin_call8453); if (state.failed) return;dbg.location(1206,40);
					pushFollow(FOLLOW_ws_in_cp_mixin_call8455);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(1206,43);
					pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call8457);
					cp_mixin_name();
					state._fsp--;
					if (state.failed) return;dbg.location(1206,57);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
					int alt388=2;
					try { dbg.enterSubRule(388);
					try { dbg.enterDecision(388, decisionCanBacktrack[388]);

					try {
						isCyclicDecision = true;
						alt388 = dfa388.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(388);}

					switch (alt388) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:58: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
							{
							dbg.location(1206,58);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:58: ( ws )?
							int alt385=2;
							try { dbg.enterSubRule(385);
							try { dbg.enterDecision(385, decisionCanBacktrack[385]);

							int LA385_0 = input.LA(1);
							if ( (LA385_0==COMMENT||LA385_0==NL||LA385_0==WS) ) {
								alt385=1;
							}
							} finally {dbg.exitDecision(385);}

							switch (alt385) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:58: ws
									{
									dbg.location(1206,58);
									pushFollow(FOLLOW_ws_in_cp_mixin_call8460);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(385);}
							dbg.location(1206,62);
							match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call8463); if (state.failed) return;dbg.location(1206,69);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:69: ( ws )?
							int alt386=2;
							try { dbg.enterSubRule(386);
							try { dbg.enterDecision(386, decisionCanBacktrack[386]);

							int LA386_0 = input.LA(1);
							if ( (LA386_0==COMMENT||LA386_0==NL||LA386_0==WS) ) {
								alt386=1;
							}
							} finally {dbg.exitDecision(386);}

							switch (alt386) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:69: ws
									{
									dbg.location(1206,69);
									pushFollow(FOLLOW_ws_in_cp_mixin_call8465);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(386);}
							dbg.location(1206,73);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:73: ( cp_mixin_call_args )?
							int alt387=2;
							try { dbg.enterSubRule(387);
							try { dbg.enterDecision(387, decisionCanBacktrack[387]);

							int LA387_0 = input.LA(1);
							if ( ((LA387_0 >= ANGLE && LA387_0 <= AT_SIGN)||(LA387_0 >= BOTTOMCENTER_SYM && LA387_0 <= BOTTOMRIGHT_SYM)||LA387_0==CHARSET_SYM||LA387_0==COUNTER_STYLE_SYM||LA387_0==DIMENSION||LA387_0==EMS||LA387_0==EXS||(LA387_0 >= FONT_FACE_SYM && LA387_0 <= FREQ)||LA387_0==GEN||(LA387_0 >= HASH && LA387_0 <= HASH_SYMBOL)||(LA387_0 >= IDENT && LA387_0 <= IMPORT_SYM)||(LA387_0 >= LBRACE && LA387_0 <= LENGTH)||(LA387_0 >= LESS_AND && LA387_0 <= LESS_JS_STRING)||LA387_0==LPAREN||(LA387_0 >= MEDIA_SYM && LA387_0 <= MOZ_DOCUMENT_SYM)||LA387_0==NAMESPACE_SYM||(LA387_0 >= NOT && LA387_0 <= NUMBER)||(LA387_0 >= PAGE_SYM && LA387_0 <= PERCENTAGE_SYMBOL)||LA387_0==PLUS||(LA387_0 >= REM && LA387_0 <= RIGHTTOP_SYM)||(LA387_0 >= SASS_AT_ROOT && LA387_0 <= SASS_DEBUG)||(LA387_0 >= SASS_EACH && LA387_0 <= SASS_ELSE)||LA387_0==SASS_EXTEND||(LA387_0 >= SASS_FOR && LA387_0 <= SASS_FUNCTION)||(LA387_0 >= SASS_IF && LA387_0 <= SASS_MIXIN)||(LA387_0 >= SASS_RETURN && LA387_0 <= SASS_WHILE)||LA387_0==STRING||(LA387_0 >= TILDE && LA387_0 <= TOPRIGHT_SYM)||(LA387_0 >= URANGE && LA387_0 <= URI)||LA387_0==VARIABLE||LA387_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt387=1;
							}
							} finally {dbg.exitDecision(387);}

							switch (alt387) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:73: cp_mixin_call_args
									{
									dbg.location(1206,73);
									pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call8468);
									cp_mixin_call_args();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(387);}
							dbg.location(1206,93);
							match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call8471); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(388);}
					dbg.location(1206,102);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:102: ( ( ws )? cp_mixin_block )?
					int alt390=2;
					try { dbg.enterSubRule(390);
					try { dbg.enterDecision(390, decisionCanBacktrack[390]);

					try {
						isCyclicDecision = true;
						alt390 = dfa390.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(390);}

					switch (alt390) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:103: ( ws )? cp_mixin_block
							{
							dbg.location(1206,103);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:103: ( ws )?
							int alt389=2;
							try { dbg.enterSubRule(389);
							try { dbg.enterDecision(389, decisionCanBacktrack[389]);

							int LA389_0 = input.LA(1);
							if ( (LA389_0==COMMENT||LA389_0==NL||LA389_0==WS) ) {
								alt389=1;
							}
							} finally {dbg.exitDecision(389);}

							switch (alt389) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:103: ws
									{
									dbg.location(1206,103);
									pushFollow(FOLLOW_ws_in_cp_mixin_call8476);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(389);}
							dbg.location(1206,107);
							pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_call8479);
							cp_mixin_block();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(390);}

					}
					break;

			}
			} finally {dbg.exitSubRule(391);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1208, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_call");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_call"



	// $ANTLR start "cp_mixin_block"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:1: cp_mixin_block : LBRACE ( ws )? syncToFollow ( declarations | ( webkitKeyframeSelectors )=> ( webkitKeyframesBlock ( ws )? )* )? RBRACE ;
	public final void cp_mixin_block() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_block");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1210, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1211:5: ( LBRACE ( ws )? syncToFollow ( declarations | ( webkitKeyframeSelectors )=> ( webkitKeyframesBlock ( ws )? )* )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1212:5: LBRACE ( ws )? syncToFollow ( declarations | ( webkitKeyframeSelectors )=> ( webkitKeyframesBlock ( ws )? )* )? RBRACE
			{
			dbg.location(1212,5);
			match(input,LBRACE,FOLLOW_LBRACE_in_cp_mixin_block8508); if (state.failed) return;dbg.location(1212,12);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1212:12: ( ws )?
			int alt392=2;
			try { dbg.enterSubRule(392);
			try { dbg.enterDecision(392, decisionCanBacktrack[392]);

			int LA392_0 = input.LA(1);
			if ( (LA392_0==COMMENT||LA392_0==NL||LA392_0==WS) ) {
				alt392=1;
			}
			} finally {dbg.exitDecision(392);}

			switch (alt392) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1212:12: ws
					{
					dbg.location(1212,12);
					pushFollow(FOLLOW_ws_in_cp_mixin_block8510);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(392);}
			dbg.location(1212,16);
			pushFollow(FOLLOW_syncToFollow_in_cp_mixin_block8513);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(1213,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1213:9: ( declarations | ( webkitKeyframeSelectors )=> ( webkitKeyframesBlock ( ws )? )* )?
			int alt395=3;
			try { dbg.enterSubRule(395);
			try { dbg.enterDecision(395, decisionCanBacktrack[395]);

			int LA395_0 = input.LA(1);
			if ( ((LA395_0 >= AT_IDENT && LA395_0 <= AT_SIGN)||(LA395_0 >= BOTTOMCENTER_SYM && LA395_0 <= BOTTOMRIGHT_SYM)||(LA395_0 >= CHARSET_SYM && LA395_0 <= COLON)||LA395_0==COUNTER_STYLE_SYM||(LA395_0 >= DCOLON && LA395_0 <= DOT)||LA395_0==FONT_FACE_SYM||(LA395_0 >= GEN && LA395_0 <= GREATER)||(LA395_0 >= HASH && LA395_0 <= HASH_SYMBOL)||LA395_0==IMPORT_SYM||(LA395_0 >= LBRACKET && LA395_0 <= LEFTTOP_SYM)||LA395_0==LESS_AND||(LA395_0 >= MEDIA_SYM && LA395_0 <= MOZ_DOCUMENT_SYM)||LA395_0==NAMESPACE_SYM||LA395_0==PAGE_SYM||(LA395_0 >= PIPE && LA395_0 <= PLUS)||(LA395_0 >= RIGHTBOTTOM_SYM && LA395_0 <= RIGHTTOP_SYM)||LA395_0==SASS_AT_ROOT||LA395_0==SASS_DEBUG||(LA395_0 >= SASS_EACH && LA395_0 <= SASS_ELSE)||(LA395_0 >= SASS_ERROR && LA395_0 <= SASS_FUNCTION)||(LA395_0 >= SASS_IF && LA395_0 <= SASS_MIXIN)||(LA395_0 >= SASS_RETURN && LA395_0 <= SEMI)||LA395_0==STAR||LA395_0==SUPPORTS_SYM||LA395_0==TILDE||(LA395_0 >= TOPCENTER_SYM && LA395_0 <= TOPRIGHT_SYM)||LA395_0==VARIABLE||LA395_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt395=1;
			}
			else if ( (LA395_0==IDENT) ) {
				int LA395_4 = input.LA(2);
				if ( (true) ) {
					alt395=1;
				}
				else if ( ((synpred53_Css3()&&(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")||evalPredicate(tokenNameEquals("to"),"tokenNameEquals(\"to\")")))) ) {
					alt395=2;
				}
			}
			else if ( (LA395_0==SASS_CONTENT) ) {
				int LA395_36 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt395=1;
				}
				else if ( ((synpred53_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt395=2;
				}
			}
			else if ( (LA395_0==PERCENTAGE) && (synpred53_Css3())) {
				alt395=2;
			}
			else if ( (LA395_0==RBRACE) ) {
				int LA395_42 = input.LA(2);
				if ( (synpred53_Css3()) ) {
					alt395=2;
				}
			}
			} finally {dbg.exitDecision(395);}

			switch (alt395) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1213:10: declarations
					{
					dbg.location(1213,10);
					pushFollow(FOLLOW_declarations_in_cp_mixin_block8524);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1213:25: ( webkitKeyframeSelectors )=> ( webkitKeyframesBlock ( ws )? )*
					{
					dbg.location(1214,3);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1214:3: ( webkitKeyframesBlock ( ws )? )*
					try { dbg.enterSubRule(394);

					loop394:
					while (true) {
						int alt394=2;
						try { dbg.enterDecision(394, decisionCanBacktrack[394]);

						int LA394_0 = input.LA(1);
						if ( (LA394_0==IDENT||LA394_0==PERCENTAGE||LA394_0==SASS_CONTENT) ) {
							alt394=1;
						}

						} finally {dbg.exitDecision(394);}

						switch (alt394) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1214:5: webkitKeyframesBlock ( ws )?
							{
							dbg.location(1214,5);
							pushFollow(FOLLOW_webkitKeyframesBlock_in_cp_mixin_block8539);
							webkitKeyframesBlock();
							state._fsp--;
							if (state.failed) return;dbg.location(1214,26);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1214:26: ( ws )?
							int alt393=2;
							try { dbg.enterSubRule(393);
							try { dbg.enterDecision(393, decisionCanBacktrack[393]);

							int LA393_0 = input.LA(1);
							if ( (LA393_0==COMMENT||LA393_0==NL||LA393_0==WS) ) {
								alt393=1;
							}
							} finally {dbg.exitDecision(393);}

							switch (alt393) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1214:26: ws
									{
									dbg.location(1214,26);
									pushFollow(FOLLOW_ws_in_cp_mixin_block8541);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(393);}

							}
							break;

						default :
							break loop394;
						}
					}
					} finally {dbg.exitSubRule(394);}

					}
					break;

			}
			} finally {dbg.exitSubRule(395);}
			dbg.location(1215,5);
			match(input,RBRACE,FOLLOW_RBRACE_in_cp_mixin_block8553); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1216, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_block");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_block"



	// $ANTLR start "cp_mixin_name"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1218:1: cp_mixin_name : IDENT ;
	public final void cp_mixin_name() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_name");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1218, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1219:5: ( IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1220:5: IDENT
			{
			dbg.location(1220,5);
			match(input,IDENT,FOLLOW_IDENT_in_cp_mixin_name8574); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1221, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_name");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_name"



	// $ANTLR start "cp_mixin_call_args"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1223:1: cp_mixin_call_args : cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS ( ws )? )? ( SEMI )? ;
	public final void cp_mixin_call_args() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_args");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1223, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1224:5: ( cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS ( ws )? )? ( SEMI )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:5: cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS ( ws )? )? ( SEMI )?
			{
			dbg.location(1227,5);
			pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args8605);
			cp_mixin_call_arg();
			state._fsp--;
			if (state.failed) return;dbg.location(1227,23);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:23: ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )*
			try { dbg.enterSubRule(397);

			loop397:
			while (true) {
				int alt397=2;
				try { dbg.enterDecision(397, decisionCanBacktrack[397]);

				int LA397_0 = input.LA(1);
				if ( (LA397_0==SEMI) ) {
					int LA397_2 = input.LA(2);
					if ( ((LA397_2 >= ANGLE && LA397_2 <= AT_SIGN)||(LA397_2 >= BOTTOMCENTER_SYM && LA397_2 <= BOTTOMRIGHT_SYM)||LA397_2==CHARSET_SYM||LA397_2==COMMENT||LA397_2==COUNTER_STYLE_SYM||LA397_2==DIMENSION||LA397_2==EMS||LA397_2==EXS||(LA397_2 >= FONT_FACE_SYM && LA397_2 <= FREQ)||LA397_2==GEN||(LA397_2 >= HASH && LA397_2 <= HASH_SYMBOL)||(LA397_2 >= IDENT && LA397_2 <= IMPORT_SYM)||(LA397_2 >= LBRACE && LA397_2 <= LENGTH)||(LA397_2 >= LESS_AND && LA397_2 <= LESS_JS_STRING)||LA397_2==LPAREN||(LA397_2 >= MEDIA_SYM && LA397_2 <= MOZ_DOCUMENT_SYM)||(LA397_2 >= NAMESPACE_SYM && LA397_2 <= NL)||(LA397_2 >= NOT && LA397_2 <= NUMBER)||(LA397_2 >= PAGE_SYM && LA397_2 <= PERCENTAGE_SYMBOL)||LA397_2==PLUS||(LA397_2 >= REM && LA397_2 <= RIGHTTOP_SYM)||(LA397_2 >= SASS_AT_ROOT && LA397_2 <= SASS_DEBUG)||(LA397_2 >= SASS_EACH && LA397_2 <= SASS_ELSE)||LA397_2==SASS_EXTEND||(LA397_2 >= SASS_FOR && LA397_2 <= SASS_FUNCTION)||(LA397_2 >= SASS_IF && LA397_2 <= SASS_MIXIN)||(LA397_2 >= SASS_RETURN && LA397_2 <= SASS_WHILE)||LA397_2==STRING||(LA397_2 >= TILDE && LA397_2 <= TOPRIGHT_SYM)||(LA397_2 >= URANGE && LA397_2 <= URI)||LA397_2==VARIABLE||(LA397_2 >= WEBKIT_KEYFRAMES_SYM && LA397_2 <= WS)) ) {
						alt397=1;
					}

				}
				else if ( (LA397_0==COMMA) ) {
					alt397=1;
				}

				} finally {dbg.exitDecision(397);}

				switch (alt397) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:25: ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg
					{
					dbg.location(1227,25);
					if ( input.LA(1)==COMMA||input.LA(1)==SEMI ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(1227,40);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:40: ( ws )?
					int alt396=2;
					try { dbg.enterSubRule(396);
					try { dbg.enterDecision(396, decisionCanBacktrack[396]);

					int LA396_0 = input.LA(1);
					if ( (LA396_0==COMMENT||LA396_0==NL||LA396_0==WS) ) {
						alt396=1;
					}
					} finally {dbg.exitDecision(396);}

					switch (alt396) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:40: ws
							{
							dbg.location(1227,40);
							pushFollow(FOLLOW_ws_in_cp_mixin_call_args8617);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(396);}
					dbg.location(1227,44);
					pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args8620);
					cp_mixin_call_arg();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop397;
				}
			}
			} finally {dbg.exitSubRule(397);}
			dbg.location(1227,65);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:65: ( CP_DOTS ( ws )? )?
			int alt399=2;
			try { dbg.enterSubRule(399);
			try { dbg.enterDecision(399, decisionCanBacktrack[399]);

			int LA399_0 = input.LA(1);
			if ( (LA399_0==CP_DOTS) ) {
				alt399=1;
			}
			} finally {dbg.exitDecision(399);}

			switch (alt399) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:66: CP_DOTS ( ws )?
					{
					dbg.location(1227,66);
					match(input,CP_DOTS,FOLLOW_CP_DOTS_in_cp_mixin_call_args8626); if (state.failed) return;dbg.location(1227,74);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:74: ( ws )?
					int alt398=2;
					try { dbg.enterSubRule(398);
					try { dbg.enterDecision(398, decisionCanBacktrack[398]);

					int LA398_0 = input.LA(1);
					if ( (LA398_0==COMMENT||LA398_0==NL||LA398_0==WS) ) {
						alt398=1;
					}
					} finally {dbg.exitDecision(398);}

					switch (alt398) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:74: ws
							{
							dbg.location(1227,74);
							pushFollow(FOLLOW_ws_in_cp_mixin_call_args8628);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(398);}

					}
					break;

			}
			} finally {dbg.exitSubRule(399);}
			dbg.location(1227,80);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:80: ( SEMI )?
			int alt400=2;
			try { dbg.enterSubRule(400);
			try { dbg.enterDecision(400, decisionCanBacktrack[400]);

			int LA400_0 = input.LA(1);
			if ( (LA400_0==SEMI) ) {
				alt400=1;
			}
			} finally {dbg.exitDecision(400);}

			switch (alt400) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:80: SEMI
					{
					dbg.location(1227,80);
					match(input,SEMI,FOLLOW_SEMI_in_cp_mixin_call_args8633); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(400);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1228, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_call_args");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_call_args"



	// $ANTLR start "cp_mixin_call_arg"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:1: cp_mixin_call_arg : ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? ;
	public final void cp_mixin_call_arg() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_arg");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1230, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:5: ( ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )?
			{
			dbg.location(1232,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )
			int alt403=2;
			try { dbg.enterSubRule(403);
			try { dbg.enterDecision(403, decisionCanBacktrack[403]);

			try {
				isCyclicDecision = true;
				alt403 = dfa403.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(403);}

			switch (alt403) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1233:9: cp_variable ( ws )? COLON ( ws )? cp_expression
					{
					dbg.location(1233,9);
					pushFollow(FOLLOW_cp_variable_in_cp_mixin_call_arg8665);
					cp_variable();
					state._fsp--;
					if (state.failed) return;dbg.location(1233,21);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1233:21: ( ws )?
					int alt401=2;
					try { dbg.enterSubRule(401);
					try { dbg.enterDecision(401, decisionCanBacktrack[401]);

					int LA401_0 = input.LA(1);
					if ( (LA401_0==COMMENT||LA401_0==NL||LA401_0==WS) ) {
						alt401=1;
					}
					} finally {dbg.exitDecision(401);}

					switch (alt401) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1233:21: ws
							{
							dbg.location(1233,21);
							pushFollow(FOLLOW_ws_in_cp_mixin_call_arg8667);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(401);}
					dbg.location(1233,25);
					match(input,COLON,FOLLOW_COLON_in_cp_mixin_call_arg8670); if (state.failed) return;dbg.location(1233,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1233:31: ( ws )?
					int alt402=2;
					try { dbg.enterSubRule(402);
					try { dbg.enterDecision(402, decisionCanBacktrack[402]);

					int LA402_0 = input.LA(1);
					if ( (LA402_0==COMMENT||LA402_0==NL||LA402_0==WS) ) {
						alt402=1;
					}
					} finally {dbg.exitDecision(402);}

					switch (alt402) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1233:31: ws
							{
							dbg.location(1233,31);
							pushFollow(FOLLOW_ws_in_cp_mixin_call_arg8672);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(402);}
					dbg.location(1233,35);
					pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg8675);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1234:11: cp_expression
					{
					dbg.location(1234,11);
					pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg8687);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(403);}
			dbg.location(1235,7);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:7: ( ws )?
			int alt404=2;
			try { dbg.enterSubRule(404);
			try { dbg.enterDecision(404, decisionCanBacktrack[404]);

			int LA404_0 = input.LA(1);
			if ( (LA404_0==COMMENT||LA404_0==NL||LA404_0==WS) ) {
				alt404=1;
			}
			} finally {dbg.exitDecision(404);}

			switch (alt404) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:7: ws
					{
					dbg.location(1235,7);
					pushFollow(FOLLOW_ws_in_cp_mixin_call_arg8695);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(404);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1236, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_call_arg");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_call_arg"



	// $ANTLR start "cp_args_list"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1239:1: cp_args_list : ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? ) | ( CP_DOTS | LESS_REST ) ( ws )? );
	public final void cp_args_list() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_args_list");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1239, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:5: ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? ) | ( CP_DOTS | LESS_REST ) ( ws )? )
			int alt412=2;
			try { dbg.enterDecision(412, decisionCanBacktrack[412]);

			int LA412_0 = input.LA(1);
			if ( (LA412_0==AT_IDENT||(LA412_0 >= BOTTOMCENTER_SYM && LA412_0 <= BOTTOMRIGHT_SYM)||LA412_0==CHARSET_SYM||LA412_0==COUNTER_STYLE_SYM||LA412_0==FONT_FACE_SYM||LA412_0==IDENT||LA412_0==IMPORT_SYM||(LA412_0 >= LEFTBOTTOM_SYM && LA412_0 <= LEFTTOP_SYM)||LA412_0==MEDIA_SYM||LA412_0==MOZ_DOCUMENT_SYM||LA412_0==NAMESPACE_SYM||LA412_0==PAGE_SYM||(LA412_0 >= RIGHTBOTTOM_SYM && LA412_0 <= RIGHTTOP_SYM)||(LA412_0 >= SASS_AT_ROOT && LA412_0 <= SASS_DEBUG)||(LA412_0 >= SASS_EACH && LA412_0 <= SASS_ELSE)||LA412_0==SASS_EXTEND||(LA412_0 >= SASS_FOR && LA412_0 <= SASS_FUNCTION)||(LA412_0 >= SASS_IF && LA412_0 <= SASS_MIXIN)||(LA412_0 >= SASS_RETURN && LA412_0 <= SASS_WHILE)||(LA412_0 >= TOPCENTER_SYM && LA412_0 <= TOPRIGHT_SYM)||LA412_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt412=1;
			}
			else if ( (LA412_0==CP_DOTS||LA412_0==LESS_REST) ) {
				alt412=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 412, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(412);}

			switch (alt412) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? )
					{
					dbg.location(1247,5);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:7: cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )?
					{
					dbg.location(1247,7);
					pushFollow(FOLLOW_cp_arg_in_cp_args_list8742);
					cp_arg();
					state._fsp--;
					if (state.failed) return;dbg.location(1247,14);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*
					try { dbg.enterSubRule(406);

					loop406:
					while (true) {
						int alt406=2;
						try { dbg.enterDecision(406, decisionCanBacktrack[406]);

						try {
							isCyclicDecision = true;
							alt406 = dfa406.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(406);}

						switch (alt406) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:16: ( COMMA | SEMI ) ( ws )? cp_arg
							{
							dbg.location(1247,16);
							if ( input.LA(1)==COMMA||input.LA(1)==SEMI ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}dbg.location(1247,33);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:33: ( ws )?
							int alt405=2;
							try { dbg.enterSubRule(405);
							try { dbg.enterDecision(405, decisionCanBacktrack[405]);

							int LA405_0 = input.LA(1);
							if ( (LA405_0==COMMENT||LA405_0==NL||LA405_0==WS) ) {
								alt405=1;
							}
							} finally {dbg.exitDecision(405);}

							switch (alt405) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:33: ws
									{
									dbg.location(1247,33);
									pushFollow(FOLLOW_ws_in_cp_args_list8756);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(405);}
							dbg.location(1247,37);
							pushFollow(FOLLOW_cp_arg_in_cp_args_list8759);
							cp_arg();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop406;
						}
					}
					} finally {dbg.exitSubRule(406);}
					dbg.location(1247,47);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:47: ( ( COMMA | SEMI ) ( ws )? )?
					int alt408=2;
					try { dbg.enterSubRule(408);
					try { dbg.enterDecision(408, decisionCanBacktrack[408]);

					int LA408_0 = input.LA(1);
					if ( (LA408_0==COMMA||LA408_0==SEMI) ) {
						alt408=1;
					}
					} finally {dbg.exitDecision(408);}

					switch (alt408) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:49: ( COMMA | SEMI ) ( ws )?
							{
							dbg.location(1247,49);
							if ( input.LA(1)==COMMA||input.LA(1)==SEMI ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}dbg.location(1247,64);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:64: ( ws )?
							int alt407=2;
							try { dbg.enterSubRule(407);
							try { dbg.enterDecision(407, decisionCanBacktrack[407]);

							int LA407_0 = input.LA(1);
							if ( (LA407_0==COMMENT||LA407_0==NL||LA407_0==WS) ) {
								alt407=1;
							}
							} finally {dbg.exitDecision(407);}

							switch (alt407) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:64: ws
									{
									dbg.location(1247,64);
									pushFollow(FOLLOW_ws_in_cp_args_list8774);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(407);}

							}
							break;

					}
					} finally {dbg.exitSubRule(408);}
					dbg.location(1247,71);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:71: ( ( CP_DOTS | LESS_REST ) ( ws )? )?
					int alt410=2;
					try { dbg.enterSubRule(410);
					try { dbg.enterDecision(410, decisionCanBacktrack[410]);

					int LA410_0 = input.LA(1);
					if ( (LA410_0==CP_DOTS||LA410_0==LESS_REST) ) {
						alt410=1;
					}
					} finally {dbg.exitDecision(410);}

					switch (alt410) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:73: ( CP_DOTS | LESS_REST ) ( ws )?
							{
							dbg.location(1247,73);
							if ( input.LA(1)==CP_DOTS||input.LA(1)==LESS_REST ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}dbg.location(1247,95);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:95: ( ws )?
							int alt409=2;
							try { dbg.enterSubRule(409);
							try { dbg.enterDecision(409, decisionCanBacktrack[409]);

							int LA409_0 = input.LA(1);
							if ( (LA409_0==COMMENT||LA409_0==NL||LA409_0==WS) ) {
								alt409=1;
							}
							} finally {dbg.exitDecision(409);}

							switch (alt409) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:95: ws
									{
									dbg.location(1247,95);
									pushFollow(FOLLOW_ws_in_cp_args_list8790);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(409);}

							}
							break;

					}
					} finally {dbg.exitSubRule(410);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1249:5: ( CP_DOTS | LESS_REST ) ( ws )?
					{
					dbg.location(1249,5);
					if ( input.LA(1)==CP_DOTS||input.LA(1)==LESS_REST ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(1249,27);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1249:27: ( ws )?
					int alt411=2;
					try { dbg.enterSubRule(411);
					try { dbg.enterDecision(411, decisionCanBacktrack[411]);

					int LA411_0 = input.LA(1);
					if ( (LA411_0==COMMENT||LA411_0==NL||LA411_0==WS) ) {
						alt411=1;
					}
					} finally {dbg.exitDecision(411);}

					switch (alt411) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1249:27: ws
							{
							dbg.location(1249,27);
							pushFollow(FOLLOW_ws_in_cp_args_list8815);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(411);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1250, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_args_list");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_args_list"



	// $ANTLR start "cp_arg"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1253:1: cp_arg : ( cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? |{...}? IDENT );
	public final void cp_arg() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_arg");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1253, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1254:5: ( cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? |{...}? IDENT )
			int alt417=2;
			try { dbg.enterDecision(417, decisionCanBacktrack[417]);

			int LA417_0 = input.LA(1);
			if ( (LA417_0==AT_IDENT||(LA417_0 >= BOTTOMCENTER_SYM && LA417_0 <= BOTTOMRIGHT_SYM)||LA417_0==CHARSET_SYM||LA417_0==COUNTER_STYLE_SYM||LA417_0==FONT_FACE_SYM||LA417_0==IMPORT_SYM||(LA417_0 >= LEFTBOTTOM_SYM && LA417_0 <= LEFTTOP_SYM)||LA417_0==MEDIA_SYM||LA417_0==MOZ_DOCUMENT_SYM||LA417_0==NAMESPACE_SYM||LA417_0==PAGE_SYM||(LA417_0 >= RIGHTBOTTOM_SYM && LA417_0 <= RIGHTTOP_SYM)||(LA417_0 >= SASS_AT_ROOT && LA417_0 <= SASS_DEBUG)||(LA417_0 >= SASS_EACH && LA417_0 <= SASS_ELSE)||LA417_0==SASS_EXTEND||(LA417_0 >= SASS_FOR && LA417_0 <= SASS_FUNCTION)||(LA417_0 >= SASS_IF && LA417_0 <= SASS_MIXIN)||(LA417_0 >= SASS_RETURN && LA417_0 <= SASS_WHILE)||(LA417_0 >= TOPCENTER_SYM && LA417_0 <= TOPRIGHT_SYM)||LA417_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt417=1;
			}
			else if ( (LA417_0==IDENT) ) {
				int LA417_2 = input.LA(2);
				if ( (LA417_2==DOT) ) {
					alt417=1;
				}
				else if ( (LA417_2==COMMA||LA417_2==CP_DOTS||LA417_2==LESS_REST||LA417_2==RPAREN||LA417_2==SEMI) ) {
					alt417=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 417, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 417, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(417);}

			switch (alt417) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1255:5: cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )?
					{
					dbg.location(1255,5);
					pushFollow(FOLLOW_cp_variable_in_cp_arg8838);
					cp_variable();
					state._fsp--;
					if (state.failed) return;dbg.location(1255,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1255:17: ( ws )?
					int alt413=2;
					try { dbg.enterSubRule(413);
					try { dbg.enterDecision(413, decisionCanBacktrack[413]);

					int LA413_0 = input.LA(1);
					if ( (LA413_0==COMMENT||LA413_0==NL||LA413_0==WS) ) {
						alt413=1;
					}
					} finally {dbg.exitDecision(413);}

					switch (alt413) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1255:17: ws
							{
							dbg.location(1255,17);
							pushFollow(FOLLOW_ws_in_cp_arg8840);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(413);}
					dbg.location(1255,21);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1255:21: ( COLON ( ws )? cp_expression ( ws )? )?
					int alt416=2;
					try { dbg.enterSubRule(416);
					try { dbg.enterDecision(416, decisionCanBacktrack[416]);

					int LA416_0 = input.LA(1);
					if ( (LA416_0==COLON) ) {
						alt416=1;
					}
					} finally {dbg.exitDecision(416);}

					switch (alt416) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1255:23: COLON ( ws )? cp_expression ( ws )?
							{
							dbg.location(1255,23);
							match(input,COLON,FOLLOW_COLON_in_cp_arg8845); if (state.failed) return;dbg.location(1255,29);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1255:29: ( ws )?
							int alt414=2;
							try { dbg.enterSubRule(414);
							try { dbg.enterDecision(414, decisionCanBacktrack[414]);

							int LA414_0 = input.LA(1);
							if ( (LA414_0==COMMENT||LA414_0==NL||LA414_0==WS) ) {
								alt414=1;
							}
							} finally {dbg.exitDecision(414);}

							switch (alt414) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1255:29: ws
									{
									dbg.location(1255,29);
									pushFollow(FOLLOW_ws_in_cp_arg8847);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(414);}
							dbg.location(1255,33);
							pushFollow(FOLLOW_cp_expression_in_cp_arg8850);
							cp_expression();
							state._fsp--;
							if (state.failed) return;dbg.location(1255,47);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1255:47: ( ws )?
							int alt415=2;
							try { dbg.enterSubRule(415);
							try { dbg.enterDecision(415, decisionCanBacktrack[415]);

							int LA415_0 = input.LA(1);
							if ( (LA415_0==COMMENT||LA415_0==NL||LA415_0==WS) ) {
								alt415=1;
							}
							} finally {dbg.exitDecision(415);}

							switch (alt415) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1255:47: ws
									{
									dbg.location(1255,47);
									pushFollow(FOLLOW_ws_in_cp_arg8852);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(415);}

							}
							break;

					}
					} finally {dbg.exitSubRule(416);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:7: {...}? IDENT
					{
					dbg.location(1256,7);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_arg", "isLessSource()");
					}dbg.location(1256,25);
					match(input,IDENT,FOLLOW_IDENT_in_cp_arg8865); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1257, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_arg");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_arg"



	// $ANTLR start "less_mixin_guarded"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1261:1: less_mixin_guarded : less_when ( ws )? less_condition ( ( ws )? ( COMMA | key_and ) ( ws )? less_condition )* ;
	public final void less_mixin_guarded() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_mixin_guarded");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1261, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1262:5: ( less_when ( ws )? less_condition ( ( ws )? ( COMMA | key_and ) ( ws )? less_condition )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:5: less_when ( ws )? less_condition ( ( ws )? ( COMMA | key_and ) ( ws )? less_condition )*
			{
			dbg.location(1263,5);
			pushFollow(FOLLOW_less_when_in_less_mixin_guarded8888);
			less_when();
			state._fsp--;
			if (state.failed) return;dbg.location(1263,15);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:15: ( ws )?
			int alt418=2;
			try { dbg.enterSubRule(418);
			try { dbg.enterDecision(418, decisionCanBacktrack[418]);

			int LA418_0 = input.LA(1);
			if ( (LA418_0==COMMENT||LA418_0==NL||LA418_0==WS) ) {
				alt418=1;
			}
			} finally {dbg.exitDecision(418);}

			switch (alt418) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:15: ws
					{
					dbg.location(1263,15);
					pushFollow(FOLLOW_ws_in_less_mixin_guarded8890);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(418);}
			dbg.location(1263,19);
			pushFollow(FOLLOW_less_condition_in_less_mixin_guarded8893);
			less_condition();
			state._fsp--;
			if (state.failed) return;dbg.location(1263,34);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:34: ( ( ws )? ( COMMA | key_and ) ( ws )? less_condition )*
			try { dbg.enterSubRule(422);

			loop422:
			while (true) {
				int alt422=2;
				try { dbg.enterDecision(422, decisionCanBacktrack[422]);

				try {
					isCyclicDecision = true;
					alt422 = dfa422.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(422);}

				switch (alt422) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:35: ( ws )? ( COMMA | key_and ) ( ws )? less_condition
					{
					dbg.location(1263,35);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:35: ( ws )?
					int alt419=2;
					try { dbg.enterSubRule(419);
					try { dbg.enterDecision(419, decisionCanBacktrack[419]);

					int LA419_0 = input.LA(1);
					if ( (LA419_0==COMMENT||LA419_0==NL||LA419_0==WS) ) {
						alt419=1;
					}
					} finally {dbg.exitDecision(419);}

					switch (alt419) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:35: ws
							{
							dbg.location(1263,35);
							pushFollow(FOLLOW_ws_in_less_mixin_guarded8896);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(419);}
					dbg.location(1263,39);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:39: ( COMMA | key_and )
					int alt420=2;
					try { dbg.enterSubRule(420);
					try { dbg.enterDecision(420, decisionCanBacktrack[420]);

					int LA420_0 = input.LA(1);
					if ( (LA420_0==COMMA) ) {
						alt420=1;
					}
					else if ( (LA420_0==IDENT) ) {
						alt420=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 420, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(420);}

					switch (alt420) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:40: COMMA
							{
							dbg.location(1263,40);
							match(input,COMMA,FOLLOW_COMMA_in_less_mixin_guarded8900); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:48: key_and
							{
							dbg.location(1263,48);
							pushFollow(FOLLOW_key_and_in_less_mixin_guarded8904);
							key_and();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(420);}
					dbg.location(1263,57);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:57: ( ws )?
					int alt421=2;
					try { dbg.enterSubRule(421);
					try { dbg.enterDecision(421, decisionCanBacktrack[421]);

					int LA421_0 = input.LA(1);
					if ( (LA421_0==COMMENT||LA421_0==NL||LA421_0==WS) ) {
						alt421=1;
					}
					} finally {dbg.exitDecision(421);}

					switch (alt421) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:57: ws
							{
							dbg.location(1263,57);
							pushFollow(FOLLOW_ws_in_less_mixin_guarded8907);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(421);}
					dbg.location(1263,61);
					pushFollow(FOLLOW_less_condition_in_less_mixin_guarded8910);
					less_condition();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop422;
				}
			}
			} finally {dbg.exitSubRule(422);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1264, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_mixin_guarded");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_mixin_guarded"



	// $ANTLR start "less_condition"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1268:1: less_condition : ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN ;
	public final void less_condition() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_condition");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1268, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:5: ( ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1270:5: ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN
			{
			dbg.location(1270,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1270:5: ( NOT ( ws )? )?
			int alt424=2;
			try { dbg.enterSubRule(424);
			try { dbg.enterDecision(424, decisionCanBacktrack[424]);

			int LA424_0 = input.LA(1);
			if ( (LA424_0==NOT) ) {
				alt424=1;
			}
			} finally {dbg.exitDecision(424);}

			switch (alt424) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1270:6: NOT ( ws )?
					{
					dbg.location(1270,6);
					match(input,NOT,FOLLOW_NOT_in_less_condition8936); if (state.failed) return;dbg.location(1270,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1270:10: ( ws )?
					int alt423=2;
					try { dbg.enterSubRule(423);
					try { dbg.enterDecision(423, decisionCanBacktrack[423]);

					int LA423_0 = input.LA(1);
					if ( (LA423_0==COMMENT||LA423_0==NL||LA423_0==WS) ) {
						alt423=1;
					}
					} finally {dbg.exitDecision(423);}

					switch (alt423) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1270:10: ws
							{
							dbg.location(1270,10);
							pushFollow(FOLLOW_ws_in_less_condition8938);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(423);}

					}
					break;

			}
			} finally {dbg.exitSubRule(424);}
			dbg.location(1271,5);
			match(input,LPAREN,FOLLOW_LPAREN_in_less_condition8947); if (state.failed) return;dbg.location(1271,12);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1271:12: ( ws )?
			int alt425=2;
			try { dbg.enterSubRule(425);
			try { dbg.enterDecision(425, decisionCanBacktrack[425]);

			int LA425_0 = input.LA(1);
			if ( (LA425_0==COMMENT||LA425_0==NL||LA425_0==WS) ) {
				alt425=1;
			}
			} finally {dbg.exitDecision(425);}

			switch (alt425) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1271:12: ws
					{
					dbg.location(1271,12);
					pushFollow(FOLLOW_ws_in_less_condition8949);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(425);}
			dbg.location(1272,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1272:9: ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1273:14: ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )?
			{
			dbg.location(1273,14);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1273:14: ( cp_variable | less_function_in_condition )
			int alt426=2;
			try { dbg.enterSubRule(426);
			try { dbg.enterDecision(426, decisionCanBacktrack[426]);

			int LA426_0 = input.LA(1);
			if ( (LA426_0==AT_IDENT||(LA426_0 >= BOTTOMCENTER_SYM && LA426_0 <= BOTTOMRIGHT_SYM)||LA426_0==CHARSET_SYM||LA426_0==COUNTER_STYLE_SYM||LA426_0==FONT_FACE_SYM||LA426_0==IMPORT_SYM||(LA426_0 >= LEFTBOTTOM_SYM && LA426_0 <= LEFTTOP_SYM)||LA426_0==MEDIA_SYM||LA426_0==MOZ_DOCUMENT_SYM||LA426_0==NAMESPACE_SYM||LA426_0==PAGE_SYM||(LA426_0 >= RIGHTBOTTOM_SYM && LA426_0 <= RIGHTTOP_SYM)||(LA426_0 >= SASS_AT_ROOT && LA426_0 <= SASS_DEBUG)||(LA426_0 >= SASS_EACH && LA426_0 <= SASS_ELSE)||LA426_0==SASS_EXTEND||(LA426_0 >= SASS_FOR && LA426_0 <= SASS_FUNCTION)||(LA426_0 >= SASS_IF && LA426_0 <= SASS_MIXIN)||(LA426_0 >= SASS_RETURN && LA426_0 <= SASS_WHILE)||(LA426_0 >= TOPCENTER_SYM && LA426_0 <= TOPRIGHT_SYM)||LA426_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt426=1;
			}
			else if ( (LA426_0==IDENT) ) {
				int LA426_2 = input.LA(2);
				if ( (LA426_2==DOT) ) {
					alt426=1;
				}
				else if ( (LA426_2==COMMENT||LA426_2==LPAREN||LA426_2==NL||LA426_2==WS) ) {
					alt426=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 426, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 426, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(426);}

			switch (alt426) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1273:15: cp_variable
					{
					dbg.location(1273,15);
					pushFollow(FOLLOW_cp_variable_in_less_condition8976);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1273:29: less_function_in_condition
					{
					dbg.location(1273,29);
					pushFollow(FOLLOW_less_function_in_condition_in_less_condition8980);
					less_function_in_condition();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(426);}
			dbg.location(1273,57);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1273:57: ( ws )?
			int alt427=2;
			try { dbg.enterSubRule(427);
			try { dbg.enterDecision(427, decisionCanBacktrack[427]);

			int LA427_0 = input.LA(1);
			if ( (LA427_0==COMMENT||LA427_0==NL||LA427_0==WS) ) {
				alt427=1;
			}
			} finally {dbg.exitDecision(427);}

			switch (alt427) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1273:57: ws
					{
					dbg.location(1273,57);
					pushFollow(FOLLOW_ws_in_less_condition8983);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(427);}
			dbg.location(1273,61);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1273:61: ( less_condition_operator ( ws )? cp_math_expression )?
			int alt429=2;
			try { dbg.enterSubRule(429);
			try { dbg.enterDecision(429, decisionCanBacktrack[429]);

			int LA429_0 = input.LA(1);
			if ( ((LA429_0 >= GREATER && LA429_0 <= GREATER_OR_EQ)||LA429_0==LESS||LA429_0==LESS_OR_EQ||LA429_0==OPEQ) ) {
				alt429=1;
			}
			} finally {dbg.exitDecision(429);}

			switch (alt429) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1273:62: less_condition_operator ( ws )? cp_math_expression
					{
					dbg.location(1273,62);
					pushFollow(FOLLOW_less_condition_operator_in_less_condition8987);
					less_condition_operator();
					state._fsp--;
					if (state.failed) return;dbg.location(1273,86);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1273:86: ( ws )?
					int alt428=2;
					try { dbg.enterSubRule(428);
					try { dbg.enterDecision(428, decisionCanBacktrack[428]);

					int LA428_0 = input.LA(1);
					if ( (LA428_0==COMMENT||LA428_0==NL||LA428_0==WS) ) {
						alt428=1;
					}
					} finally {dbg.exitDecision(428);}

					switch (alt428) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1273:86: ws
							{
							dbg.location(1273,86);
							pushFollow(FOLLOW_ws_in_less_condition8989);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(428);}
					dbg.location(1273,90);
					pushFollow(FOLLOW_cp_math_expression_in_less_condition8992);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(429);}

			}
			dbg.location(1275,5);
			match(input,RPAREN,FOLLOW_RPAREN_in_less_condition9010); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1276, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_condition");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_condition"



	// $ANTLR start "less_function_in_condition"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1279:1: less_function_in_condition : less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN ;
	public final void less_function_in_condition() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_function_in_condition");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1279, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1280:5: ( less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:5: less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN
			{
			dbg.location(1281,5);
			pushFollow(FOLLOW_less_fn_name_in_less_function_in_condition9032);
			less_fn_name();
			state._fsp--;
			if (state.failed) return;dbg.location(1281,18);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:18: ( ws )?
			int alt430=2;
			try { dbg.enterSubRule(430);
			try { dbg.enterDecision(430, decisionCanBacktrack[430]);

			int LA430_0 = input.LA(1);
			if ( (LA430_0==COMMENT||LA430_0==NL||LA430_0==WS) ) {
				alt430=1;
			}
			} finally {dbg.exitDecision(430);}

			switch (alt430) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:18: ws
					{
					dbg.location(1281,18);
					pushFollow(FOLLOW_ws_in_less_function_in_condition9034);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(430);}
			dbg.location(1281,22);
			match(input,LPAREN,FOLLOW_LPAREN_in_less_function_in_condition9037); if (state.failed) return;dbg.location(1281,29);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:29: ( ws )?
			int alt431=2;
			try { dbg.enterSubRule(431);
			try { dbg.enterDecision(431, decisionCanBacktrack[431]);

			int LA431_0 = input.LA(1);
			if ( (LA431_0==COMMENT||LA431_0==NL||LA431_0==WS) ) {
				alt431=1;
			}
			} finally {dbg.exitDecision(431);}

			switch (alt431) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:29: ws
					{
					dbg.location(1281,29);
					pushFollow(FOLLOW_ws_in_less_function_in_condition9039);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(431);}
			dbg.location(1281,33);
			pushFollow(FOLLOW_cp_variable_in_less_function_in_condition9042);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(1281,45);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:45: ( ws )?
			int alt432=2;
			try { dbg.enterSubRule(432);
			try { dbg.enterDecision(432, decisionCanBacktrack[432]);

			int LA432_0 = input.LA(1);
			if ( (LA432_0==COMMENT||LA432_0==NL||LA432_0==WS) ) {
				alt432=1;
			}
			} finally {dbg.exitDecision(432);}

			switch (alt432) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:45: ws
					{
					dbg.location(1281,45);
					pushFollow(FOLLOW_ws_in_less_function_in_condition9044);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(432);}
			dbg.location(1281,49);
			match(input,RPAREN,FOLLOW_RPAREN_in_less_function_in_condition9047); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1282, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_function_in_condition");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_function_in_condition"



	// $ANTLR start "less_fn_name"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1285:1: less_fn_name : IDENT ;
	public final void less_fn_name() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_fn_name");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1285, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1286:5: ( IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1287:5: IDENT
			{
			dbg.location(1287,5);
			match(input,IDENT,FOLLOW_IDENT_in_less_fn_name9069); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1288, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_fn_name");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_fn_name"



	// $ANTLR start "less_condition_operator"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1290:1: less_condition_operator : ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ );
	public final void less_condition_operator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_condition_operator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1290, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1291:5: ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(1291,5);
			if ( (input.LA(1) >= GREATER && input.LA(1) <= GREATER_OR_EQ)||input.LA(1)==LESS||input.LA(1)==LESS_OR_EQ||input.LA(1)==OPEQ ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1293, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_condition_operator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_condition_operator"



	// $ANTLR start "less_selector_interpolation_exp"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1295:1: less_selector_interpolation_exp : ( IDENT | MINUS )? less_selector_interpolation ( less_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )? ;
	public final void less_selector_interpolation_exp() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_selector_interpolation_exp");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1295, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1295:33: ( ( IDENT | MINUS )? less_selector_interpolation ( less_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:5: ( IDENT | MINUS )? less_selector_interpolation ( less_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )?
			{
			dbg.location(1296,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:5: ( IDENT | MINUS )?
			int alt433=2;
			try { dbg.enterSubRule(433);
			try { dbg.enterDecision(433, decisionCanBacktrack[433]);

			int LA433_0 = input.LA(1);
			if ( (LA433_0==IDENT||LA433_0==MINUS) ) {
				alt433=1;
			}
			} finally {dbg.exitDecision(433);}

			switch (alt433) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
					{
					dbg.location(1296,5);
					if ( input.LA(1)==IDENT||input.LA(1)==MINUS ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;

			}
			} finally {dbg.exitSubRule(433);}
			dbg.location(1296,22);
			pushFollow(FOLLOW_less_selector_interpolation_in_less_selector_interpolation_exp9132);
			less_selector_interpolation();
			state._fsp--;
			if (state.failed) return;dbg.location(1296,50);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:50: ( less_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )?
			int alt435=3;
			try { dbg.enterSubRule(435);
			try { dbg.enterDecision(435, decisionCanBacktrack[435]);

			switch ( input.LA(1) ) {
				case IDENT:
				case MINUS:
					{
					int LA435_1 = input.LA(2);
					if ( (LA435_1==AT_SIGN) ) {
						alt435=1;
					}
					else if ( ((LA435_1 >= COLON && LA435_1 <= COMMENT)||(LA435_1 >= DCOLON && LA435_1 <= DOT)||LA435_1==GREATER||(LA435_1 >= HASH && LA435_1 <= HASH_SYMBOL)||LA435_1==IDENT||(LA435_1 >= LBRACE && LA435_1 <= LBRACKET)||LA435_1==LENGTH||LA435_1==LESS_AND||LA435_1==MINUS||LA435_1==NL||LA435_1==PLUS||LA435_1==RBRACE||LA435_1==RPAREN||LA435_1==SASS_EXTEND_ONLY_SELECTOR||LA435_1==SEMI||LA435_1==TILDE||LA435_1==WS) ) {
						alt435=2;
					}
					}
					break;
				case AT_SIGN:
					{
					alt435=1;
					}
					break;
				case DIMENSION:
					{
					int LA435_3 = input.LA(2);
					if ( (!(evalPredicate(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"),""))) ) {
						alt435=2;
					}
					}
					break;
				case LENGTH:
					{
					alt435=2;
					}
					break;
			}
			} finally {dbg.exitDecision(435);}

			switch (alt435) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:51: less_selector_interpolation_exp
					{
					dbg.location(1296,51);
					pushFollow(FOLLOW_less_selector_interpolation_exp_in_less_selector_interpolation_exp9135);
					less_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:85: ( IDENT | MINUS | DIMENSION | LENGTH )+
					{
					dbg.location(1296,85);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:85: ( IDENT | MINUS | DIMENSION | LENGTH )+
					int cnt434=0;
					try { dbg.enterSubRule(434);

					loop434:
					while (true) {
						int alt434=2;
						try { dbg.enterDecision(434, decisionCanBacktrack[434]);

						int LA434_0 = input.LA(1);
						if ( (LA434_0==DIMENSION) ) {
							int LA434_2 = input.LA(2);
							if ( (!(evalPredicate(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"),""))) ) {
								alt434=1;
							}

						}
						else if ( (LA434_0==IDENT||LA434_0==LENGTH||LA434_0==MINUS) ) {
							alt434=1;
						}

						} finally {dbg.exitDecision(434);}

						switch (alt434) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
							{
							dbg.location(1296,85);
							if ( input.LA(1)==DIMENSION||input.LA(1)==IDENT||input.LA(1)==LENGTH||input.LA(1)==MINUS ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}
							}
							break;

						default :
							if ( cnt434 >= 1 ) break loop434;
							if (state.backtracking>0) {state.failed=true; return;}
							EarlyExitException eee = new EarlyExitException(434, input);
							dbg.recognitionException(eee);

							throw eee;
						}
						cnt434++;
					}
					} finally {dbg.exitSubRule(434);}

					}
					break;

			}
			} finally {dbg.exitSubRule(435);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1297, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_selector_interpolation_exp");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_selector_interpolation_exp"



	// $ANTLR start "less_selector_interpolation"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1299:1: less_selector_interpolation : AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE ;
	public final void less_selector_interpolation() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_selector_interpolation");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1299, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:5: ( AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:5: AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE
			{
			dbg.location(1301,5);
			match(input,AT_SIGN,FOLLOW_AT_SIGN_in_less_selector_interpolation9178); if (state.failed) return;dbg.location(1301,13);
			match(input,LBRACE,FOLLOW_LBRACE_in_less_selector_interpolation9180); if (state.failed) return;dbg.location(1301,20);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:20: ( ws )?
			int alt436=2;
			try { dbg.enterSubRule(436);
			try { dbg.enterDecision(436, decisionCanBacktrack[436]);

			int LA436_0 = input.LA(1);
			if ( (LA436_0==COMMENT||LA436_0==NL||LA436_0==WS) ) {
				alt436=1;
			}
			} finally {dbg.exitDecision(436);}

			switch (alt436) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:20: ws
					{
					dbg.location(1301,20);
					pushFollow(FOLLOW_ws_in_less_selector_interpolation9182);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(436);}
			dbg.location(1301,24);
			match(input,IDENT,FOLLOW_IDENT_in_less_selector_interpolation9185); if (state.failed) return;dbg.location(1301,30);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:30: ( ws )?
			int alt437=2;
			try { dbg.enterSubRule(437);
			try { dbg.enterDecision(437, decisionCanBacktrack[437]);

			int LA437_0 = input.LA(1);
			if ( (LA437_0==COMMENT||LA437_0==NL||LA437_0==WS) ) {
				alt437=1;
			}
			} finally {dbg.exitDecision(437);}

			switch (alt437) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:30: ws
					{
					dbg.location(1301,30);
					pushFollow(FOLLOW_ws_in_less_selector_interpolation9187);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(437);}
			dbg.location(1301,34);
			match(input,RBRACE,FOLLOW_RBRACE_in_less_selector_interpolation9190); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1302, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_selector_interpolation");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_selector_interpolation"



	// $ANTLR start "sass_selector_interpolation_exp"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1305:1: sass_selector_interpolation_exp : ( IDENT | MINUS )? sass_interpolation_expression_var ( sass_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )? ;
	public final void sass_selector_interpolation_exp() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_selector_interpolation_exp");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1305, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1305:33: ( ( IDENT | MINUS )? sass_interpolation_expression_var ( sass_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1306:5: ( IDENT | MINUS )? sass_interpolation_expression_var ( sass_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )?
			{
			dbg.location(1306,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1306:5: ( IDENT | MINUS )?
			int alt438=2;
			try { dbg.enterSubRule(438);
			try { dbg.enterDecision(438, decisionCanBacktrack[438]);

			int LA438_0 = input.LA(1);
			if ( (LA438_0==IDENT||LA438_0==MINUS) ) {
				alt438=1;
			}
			} finally {dbg.exitDecision(438);}

			switch (alt438) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
					{
					dbg.location(1306,5);
					if ( input.LA(1)==IDENT||input.LA(1)==MINUS ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;

			}
			} finally {dbg.exitSubRule(438);}
			dbg.location(1306,22);
			pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_exp9217);
			sass_interpolation_expression_var();
			state._fsp--;
			if (state.failed) return;dbg.location(1306,56);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1306:56: ( sass_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )?
			int alt440=3;
			try { dbg.enterSubRule(440);
			try { dbg.enterDecision(440, decisionCanBacktrack[440]);

			switch ( input.LA(1) ) {
				case IDENT:
				case MINUS:
					{
					int LA440_1 = input.LA(2);
					if ( (LA440_1==HASH_SYMBOL) ) {
						int LA440_6 = input.LA(3);
						if ( (LA440_6==LBRACE) ) {
							alt440=1;
						}
						else if ( (LA440_6==AT_SIGN||LA440_6==IDENT||LA440_6==MINUS||LA440_6==NAME) ) {
							alt440=2;
						}
					}
					else if ( ((LA440_1 >= COLON && LA440_1 <= COMMENT)||(LA440_1 >= DCOLON && LA440_1 <= DOT)||LA440_1==GREATER||LA440_1==HASH||LA440_1==IDENT||(LA440_1 >= LBRACE && LA440_1 <= LBRACKET)||LA440_1==LENGTH||LA440_1==LESS_AND||LA440_1==MINUS||LA440_1==NL||LA440_1==PLUS||LA440_1==RBRACE||LA440_1==RPAREN||LA440_1==SASS_EXTEND_ONLY_SELECTOR||LA440_1==SEMI||LA440_1==TILDE||LA440_1==WS) ) {
						alt440=2;
					}
					}
					break;
				case HASH_SYMBOL:
					{
					int LA440_2 = input.LA(2);
					if ( (LA440_2==LBRACE) ) {
						alt440=1;
					}
					}
					break;
				case DIMENSION:
					{
					int LA440_3 = input.LA(2);
					if ( (!(evalPredicate(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"),""))) ) {
						alt440=2;
					}
					}
					break;
				case LENGTH:
					{
					alt440=2;
					}
					break;
			}
			} finally {dbg.exitDecision(440);}

			switch (alt440) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1306:57: sass_selector_interpolation_exp
					{
					dbg.location(1306,57);
					pushFollow(FOLLOW_sass_selector_interpolation_exp_in_sass_selector_interpolation_exp9220);
					sass_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1306:91: ( IDENT | MINUS | DIMENSION | LENGTH )+
					{
					dbg.location(1306,91);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1306:91: ( IDENT | MINUS | DIMENSION | LENGTH )+
					int cnt439=0;
					try { dbg.enterSubRule(439);

					loop439:
					while (true) {
						int alt439=2;
						try { dbg.enterDecision(439, decisionCanBacktrack[439]);

						int LA439_0 = input.LA(1);
						if ( (LA439_0==DIMENSION) ) {
							int LA439_2 = input.LA(2);
							if ( (!(evalPredicate(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"),""))) ) {
								alt439=1;
							}

						}
						else if ( (LA439_0==IDENT||LA439_0==LENGTH||LA439_0==MINUS) ) {
							alt439=1;
						}

						} finally {dbg.exitDecision(439);}

						switch (alt439) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
							{
							dbg.location(1306,91);
							if ( input.LA(1)==DIMENSION||input.LA(1)==IDENT||input.LA(1)==LENGTH||input.LA(1)==MINUS ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}
							}
							break;

						default :
							if ( cnt439 >= 1 ) break loop439;
							if (state.backtracking>0) {state.failed=true; return;}
							EarlyExitException eee = new EarlyExitException(439, input);
							dbg.recognitionException(eee);

							throw eee;
						}
						cnt439++;
					}
					} finally {dbg.exitSubRule(439);}

					}
					break;

			}
			} finally {dbg.exitSubRule(440);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1307, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_selector_interpolation_exp");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_selector_interpolation_exp"



	// $ANTLR start "sass_interpolation_expression_var"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1309:1: sass_interpolation_expression_var : HASH_SYMBOL LBRACE ( WS )? cp_expression ( WS )? RBRACE ;
	public final void sass_interpolation_expression_var() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_interpolation_expression_var");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1309, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1310:5: ( HASH_SYMBOL LBRACE ( WS )? cp_expression ( WS )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:9: HASH_SYMBOL LBRACE ( WS )? cp_expression ( WS )? RBRACE
			{
			dbg.location(1311,9);
			match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var9267); if (state.failed) return;dbg.location(1311,21);
			match(input,LBRACE,FOLLOW_LBRACE_in_sass_interpolation_expression_var9269); if (state.failed) return;dbg.location(1311,28);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:28: ( WS )?
			int alt441=2;
			try { dbg.enterSubRule(441);
			try { dbg.enterDecision(441, decisionCanBacktrack[441]);

			int LA441_0 = input.LA(1);
			if ( (LA441_0==WS) ) {
				alt441=1;
			}
			} finally {dbg.exitDecision(441);}

			switch (alt441) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:28: WS
					{
					dbg.location(1311,28);
					match(input,WS,FOLLOW_WS_in_sass_interpolation_expression_var9271); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(441);}
			dbg.location(1311,32);
			pushFollow(FOLLOW_cp_expression_in_sass_interpolation_expression_var9274);
			cp_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1311,46);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:46: ( WS )?
			int alt442=2;
			try { dbg.enterSubRule(442);
			try { dbg.enterDecision(442, decisionCanBacktrack[442]);

			int LA442_0 = input.LA(1);
			if ( (LA442_0==WS) ) {
				alt442=1;
			}
			} finally {dbg.exitDecision(442);}

			switch (alt442) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:46: WS
					{
					dbg.location(1311,46);
					match(input,WS,FOLLOW_WS_in_sass_interpolation_expression_var9276); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(442);}
			dbg.location(1311,50);
			match(input,RBRACE,FOLLOW_RBRACE_in_sass_interpolation_expression_var9279); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1312, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_interpolation_expression_var");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_interpolation_expression_var"



	// $ANTLR start "sass_nested_properties"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1332:1: sass_nested_properties : property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
	public final void sass_nested_properties() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_nested_properties");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1332, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1333:5: ( property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:5: property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
			{
			dbg.location(1334,5);
			pushFollow(FOLLOW_property_in_sass_nested_properties9319);
			property();
			state._fsp--;
			if (state.failed) return;dbg.location(1334,14);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:14: ( ws )?
			int alt443=2;
			try { dbg.enterSubRule(443);
			try { dbg.enterDecision(443, decisionCanBacktrack[443]);

			int LA443_0 = input.LA(1);
			if ( (LA443_0==COMMENT||LA443_0==NL||LA443_0==WS) ) {
				alt443=1;
			}
			} finally {dbg.exitDecision(443);}

			switch (alt443) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:14: ws
					{
					dbg.location(1334,14);
					pushFollow(FOLLOW_ws_in_sass_nested_properties9321);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(443);}
			dbg.location(1334,18);
			match(input,COLON,FOLLOW_COLON_in_sass_nested_properties9324); if (state.failed) return;dbg.location(1334,24);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:24: ( ws )?
			int alt444=2;
			try { dbg.enterSubRule(444);
			try { dbg.enterDecision(444, decisionCanBacktrack[444]);

			int LA444_0 = input.LA(1);
			if ( (LA444_0==COMMENT||LA444_0==NL||LA444_0==WS) ) {
				alt444=1;
			}
			} finally {dbg.exitDecision(444);}

			switch (alt444) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:24: ws
					{
					dbg.location(1334,24);
					pushFollow(FOLLOW_ws_in_sass_nested_properties9326);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(444);}
			dbg.location(1334,28);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:28: ( propertyValue ( ws )? )?
			int alt446=2;
			try { dbg.enterSubRule(446);
			try { dbg.enterDecision(446, decisionCanBacktrack[446]);

			int LA446_0 = input.LA(1);
			if ( ((LA446_0 >= ANGLE && LA446_0 <= AT_SIGN)||(LA446_0 >= BOTTOMCENTER_SYM && LA446_0 <= BOTTOMRIGHT_SYM)||LA446_0==CHARSET_SYM||LA446_0==COUNTER_STYLE_SYM||LA446_0==DIMENSION||LA446_0==EMS||LA446_0==EXS||(LA446_0 >= FONT_FACE_SYM && LA446_0 <= FREQ)||LA446_0==GEN||(LA446_0 >= HASH && LA446_0 <= HASH_SYMBOL)||LA446_0==IDENT||LA446_0==IMPORT_SYM||(LA446_0 >= LBRACKET && LA446_0 <= LENGTH)||(LA446_0 >= LESS_AND && LA446_0 <= LESS_JS_STRING)||(LA446_0 >= MEDIA_SYM && LA446_0 <= MOZ_DOCUMENT_SYM)||LA446_0==NAMESPACE_SYM||LA446_0==NUMBER||(LA446_0 >= PAGE_SYM && LA446_0 <= PERCENTAGE_SYMBOL)||LA446_0==PLUS||(LA446_0 >= REM && LA446_0 <= RIGHTTOP_SYM)||(LA446_0 >= SASS_AT_ROOT && LA446_0 <= SASS_DEBUG)||(LA446_0 >= SASS_EACH && LA446_0 <= SASS_ELSE)||LA446_0==SASS_EXTEND||(LA446_0 >= SASS_FOR && LA446_0 <= SASS_FUNCTION)||(LA446_0 >= SASS_IF && LA446_0 <= SASS_MIXIN)||(LA446_0 >= SASS_RETURN && LA446_0 <= SASS_WHILE)||LA446_0==STRING||(LA446_0 >= TILDE && LA446_0 <= TOPRIGHT_SYM)||(LA446_0 >= URANGE && LA446_0 <= URI)||LA446_0==VARIABLE||LA446_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt446=1;
			}
			} finally {dbg.exitDecision(446);}

			switch (alt446) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:29: propertyValue ( ws )?
					{
					dbg.location(1334,29);
					pushFollow(FOLLOW_propertyValue_in_sass_nested_properties9330);
					propertyValue();
					state._fsp--;
					if (state.failed) return;dbg.location(1334,43);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:43: ( ws )?
					int alt445=2;
					try { dbg.enterSubRule(445);
					try { dbg.enterDecision(445, decisionCanBacktrack[445]);

					int LA445_0 = input.LA(1);
					if ( (LA445_0==COMMENT||LA445_0==NL||LA445_0==WS) ) {
						alt445=1;
					}
					} finally {dbg.exitDecision(445);}

					switch (alt445) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:43: ws
							{
							dbg.location(1334,43);
							pushFollow(FOLLOW_ws_in_sass_nested_properties9332);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(445);}

					}
					break;

			}
			} finally {dbg.exitSubRule(446);}
			dbg.location(1334,49);
			match(input,LBRACE,FOLLOW_LBRACE_in_sass_nested_properties9337); if (state.failed) return;dbg.location(1334,56);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:56: ( ws )?
			int alt447=2;
			try { dbg.enterSubRule(447);
			try { dbg.enterDecision(447, decisionCanBacktrack[447]);

			int LA447_0 = input.LA(1);
			if ( (LA447_0==COMMENT||LA447_0==NL||LA447_0==WS) ) {
				alt447=1;
			}
			} finally {dbg.exitDecision(447);}

			switch (alt447) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:56: ws
					{
					dbg.location(1334,56);
					pushFollow(FOLLOW_ws_in_sass_nested_properties9339);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(447);}
			dbg.location(1334,60);
			pushFollow(FOLLOW_syncToFollow_in_sass_nested_properties9342);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(1334,73);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:73: ( declarations )?
			int alt448=2;
			try { dbg.enterSubRule(448);
			try { dbg.enterDecision(448, decisionCanBacktrack[448]);

			int LA448_0 = input.LA(1);
			if ( ((LA448_0 >= AT_IDENT && LA448_0 <= AT_SIGN)||(LA448_0 >= BOTTOMCENTER_SYM && LA448_0 <= BOTTOMRIGHT_SYM)||(LA448_0 >= CHARSET_SYM && LA448_0 <= COLON)||LA448_0==COUNTER_STYLE_SYM||(LA448_0 >= DCOLON && LA448_0 <= DOT)||LA448_0==FONT_FACE_SYM||(LA448_0 >= GEN && LA448_0 <= GREATER)||(LA448_0 >= HASH && LA448_0 <= HASH_SYMBOL)||LA448_0==IDENT||LA448_0==IMPORT_SYM||(LA448_0 >= LBRACKET && LA448_0 <= LEFTTOP_SYM)||LA448_0==LESS_AND||(LA448_0 >= MEDIA_SYM && LA448_0 <= MOZ_DOCUMENT_SYM)||LA448_0==NAMESPACE_SYM||LA448_0==PAGE_SYM||(LA448_0 >= PIPE && LA448_0 <= PLUS)||(LA448_0 >= RIGHTBOTTOM_SYM && LA448_0 <= RIGHTTOP_SYM)||(LA448_0 >= SASS_AT_ROOT && LA448_0 <= SASS_DEBUG)||(LA448_0 >= SASS_EACH && LA448_0 <= SASS_ELSE)||(LA448_0 >= SASS_ERROR && LA448_0 <= SASS_FUNCTION)||(LA448_0 >= SASS_IF && LA448_0 <= SASS_MIXIN)||(LA448_0 >= SASS_RETURN && LA448_0 <= SEMI)||LA448_0==STAR||LA448_0==SUPPORTS_SYM||LA448_0==TILDE||(LA448_0 >= TOPCENTER_SYM && LA448_0 <= TOPRIGHT_SYM)||LA448_0==VARIABLE||LA448_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt448=1;
			}
			} finally {dbg.exitDecision(448);}

			switch (alt448) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:73: declarations
					{
					dbg.location(1334,73);
					pushFollow(FOLLOW_declarations_in_sass_nested_properties9344);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(448);}
			dbg.location(1334,87);
			match(input,RBRACE,FOLLOW_RBRACE_in_sass_nested_properties9347); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1335, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_nested_properties");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_nested_properties"



	// $ANTLR start "sass_extend"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1337:1: sass_extend : SASS_EXTEND ws simpleSelectorSequence ( ( ws )? COMMA ( ws )? simpleSelectorSequence )* ( ws SASS_OPTIONAL )? ;
	public final void sass_extend() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_extend");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1337, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1338:5: ( SASS_EXTEND ws simpleSelectorSequence ( ( ws )? COMMA ( ws )? simpleSelectorSequence )* ( ws SASS_OPTIONAL )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1339:5: SASS_EXTEND ws simpleSelectorSequence ( ( ws )? COMMA ( ws )? simpleSelectorSequence )* ( ws SASS_OPTIONAL )?
			{
			dbg.location(1339,5);
			match(input,SASS_EXTEND,FOLLOW_SASS_EXTEND_in_sass_extend9368); if (state.failed) return;dbg.location(1339,17);
			pushFollow(FOLLOW_ws_in_sass_extend9370);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1339,20);
			pushFollow(FOLLOW_simpleSelectorSequence_in_sass_extend9372);
			simpleSelectorSequence();
			state._fsp--;
			if (state.failed) return;dbg.location(1339,43);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1339:43: ( ( ws )? COMMA ( ws )? simpleSelectorSequence )*
			try { dbg.enterSubRule(451);

			loop451:
			while (true) {
				int alt451=2;
				try { dbg.enterDecision(451, decisionCanBacktrack[451]);

				try {
					isCyclicDecision = true;
					alt451 = dfa451.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(451);}

				switch (alt451) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1339:44: ( ws )? COMMA ( ws )? simpleSelectorSequence
					{
					dbg.location(1339,44);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1339:44: ( ws )?
					int alt449=2;
					try { dbg.enterSubRule(449);
					try { dbg.enterDecision(449, decisionCanBacktrack[449]);

					int LA449_0 = input.LA(1);
					if ( (LA449_0==COMMENT||LA449_0==NL||LA449_0==WS) ) {
						alt449=1;
					}
					} finally {dbg.exitDecision(449);}

					switch (alt449) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1339:44: ws
							{
							dbg.location(1339,44);
							pushFollow(FOLLOW_ws_in_sass_extend9375);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(449);}
					dbg.location(1339,48);
					match(input,COMMA,FOLLOW_COMMA_in_sass_extend9378); if (state.failed) return;dbg.location(1339,54);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1339:54: ( ws )?
					int alt450=2;
					try { dbg.enterSubRule(450);
					try { dbg.enterDecision(450, decisionCanBacktrack[450]);

					int LA450_0 = input.LA(1);
					if ( (LA450_0==COMMENT||LA450_0==NL||LA450_0==WS) ) {
						alt450=1;
					}
					} finally {dbg.exitDecision(450);}

					switch (alt450) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1339:54: ws
							{
							dbg.location(1339,54);
							pushFollow(FOLLOW_ws_in_sass_extend9380);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(450);}
					dbg.location(1339,58);
					pushFollow(FOLLOW_simpleSelectorSequence_in_sass_extend9383);
					simpleSelectorSequence();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop451;
				}
			}
			} finally {dbg.exitSubRule(451);}
			dbg.location(1339,83);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1339:83: ( ws SASS_OPTIONAL )?
			int alt452=2;
			try { dbg.enterSubRule(452);
			try { dbg.enterDecision(452, decisionCanBacktrack[452]);

			try {
				isCyclicDecision = true;
				alt452 = dfa452.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(452);}

			switch (alt452) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1339:84: ws SASS_OPTIONAL
					{
					dbg.location(1339,84);
					pushFollow(FOLLOW_ws_in_sass_extend9388);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(1339,87);
					match(input,SASS_OPTIONAL,FOLLOW_SASS_OPTIONAL_in_sass_extend9390); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(452);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1340, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_extend");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_extend"



	// $ANTLR start "sass_extend_only_selector"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1342:1: sass_extend_only_selector : SASS_EXTEND_ONLY_SELECTOR ( sass_selector_interpolation_exp )? ;
	public final void sass_extend_only_selector() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_extend_only_selector");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1342, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1343:5: ( SASS_EXTEND_ONLY_SELECTOR ( sass_selector_interpolation_exp )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1344:5: SASS_EXTEND_ONLY_SELECTOR ( sass_selector_interpolation_exp )?
			{
			dbg.location(1344,5);
			match(input,SASS_EXTEND_ONLY_SELECTOR,FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector9413); if (state.failed) return;dbg.location(1344,31);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1344:31: ( sass_selector_interpolation_exp )?
			int alt453=2;
			try { dbg.enterSubRule(453);
			try { dbg.enterDecision(453, decisionCanBacktrack[453]);

			int LA453_0 = input.LA(1);
			if ( (LA453_0==IDENT||LA453_0==MINUS) ) {
				alt453=1;
			}
			else if ( (LA453_0==HASH_SYMBOL) ) {
				int LA453_2 = input.LA(2);
				if ( (LA453_2==LBRACE) ) {
					alt453=1;
				}
			}
			} finally {dbg.exitDecision(453);}

			switch (alt453) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1344:31: sass_selector_interpolation_exp
					{
					dbg.location(1344,31);
					pushFollow(FOLLOW_sass_selector_interpolation_exp_in_sass_extend_only_selector9415);
					sass_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(453);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1345, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_extend_only_selector");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_extend_only_selector"



	// $ANTLR start "sass_debug"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1347:1: sass_debug : ( SASS_DEBUG | SASS_WARN ) ws cp_expression ;
	public final void sass_debug() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_debug");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1347, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1348:5: ( ( SASS_DEBUG | SASS_WARN ) ws cp_expression )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1349:5: ( SASS_DEBUG | SASS_WARN ) ws cp_expression
			{
			dbg.location(1349,5);
			if ( input.LA(1)==SASS_DEBUG||input.LA(1)==SASS_WARN ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}dbg.location(1349,32);
			pushFollow(FOLLOW_ws_in_sass_debug9447);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1349,35);
			pushFollow(FOLLOW_cp_expression_in_sass_debug9449);
			cp_expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1350, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_debug");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_debug"



	// $ANTLR start "sass_error"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1352:1: sass_error : SASS_ERROR ws STRING ;
	public final void sass_error() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_error");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1352, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1353:5: ( SASS_ERROR ws STRING )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1354:5: SASS_ERROR ws STRING
			{
			dbg.location(1354,5);
			match(input,SASS_ERROR,FOLLOW_SASS_ERROR_in_sass_error9470); if (state.failed) return;dbg.location(1354,16);
			pushFollow(FOLLOW_ws_in_sass_error9472);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1354,19);
			match(input,STRING,FOLLOW_STRING_in_sass_error9474); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1355, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_error");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_error"



	// $ANTLR start "sass_control"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1357:1: sass_control : ( sass_if | sass_for | sass_each | sass_while );
	public final void sass_control() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_control");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1357, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1358:5: ( sass_if | sass_for | sass_each | sass_while )
			int alt454=4;
			try { dbg.enterDecision(454, decisionCanBacktrack[454]);

			switch ( input.LA(1) ) {
			case SASS_IF:
				{
				alt454=1;
				}
				break;
			case SASS_FOR:
				{
				alt454=2;
				}
				break;
			case SASS_EACH:
				{
				alt454=3;
				}
				break;
			case SASS_WHILE:
				{
				alt454=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 454, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(454);}

			switch (alt454) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1359:5: sass_if
					{
					dbg.location(1359,5);
					pushFollow(FOLLOW_sass_if_in_sass_control9495);
					sass_if();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1359:15: sass_for
					{
					dbg.location(1359,15);
					pushFollow(FOLLOW_sass_for_in_sass_control9499);
					sass_for();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1359:26: sass_each
					{
					dbg.location(1359,26);
					pushFollow(FOLLOW_sass_each_in_sass_control9503);
					sass_each();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1359:38: sass_while
					{
					dbg.location(1359,38);
					pushFollow(FOLLOW_sass_while_in_sass_control9507);
					sass_while();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1360, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_control");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_control"



	// $ANTLR start "sass_if"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1362:1: sass_if : SASS_IF ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? ;
	public final void sass_if() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_if");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1362, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1363:5: ( SASS_IF ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1364:5: SASS_IF ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
			{
			dbg.location(1364,5);
			match(input,SASS_IF,FOLLOW_SASS_IF_in_sass_if9528); if (state.failed) return;dbg.location(1364,13);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1364:13: ( ws )?
			int alt455=2;
			try { dbg.enterSubRule(455);
			try { dbg.enterDecision(455, decisionCanBacktrack[455]);

			int LA455_0 = input.LA(1);
			if ( (LA455_0==COMMENT||LA455_0==NL||LA455_0==WS) ) {
				alt455=1;
			}
			} finally {dbg.exitDecision(455);}

			switch (alt455) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1364:13: ws
					{
					dbg.location(1364,13);
					pushFollow(FOLLOW_ws_in_sass_if9530);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(455);}
			dbg.location(1364,17);
			pushFollow(FOLLOW_sass_control_expression_in_sass_if9533);
			sass_control_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1364,41);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1364:41: ( ws )?
			int alt456=2;
			try { dbg.enterSubRule(456);
			try { dbg.enterDecision(456, decisionCanBacktrack[456]);

			int LA456_0 = input.LA(1);
			if ( (LA456_0==COMMENT||LA456_0==NL||LA456_0==WS) ) {
				alt456=1;
			}
			} finally {dbg.exitDecision(456);}

			switch (alt456) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1364:41: ws
					{
					dbg.location(1364,41);
					pushFollow(FOLLOW_ws_in_sass_if9535);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(456);}
			dbg.location(1364,45);
			pushFollow(FOLLOW_sass_control_block_in_sass_if9538);
			sass_control_block();
			state._fsp--;
			if (state.failed) return;dbg.location(1364,64);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1364:64: ( ( ws )? sass_else )?
			int alt458=2;
			try { dbg.enterSubRule(458);
			try { dbg.enterDecision(458, decisionCanBacktrack[458]);

			try {
				isCyclicDecision = true;
				alt458 = dfa458.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(458);}

			switch (alt458) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1364:65: ( ws )? sass_else
					{
					dbg.location(1364,65);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1364:65: ( ws )?
					int alt457=2;
					try { dbg.enterSubRule(457);
					try { dbg.enterDecision(457, decisionCanBacktrack[457]);

					int LA457_0 = input.LA(1);
					if ( (LA457_0==COMMENT||LA457_0==NL||LA457_0==WS) ) {
						alt457=1;
					}
					} finally {dbg.exitDecision(457);}

					switch (alt457) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1364:65: ws
							{
							dbg.location(1364,65);
							pushFollow(FOLLOW_ws_in_sass_if9541);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(457);}
					dbg.location(1364,69);
					pushFollow(FOLLOW_sass_else_in_sass_if9544);
					sass_else();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(458);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1365, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_if");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_if"



	// $ANTLR start "sass_else"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1367:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | ( ( SASS_ELSE ( ws )? {...}? IDENT ) | SASS_ELSEIF ) ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );
	public final void sass_else() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_else");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1367, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1368:5: ( SASS_ELSE ( ws )? sass_control_block | ( ( SASS_ELSE ( ws )? {...}? IDENT ) | SASS_ELSEIF ) ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
			int alt466=2;
			try { dbg.enterDecision(466, decisionCanBacktrack[466]);

			try {
				isCyclicDecision = true;
				alt466 = dfa466.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(466);}

			switch (alt466) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1369:5: SASS_ELSE ( ws )? sass_control_block
					{
					dbg.location(1369,5);
					match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else9567); if (state.failed) return;dbg.location(1369,15);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1369:15: ( ws )?
					int alt459=2;
					try { dbg.enterSubRule(459);
					try { dbg.enterDecision(459, decisionCanBacktrack[459]);

					int LA459_0 = input.LA(1);
					if ( (LA459_0==COMMENT||LA459_0==NL||LA459_0==WS) ) {
						alt459=1;
					}
					} finally {dbg.exitDecision(459);}

					switch (alt459) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1369:15: ws
							{
							dbg.location(1369,15);
							pushFollow(FOLLOW_ws_in_sass_else9569);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(459);}
					dbg.location(1369,19);
					pushFollow(FOLLOW_sass_control_block_in_sass_else9572);
					sass_control_block();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1371:5: ( ( SASS_ELSE ( ws )? {...}? IDENT ) | SASS_ELSEIF ) ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
					{
					dbg.location(1371,5);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1371:5: ( ( SASS_ELSE ( ws )? {...}? IDENT ) | SASS_ELSEIF )
					int alt461=2;
					try { dbg.enterSubRule(461);
					try { dbg.enterDecision(461, decisionCanBacktrack[461]);

					int LA461_0 = input.LA(1);
					if ( (LA461_0==SASS_ELSE) ) {
						alt461=1;
					}
					else if ( (LA461_0==SASS_ELSEIF) ) {
						alt461=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 461, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(461);}

					switch (alt461) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1371:6: ( SASS_ELSE ( ws )? {...}? IDENT )
							{
							dbg.location(1371,6);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1371:6: ( SASS_ELSE ( ws )? {...}? IDENT )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1371:7: SASS_ELSE ( ws )? {...}? IDENT
							{
							dbg.location(1371,7);
							match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else9586); if (state.failed) return;dbg.location(1371,17);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1371:17: ( ws )?
							int alt460=2;
							try { dbg.enterSubRule(460);
							try { dbg.enterDecision(460, decisionCanBacktrack[460]);

							int LA460_0 = input.LA(1);
							if ( (LA460_0==COMMENT||LA460_0==NL||LA460_0==WS) ) {
								alt460=1;
							}
							} finally {dbg.exitDecision(460);}

							switch (alt460) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1371:17: ws
									{
									dbg.location(1371,17);
									pushFollow(FOLLOW_ws_in_sass_else9588);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(460);}
							dbg.location(1371,21);
							if ( !(evalPredicate(tokenNameEquals("if"),"tokenNameEquals(\"if\")")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "sass_else", "tokenNameEquals(\"if\")");
							}dbg.location(1371,46);
							match(input,IDENT,FOLLOW_IDENT_in_sass_else9593); if (state.failed) return;
							}

							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1371:64: SASS_ELSEIF
							{
							dbg.location(1371,64);
							match(input,SASS_ELSEIF,FOLLOW_SASS_ELSEIF_in_sass_else9600); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(461);}
					dbg.location(1371,77);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1371:77: ( ws )?
					int alt462=2;
					try { dbg.enterSubRule(462);
					try { dbg.enterDecision(462, decisionCanBacktrack[462]);

					int LA462_0 = input.LA(1);
					if ( (LA462_0==COMMENT||LA462_0==NL||LA462_0==WS) ) {
						alt462=1;
					}
					} finally {dbg.exitDecision(462);}

					switch (alt462) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1371:77: ws
							{
							dbg.location(1371,77);
							pushFollow(FOLLOW_ws_in_sass_else9603);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(462);}
					dbg.location(1371,81);
					pushFollow(FOLLOW_sass_control_expression_in_sass_else9606);
					sass_control_expression();
					state._fsp--;
					if (state.failed) return;dbg.location(1371,105);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1371:105: ( ws )?
					int alt463=2;
					try { dbg.enterSubRule(463);
					try { dbg.enterDecision(463, decisionCanBacktrack[463]);

					int LA463_0 = input.LA(1);
					if ( (LA463_0==COMMENT||LA463_0==NL||LA463_0==WS) ) {
						alt463=1;
					}
					} finally {dbg.exitDecision(463);}

					switch (alt463) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1371:105: ws
							{
							dbg.location(1371,105);
							pushFollow(FOLLOW_ws_in_sass_else9608);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(463);}
					dbg.location(1371,109);
					pushFollow(FOLLOW_sass_control_block_in_sass_else9611);
					sass_control_block();
					state._fsp--;
					if (state.failed) return;dbg.location(1371,128);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1371:128: ( ( ws )? sass_else )?
					int alt465=2;
					try { dbg.enterSubRule(465);
					try { dbg.enterDecision(465, decisionCanBacktrack[465]);

					try {
						isCyclicDecision = true;
						alt465 = dfa465.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(465);}

					switch (alt465) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1371:129: ( ws )? sass_else
							{
							dbg.location(1371,129);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1371:129: ( ws )?
							int alt464=2;
							try { dbg.enterSubRule(464);
							try { dbg.enterDecision(464, decisionCanBacktrack[464]);

							int LA464_0 = input.LA(1);
							if ( (LA464_0==COMMENT||LA464_0==NL||LA464_0==WS) ) {
								alt464=1;
							}
							} finally {dbg.exitDecision(464);}

							switch (alt464) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1371:129: ws
									{
									dbg.location(1371,129);
									pushFollow(FOLLOW_ws_in_sass_else9614);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(464);}
							dbg.location(1371,133);
							pushFollow(FOLLOW_sass_else_in_sass_else9617);
							sass_else();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(465);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1372, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_else");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_else"



	// $ANTLR start "sass_control_expression"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1374:1: sass_control_expression : cp_expression ;
	public final void sass_control_expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_control_expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1374, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1375:5: ( cp_expression )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1376:5: cp_expression
			{
			dbg.location(1376,5);
			pushFollow(FOLLOW_cp_expression_in_sass_control_expression9640);
			cp_expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1377, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_control_expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_control_expression"



	// $ANTLR start "sass_for"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1379:1: sass_for : SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block ;
	public final void sass_for() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_for");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1379, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1380:5: ( SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1381:5: SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block
			{
			dbg.location(1381,5);
			match(input,SASS_FOR,FOLLOW_SASS_FOR_in_sass_for9661); if (state.failed) return;dbg.location(1381,14);
			pushFollow(FOLLOW_ws_in_sass_for9663);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1381,17);
			pushFollow(FOLLOW_cp_variable_in_sass_for9665);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(1381,29);
			pushFollow(FOLLOW_ws_in_sass_for9667);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1381,32);
			if ( !(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"from\")");
			}dbg.location(1381,59);
			match(input,IDENT,FOLLOW_IDENT_in_sass_for9671); if (state.failed) return;dbg.location(1381,74);
			pushFollow(FOLLOW_ws_in_sass_for9675);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1381,77);
			pushFollow(FOLLOW_cp_math_expression_in_sass_for9677);
			cp_math_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1381,96);
			pushFollow(FOLLOW_ws_in_sass_for9679);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1381,99);
			if ( !(evalPredicate(tokenNameEquals("to")|tokenNameEquals("through"),"tokenNameEquals(\"to\")|tokenNameEquals(\"through\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"to\")|tokenNameEquals(\"through\")");
			}dbg.location(1381,151);
			match(input,IDENT,FOLLOW_IDENT_in_sass_for9683); if (state.failed) return;dbg.location(1381,173);
			pushFollow(FOLLOW_ws_in_sass_for9687);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1381,176);
			pushFollow(FOLLOW_cp_math_expression_in_sass_for9689);
			cp_math_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1381,195);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1381:195: ( ws )?
			int alt467=2;
			try { dbg.enterSubRule(467);
			try { dbg.enterDecision(467, decisionCanBacktrack[467]);

			int LA467_0 = input.LA(1);
			if ( (LA467_0==COMMENT||LA467_0==NL||LA467_0==WS) ) {
				alt467=1;
			}
			} finally {dbg.exitDecision(467);}

			switch (alt467) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1381:195: ws
					{
					dbg.location(1381,195);
					pushFollow(FOLLOW_ws_in_sass_for9691);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(467);}
			dbg.location(1381,199);
			pushFollow(FOLLOW_sass_control_block_in_sass_for9694);
			sass_control_block();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1382, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_for");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_for"



	// $ANTLR start "sass_each"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1384:1: sass_each : SASS_EACH ws sass_each_variables ws {...}? IDENT ws ( cp_expression_list ( ( ws )? COMMA )? ( ws )? )+ sass_control_block ;
	public final void sass_each() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_each");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1384, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1385:5: ( SASS_EACH ws sass_each_variables ws {...}? IDENT ws ( cp_expression_list ( ( ws )? COMMA )? ( ws )? )+ sass_control_block )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1386:5: SASS_EACH ws sass_each_variables ws {...}? IDENT ws ( cp_expression_list ( ( ws )? COMMA )? ( ws )? )+ sass_control_block
			{
			dbg.location(1386,5);
			match(input,SASS_EACH,FOLLOW_SASS_EACH_in_sass_each9715); if (state.failed) return;dbg.location(1386,15);
			pushFollow(FOLLOW_ws_in_sass_each9717);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1386,18);
			pushFollow(FOLLOW_sass_each_variables_in_sass_each9719);
			sass_each_variables();
			state._fsp--;
			if (state.failed) return;dbg.location(1386,38);
			pushFollow(FOLLOW_ws_in_sass_each9721);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1386,41);
			if ( !(evalPredicate(tokenNameEquals("in"),"tokenNameEquals(\"in\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_each", "tokenNameEquals(\"in\")");
			}dbg.location(1386,66);
			match(input,IDENT,FOLLOW_IDENT_in_sass_each9725); if (state.failed) return;dbg.location(1386,79);
			pushFollow(FOLLOW_ws_in_sass_each9729);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1386,82);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1386:82: ( cp_expression_list ( ( ws )? COMMA )? ( ws )? )+
			int cnt471=0;
			try { dbg.enterSubRule(471);

			loop471:
			while (true) {
				int alt471=2;
				try { dbg.enterDecision(471, decisionCanBacktrack[471]);

				int LA471_0 = input.LA(1);
				if ( (LA471_0==LBRACE) ) {
					int LA471_1 = input.LA(2);
					if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
						alt471=1;
					}

				}
				else if ( ((LA471_0 >= ANGLE && LA471_0 <= AT_SIGN)||(LA471_0 >= BOTTOMCENTER_SYM && LA471_0 <= BOTTOMRIGHT_SYM)||LA471_0==CHARSET_SYM||LA471_0==COUNTER_STYLE_SYM||LA471_0==DIMENSION||LA471_0==EMS||LA471_0==EXS||(LA471_0 >= FONT_FACE_SYM && LA471_0 <= FREQ)||LA471_0==GEN||(LA471_0 >= HASH && LA471_0 <= HASH_SYMBOL)||(LA471_0 >= IDENT && LA471_0 <= IMPORT_SYM)||(LA471_0 >= LBRACKET && LA471_0 <= LENGTH)||(LA471_0 >= LESS_AND && LA471_0 <= LESS_JS_STRING)||LA471_0==LPAREN||(LA471_0 >= MEDIA_SYM && LA471_0 <= MOZ_DOCUMENT_SYM)||LA471_0==NAMESPACE_SYM||(LA471_0 >= NOT && LA471_0 <= NUMBER)||(LA471_0 >= PAGE_SYM && LA471_0 <= PERCENTAGE_SYMBOL)||LA471_0==PLUS||(LA471_0 >= REM && LA471_0 <= RIGHTTOP_SYM)||(LA471_0 >= SASS_AT_ROOT && LA471_0 <= SASS_DEBUG)||(LA471_0 >= SASS_EACH && LA471_0 <= SASS_ELSE)||LA471_0==SASS_EXTEND||(LA471_0 >= SASS_FOR && LA471_0 <= SASS_FUNCTION)||(LA471_0 >= SASS_IF && LA471_0 <= SASS_MIXIN)||(LA471_0 >= SASS_RETURN && LA471_0 <= SASS_WHILE)||LA471_0==STRING||(LA471_0 >= TILDE && LA471_0 <= TOPRIGHT_SYM)||(LA471_0 >= URANGE && LA471_0 <= URI)||LA471_0==VARIABLE||LA471_0==WEBKIT_KEYFRAMES_SYM) ) {
					alt471=1;
				}

				} finally {dbg.exitDecision(471);}

				switch (alt471) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1386:83: cp_expression_list ( ( ws )? COMMA )? ( ws )?
					{
					dbg.location(1386,83);
					pushFollow(FOLLOW_cp_expression_list_in_sass_each9732);
					cp_expression_list();
					state._fsp--;
					if (state.failed) return;dbg.location(1386,102);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1386:102: ( ( ws )? COMMA )?
					int alt469=2;
					try { dbg.enterSubRule(469);
					try { dbg.enterDecision(469, decisionCanBacktrack[469]);

					try {
						isCyclicDecision = true;
						alt469 = dfa469.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(469);}

					switch (alt469) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1386:103: ( ws )? COMMA
							{
							dbg.location(1386,103);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1386:103: ( ws )?
							int alt468=2;
							try { dbg.enterSubRule(468);
							try { dbg.enterDecision(468, decisionCanBacktrack[468]);

							int LA468_0 = input.LA(1);
							if ( (LA468_0==COMMENT||LA468_0==NL||LA468_0==WS) ) {
								alt468=1;
							}
							} finally {dbg.exitDecision(468);}

							switch (alt468) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1386:103: ws
									{
									dbg.location(1386,103);
									pushFollow(FOLLOW_ws_in_sass_each9735);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(468);}
							dbg.location(1386,107);
							match(input,COMMA,FOLLOW_COMMA_in_sass_each9738); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(469);}
					dbg.location(1386,115);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1386:115: ( ws )?
					int alt470=2;
					try { dbg.enterSubRule(470);
					try { dbg.enterDecision(470, decisionCanBacktrack[470]);

					int LA470_0 = input.LA(1);
					if ( (LA470_0==COMMENT||LA470_0==NL||LA470_0==WS) ) {
						alt470=1;
					}
					} finally {dbg.exitDecision(470);}

					switch (alt470) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1386:115: ws
							{
							dbg.location(1386,115);
							pushFollow(FOLLOW_ws_in_sass_each9742);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(470);}

					}
					break;

				default :
					if ( cnt471 >= 1 ) break loop471;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(471, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt471++;
			}
			} finally {dbg.exitSubRule(471);}
			dbg.location(1386,122);
			pushFollow(FOLLOW_sass_control_block_in_sass_each9748);
			sass_control_block();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1387, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_each");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_each"



	// $ANTLR start "sass_each_variables"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1389:1: sass_each_variables : cp_variable ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable )* ;
	public final void sass_each_variables() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_each_variables");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1389, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1390:5: ( cp_variable ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1391:5: cp_variable ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable )*
			{
			dbg.location(1391,5);
			pushFollow(FOLLOW_cp_variable_in_sass_each_variables9769);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(1391,17);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1391:17: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable )*
			try { dbg.enterSubRule(474);

			loop474:
			while (true) {
				int alt474=2;
				try { dbg.enterDecision(474, decisionCanBacktrack[474]);

				try {
					isCyclicDecision = true;
					alt474 = dfa474.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(474);}

				switch (alt474) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1391:19: ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable
					{
					dbg.location(1391,33);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1391:33: ( ws )?
					int alt472=2;
					try { dbg.enterSubRule(472);
					try { dbg.enterDecision(472, decisionCanBacktrack[472]);

					int LA472_0 = input.LA(1);
					if ( (LA472_0==COMMENT||LA472_0==NL||LA472_0==WS) ) {
						alt472=1;
					}
					} finally {dbg.exitDecision(472);}

					switch (alt472) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1391:33: ws
							{
							dbg.location(1391,33);
							pushFollow(FOLLOW_ws_in_sass_each_variables9781);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(472);}
					dbg.location(1391,37);
					match(input,COMMA,FOLLOW_COMMA_in_sass_each_variables9784); if (state.failed) return;dbg.location(1391,43);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1391:43: ( ws )?
					int alt473=2;
					try { dbg.enterSubRule(473);
					try { dbg.enterDecision(473, decisionCanBacktrack[473]);

					int LA473_0 = input.LA(1);
					if ( (LA473_0==COMMENT||LA473_0==NL||LA473_0==WS) ) {
						alt473=1;
					}
					} finally {dbg.exitDecision(473);}

					switch (alt473) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1391:43: ws
							{
							dbg.location(1391,43);
							pushFollow(FOLLOW_ws_in_sass_each_variables9786);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(473);}
					dbg.location(1391,47);
					pushFollow(FOLLOW_cp_variable_in_sass_each_variables9789);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop474;
				}
			}
			} finally {dbg.exitSubRule(474);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1392, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_each_variables");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_each_variables"



	// $ANTLR start "sass_while"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1394:1: sass_while : SASS_WHILE ws sass_control_expression ( ws )? sass_control_block ;
	public final void sass_while() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_while");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1394, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1395:5: ( SASS_WHILE ws sass_control_expression ( ws )? sass_control_block )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1396:5: SASS_WHILE ws sass_control_expression ( ws )? sass_control_block
			{
			dbg.location(1396,5);
			match(input,SASS_WHILE,FOLLOW_SASS_WHILE_in_sass_while9814); if (state.failed) return;dbg.location(1396,16);
			pushFollow(FOLLOW_ws_in_sass_while9816);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1396,19);
			pushFollow(FOLLOW_sass_control_expression_in_sass_while9818);
			sass_control_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1396,43);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1396:43: ( ws )?
			int alt475=2;
			try { dbg.enterSubRule(475);
			try { dbg.enterDecision(475, decisionCanBacktrack[475]);

			int LA475_0 = input.LA(1);
			if ( (LA475_0==COMMENT||LA475_0==NL||LA475_0==WS) ) {
				alt475=1;
			}
			} finally {dbg.exitDecision(475);}

			switch (alt475) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1396:43: ws
					{
					dbg.location(1396,43);
					pushFollow(FOLLOW_ws_in_sass_while9820);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(475);}
			dbg.location(1396,47);
			pushFollow(FOLLOW_sass_control_block_in_sass_while9823);
			sass_control_block();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1397, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_while");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_while"



	// $ANTLR start "sass_control_block"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1399:1: sass_control_block : LBRACE ( ws )? ( declarations )? RBRACE ;
	public final void sass_control_block() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_control_block");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1399, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1400:5: ( LBRACE ( ws )? ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1401:5: LBRACE ( ws )? ( declarations )? RBRACE
			{
			dbg.location(1401,5);
			match(input,LBRACE,FOLLOW_LBRACE_in_sass_control_block9844); if (state.failed) return;dbg.location(1401,12);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1401:12: ( ws )?
			int alt476=2;
			try { dbg.enterSubRule(476);
			try { dbg.enterDecision(476, decisionCanBacktrack[476]);

			int LA476_0 = input.LA(1);
			if ( (LA476_0==COMMENT||LA476_0==NL||LA476_0==WS) ) {
				alt476=1;
			}
			} finally {dbg.exitDecision(476);}

			switch (alt476) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1401:12: ws
					{
					dbg.location(1401,12);
					pushFollow(FOLLOW_ws_in_sass_control_block9846);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(476);}
			dbg.location(1401,16);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1401:16: ( declarations )?
			int alt477=2;
			try { dbg.enterSubRule(477);
			try { dbg.enterDecision(477, decisionCanBacktrack[477]);

			int LA477_0 = input.LA(1);
			if ( ((LA477_0 >= AT_IDENT && LA477_0 <= AT_SIGN)||(LA477_0 >= BOTTOMCENTER_SYM && LA477_0 <= BOTTOMRIGHT_SYM)||(LA477_0 >= CHARSET_SYM && LA477_0 <= COLON)||LA477_0==COUNTER_STYLE_SYM||(LA477_0 >= DCOLON && LA477_0 <= DOT)||LA477_0==FONT_FACE_SYM||(LA477_0 >= GEN && LA477_0 <= GREATER)||(LA477_0 >= HASH && LA477_0 <= HASH_SYMBOL)||LA477_0==IDENT||LA477_0==IMPORT_SYM||(LA477_0 >= LBRACKET && LA477_0 <= LEFTTOP_SYM)||LA477_0==LESS_AND||(LA477_0 >= MEDIA_SYM && LA477_0 <= MOZ_DOCUMENT_SYM)||LA477_0==NAMESPACE_SYM||LA477_0==PAGE_SYM||(LA477_0 >= PIPE && LA477_0 <= PLUS)||(LA477_0 >= RIGHTBOTTOM_SYM && LA477_0 <= RIGHTTOP_SYM)||(LA477_0 >= SASS_AT_ROOT && LA477_0 <= SASS_DEBUG)||(LA477_0 >= SASS_EACH && LA477_0 <= SASS_ELSE)||(LA477_0 >= SASS_ERROR && LA477_0 <= SASS_FUNCTION)||(LA477_0 >= SASS_IF && LA477_0 <= SASS_MIXIN)||(LA477_0 >= SASS_RETURN && LA477_0 <= SEMI)||LA477_0==STAR||LA477_0==SUPPORTS_SYM||LA477_0==TILDE||(LA477_0 >= TOPCENTER_SYM && LA477_0 <= TOPRIGHT_SYM)||LA477_0==VARIABLE||LA477_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt477=1;
			}
			} finally {dbg.exitDecision(477);}

			switch (alt477) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1401:16: declarations
					{
					dbg.location(1401,16);
					pushFollow(FOLLOW_declarations_in_sass_control_block9849);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(477);}
			dbg.location(1401,30);
			match(input,RBRACE,FOLLOW_RBRACE_in_sass_control_block9852); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1402, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_control_block");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_control_block"



	// $ANTLR start "sass_function_declaration"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1404:1: sass_function_declaration : SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE ;
	public final void sass_function_declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_function_declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1404, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1405:5: ( SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1410:5: SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE
			{
			dbg.location(1410,5);
			match(input,SASS_FUNCTION,FOLLOW_SASS_FUNCTION_in_sass_function_declaration9894); if (state.failed) return;dbg.location(1410,19);
			pushFollow(FOLLOW_ws_in_sass_function_declaration9896);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1410,22);
			pushFollow(FOLLOW_sass_function_name_in_sass_function_declaration9898);
			sass_function_name();
			state._fsp--;
			if (state.failed) return;dbg.location(1410,41);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1410:41: ( ws )?
			int alt478=2;
			try { dbg.enterSubRule(478);
			try { dbg.enterDecision(478, decisionCanBacktrack[478]);

			int LA478_0 = input.LA(1);
			if ( (LA478_0==COMMENT||LA478_0==NL||LA478_0==WS) ) {
				alt478=1;
			}
			} finally {dbg.exitDecision(478);}

			switch (alt478) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1410:41: ws
					{
					dbg.location(1410,41);
					pushFollow(FOLLOW_ws_in_sass_function_declaration9900);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(478);}
			dbg.location(1410,45);
			match(input,LPAREN,FOLLOW_LPAREN_in_sass_function_declaration9903); if (state.failed) return;dbg.location(1410,52);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1410:52: ( ws )?
			int alt479=2;
			try { dbg.enterSubRule(479);
			try { dbg.enterDecision(479, decisionCanBacktrack[479]);

			int LA479_0 = input.LA(1);
			if ( (LA479_0==COMMENT||LA479_0==NL||LA479_0==WS) ) {
				alt479=1;
			}
			} finally {dbg.exitDecision(479);}

			switch (alt479) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1410:52: ws
					{
					dbg.location(1410,52);
					pushFollow(FOLLOW_ws_in_sass_function_declaration9905);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(479);}
			dbg.location(1410,56);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1410:56: ( cp_args_list )?
			int alt480=2;
			try { dbg.enterSubRule(480);
			try { dbg.enterDecision(480, decisionCanBacktrack[480]);

			int LA480_0 = input.LA(1);
			if ( (LA480_0==AT_IDENT||(LA480_0 >= BOTTOMCENTER_SYM && LA480_0 <= BOTTOMRIGHT_SYM)||LA480_0==CHARSET_SYM||(LA480_0 >= COUNTER_STYLE_SYM && LA480_0 <= CP_DOTS)||LA480_0==FONT_FACE_SYM||LA480_0==IDENT||LA480_0==IMPORT_SYM||(LA480_0 >= LEFTBOTTOM_SYM && LA480_0 <= LEFTTOP_SYM)||LA480_0==LESS_REST||LA480_0==MEDIA_SYM||LA480_0==MOZ_DOCUMENT_SYM||LA480_0==NAMESPACE_SYM||LA480_0==PAGE_SYM||(LA480_0 >= RIGHTBOTTOM_SYM && LA480_0 <= RIGHTTOP_SYM)||(LA480_0 >= SASS_AT_ROOT && LA480_0 <= SASS_DEBUG)||(LA480_0 >= SASS_EACH && LA480_0 <= SASS_ELSE)||LA480_0==SASS_EXTEND||(LA480_0 >= SASS_FOR && LA480_0 <= SASS_FUNCTION)||(LA480_0 >= SASS_IF && LA480_0 <= SASS_MIXIN)||(LA480_0 >= SASS_RETURN && LA480_0 <= SASS_WHILE)||(LA480_0 >= TOPCENTER_SYM && LA480_0 <= TOPRIGHT_SYM)||LA480_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt480=1;
			}
			} finally {dbg.exitDecision(480);}

			switch (alt480) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1410:56: cp_args_list
					{
					dbg.location(1410,56);
					pushFollow(FOLLOW_cp_args_list_in_sass_function_declaration9908);
					cp_args_list();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(480);}
			dbg.location(1410,70);
			match(input,RPAREN,FOLLOW_RPAREN_in_sass_function_declaration9911); if (state.failed) return;dbg.location(1410,77);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1410:77: ( ws )?
			int alt481=2;
			try { dbg.enterSubRule(481);
			try { dbg.enterDecision(481, decisionCanBacktrack[481]);

			int LA481_0 = input.LA(1);
			if ( (LA481_0==COMMENT||LA481_0==NL||LA481_0==WS) ) {
				alt481=1;
			}
			} finally {dbg.exitDecision(481);}

			switch (alt481) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1410:77: ws
					{
					dbg.location(1410,77);
					pushFollow(FOLLOW_ws_in_sass_function_declaration9913);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(481);}
			dbg.location(1410,81);
			match(input,LBRACE,FOLLOW_LBRACE_in_sass_function_declaration9916); if (state.failed) return;dbg.location(1410,88);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1410:88: ( ws )?
			int alt482=2;
			try { dbg.enterSubRule(482);
			try { dbg.enterDecision(482, decisionCanBacktrack[482]);

			int LA482_0 = input.LA(1);
			if ( (LA482_0==COMMENT||LA482_0==NL||LA482_0==WS) ) {
				alt482=1;
			}
			} finally {dbg.exitDecision(482);}

			switch (alt482) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1410:88: ws
					{
					dbg.location(1410,88);
					pushFollow(FOLLOW_ws_in_sass_function_declaration9918);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(482);}
			dbg.location(1410,92);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1410:92: ( declarations )?
			int alt483=2;
			try { dbg.enterSubRule(483);
			try { dbg.enterDecision(483, decisionCanBacktrack[483]);

			int LA483_0 = input.LA(1);
			if ( ((LA483_0 >= AT_IDENT && LA483_0 <= AT_SIGN)||(LA483_0 >= BOTTOMCENTER_SYM && LA483_0 <= BOTTOMRIGHT_SYM)||(LA483_0 >= CHARSET_SYM && LA483_0 <= COLON)||LA483_0==COUNTER_STYLE_SYM||(LA483_0 >= DCOLON && LA483_0 <= DOT)||LA483_0==FONT_FACE_SYM||(LA483_0 >= GEN && LA483_0 <= GREATER)||(LA483_0 >= HASH && LA483_0 <= HASH_SYMBOL)||LA483_0==IDENT||LA483_0==IMPORT_SYM||(LA483_0 >= LBRACKET && LA483_0 <= LEFTTOP_SYM)||LA483_0==LESS_AND||(LA483_0 >= MEDIA_SYM && LA483_0 <= MOZ_DOCUMENT_SYM)||LA483_0==NAMESPACE_SYM||LA483_0==PAGE_SYM||(LA483_0 >= PIPE && LA483_0 <= PLUS)||(LA483_0 >= RIGHTBOTTOM_SYM && LA483_0 <= RIGHTTOP_SYM)||(LA483_0 >= SASS_AT_ROOT && LA483_0 <= SASS_DEBUG)||(LA483_0 >= SASS_EACH && LA483_0 <= SASS_ELSE)||(LA483_0 >= SASS_ERROR && LA483_0 <= SASS_FUNCTION)||(LA483_0 >= SASS_IF && LA483_0 <= SASS_MIXIN)||(LA483_0 >= SASS_RETURN && LA483_0 <= SEMI)||LA483_0==STAR||LA483_0==SUPPORTS_SYM||LA483_0==TILDE||(LA483_0 >= TOPCENTER_SYM && LA483_0 <= TOPRIGHT_SYM)||LA483_0==VARIABLE||LA483_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt483=1;
			}
			} finally {dbg.exitDecision(483);}

			switch (alt483) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1410:92: declarations
					{
					dbg.location(1410,92);
					pushFollow(FOLLOW_declarations_in_sass_function_declaration9921);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(483);}
			dbg.location(1410,106);
			match(input,RBRACE,FOLLOW_RBRACE_in_sass_function_declaration9924); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1411, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_function_declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_function_declaration"



	// $ANTLR start "sass_function_name"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1413:1: sass_function_name : IDENT ;
	public final void sass_function_name() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_function_name");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1413, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1414:5: ( IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1415:5: IDENT
			{
			dbg.location(1415,5);
			match(input,IDENT,FOLLOW_IDENT_in_sass_function_name9945); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1416, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_function_name");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_function_name"



	// $ANTLR start "sass_function_return"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1418:1: sass_function_return : SASS_RETURN ws cp_expression ;
	public final void sass_function_return() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_function_return");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1418, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1419:5: ( SASS_RETURN ws cp_expression )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1420:5: SASS_RETURN ws cp_expression
			{
			dbg.location(1420,5);
			match(input,SASS_RETURN,FOLLOW_SASS_RETURN_in_sass_function_return9966); if (state.failed) return;dbg.location(1420,17);
			pushFollow(FOLLOW_ws_in_sass_function_return9968);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1420,20);
			pushFollow(FOLLOW_cp_expression_in_sass_function_return9970);
			cp_expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1421, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_function_return");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_function_return"



	// $ANTLR start "sass_content"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1423:1: sass_content : SASS_CONTENT ;
	public final void sass_content() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_content");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1423, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1424:5: ( SASS_CONTENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1425:5: SASS_CONTENT
			{
			dbg.location(1425,5);
			match(input,SASS_CONTENT,FOLLOW_SASS_CONTENT_in_sass_content9991); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1426, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_content");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_content"



	// $ANTLR start "less_import_types"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1428:1: less_import_types :{...}? IDENT ;
	public final void less_import_types() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_import_types");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1428, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1428:18: ({...}? IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1429:5: {...}? IDENT
			{
			dbg.location(1429,5);
			if ( !(evalPredicate(tokenNameIs(new String[]{"LESS", "CSS", "REFERENCE", "INLINE", "ONCE", "MULTIPLE"}),"tokenNameIs(new String[]{\"LESS\", \"CSS\", \"REFERENCE\", \"INLINE\", \"ONCE\", \"MULTIPLE\"})")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "less_import_types", "tokenNameIs(new String[]{\"LESS\", \"CSS\", \"REFERENCE\", \"INLINE\", \"ONCE\", \"MULTIPLE\"})");
			}dbg.location(1429,92);
			match(input,IDENT,FOLLOW_IDENT_in_less_import_types10010); if (state.failed) return;
			}

		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        input.consume();
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(1430, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_import_types");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_import_types"



	// $ANTLR start "less_when"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1435:1: less_when :{...}? IDENT ;
	public final void less_when() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_when");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1435, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1435:10: ({...}? IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1436:5: {...}? IDENT
			{
			dbg.location(1436,5);
			if ( !(evalPredicate(tokenNameEquals("when"),"tokenNameEquals(\"when\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "less_when", "tokenNameEquals(\"when\")");
			}dbg.location(1436,32);
			match(input,IDENT,FOLLOW_IDENT_in_less_when10033); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1437, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_when");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_when"



	// $ANTLR start "key_and"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1439:1: key_and :{...}? IDENT ;
	public final void key_and() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "key_and");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1439, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1439:8: ({...}? IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1440:5: {...}? IDENT
			{
			dbg.location(1440,5);
			if ( !(evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "key_and", "tokenNameEquals(\"and\")");
			}dbg.location(1440,31);
			match(input,IDENT,FOLLOW_IDENT_in_key_and10052); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1441, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "key_and");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "key_and"



	// $ANTLR start "key_or"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1443:1: key_or :{...}? IDENT ;
	public final void key_or() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "key_or");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1443, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1443:7: ({...}? IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1444:5: {...}? IDENT
			{
			dbg.location(1444,5);
			if ( !(evalPredicate(tokenNameEquals("or"),"tokenNameEquals(\"or\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "key_or", "tokenNameEquals(\"or\")");
			}dbg.location(1444,30);
			match(input,IDENT,FOLLOW_IDENT_in_key_or10070); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1445, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "key_or");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "key_or"



	// $ANTLR start "key_only"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1447:1: key_only :{...}? IDENT ;
	public final void key_only() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "key_only");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1447, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1447:9: ({...}? IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1448:5: {...}? IDENT
			{
			dbg.location(1448,5);
			if ( !(evalPredicate(tokenNameEquals("only"),"tokenNameEquals(\"only\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "key_only", "tokenNameEquals(\"only\")");
			}dbg.location(1448,32);
			match(input,IDENT,FOLLOW_IDENT_in_key_only10088); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1449, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "key_only");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "key_only"

	// $ANTLR start synpred1_Css3
	public final void synpred1_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:44: ( ( ws )? mediaQueryList )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:45: ( ws )? mediaQueryList
		{
		dbg.location(332,45);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:45: ( ws )?
		int alt484=2;
		try { dbg.enterSubRule(484);
		try { dbg.enterDecision(484, decisionCanBacktrack[484]);

		int LA484_0 = input.LA(1);
		if ( (LA484_0==COMMENT||LA484_0==NL||LA484_0==WS) ) {
			alt484=1;
		}
		} finally {dbg.exitDecision(484);}

		switch (alt484) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:45: ws
				{
				dbg.location(332,45);
				pushFollow(FOLLOW_ws_in_synpred1_Css3446);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(484);}
		dbg.location(332,49);
		pushFollow(FOLLOW_mediaQueryList_in_synpred1_Css3449);
		mediaQueryList();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred1_Css3

	// $ANTLR start synpred2_Css3
	public final void synpred2_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:335:98: ( ( ws )? mediaQueryList )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:335:99: ( ws )? mediaQueryList
		{
		dbg.location(335,99);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:335:99: ( ws )?
		int alt485=2;
		try { dbg.enterSubRule(485);
		try { dbg.enterDecision(485, decisionCanBacktrack[485]);

		int LA485_0 = input.LA(1);
		if ( (LA485_0==COMMENT||LA485_0==NL||LA485_0==WS) ) {
			alt485=1;
		}
		} finally {dbg.exitDecision(485);}

		switch (alt485) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:335:99: ws
				{
				dbg.location(335,99);
				pushFollow(FOLLOW_ws_in_synpred2_Css3510);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(485);}
		dbg.location(335,103);
		pushFollow(FOLLOW_mediaQueryList_in_synpred2_Css3513);
		mediaQueryList();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred2_Css3

	// $ANTLR start synpred3_Css3
	public final void synpred3_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:101: ( ( ws )? mediaQueryList )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:102: ( ws )? mediaQueryList
		{
		dbg.location(337,102);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:102: ( ws )?
		int alt486=2;
		try { dbg.enterSubRule(486);
		try { dbg.enterDecision(486, decisionCanBacktrack[486]);

		int LA486_0 = input.LA(1);
		if ( (LA486_0==COMMENT||LA486_0==NL||LA486_0==WS) ) {
			alt486=1;
		}
		} finally {dbg.exitDecision(486);}

		switch (alt486) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:102: ws
				{
				dbg.location(337,102);
				pushFollow(FOLLOW_ws_in_synpred3_Css3564);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(486);}
		dbg.location(337,106);
		pushFollow(FOLLOW_mediaQueryList_in_synpred3_Css3567);
		mediaQueryList();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred3_Css3

	// $ANTLR start synpred4_Css3
	public final void synpred4_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:404:27: ( ( ws )? SEMI )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:404:28: ( ws )? SEMI
		{
		dbg.location(404,28);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:404:28: ( ws )?
		int alt487=2;
		try { dbg.enterSubRule(487);
		try { dbg.enterDecision(487, decisionCanBacktrack[487]);

		int LA487_0 = input.LA(1);
		if ( (LA487_0==COMMENT||LA487_0==NL||LA487_0==WS) ) {
			alt487=1;
		}
		} finally {dbg.exitDecision(487);}

		switch (alt487) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:404:28: ws
				{
				dbg.location(404,28);
				pushFollow(FOLLOW_ws_in_synpred4_Css31096);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(487);}
		dbg.location(404,32);
		match(input,SEMI,FOLLOW_SEMI_in_synpred4_Css31099); if (state.failed) return;
		}

	}
	// $ANTLR end synpred4_Css3

	// $ANTLR start synpred5_Css3
	public final void synpred5_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:5: ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )
		int alt492=2;
		try { dbg.enterDecision(492, decisionCanBacktrack[492]);

		int LA492_0 = input.LA(1);
		if ( (LA492_0==SASS_MIXIN) ) {
			alt492=1;
		}
		else if ( (LA492_0==DOT||LA492_0==HASH) ) {
			alt492=2;
		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 492, 0, input);
			dbg.recognitionException(nvae);
			throw nvae;
		}

		} finally {dbg.exitDecision(492);}

		switch (alt492) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:6: SASS_MIXIN
				{
				dbg.location(413,6);
				match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred5_Css31197); if (state.failed) return;
				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:19: ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE )
				{
				dbg.location(413,19);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:19: ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:20: ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE
				{
				dbg.location(413,20);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:20: ( ( DOT IDENT ) | HASH )
				int alt488=2;
				try { dbg.enterSubRule(488);
				try { dbg.enterDecision(488, decisionCanBacktrack[488]);

				int LA488_0 = input.LA(1);
				if ( (LA488_0==DOT) ) {
					alt488=1;
				}
				else if ( (LA488_0==HASH) ) {
					alt488=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae =
						new NoViableAltException("", 488, 0, input);
					dbg.recognitionException(nvae);
					throw nvae;
				}

				} finally {dbg.exitDecision(488);}

				switch (alt488) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:21: ( DOT IDENT )
						{
						dbg.location(413,21);
						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:21: ( DOT IDENT )
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:22: DOT IDENT
						{
						dbg.location(413,22);
						match(input,DOT,FOLLOW_DOT_in_synpred5_Css31204); if (state.failed) return;dbg.location(413,26);
						match(input,IDENT,FOLLOW_IDENT_in_synpred5_Css31206); if (state.failed) return;
						}

						}
						break;
					case 2 :
						dbg.enterAlt(2);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:35: HASH
						{
						dbg.location(413,35);
						match(input,HASH,FOLLOW_HASH_in_synpred5_Css31211); if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(488);}
				dbg.location(413,41);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:41: ( ws )?
				int alt489=2;
				try { dbg.enterSubRule(489);
				try { dbg.enterDecision(489, decisionCanBacktrack[489]);

				int LA489_0 = input.LA(1);
				if ( (LA489_0==COMMENT||LA489_0==NL||LA489_0==WS) ) {
					alt489=1;
				}
				} finally {dbg.exitDecision(489);}

				switch (alt489) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:41: ws
						{
						dbg.location(413,41);
						pushFollow(FOLLOW_ws_in_synpred5_Css31214);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(489);}
				dbg.location(413,45);
				match(input,LPAREN,FOLLOW_LPAREN_in_synpred5_Css31217); if (state.failed) return;dbg.location(413,52);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:52: (~ RPAREN )*
				try { dbg.enterSubRule(490);

				loop490:
				while (true) {
					int alt490=2;
					try { dbg.enterDecision(490, decisionCanBacktrack[490]);

					int LA490_0 = input.LA(1);
					if ( ((LA490_0 >= A && LA490_0 <= RIGHTTOP_SYM)||(LA490_0 >= S && LA490_0 <= Z)) ) {
						alt490=1;
					}

					} finally {dbg.exitDecision(490);}

					switch (alt490) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
						{
						dbg.location(413,52);
						if ( (input.LA(1) >= A && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= S && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop490;
					}
				}
				} finally {dbg.exitSubRule(490);}
				dbg.location(413,63);
				match(input,RPAREN,FOLLOW_RPAREN_in_synpred5_Css31225); if (state.failed) return;dbg.location(413,70);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:70: (~ ( LBRACE | SEMI ) )*
				try { dbg.enterSubRule(491);

				loop491:
				while (true) {
					int alt491=2;
					try { dbg.enterDecision(491, decisionCanBacktrack[491]);

					int LA491_0 = input.LA(1);
					if ( ((LA491_0 >= A && LA491_0 <= L)||(LA491_0 >= LBRACKET && LA491_0 <= SASS_WHILE)||(LA491_0 >= SOLIDUS && LA491_0 <= Z)) ) {
						alt491=1;
					}

					} finally {dbg.exitDecision(491);}

					switch (alt491) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
						{
						dbg.location(413,70);
						if ( (input.LA(1) >= A && input.LA(1) <= L)||(input.LA(1) >= LBRACKET && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop491;
					}
				}
				} finally {dbg.exitSubRule(491);}
				dbg.location(413,86);
				match(input,LBRACE,FOLLOW_LBRACE_in_synpred5_Css31235); if (state.failed) return;
				}

				}
				break;

		}
	}
	// $ANTLR end synpred5_Css3

	// $ANTLR start synpred6_Css3
	public final void synpred6_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:8: cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI
		{
		dbg.location(415,8);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred6_Css31253);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;dbg.location(415,22);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:22: ( ( ws )? IMPORTANT_SYM )?
		int alt494=2;
		try { dbg.enterSubRule(494);
		try { dbg.enterDecision(494, decisionCanBacktrack[494]);

		try {
			isCyclicDecision = true;
			alt494 = dfa494.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(494);}

		switch (alt494) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:23: ( ws )? IMPORTANT_SYM
				{
				dbg.location(415,23);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:23: ( ws )?
				int alt493=2;
				try { dbg.enterSubRule(493);
				try { dbg.enterDecision(493, decisionCanBacktrack[493]);

				int LA493_0 = input.LA(1);
				if ( (LA493_0==COMMENT||LA493_0==NL||LA493_0==WS) ) {
					alt493=1;
				}
				} finally {dbg.exitDecision(493);}

				switch (alt493) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:23: ws
						{
						dbg.location(415,23);
						pushFollow(FOLLOW_ws_in_synpred6_Css31256);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(493);}
				dbg.location(415,27);
				match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_synpred6_Css31259); if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(494);}
		dbg.location(415,43);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:43: ( ws )?
		int alt495=2;
		try { dbg.enterSubRule(495);
		try { dbg.enterDecision(495, decisionCanBacktrack[495]);

		int LA495_0 = input.LA(1);
		if ( (LA495_0==COMMENT||LA495_0==NL||LA495_0==WS) ) {
			alt495=1;
		}
		} finally {dbg.exitDecision(495);}

		switch (alt495) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:43: ws
				{
				dbg.location(415,43);
				pushFollow(FOLLOW_ws_in_synpred6_Css31263);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(495);}
		dbg.location(415,47);
		match(input,SEMI,FOLLOW_SEMI_in_synpred6_Css31266); if (state.failed) return;
		}

	}
	// $ANTLR end synpred6_Css3

	// $ANTLR start synpred7_Css3
	public final void synpred7_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:7: ( cp_mixin_call )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:8: cp_mixin_call
		{
		dbg.location(416,8);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred7_Css31289);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred7_Css3

	// $ANTLR start synpred8_Css3
	public final void synpred8_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:7: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE
		{
		dbg.location(417,8);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )
		int alt501=3;
		try { dbg.enterSubRule(501);
		try { dbg.enterDecision(501, decisionCanBacktrack[501]);

		try {
			isCyclicDecision = true;
			alt501 = dfa501.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(501);}

		switch (alt501) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:9: ( SASS_AT_ROOT ( ws selectorsGroup )? )
				{
				dbg.location(417,9);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:9: ( SASS_AT_ROOT ( ws selectorsGroup )? )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:10: SASS_AT_ROOT ( ws selectorsGroup )?
				{
				dbg.location(417,10);
				match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_synpred8_Css31314); if (state.failed) return;dbg.location(417,23);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:23: ( ws selectorsGroup )?
				int alt496=2;
				try { dbg.enterSubRule(496);
				try { dbg.enterDecision(496, decisionCanBacktrack[496]);

				try {
					isCyclicDecision = true;
					alt496 = dfa496.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(496);}

				switch (alt496) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:24: ws selectorsGroup
						{
						dbg.location(417,24);
						pushFollow(FOLLOW_ws_in_synpred8_Css31317);
						ws();
						state._fsp--;
						if (state.failed) return;dbg.location(417,27);
						pushFollow(FOLLOW_selectorsGroup_in_synpred8_Css31319);
						selectorsGroup();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(496);}

				}

				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:48: ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
				{
				dbg.location(417,48);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:48: ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:49: SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN
				{
				dbg.location(417,49);
				match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_synpred8_Css31328); if (state.failed) return;dbg.location(417,62);
				pushFollow(FOLLOW_ws_in_synpred8_Css31330);
				ws();
				state._fsp--;
				if (state.failed) return;dbg.location(417,65);
				match(input,LPAREN,FOLLOW_LPAREN_in_synpred8_Css31332); if (state.failed) return;dbg.location(417,72);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:72: ( ws )?
				int alt497=2;
				try { dbg.enterSubRule(497);
				try { dbg.enterDecision(497, decisionCanBacktrack[497]);

				int LA497_0 = input.LA(1);
				if ( (LA497_0==COMMENT||LA497_0==NL||LA497_0==WS) ) {
					alt497=1;
				}
				} finally {dbg.exitDecision(497);}

				switch (alt497) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:72: ws
						{
						dbg.location(417,72);
						pushFollow(FOLLOW_ws_in_synpred8_Css31334);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(497);}
				dbg.location(417,76);
				match(input,IDENT,FOLLOW_IDENT_in_synpred8_Css31337); if (state.failed) return;dbg.location(417,82);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:82: ( ws )?
				int alt498=2;
				try { dbg.enterSubRule(498);
				try { dbg.enterDecision(498, decisionCanBacktrack[498]);

				int LA498_0 = input.LA(1);
				if ( (LA498_0==COMMENT||LA498_0==NL||LA498_0==WS) ) {
					alt498=1;
				}
				} finally {dbg.exitDecision(498);}

				switch (alt498) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:82: ws
						{
						dbg.location(417,82);
						pushFollow(FOLLOW_ws_in_synpred8_Css31339);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(498);}
				dbg.location(417,86);
				match(input,COLON,FOLLOW_COLON_in_synpred8_Css31342); if (state.failed) return;dbg.location(417,92);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:92: ( ws )?
				int alt499=2;
				try { dbg.enterSubRule(499);
				try { dbg.enterDecision(499, decisionCanBacktrack[499]);

				int LA499_0 = input.LA(1);
				if ( (LA499_0==COMMENT||LA499_0==NL||LA499_0==WS) ) {
					alt499=1;
				}
				} finally {dbg.exitDecision(499);}

				switch (alt499) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:92: ws
						{
						dbg.location(417,92);
						pushFollow(FOLLOW_ws_in_synpred8_Css31344);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(499);}
				dbg.location(417,96);
				match(input,IDENT,FOLLOW_IDENT_in_synpred8_Css31347); if (state.failed) return;dbg.location(417,102);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:102: ( ws )?
				int alt500=2;
				try { dbg.enterSubRule(500);
				try { dbg.enterDecision(500, decisionCanBacktrack[500]);

				int LA500_0 = input.LA(1);
				if ( (LA500_0==COMMENT||LA500_0==NL||LA500_0==WS) ) {
					alt500=1;
				}
				} finally {dbg.exitDecision(500);}

				switch (alt500) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:102: ws
						{
						dbg.location(417,102);
						pushFollow(FOLLOW_ws_in_synpred8_Css31349);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(500);}
				dbg.location(417,106);
				match(input,RPAREN,FOLLOW_RPAREN_in_synpred8_Css31352); if (state.failed) return;
				}

				}
				break;
			case 3 :
				dbg.enterAlt(3);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:116: selectorsGroup
				{
				dbg.location(417,116);
				pushFollow(FOLLOW_selectorsGroup_in_synpred8_Css31357);
				selectorsGroup();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(501);}
		dbg.location(417,132);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:132: ( ws )?
		int alt502=2;
		try { dbg.enterSubRule(502);
		try { dbg.enterDecision(502, decisionCanBacktrack[502]);

		int LA502_0 = input.LA(1);
		if ( (LA502_0==COMMENT||LA502_0==NL||LA502_0==WS) ) {
			alt502=1;
		}
		} finally {dbg.exitDecision(502);}

		switch (alt502) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:132: ws
				{
				dbg.location(417,132);
				pushFollow(FOLLOW_ws_in_synpred8_Css31360);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(502);}
		dbg.location(417,136);
		match(input,LBRACE,FOLLOW_LBRACE_in_synpred8_Css31363); if (state.failed) return;
		}

	}
	// $ANTLR end synpred8_Css3

	// $ANTLR start synpred9_Css3
	public final void synpred9_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:418:7: ( propertyDeclaration )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:418:8: propertyDeclaration
		{
		dbg.location(418,8);
		pushFollow(FOLLOW_propertyDeclaration_in_synpred9_Css31375);
		propertyDeclaration();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred9_Css3

	// $ANTLR start synpred10_Css3
	public final void synpred10_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:433:17: ( ( ws )? COMMA )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:433:18: ( ws )? COMMA
		{
		dbg.location(433,18);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:433:18: ( ws )?
		int alt503=2;
		try { dbg.enterSubRule(503);
		try { dbg.enterDecision(503, decisionCanBacktrack[503]);

		int LA503_0 = input.LA(1);
		if ( (LA503_0==COMMENT||LA503_0==NL||LA503_0==WS) ) {
			alt503=1;
		}
		} finally {dbg.exitDecision(503);}

		switch (alt503) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:433:18: ws
				{
				dbg.location(433,18);
				pushFollow(FOLLOW_ws_in_synpred10_Css31490);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(503);}
		dbg.location(433,22);
		match(input,COMMA,FOLLOW_COMMA_in_synpred10_Css31493); if (state.failed) return;
		}

	}
	// $ANTLR end synpred10_Css3

	// $ANTLR start synpred11_Css3
	public final void synpred11_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:44: ( ( ws )? key_and )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:45: ( ws )? key_and
		{
		dbg.location(438,45);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:45: ( ws )?
		int alt504=2;
		try { dbg.enterSubRule(504);
		try { dbg.enterDecision(504, decisionCanBacktrack[504]);

		int LA504_0 = input.LA(1);
		if ( (LA504_0==COMMENT||LA504_0==NL||LA504_0==WS) ) {
			alt504=1;
		}
		} finally {dbg.exitDecision(504);}

		switch (alt504) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:45: ws
				{
				dbg.location(438,45);
				pushFollow(FOLLOW_ws_in_synpred11_Css31537);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(504);}
		dbg.location(438,49);
		pushFollow(FOLLOW_key_and_in_synpred11_Css31540);
		key_and();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred11_Css3

	// $ANTLR start synpred12_Css3
	public final void synpred12_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:24: ( ( ws )? key_and )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:25: ( ws )? key_and
		{
		dbg.location(439,25);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:25: ( ws )?
		int alt505=2;
		try { dbg.enterSubRule(505);
		try { dbg.enterDecision(505, decisionCanBacktrack[505]);

		int LA505_0 = input.LA(1);
		if ( (LA505_0==COMMENT||LA505_0==NL||LA505_0==WS) ) {
			alt505=1;
		}
		} finally {dbg.exitDecision(505);}

		switch (alt505) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:25: ws
				{
				dbg.location(439,25);
				pushFollow(FOLLOW_ws_in_synpred12_Css31567);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(505);}
		dbg.location(439,29);
		pushFollow(FOLLOW_key_and_in_synpred12_Css31570);
		key_and();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred12_Css3

	// $ANTLR start synpred13_Css3
	public final void synpred13_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:5: ( LPAREN )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:6: LPAREN
		{
		dbg.location(453,6);
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred13_Css31652); if (state.failed) return;
		}

	}
	// $ANTLR end synpred13_Css3

	// $ANTLR start synpred14_Css3
	public final void synpred14_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:7: ( HASH )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:8: HASH
		{
		dbg.location(454,8);
		match(input,HASH,FOLLOW_HASH_in_synpred14_Css31681); if (state.failed) return;
		}

	}
	// $ANTLR end synpred14_Css3

	// $ANTLR start synpred15_Css3
	public final void synpred15_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:22: ( ( ws )? SEMI )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:23: ( ws )? SEMI
		{
		dbg.location(474,23);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:23: ( ws )?
		int alt506=2;
		try { dbg.enterSubRule(506);
		try { dbg.enterDecision(506, decisionCanBacktrack[506]);

		int LA506_0 = input.LA(1);
		if ( (LA506_0==COMMENT||LA506_0==NL||LA506_0==WS) ) {
			alt506=1;
		}
		} finally {dbg.exitDecision(506);}

		switch (alt506) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:23: ws
				{
				dbg.location(474,23);
				pushFollow(FOLLOW_ws_in_synpred15_Css31827);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(506);}
		dbg.location(474,27);
		match(input,SEMI,FOLLOW_SEMI_in_synpred15_Css31830); if (state.failed) return;
		}

	}
	// $ANTLR end synpred15_Css3

	// $ANTLR start synpred16_Css3
	public final void synpred16_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:9: ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )
		int alt511=2;
		try { dbg.enterDecision(511, decisionCanBacktrack[511]);

		int LA511_0 = input.LA(1);
		if ( (LA511_0==SASS_MIXIN) ) {
			alt511=1;
		}
		else if ( (LA511_0==DOT||LA511_0==HASH) ) {
			alt511=2;
		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 511, 0, input);
			dbg.recognitionException(nvae);
			throw nvae;
		}

		} finally {dbg.exitDecision(511);}

		switch (alt511) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:10: SASS_MIXIN
				{
				dbg.location(482,10);
				match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred16_Css31905); if (state.failed) return;
				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:23: ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE )
				{
				dbg.location(482,23);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:23: ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:24: ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE
				{
				dbg.location(482,24);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:24: ( ( DOT IDENT ) | HASH )
				int alt507=2;
				try { dbg.enterSubRule(507);
				try { dbg.enterDecision(507, decisionCanBacktrack[507]);

				int LA507_0 = input.LA(1);
				if ( (LA507_0==DOT) ) {
					alt507=1;
				}
				else if ( (LA507_0==HASH) ) {
					alt507=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae =
						new NoViableAltException("", 507, 0, input);
					dbg.recognitionException(nvae);
					throw nvae;
				}

				} finally {dbg.exitDecision(507);}

				switch (alt507) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:25: ( DOT IDENT )
						{
						dbg.location(482,25);
						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:25: ( DOT IDENT )
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:26: DOT IDENT
						{
						dbg.location(482,26);
						match(input,DOT,FOLLOW_DOT_in_synpred16_Css31912); if (state.failed) return;dbg.location(482,30);
						match(input,IDENT,FOLLOW_IDENT_in_synpred16_Css31914); if (state.failed) return;
						}

						}
						break;
					case 2 :
						dbg.enterAlt(2);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:39: HASH
						{
						dbg.location(482,39);
						match(input,HASH,FOLLOW_HASH_in_synpred16_Css31919); if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(507);}
				dbg.location(482,45);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:45: ( ws )?
				int alt508=2;
				try { dbg.enterSubRule(508);
				try { dbg.enterDecision(508, decisionCanBacktrack[508]);

				int LA508_0 = input.LA(1);
				if ( (LA508_0==COMMENT||LA508_0==NL||LA508_0==WS) ) {
					alt508=1;
				}
				} finally {dbg.exitDecision(508);}

				switch (alt508) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:45: ws
						{
						dbg.location(482,45);
						pushFollow(FOLLOW_ws_in_synpred16_Css31922);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(508);}
				dbg.location(482,49);
				match(input,LPAREN,FOLLOW_LPAREN_in_synpred16_Css31925); if (state.failed) return;dbg.location(482,56);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:56: (~ RPAREN )*
				try { dbg.enterSubRule(509);

				loop509:
				while (true) {
					int alt509=2;
					try { dbg.enterDecision(509, decisionCanBacktrack[509]);

					int LA509_0 = input.LA(1);
					if ( ((LA509_0 >= A && LA509_0 <= RIGHTTOP_SYM)||(LA509_0 >= S && LA509_0 <= Z)) ) {
						alt509=1;
					}

					} finally {dbg.exitDecision(509);}

					switch (alt509) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
						{
						dbg.location(482,56);
						if ( (input.LA(1) >= A && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= S && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop509;
					}
				}
				} finally {dbg.exitSubRule(509);}
				dbg.location(482,67);
				match(input,RPAREN,FOLLOW_RPAREN_in_synpred16_Css31933); if (state.failed) return;dbg.location(482,74);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:74: (~ ( LBRACE | RBRACE | SEMI ) )*
				try { dbg.enterSubRule(510);

				loop510:
				while (true) {
					int alt510=2;
					try { dbg.enterDecision(510, decisionCanBacktrack[510]);

					int LA510_0 = input.LA(1);
					if ( ((LA510_0 >= A && LA510_0 <= L)||(LA510_0 >= LBRACKET && LA510_0 <= R)||(LA510_0 >= RBRACKET && LA510_0 <= SASS_WHILE)||(LA510_0 >= SOLIDUS && LA510_0 <= Z)) ) {
						alt510=1;
					}

					} finally {dbg.exitDecision(510);}

					switch (alt510) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
						{
						dbg.location(482,74);
						if ( (input.LA(1) >= A && input.LA(1) <= L)||(input.LA(1) >= LBRACKET && input.LA(1) <= R)||(input.LA(1) >= RBRACKET && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop510;
					}
				}
				} finally {dbg.exitSubRule(510);}
				dbg.location(482,97);
				match(input,LBRACE,FOLLOW_LBRACE_in_synpred16_Css31945); if (state.failed) return;
				}

				}
				break;

		}
	}
	// $ANTLR end synpred16_Css3

	// $ANTLR start synpred17_Css3
	public final void synpred17_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:484:11: ( cp_mixin_call ( ws )? SEMI )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:484:12: cp_mixin_call ( ws )? SEMI
		{
		dbg.location(484,12);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred17_Css31971);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;dbg.location(484,26);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:484:26: ( ws )?
		int alt512=2;
		try { dbg.enterSubRule(512);
		try { dbg.enterDecision(512, decisionCanBacktrack[512]);

		int LA512_0 = input.LA(1);
		if ( (LA512_0==COMMENT||LA512_0==NL||LA512_0==WS) ) {
			alt512=1;
		}
		} finally {dbg.exitDecision(512);}

		switch (alt512) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:484:26: ws
				{
				dbg.location(484,26);
				pushFollow(FOLLOW_ws_in_synpred17_Css31973);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(512);}
		dbg.location(484,30);
		match(input,SEMI,FOLLOW_SEMI_in_synpred17_Css31976); if (state.failed) return;
		}

	}
	// $ANTLR end synpred17_Css3

	// $ANTLR start synpred18_Css3
	public final void synpred18_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:485:11: ( cp_mixin_call )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:485:12: cp_mixin_call
		{
		dbg.location(485,12);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred18_Css31995);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred18_Css3

	// $ANTLR start synpred19_Css3
	public final void synpred19_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:11: ( cp_variable ( ws )? COLON )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:12: cp_variable ( ws )? COLON
		{
		dbg.location(487,12);
		pushFollow(FOLLOW_cp_variable_in_synpred19_Css32023);
		cp_variable();
		state._fsp--;
		if (state.failed) return;dbg.location(487,24);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:24: ( ws )?
		int alt513=2;
		try { dbg.enterSubRule(513);
		try { dbg.enterDecision(513, decisionCanBacktrack[513]);

		int LA513_0 = input.LA(1);
		if ( (LA513_0==COMMENT||LA513_0==NL||LA513_0==WS) ) {
			alt513=1;
		}
		} finally {dbg.exitDecision(513);}

		switch (alt513) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:24: ws
				{
				dbg.location(487,24);
				pushFollow(FOLLOW_ws_in_synpred19_Css32025);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(513);}
		dbg.location(487,28);
		match(input,COLON,FOLLOW_COLON_in_synpred19_Css32028); if (state.failed) return;
		}

	}
	// $ANTLR end synpred19_Css3

	// $ANTLR start synpred20_Css3
	public final void synpred20_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:11: ( sass_map )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:12: sass_map
		{
		dbg.location(488,12);
		pushFollow(FOLLOW_sass_map_in_synpred20_Css32045);
		sass_map();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred20_Css3

	// $ANTLR start synpred21_Css3
	public final void synpred21_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:700:27: ( ( ws )? COMMA )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:700:28: ( ws )? COMMA
		{
		dbg.location(700,28);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:700:28: ( ws )?
		int alt514=2;
		try { dbg.enterSubRule(514);
		try { dbg.enterDecision(514, decisionCanBacktrack[514]);

		int LA514_0 = input.LA(1);
		if ( (LA514_0==COMMENT||LA514_0==NL||LA514_0==WS) ) {
			alt514=1;
		}
		} finally {dbg.exitDecision(514);}

		switch (alt514) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:700:28: ws
				{
				dbg.location(700,28);
				pushFollow(FOLLOW_ws_in_synpred21_Css33544);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(514);}
		dbg.location(700,32);
		match(input,COMMA,FOLLOW_COMMA_in_synpred21_Css33547); if (state.failed) return;
		}

	}
	// $ANTLR end synpred21_Css3

	// $ANTLR start synpred22_Css3
	public final void synpred22_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:41: ( function )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:42: function
		{
		dbg.location(708,42);
		pushFollow(FOLLOW_function_in_synpred22_Css33638);
		function();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred22_Css3

	// $ANTLR start synpred23_Css3
	public final void synpred23_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:736:5: ( cp_variable_declaration )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:736:6: cp_variable_declaration
		{
		dbg.location(736,6);
		pushFollow(FOLLOW_cp_variable_declaration_in_synpred23_Css33938);
		cp_variable_declaration();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred23_Css3

	// $ANTLR start synpred24_Css3
	public final void synpred24_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:737:7: ( sass_map )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:737:8: sass_map
		{
		dbg.location(737,8);
		pushFollow(FOLLOW_sass_map_in_synpred24_Css33950);
		sass_map();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred24_Css3

	// $ANTLR start synpred25_Css3
	public final void synpred25_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:738:7: ( sass_nested_properties )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:738:8: sass_nested_properties
		{
		dbg.location(738,8);
		pushFollow(FOLLOW_sass_nested_properties_in_synpred25_Css33963);
		sass_nested_properties();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred25_Css3

	// $ANTLR start synpred26_Css3
	public final void synpred26_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:7: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE
		{
		dbg.location(739,8);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )
		int alt520=3;
		try { dbg.enterSubRule(520);
		try { dbg.enterDecision(520, decisionCanBacktrack[520]);

		try {
			isCyclicDecision = true;
			alt520 = dfa520.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(520);}

		switch (alt520) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:9: ( SASS_AT_ROOT ( ws selectorsGroup )? )
				{
				dbg.location(739,9);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:9: ( SASS_AT_ROOT ( ws selectorsGroup )? )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:10: SASS_AT_ROOT ( ws selectorsGroup )?
				{
				dbg.location(739,10);
				match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_synpred26_Css33977); if (state.failed) return;dbg.location(739,23);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:23: ( ws selectorsGroup )?
				int alt515=2;
				try { dbg.enterSubRule(515);
				try { dbg.enterDecision(515, decisionCanBacktrack[515]);

				try {
					isCyclicDecision = true;
					alt515 = dfa515.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(515);}

				switch (alt515) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:24: ws selectorsGroup
						{
						dbg.location(739,24);
						pushFollow(FOLLOW_ws_in_synpred26_Css33980);
						ws();
						state._fsp--;
						if (state.failed) return;dbg.location(739,27);
						pushFollow(FOLLOW_selectorsGroup_in_synpred26_Css33982);
						selectorsGroup();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(515);}

				}

				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:48: ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
				{
				dbg.location(739,48);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:48: ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:49: SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN
				{
				dbg.location(739,49);
				match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_synpred26_Css33991); if (state.failed) return;dbg.location(739,62);
				pushFollow(FOLLOW_ws_in_synpred26_Css33993);
				ws();
				state._fsp--;
				if (state.failed) return;dbg.location(739,65);
				match(input,LPAREN,FOLLOW_LPAREN_in_synpred26_Css33995); if (state.failed) return;dbg.location(739,72);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:72: ( ws )?
				int alt516=2;
				try { dbg.enterSubRule(516);
				try { dbg.enterDecision(516, decisionCanBacktrack[516]);

				int LA516_0 = input.LA(1);
				if ( (LA516_0==COMMENT||LA516_0==NL||LA516_0==WS) ) {
					alt516=1;
				}
				} finally {dbg.exitDecision(516);}

				switch (alt516) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:72: ws
						{
						dbg.location(739,72);
						pushFollow(FOLLOW_ws_in_synpred26_Css33997);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(516);}
				dbg.location(739,76);
				match(input,IDENT,FOLLOW_IDENT_in_synpred26_Css34000); if (state.failed) return;dbg.location(739,82);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:82: ( ws )?
				int alt517=2;
				try { dbg.enterSubRule(517);
				try { dbg.enterDecision(517, decisionCanBacktrack[517]);

				int LA517_0 = input.LA(1);
				if ( (LA517_0==COMMENT||LA517_0==NL||LA517_0==WS) ) {
					alt517=1;
				}
				} finally {dbg.exitDecision(517);}

				switch (alt517) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:82: ws
						{
						dbg.location(739,82);
						pushFollow(FOLLOW_ws_in_synpred26_Css34002);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(517);}
				dbg.location(739,86);
				match(input,COLON,FOLLOW_COLON_in_synpred26_Css34005); if (state.failed) return;dbg.location(739,92);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:92: ( ws )?
				int alt518=2;
				try { dbg.enterSubRule(518);
				try { dbg.enterDecision(518, decisionCanBacktrack[518]);

				int LA518_0 = input.LA(1);
				if ( (LA518_0==COMMENT||LA518_0==NL||LA518_0==WS) ) {
					alt518=1;
				}
				} finally {dbg.exitDecision(518);}

				switch (alt518) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:92: ws
						{
						dbg.location(739,92);
						pushFollow(FOLLOW_ws_in_synpred26_Css34007);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(518);}
				dbg.location(739,96);
				match(input,IDENT,FOLLOW_IDENT_in_synpred26_Css34010); if (state.failed) return;dbg.location(739,102);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:102: ( ws )?
				int alt519=2;
				try { dbg.enterSubRule(519);
				try { dbg.enterDecision(519, decisionCanBacktrack[519]);

				int LA519_0 = input.LA(1);
				if ( (LA519_0==COMMENT||LA519_0==NL||LA519_0==WS) ) {
					alt519=1;
				}
				} finally {dbg.exitDecision(519);}

				switch (alt519) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:102: ws
						{
						dbg.location(739,102);
						pushFollow(FOLLOW_ws_in_synpred26_Css34012);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(519);}
				dbg.location(739,106);
				match(input,RPAREN,FOLLOW_RPAREN_in_synpred26_Css34015); if (state.failed) return;
				}

				}
				break;
			case 3 :
				dbg.enterAlt(3);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:116: selectorsGroup
				{
				dbg.location(739,116);
				pushFollow(FOLLOW_selectorsGroup_in_synpred26_Css34020);
				selectorsGroup();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(520);}
		dbg.location(739,132);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:132: ( ws )?
		int alt521=2;
		try { dbg.enterSubRule(521);
		try { dbg.enterDecision(521, decisionCanBacktrack[521]);

		int LA521_0 = input.LA(1);
		if ( (LA521_0==COMMENT||LA521_0==NL||LA521_0==WS) ) {
			alt521=1;
		}
		} finally {dbg.exitDecision(521);}

		switch (alt521) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:132: ws
				{
				dbg.location(739,132);
				pushFollow(FOLLOW_ws_in_synpred26_Css34023);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(521);}
		dbg.location(739,136);
		match(input,LBRACE,FOLLOW_LBRACE_in_synpred26_Css34026); if (state.failed) return;
		}

	}
	// $ANTLR end synpred26_Css3

	// $ANTLR start synpred27_Css3
	public final void synpred27_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:740:7: ( propertyDeclaration )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:740:8: propertyDeclaration
		{
		dbg.location(740,8);
		pushFollow(FOLLOW_propertyDeclaration_in_synpred27_Css34038);
		propertyDeclaration();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred27_Css3

	// $ANTLR start synpred28_Css3
	public final void synpred28_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:7: ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:8: property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI )
		{
		dbg.location(742,8);
		pushFollow(FOLLOW_property_in_synpred28_Css34055);
		property();
		state._fsp--;
		if (state.failed) return;dbg.location(742,17);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:17: ( ws )?
		int alt522=2;
		try { dbg.enterSubRule(522);
		try { dbg.enterDecision(522, decisionCanBacktrack[522]);

		int LA522_0 = input.LA(1);
		if ( (LA522_0==COMMENT||LA522_0==NL||LA522_0==WS) ) {
			alt522=1;
		}
		} finally {dbg.exitDecision(522);}

		switch (alt522) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:17: ws
				{
				dbg.location(742,17);
				pushFollow(FOLLOW_ws_in_synpred28_Css34057);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(522);}
		dbg.location(742,21);
		match(input,COLON,FOLLOW_COLON_in_synpred28_Css34060); if (state.failed) return;dbg.location(742,27);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:27: (~ ( LBRACE | SEMI | RBRACE ) )*
		try { dbg.enterSubRule(523);

		loop523:
		while (true) {
			int alt523=2;
			try { dbg.enterDecision(523, decisionCanBacktrack[523]);

			int LA523_0 = input.LA(1);
			if ( ((LA523_0 >= A && LA523_0 <= L)||(LA523_0 >= LBRACKET && LA523_0 <= R)||(LA523_0 >= RBRACKET && LA523_0 <= SASS_WHILE)||(LA523_0 >= SOLIDUS && LA523_0 <= Z)) ) {
				alt523=1;
			}

			} finally {dbg.exitDecision(523);}

			switch (alt523) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
				{
				dbg.location(742,27);
				if ( (input.LA(1) >= A && input.LA(1) <= L)||(input.LA(1) >= LBRACKET && input.LA(1) <= R)||(input.LA(1) >= RBRACKET && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					dbg.recognitionException(mse);
					throw mse;
				}
				}
				break;

			default :
				break loop523;
			}
		}
		} finally {dbg.exitSubRule(523);}
		dbg.location(742,50);
		if ( input.LA(1)==RBRACE||input.LA(1)==SEMI ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			dbg.recognitionException(mse);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred28_Css3

	// $ANTLR start synpred29_Css3
	public final void synpred29_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:743:7: ( cp_mixin_declaration )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:743:8: cp_mixin_declaration
		{
		dbg.location(743,8);
		pushFollow(FOLLOW_cp_mixin_declaration_in_synpred29_Css34089);
		cp_mixin_declaration();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred29_Css3

	// $ANTLR start synpred30_Css3
	public final void synpred30_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:744:7: ( cp_mixin_call )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:744:8: cp_mixin_call
		{
		dbg.location(744,8);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred30_Css34101);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred30_Css3

	// $ANTLR start synpred31_Css3
	public final void synpred31_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:745:7: ( cp_mixin_call )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:745:8: cp_mixin_call
		{
		dbg.location(745,8);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred31_Css34122);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred31_Css3

	// $ANTLR start synpred32_Css3
	public final void synpred32_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:65: ( ( ws )? esPred )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:66: ( ws )? esPred
		{
		dbg.location(779,66);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:66: ( ws )?
		int alt524=2;
		try { dbg.enterSubRule(524);
		try { dbg.enterDecision(524, decisionCanBacktrack[524]);

		int LA524_0 = input.LA(1);
		if ( (LA524_0==COMMENT||LA524_0==NL||LA524_0==WS) ) {
			alt524=1;
		}
		} finally {dbg.exitDecision(524);}

		switch (alt524) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:66: ws
				{
				dbg.location(779,66);
				pushFollow(FOLLOW_ws_in_synpred32_Css34420);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(524);}
		dbg.location(779,70);
		pushFollow(FOLLOW_esPred_in_synpred32_Css34423);
		esPred();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred32_Css3

	// $ANTLR start synpred33_Css3
	public final void synpred33_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:4: ( typeSelector )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:5: typeSelector
		{
		dbg.location(780,5);
		pushFollow(FOLLOW_typeSelector_in_synpred33_Css34458);
		typeSelector();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred33_Css3

	// $ANTLR start synpred34_Css3
	public final void synpred34_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:34: ( ( ws )? esPred )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:35: ( ws )? esPred
		{
		dbg.location(780,35);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:35: ( ws )?
		int alt525=2;
		try { dbg.enterSubRule(525);
		try { dbg.enterDecision(525, decisionCanBacktrack[525]);

		int LA525_0 = input.LA(1);
		if ( (LA525_0==COMMENT||LA525_0==NL||LA525_0==WS) ) {
			alt525=1;
		}
		} finally {dbg.exitDecision(525);}

		switch (alt525) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:35: ws
				{
				dbg.location(780,35);
				pushFollow(FOLLOW_ws_in_synpred34_Css34465);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(525);}
		dbg.location(780,39);
		pushFollow(FOLLOW_esPred_in_synpred34_Css34468);
		esPred();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred34_Css3

	// $ANTLR start synpred35_Css3
	public final void synpred35_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:794:7: ( ( IDENT | STAR )? PIPE )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:794:8: ( IDENT | STAR )? PIPE
		{
		dbg.location(794,8);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:794:8: ( IDENT | STAR )?
		int alt526=2;
		try { dbg.enterSubRule(526);
		try { dbg.enterDecision(526, decisionCanBacktrack[526]);

		int LA526_0 = input.LA(1);
		if ( (LA526_0==IDENT||LA526_0==STAR) ) {
			alt526=1;
		}
		} finally {dbg.exitDecision(526);}

		switch (alt526) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
				{
				dbg.location(794,8);
				if ( input.LA(1)==IDENT||input.LA(1)==STAR ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					dbg.recognitionException(mse);
					throw mse;
				}
				}
				break;

		}
		} finally {dbg.exitSubRule(526);}
		dbg.location(794,24);
		match(input,PIPE,FOLLOW_PIPE_in_synpred35_Css34579); if (state.failed) return;
		}

	}
	// $ANTLR end synpred35_Css3

	// $ANTLR start synpred36_Css3
	public final void synpred36_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:949:58: ( functionName ( ws )? LPAREN )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:949:59: functionName ( ws )? LPAREN
		{
		dbg.location(949,59);
		pushFollow(FOLLOW_functionName_in_synpred36_Css36140);
		functionName();
		state._fsp--;
		if (state.failed) return;dbg.location(949,72);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:949:72: ( ws )?
		int alt527=2;
		try { dbg.enterSubRule(527);
		try { dbg.enterDecision(527, decisionCanBacktrack[527]);

		int LA527_0 = input.LA(1);
		if ( (LA527_0==COMMENT||LA527_0==NL||LA527_0==WS) ) {
			alt527=1;
		}
		} finally {dbg.exitDecision(527);}

		switch (alt527) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:949:72: ws
				{
				dbg.location(949,72);
				pushFollow(FOLLOW_ws_in_synpred36_Css36142);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(527);}
		dbg.location(949,76);
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred36_Css36145); if (state.failed) return;
		}

	}
	// $ANTLR end synpred36_Css3

	// $ANTLR start synpred37_Css3
	public final void synpred37_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:64: ( functionName ( ws )? LPAREN )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:65: functionName ( ws )? LPAREN
		{
		dbg.location(951,65);
		pushFollow(FOLLOW_functionName_in_synpred37_Css36175);
		functionName();
		state._fsp--;
		if (state.failed) return;dbg.location(951,78);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:78: ( ws )?
		int alt528=2;
		try { dbg.enterSubRule(528);
		try { dbg.enterDecision(528, decisionCanBacktrack[528]);

		int LA528_0 = input.LA(1);
		if ( (LA528_0==COMMENT||LA528_0==NL||LA528_0==WS) ) {
			alt528=1;
		}
		} finally {dbg.exitDecision(528);}

		switch (alt528) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:78: ws
				{
				dbg.location(951,78);
				pushFollow(FOLLOW_ws_in_synpred37_Css36177);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(528);}
		dbg.location(951,82);
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred37_Css36180); if (state.failed) return;
		}

	}
	// $ANTLR end synpred37_Css3

	// $ANTLR start synpred38_Css3
	public final void synpred38_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:14: ( ( ws | ( ( ws )? operator ( ws )? ) |) term )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:15: ( ws | ( ( ws )? operator ( ws )? ) |) term
		{
		dbg.location(991,15);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:15: ( ws | ( ( ws )? operator ( ws )? ) |)
		int alt531=3;
		try { dbg.enterSubRule(531);
		try { dbg.enterDecision(531, decisionCanBacktrack[531]);

		try {
			isCyclicDecision = true;
			alt531 = dfa531.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(531);}

		switch (alt531) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:17: ws
				{
				dbg.location(991,17);
				pushFollow(FOLLOW_ws_in_synpred38_Css36350);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:22: ( ( ws )? operator ( ws )? )
				{
				dbg.location(991,22);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:22: ( ( ws )? operator ( ws )? )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:23: ( ws )? operator ( ws )?
				{
				dbg.location(991,23);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:23: ( ws )?
				int alt529=2;
				try { dbg.enterSubRule(529);
				try { dbg.enterDecision(529, decisionCanBacktrack[529]);

				int LA529_0 = input.LA(1);
				if ( (LA529_0==COMMENT||LA529_0==NL||LA529_0==WS) ) {
					alt529=1;
				}
				} finally {dbg.exitDecision(529);}

				switch (alt529) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:23: ws
						{
						dbg.location(991,23);
						pushFollow(FOLLOW_ws_in_synpred38_Css36355);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(529);}
				dbg.location(991,27);
				pushFollow(FOLLOW_operator_in_synpred38_Css36358);
				operator();
				state._fsp--;
				if (state.failed) return;dbg.location(991,36);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:36: ( ws )?
				int alt530=2;
				try { dbg.enterSubRule(530);
				try { dbg.enterDecision(530, decisionCanBacktrack[530]);

				int LA530_0 = input.LA(1);
				if ( (LA530_0==COMMENT||LA530_0==NL||LA530_0==WS) ) {
					alt530=1;
				}
				} finally {dbg.exitDecision(530);}

				switch (alt530) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:36: ws
						{
						dbg.location(991,36);
						pushFollow(FOLLOW_ws_in_synpred38_Css36360);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(530);}

				}

				}
				break;
			case 3 :
				dbg.enterAlt(3);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:56: 
				{
				}
				break;

		}
		} finally {dbg.exitSubRule(531);}
		dbg.location(991,58);
		pushFollow(FOLLOW_term_in_synpred38_Css36369);
		term();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred38_Css3

	// $ANTLR start synpred39_Css3
	public final void synpred39_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:9: ( functionName ( ws )? LPAREN )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:10: functionName ( ws )? LPAREN
		{
		dbg.location(998,10);
		pushFollow(FOLLOW_functionName_in_synpred39_Css36442);
		functionName();
		state._fsp--;
		if (state.failed) return;dbg.location(998,23);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:23: ( ws )?
		int alt532=2;
		try { dbg.enterSubRule(532);
		try { dbg.enterDecision(532, decisionCanBacktrack[532]);

		int LA532_0 = input.LA(1);
		if ( (LA532_0==COMMENT||LA532_0==NL||LA532_0==WS) ) {
			alt532=1;
		}
		} finally {dbg.exitDecision(532);}

		switch (alt532) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:23: ws
				{
				dbg.location(998,23);
				pushFollow(FOLLOW_ws_in_synpred39_Css36444);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(532);}
		dbg.location(998,27);
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred39_Css36447); if (state.failed) return;
		}

	}
	// $ANTLR end synpred39_Css3

	// $ANTLR start synpred40_Css3
	public final void synpred40_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1064:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1064:10: fnAttributeName ( ws )? ( OPEQ | COLON )
		{
		dbg.location(1064,10);
		pushFollow(FOLLOW_fnAttributeName_in_synpred40_Css37057);
		fnAttributeName();
		state._fsp--;
		if (state.failed) return;dbg.location(1064,26);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1064:26: ( ws )?
		int alt533=2;
		try { dbg.enterSubRule(533);
		try { dbg.enterDecision(533, decisionCanBacktrack[533]);

		int LA533_0 = input.LA(1);
		if ( (LA533_0==COMMENT||LA533_0==NL||LA533_0==WS) ) {
			alt533=1;
		}
		} finally {dbg.exitDecision(533);}

		switch (alt533) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1064:26: ws
				{
				dbg.location(1064,26);
				pushFollow(FOLLOW_ws_in_synpred40_Css37059);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(533);}
		dbg.location(1064,30);
		if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			dbg.recognitionException(mse);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred40_Css3

	// $ANTLR start synpred41_Css3
	public final void synpred41_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:11: ( cp_expression )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:12: cp_expression
		{
		dbg.location(1065,12);
		pushFollow(FOLLOW_cp_expression_in_synpred41_Css37097);
		cp_expression();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred41_Css3

	// $ANTLR start synpred42_Css3
	public final void synpred42_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term
		{
		dbg.location(1077,21);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |)
		int alt536=3;
		try { dbg.enterSubRule(536);
		try { dbg.enterDecision(536, decisionCanBacktrack[536]);

		try {
			isCyclicDecision = true;
			alt536 = dfa536.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(536);}

		switch (alt536) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:23: ws
				{
				dbg.location(1077,23);
				pushFollow(FOLLOW_ws_in_synpred42_Css37191);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:28: ( ( ws )? SOLIDUS ( ws )? )
				{
				dbg.location(1077,28);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:28: ( ( ws )? SOLIDUS ( ws )? )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:29: ( ws )? SOLIDUS ( ws )?
				{
				dbg.location(1077,29);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:29: ( ws )?
				int alt534=2;
				try { dbg.enterSubRule(534);
				try { dbg.enterDecision(534, decisionCanBacktrack[534]);

				int LA534_0 = input.LA(1);
				if ( (LA534_0==COMMENT||LA534_0==NL||LA534_0==WS) ) {
					alt534=1;
				}
				} finally {dbg.exitDecision(534);}

				switch (alt534) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:29: ws
						{
						dbg.location(1077,29);
						pushFollow(FOLLOW_ws_in_synpred42_Css37196);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(534);}
				dbg.location(1077,33);
				match(input,SOLIDUS,FOLLOW_SOLIDUS_in_synpred42_Css37199); if (state.failed) return;dbg.location(1077,41);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:41: ( ws )?
				int alt535=2;
				try { dbg.enterSubRule(535);
				try { dbg.enterDecision(535, decisionCanBacktrack[535]);

				int LA535_0 = input.LA(1);
				if ( (LA535_0==COMMENT||LA535_0==NL||LA535_0==WS) ) {
					alt535=1;
				}
				} finally {dbg.exitDecision(535);}

				switch (alt535) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:41: ws
						{
						dbg.location(1077,41);
						pushFollow(FOLLOW_ws_in_synpred42_Css37201);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(535);}

				}

				}
				break;
			case 3 :
				dbg.enterAlt(3);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:61: 
				{
				}
				break;

		}
		} finally {dbg.exitSubRule(536);}
		dbg.location(1077,63);
		pushFollow(FOLLOW_term_in_synpred42_Css37210);
		term();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred42_Css3

	// $ANTLR start synpred44_Css3
	public final void synpred44_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1112:6: ( ( ws )? COMMA ( ws )? cp_expression )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1112:7: ( ws )? COMMA ( ws )? cp_expression
		{
		dbg.location(1112,7);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1112:7: ( ws )?
		int alt537=2;
		try { dbg.enterSubRule(537);
		try { dbg.enterDecision(537, decisionCanBacktrack[537]);

		int LA537_0 = input.LA(1);
		if ( (LA537_0==COMMENT||LA537_0==NL||LA537_0==WS) ) {
			alt537=1;
		}
		} finally {dbg.exitDecision(537);}

		switch (alt537) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1112:7: ws
				{
				dbg.location(1112,7);
				pushFollow(FOLLOW_ws_in_synpred44_Css37666);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(537);}
		dbg.location(1112,11);
		match(input,COMMA,FOLLOW_COMMA_in_synpred44_Css37669); if (state.failed) return;dbg.location(1112,17);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1112:17: ( ws )?
		int alt538=2;
		try { dbg.enterSubRule(538);
		try { dbg.enterDecision(538, decisionCanBacktrack[538]);

		int LA538_0 = input.LA(1);
		if ( (LA538_0==COMMENT||LA538_0==NL||LA538_0==WS) ) {
			alt538=1;
		}
		} finally {dbg.exitDecision(538);}

		switch (alt538) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1112:17: ws
				{
				dbg.location(1112,17);
				pushFollow(FOLLOW_ws_in_synpred44_Css37671);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(538);}
		dbg.location(1112,21);
		pushFollow(FOLLOW_cp_expression_in_synpred44_Css37674);
		cp_expression();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred44_Css3

	// $ANTLR start synpred45_Css3
	public final void synpred45_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1128:7: ( cp_expression_atom )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1128:8: cp_expression_atom
		{
		dbg.location(1128,8);
		pushFollow(FOLLOW_cp_expression_atom_in_synpred45_Css37741);
		cp_expression_atom();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred45_Css3

	// $ANTLR start synpred46_Css3
	public final void synpred46_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:9: ( ( ws )? cp_expression_operator )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:10: ( ws )? cp_expression_operator
		{
		dbg.location(1130,10);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:10: ( ws )?
		int alt539=2;
		try { dbg.enterSubRule(539);
		try { dbg.enterDecision(539, decisionCanBacktrack[539]);

		int LA539_0 = input.LA(1);
		if ( (LA539_0==COMMENT||LA539_0==NL||LA539_0==WS) ) {
			alt539=1;
		}
		} finally {dbg.exitDecision(539);}

		switch (alt539) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:10: ws
				{
				dbg.location(1130,10);
				pushFollow(FOLLOW_ws_in_synpred46_Css37764);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(539);}
		dbg.location(1130,14);
		pushFollow(FOLLOW_cp_expression_operator_in_synpred46_Css37767);
		cp_expression_operator();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred46_Css3

	// $ANTLR start synpred47_Css3
	public final void synpred47_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:11: ( ( ws )? cp_expression_atom )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:12: ( ws )? cp_expression_atom
		{
		dbg.location(1131,12);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:12: ( ws )?
		int alt540=2;
		try { dbg.enterSubRule(540);
		try { dbg.enterDecision(540, decisionCanBacktrack[540]);

		int LA540_0 = input.LA(1);
		if ( (LA540_0==COMMENT||LA540_0==NL||LA540_0==WS) ) {
			alt540=1;
		}
		} finally {dbg.exitDecision(540);}

		switch (alt540) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:12: ws
				{
				dbg.location(1131,12);
				pushFollow(FOLLOW_ws_in_synpred47_Css37793);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(540);}
		dbg.location(1131,16);
		pushFollow(FOLLOW_cp_expression_atom_in_synpred47_Css37796);
		cp_expression_atom();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred47_Css3

	// $ANTLR start synpred48_Css3
	public final void synpred48_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1145:13: ( cp_math_expression )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1145:14: cp_math_expression
		{
		dbg.location(1145,14);
		pushFollow(FOLLOW_cp_math_expression_in_synpred48_Css37936);
		cp_math_expression();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred48_Css3

	// $ANTLR start synpred49_Css3
	public final void synpred49_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1172:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1172:14: ( ws )? ( PLUS | MINUS | STAR | SOLIDUS )
		{
		dbg.location(1172,14);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1172:14: ( ws )?
		int alt541=2;
		try { dbg.enterSubRule(541);
		try { dbg.enterDecision(541, decisionCanBacktrack[541]);

		int LA541_0 = input.LA(1);
		if ( (LA541_0==COMMENT||LA541_0==NL||LA541_0==WS) ) {
			alt541=1;
		}
		} finally {dbg.exitDecision(541);}

		switch (alt541) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1172:14: ws
				{
				dbg.location(1172,14);
				pushFollow(FOLLOW_ws_in_synpred49_Css38069);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(541);}
		dbg.location(1172,18);
		if ( input.LA(1)==MINUS||input.LA(1)==PLUS||(input.LA(1) >= SOLIDUS && input.LA(1) <= STAR) ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			dbg.recognitionException(mse);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred49_Css3

	// $ANTLR start synpred50_Css3
	public final void synpred50_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:77: ( ( ws )? combinator ( ws )? )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:78: ( ws )? combinator ( ws )?
		{
		dbg.location(1204,78);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:78: ( ws )?
		int alt542=2;
		try { dbg.enterSubRule(542);
		try { dbg.enterDecision(542, decisionCanBacktrack[542]);

		int LA542_0 = input.LA(1);
		if ( (LA542_0==COMMENT||LA542_0==NL||LA542_0==WS) ) {
			alt542=1;
		}
		} finally {dbg.exitDecision(542);}

		switch (alt542) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:78: ws
				{
				dbg.location(1204,78);
				pushFollow(FOLLOW_ws_in_synpred50_Css38361);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(542);}
		dbg.location(1204,82);
		pushFollow(FOLLOW_combinator_in_synpred50_Css38364);
		combinator();
		state._fsp--;
		if (state.failed) return;dbg.location(1204,93);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:93: ( ws )?
		int alt543=2;
		try { dbg.enterSubRule(543);
		try { dbg.enterDecision(543, decisionCanBacktrack[543]);

		int LA543_0 = input.LA(1);
		if ( (LA543_0==COMMENT||LA543_0==NL||LA543_0==WS) ) {
			alt543=1;
		}
		} finally {dbg.exitDecision(543);}

		switch (alt543) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:93: ws
				{
				dbg.location(1204,93);
				pushFollow(FOLLOW_ws_in_synpred50_Css38366);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(543);}

		}

	}
	// $ANTLR end synpred50_Css3

	// $ANTLR start synpred51_Css3
	public final void synpred51_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:172: ( pseudo )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:173: pseudo
		{
		dbg.location(1204,173);
		pushFollow(FOLLOW_pseudo_in_synpred51_Css38402);
		pseudo();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred51_Css3

	// $ANTLR start synpred52_Css3
	public final void synpred52_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:191: ( ( ws )? LPAREN )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:192: ( ws )? LPAREN
		{
		dbg.location(1204,192);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:192: ( ws )?
		int alt544=2;
		try { dbg.enterSubRule(544);
		try { dbg.enterDecision(544, decisionCanBacktrack[544]);

		int LA544_0 = input.LA(1);
		if ( (LA544_0==COMMENT||LA544_0==NL||LA544_0==WS) ) {
			alt544=1;
		}
		} finally {dbg.exitDecision(544);}

		switch (alt544) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:192: ws
				{
				dbg.location(1204,192);
				pushFollow(FOLLOW_ws_in_synpred52_Css38410);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(544);}
		dbg.location(1204,196);
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred52_Css38413); if (state.failed) return;
		}

	}
	// $ANTLR end synpred52_Css3

	// $ANTLR start synpred53_Css3
	public final void synpred53_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1213:25: ( webkitKeyframeSelectors )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1213:26: webkitKeyframeSelectors
		{
		dbg.location(1213,26);
		pushFollow(FOLLOW_webkitKeyframeSelectors_in_synpred53_Css38529);
		webkitKeyframeSelectors();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred53_Css3

	// $ANTLR start synpred54_Css3
	public final void synpred54_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1391:19: ( ( ws )? COMMA )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1391:20: ( ws )? COMMA
		{
		dbg.location(1391,20);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1391:20: ( ws )?
		int alt545=2;
		try { dbg.enterSubRule(545);
		try { dbg.enterDecision(545, decisionCanBacktrack[545]);

		int LA545_0 = input.LA(1);
		if ( (LA545_0==COMMENT||LA545_0==NL||LA545_0==WS) ) {
			alt545=1;
		}
		} finally {dbg.exitDecision(545);}

		switch (alt545) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1391:20: ws
				{
				dbg.location(1391,20);
				pushFollow(FOLLOW_ws_in_synpred54_Css39774);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(545);}
		dbg.location(1391,24);
		match(input,COMMA,FOLLOW_COMMA_in_synpred54_Css39777); if (state.failed) return;
		}

	}
	// $ANTLR end synpred54_Css3

	// Delegated rules

	public final boolean synpred53_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred53_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred14_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred14_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred22_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred22_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred9_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred9_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred45_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred45_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred4_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred4_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred37_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred37_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred19_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred19_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred23_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred23_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred31_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred31_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred54_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred54_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred15_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred15_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred32_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred32_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred35_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred35_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred38_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred38_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred46_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred46_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred18_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred18_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred27_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred27_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred21_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred21_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred29_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred29_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred40_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred40_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred16_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred16_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred24_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred24_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred13_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred13_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred10_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred10_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred6_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred6_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred3_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred3_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred11_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred11_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred50_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred50_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred17_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred17_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred42_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred42_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred48_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred48_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred7_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred7_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred34_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred34_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred51_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred51_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred1_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred1_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred26_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred26_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred12_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred12_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred49_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred49_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred20_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred20_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred8_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred8_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred2_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred2_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred5_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred5_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred41_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred41_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred44_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred44_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred30_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred30_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred47_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred47_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred36_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred36_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred39_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred39_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred33_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred33_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred25_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred25_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred52_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred52_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred28_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred28_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}


	protected DFA3 dfa3 = new DFA3(this);
	protected DFA5 dfa5 = new DFA5(this);
	protected DFA8 dfa8 = new DFA8(this);
	protected DFA36 dfa36 = new DFA36(this);
	protected DFA28 dfa28 = new DFA28(this);
	protected DFA37 dfa37 = new DFA37(this);
	protected DFA38 dfa38 = new DFA38(this);
	protected DFA43 dfa43 = new DFA43(this);
	protected DFA48 dfa48 = new DFA48(this);
	protected DFA47 dfa47 = new DFA47(this);
	protected DFA49 dfa49 = new DFA49(this);
	protected DFA50 dfa50 = new DFA50(this);
	protected DFA55 dfa55 = new DFA55(this);
	protected DFA61 dfa61 = new DFA61(this);
	protected DFA64 dfa64 = new DFA64(this);
	protected DFA70 dfa70 = new DFA70(this);
	protected DFA76 dfa76 = new DFA76(this);
	protected DFA78 dfa78 = new DFA78(this);
	protected DFA82 dfa82 = new DFA82(this);
	protected DFA95 dfa95 = new DFA95(this);
	protected DFA104 dfa104 = new DFA104(this);
	protected DFA113 dfa113 = new DFA113(this);
	protected DFA115 dfa115 = new DFA115(this);
	protected DFA116 dfa116 = new DFA116(this);
	protected DFA149 dfa149 = new DFA149(this);
	protected DFA161 dfa161 = new DFA161(this);
	protected DFA160 dfa160 = new DFA160(this);
	protected DFA180 dfa180 = new DFA180(this);
	protected DFA182 dfa182 = new DFA182(this);
	protected DFA187 dfa187 = new DFA187(this);
	protected DFA192 dfa192 = new DFA192(this);
	protected DFA198 dfa198 = new DFA198(this);
	protected DFA193 dfa193 = new DFA193(this);
	protected DFA215 dfa215 = new DFA215(this);
	protected DFA208 dfa208 = new DFA208(this);
	protected DFA207 dfa207 = new DFA207(this);
	protected DFA212 dfa212 = new DFA212(this);
	protected DFA217 dfa217 = new DFA217(this);
	protected DFA219 dfa219 = new DFA219(this);
	protected DFA223 dfa223 = new DFA223(this);
	protected DFA231 dfa231 = new DFA231(this);
	protected DFA230 dfa230 = new DFA230(this);
	protected DFA229 dfa229 = new DFA229(this);
	protected DFA235 dfa235 = new DFA235(this);
	protected DFA238 dfa238 = new DFA238(this);
	protected DFA261 dfa261 = new DFA261(this);
	protected DFA284 dfa284 = new DFA284(this);
	protected DFA297 dfa297 = new DFA297(this);
	protected DFA296 dfa296 = new DFA296(this);
	protected DFA312 dfa312 = new DFA312(this);
	protected DFA322 dfa322 = new DFA322(this);
	protected DFA321 dfa321 = new DFA321(this);
	protected DFA331 dfa331 = new DFA331(this);
	protected DFA337 dfa337 = new DFA337(this);
	protected DFA343 dfa343 = new DFA343(this);
	protected DFA357 dfa357 = new DFA357(this);
	protected DFA362 dfa362 = new DFA362(this);
	protected DFA369 dfa369 = new DFA369(this);
	protected DFA373 dfa373 = new DFA373(this);
	protected DFA388 dfa388 = new DFA388(this);
	protected DFA390 dfa390 = new DFA390(this);
	protected DFA403 dfa403 = new DFA403(this);
	protected DFA406 dfa406 = new DFA406(this);
	protected DFA422 dfa422 = new DFA422(this);
	protected DFA451 dfa451 = new DFA451(this);
	protected DFA452 dfa452 = new DFA452(this);
	protected DFA458 dfa458 = new DFA458(this);
	protected DFA466 dfa466 = new DFA466(this);
	protected DFA465 dfa465 = new DFA465(this);
	protected DFA469 dfa469 = new DFA469(this);
	protected DFA474 dfa474 = new DFA474(this);
	protected DFA494 dfa494 = new DFA494(this);
	protected DFA501 dfa501 = new DFA501(this);
	protected DFA496 dfa496 = new DFA496(this);
	protected DFA520 dfa520 = new DFA520(this);
	protected DFA515 dfa515 = new DFA515(this);
	protected DFA531 dfa531 = new DFA531(this);
	protected DFA536 dfa536 = new DFA536(this);
	static final String DFA3_eotS =
		"\5\uffff";
	static final String DFA3_eofS =
		"\1\2\4\uffff";
	static final String DFA3_minS =
		"\1\6\1\23\1\uffff\1\23\1\uffff";
	static final String DFA3_maxS =
		"\1\u0097\1\u0098\1\uffff\1\u0098\1\uffff";
	static final String DFA3_acceptS =
		"\2\uffff\1\2\1\uffff\1\1";
	static final String DFA3_specialS =
		"\5\uffff}>";
	static final String[] DFA3_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\1\1\1\2\3\uffff\1\2\5\uffff\3\2\7\uffff\1\2"+
			"\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\11\uffff\1\2\2\uffff\2\2\6\uffff\3\2\2\uffff"+
			"\3\2\1\uffff\2\2\2\uffff\5\2\1\uffff\3\2\1\uffff\6\2\1\uffff\1\2\1\uffff"+
			"\1\2\1\uffff\1\2\1\uffff\5\2\10\uffff\1\2",
			"\1\2\1\uffff\1\3\74\uffff\1\3\62\uffff\1\4\22\uffff\1\3",
			"",
			"\1\2\1\uffff\1\3\74\uffff\1\3\62\uffff\1\4\22\uffff\1\3",
			""
	};

	static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
	static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
	static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
	static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
	static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
	static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
	static final short[][] DFA3_transition;

	static {
		int numStates = DFA3_transitionS.length;
		DFA3_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
		}
	}

	protected class DFA3 extends DFA {

		public DFA3(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}
		@Override
		public String getDescription() {
			return "287:6: ( charSet ( ws )? )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA5_eotS =
		"\5\uffff";
	static final String DFA5_eofS =
		"\1\2\4\uffff";
	static final String DFA5_minS =
		"\1\6\1\23\1\uffff\1\23\1\uffff";
	static final String DFA5_maxS =
		"\1\u0097\1\u0098\1\uffff\1\u0098\1\uffff";
	static final String DFA5_acceptS =
		"\2\uffff\1\2\1\uffff\1\1";
	static final String DFA5_specialS =
		"\5\uffff}>";
	static final String[] DFA5_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\3\uffff\1\2\5\uffff\3\2\7\uffff\1\2\2\uffff"+
			"\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff\1\2\6\uffff"+
			"\3\2\5\uffff\1\1\11\uffff\1\2\2\uffff\2\2\6\uffff\3\2\2\uffff\3\2\1\uffff"+
			"\2\2\2\uffff\5\2\1\uffff\3\2\1\uffff\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\1\uffff\5\2\10\uffff\1\2",
			"\1\2\1\uffff\1\3\35\uffff\1\4\36\uffff\1\3\62\uffff\1\4\14\uffff\1\4"+
			"\5\uffff\1\3",
			"",
			"\1\2\1\uffff\1\3\35\uffff\1\4\36\uffff\1\3\62\uffff\1\4\14\uffff\1\4"+
			"\5\uffff\1\3",
			""
	};

	static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
	static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
	static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
	static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
	static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
	static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
	static final short[][] DFA5_transition;

	static {
		int numStates = DFA5_transitionS.length;
		DFA5_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
		}
	}

	protected class DFA5 extends DFA {

		public DFA5(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 5;
			this.eot = DFA5_eot;
			this.eof = DFA5_eof;
			this.min = DFA5_min;
			this.max = DFA5_max;
			this.accept = DFA5_accept;
			this.special = DFA5_special;
			this.transition = DFA5_transition;
		}
		@Override
		public String getDescription() {
			return "289:9: ( namespaces )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA8_eotS =
		"\5\uffff";
	static final String DFA8_eofS =
		"\1\1\4\uffff";
	static final String DFA8_minS =
		"\1\6\1\uffff\2\23\1\uffff";
	static final String DFA8_maxS =
		"\1\u0097\1\uffff\2\u0098\1\uffff";
	static final String DFA8_acceptS =
		"\1\uffff\1\2\2\uffff\1\1";
	static final String DFA8_specialS =
		"\5\uffff}>";
	static final String[] DFA8_transitionS = {
			"\2\1\2\uffff\5\1\3\uffff\2\1\3\uffff\1\1\5\uffff\3\1\7\uffff\1\1\2\uffff"+
			"\2\1\2\uffff\2\1\3\uffff\1\1\1\uffff\1\1\6\uffff\4\1\2\uffff\1\1\6\uffff"+
			"\3\1\5\uffff\1\2\11\uffff\1\1\2\uffff\2\1\6\uffff\3\1\2\uffff\3\1\1\uffff"+
			"\2\1\2\uffff\5\1\1\uffff\3\1\1\uffff\6\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
			"\1\1\1\uffff\5\1\10\uffff\1\1",
			"",
			"\1\1\1\uffff\1\3\35\uffff\1\4\36\uffff\1\3\62\uffff\1\4\14\uffff\1\4"+
			"\5\uffff\1\3",
			"\1\1\1\uffff\1\3\35\uffff\1\4\36\uffff\1\3\62\uffff\1\4\14\uffff\1\4"+
			"\5\uffff\1\3",
			""
	};

	static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
	static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
	static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
	static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
	static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
	static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
	static final short[][] DFA8_transition;

	static {
		int numStates = DFA8_transitionS.length;
		DFA8_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
		}
	}

	protected class DFA8 extends DFA {

		public DFA8(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 8;
			this.eot = DFA8_eot;
			this.eof = DFA8_eof;
			this.min = DFA8_min;
			this.max = DFA8_max;
			this.accept = DFA8_accept;
			this.special = DFA8_special;
			this.transition = DFA8_transition;
		}
		@Override
		public String getDescription() {
			return "()+ loopback of 296:2: ( namespace ( ws )? )+";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA36_eotS =
		"\10\uffff";
	static final String DFA36_eofS =
		"\10\uffff";
	static final String DFA36_minS =
		"\1\65\2\25\1\0\1\uffff\1\0\2\uffff";
	static final String DFA36_maxS =
		"\1\65\2\u0098\1\0\1\uffff\1\0\2\uffff";
	static final String DFA36_acceptS =
		"\4\uffff\1\3\1\uffff\1\1\1\2";
	static final String DFA36_specialS =
		"\3\uffff\1\0\1\uffff\1\1\2\uffff}>";
	static final String[] DFA36_transitionS = {
			"\1\1",
			"\1\2\61\uffff\1\4\12\uffff\1\2\62\uffff\1\3\14\uffff\1\3\5\uffff\1\2",
			"\1\2\61\uffff\1\4\12\uffff\1\2\62\uffff\1\5\14\uffff\1\5\5\uffff\1\2",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			""
	};

	static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
	static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
	static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
	static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
	static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
	static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
	static final short[][] DFA36_transition;

	static {
		int numStates = DFA36_transitionS.length;
		DFA36_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
		}
	}

	protected class DFA36 extends DFA {

		public DFA36(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 36;
			this.eot = DFA36_eot;
			this.eof = DFA36_eof;
			this.min = DFA36_min;
			this.max = DFA36_max;
			this.accept = DFA36_accept;
			this.special = DFA36_special;
			this.transition = DFA36_transition;
		}
		@Override
		public String getDescription() {
			return "330:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? ( LPAREN less_import_types RPAREN ( ws )? )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA36_3 = input.LA(1);
						 
						int index36_3 = input.index();
						input.rewind();
						s = -1;
						if ( (!(evalPredicate((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")),""))) ) {s = 6;}
						else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 7;}
						else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 4;}
						 
						input.seek(index36_3);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA36_5 = input.LA(1);
						 
						int index36_5 = input.index();
						input.rewind();
						s = -1;
						if ( (!(evalPredicate((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")),""))) ) {s = 6;}
						else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 7;}
						else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 4;}
						 
						input.seek(index36_5);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 36, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA28_eotS =
		"\4\uffff";
	static final String DFA28_eofS =
		"\2\2\2\uffff";
	static final String DFA28_minS =
		"\2\6\2\uffff";
	static final String DFA28_maxS =
		"\2\u0098\2\uffff";
	static final String DFA28_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA28_specialS =
		"\4\uffff}>";
	static final String[] DFA28_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\3\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\4\uffff\1\2\1\uffff\3\2\5\uffff\1\2\1\1\3\uffff\1\2\4\uffff\1\2"+
			"\2\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\uffff\2\2\2\uffff"+
			"\5\2\1\uffff\3\2\1\uffff\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\5\2\6\uffff\1\2\1\uffff\1\2\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\3\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\4\uffff\1\2\1\uffff\3\2\5\uffff\1\2\1\1\3\uffff\1\2\4\uffff\1\2"+
			"\2\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\uffff\2\2\1\uffff"+
			"\6\2\1\uffff\3\2\1\uffff\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\5\2\6\uffff\1\2\1\uffff\1\2\1\1",
			"",
			""
	};

	static final short[] DFA28_eot = DFA.unpackEncodedString(DFA28_eotS);
	static final short[] DFA28_eof = DFA.unpackEncodedString(DFA28_eofS);
	static final char[] DFA28_min = DFA.unpackEncodedStringToUnsignedChars(DFA28_minS);
	static final char[] DFA28_max = DFA.unpackEncodedStringToUnsignedChars(DFA28_maxS);
	static final short[] DFA28_accept = DFA.unpackEncodedString(DFA28_acceptS);
	static final short[] DFA28_special = DFA.unpackEncodedString(DFA28_specialS);
	static final short[][] DFA28_transition;

	static {
		int numStates = DFA28_transitionS.length;
		DFA28_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA28_transition[i] = DFA.unpackEncodedString(DFA28_transitionS[i]);
		}
	}

	protected class DFA28 extends DFA {

		public DFA28(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 28;
			this.eot = DFA28_eot;
			this.eof = DFA28_eof;
			this.min = DFA28_min;
			this.max = DFA28_max;
			this.accept = DFA28_accept;
			this.special = DFA28_special;
			this.transition = DFA28_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 335:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA37_eotS =
		"\6\uffff";
	static final String DFA37_eofS =
		"\6\uffff";
	static final String DFA37_minS =
		"\2\25\1\uffff\2\25\1\uffff";
	static final String DFA37_maxS =
		"\2\u0098\1\uffff\2\u0098\1\uffff";
	static final String DFA37_acceptS =
		"\2\uffff\1\2\2\uffff\1\1";
	static final String DFA37_specialS =
		"\6\uffff}>";
	static final String[] DFA37_transitionS = {
			"\1\1\74\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\1\1\35\uffff\1\3\36\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"",
			"\1\4\61\uffff\1\2\12\uffff\1\4\105\uffff\1\4",
			"\1\4\35\uffff\1\5\23\uffff\1\2\12\uffff\1\4\105\uffff\1\4",
			""
	};

	static final short[] DFA37_eot = DFA.unpackEncodedString(DFA37_eotS);
	static final short[] DFA37_eof = DFA.unpackEncodedString(DFA37_eofS);
	static final char[] DFA37_min = DFA.unpackEncodedStringToUnsignedChars(DFA37_minS);
	static final char[] DFA37_max = DFA.unpackEncodedStringToUnsignedChars(DFA37_maxS);
	static final short[] DFA37_accept = DFA.unpackEncodedString(DFA37_acceptS);
	static final short[] DFA37_special = DFA.unpackEncodedString(DFA37_specialS);
	static final short[][] DFA37_transition;

	static {
		int numStates = DFA37_transitionS.length;
		DFA37_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA37_transition[i] = DFA.unpackEncodedString(DFA37_transitionS[i]);
		}
	}

	protected class DFA37 extends DFA {

		public DFA37(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 37;
			this.eot = DFA37_eot;
			this.eof = DFA37_eof;
			this.min = DFA37_min;
			this.max = DFA37_max;
			this.accept = DFA37_accept;
			this.special = DFA37_special;
			this.transition = DFA37_transition;
		}
		@Override
		public String getDescription() {
			return "342:40: ( ws sass_use_as )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA38_eotS =
		"\4\uffff";
	static final String DFA38_eofS =
		"\4\uffff";
	static final String DFA38_minS =
		"\2\25\2\uffff";
	static final String DFA38_maxS =
		"\2\u0098\2\uffff";
	static final String DFA38_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA38_specialS =
		"\4\uffff}>";
	static final String[] DFA38_transitionS = {
			"\1\1\74\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\1\1\35\uffff\1\3\36\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"",
			""
	};

	static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
	static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
	static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
	static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
	static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
	static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
	static final short[][] DFA38_transition;

	static {
		int numStates = DFA38_transitionS.length;
		DFA38_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
		}
	}

	protected class DFA38 extends DFA {

		public DFA38(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 38;
			this.eot = DFA38_eot;
			this.eof = DFA38_eof;
			this.min = DFA38_min;
			this.max = DFA38_max;
			this.accept = DFA38_accept;
			this.special = DFA38_special;
			this.transition = DFA38_transition;
		}
		@Override
		public String getDescription() {
			return "342:58: ( ws sass_use_with )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA43_eotS =
		"\4\uffff";
	static final String DFA43_eofS =
		"\4\uffff";
	static final String DFA43_minS =
		"\2\24\2\uffff";
	static final String DFA43_maxS =
		"\2\u0098\2\uffff";
	static final String DFA43_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA43_specialS =
		"\4\uffff}>";
	static final String[] DFA43_transitionS = {
			"\1\3\1\1\74\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"\1\3\1\1\74\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"",
			""
	};

	static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_eotS);
	static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_eofS);
	static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_minS);
	static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_maxS);
	static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_acceptS);
	static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_specialS);
	static final short[][] DFA43_transition;

	static {
		int numStates = DFA43_transitionS.length;
		DFA43_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA43_transition[i] = DFA.unpackEncodedString(DFA43_transitionS[i]);
		}
	}

	protected class DFA43 extends DFA {

		public DFA43(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 43;
			this.eot = DFA43_eot;
			this.eof = DFA43_eof;
			this.min = DFA43_min;
			this.max = DFA43_max;
			this.accept = DFA43_accept;
			this.special = DFA43_special;
			this.transition = DFA43_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 352:80: ( ( ws )? COMMA ( ws )? sass_use_with_declaration )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA48_eotS =
		"\7\uffff";
	static final String DFA48_eofS =
		"\7\uffff";
	static final String DFA48_minS =
		"\2\25\1\uffff\2\25\1\0\1\uffff";
	static final String DFA48_maxS =
		"\2\u0098\1\uffff\2\u0098\1\0\1\uffff";
	static final String DFA48_acceptS =
		"\2\uffff\1\2\3\uffff\1\1";
	static final String DFA48_specialS =
		"\5\uffff\1\0\1\uffff}>";
	static final String[] DFA48_transitionS = {
			"\1\1\74\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\1\1\35\uffff\1\3\36\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"",
			"\1\4\61\uffff\1\2\12\uffff\1\4\105\uffff\1\4",
			"\1\4\35\uffff\1\5\23\uffff\1\2\12\uffff\1\4\105\uffff\1\4",
			"\1\uffff",
			""
	};

	static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
	static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
	static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
	static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
	static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
	static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
	static final short[][] DFA48_transition;

	static {
		int numStates = DFA48_transitionS.length;
		DFA48_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
		}
	}

	protected class DFA48 extends DFA {

		public DFA48(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 48;
			this.eot = DFA48_eot;
			this.eof = DFA48_eof;
			this.min = DFA48_min;
			this.max = DFA48_max;
			this.accept = DFA48_accept;
			this.special = DFA48_special;
			this.transition = DFA48_transition;
		}
		@Override
		public String getDescription() {
			return "363:44: ( ws ( sass_forward_hide | sass_forward_show ) )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA48_5 = input.LA(1);
						 
						int index48_5 = input.index();
						input.rewind();
						s = -1;
						if ( (!(evalPredicate(evalPredicate(tokenNameEquals2("as"),"tokenNameEquals2(\"as\")"),""))) ) {s = 6;}
						else if ( (evalPredicate(tokenNameEquals2("as"),"tokenNameEquals2(\"as\")")) ) {s = 2;}
						 
						input.seek(index48_5);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 48, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA47_eotS =
		"\6\uffff";
	static final String DFA47_eofS =
		"\6\uffff";
	static final String DFA47_minS =
		"\1\63\2\25\1\0\2\uffff";
	static final String DFA47_maxS =
		"\1\63\2\u0098\1\0\2\uffff";
	static final String DFA47_acceptS =
		"\4\uffff\1\1\1\2";
	static final String DFA47_specialS =
		"\3\uffff\1\0\2\uffff}>";
	static final String[] DFA47_transitionS = {
			"\1\1",
			"\1\2\74\uffff\1\2\105\uffff\1\2",
			"\1\2\35\uffff\1\3\36\uffff\1\2\105\uffff\1\2",
			"\1\uffff",
			"",
			""
	};

	static final short[] DFA47_eot = DFA.unpackEncodedString(DFA47_eotS);
	static final short[] DFA47_eof = DFA.unpackEncodedString(DFA47_eofS);
	static final char[] DFA47_min = DFA.unpackEncodedStringToUnsignedChars(DFA47_minS);
	static final char[] DFA47_max = DFA.unpackEncodedStringToUnsignedChars(DFA47_maxS);
	static final short[] DFA47_accept = DFA.unpackEncodedString(DFA47_acceptS);
	static final short[] DFA47_special = DFA.unpackEncodedString(DFA47_specialS);
	static final short[][] DFA47_transition;

	static {
		int numStates = DFA47_transitionS.length;
		DFA47_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA47_transition[i] = DFA.unpackEncodedString(DFA47_transitionS[i]);
		}
	}

	protected class DFA47 extends DFA {

		public DFA47(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 47;
			this.eot = DFA47_eot;
			this.eof = DFA47_eof;
			this.min = DFA47_min;
			this.max = DFA47_max;
			this.accept = DFA47_accept;
			this.special = DFA47_special;
			this.transition = DFA47_transition;
		}
		@Override
		public String getDescription() {
			return "363:49: ( sass_forward_hide | sass_forward_show )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA47_3 = input.LA(1);
						 
						int index47_3 = input.index();
						input.rewind();
						s = -1;
						if ( (evalPredicate(tokenNameEquals("hide"),"tokenNameEquals(\"hide\")")) ) {s = 4;}
						else if ( (evalPredicate(tokenNameEquals("show"),"tokenNameEquals(\"show\")")) ) {s = 5;}
						 
						input.seek(index47_3);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 47, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA49_eotS =
		"\6\uffff";
	static final String DFA49_eofS =
		"\6\uffff";
	static final String DFA49_minS =
		"\2\25\1\uffff\2\25\1\uffff";
	static final String DFA49_maxS =
		"\2\u0098\1\uffff\2\u0098\1\uffff";
	static final String DFA49_acceptS =
		"\2\uffff\1\2\2\uffff\1\1";
	static final String DFA49_specialS =
		"\6\uffff}>";
	static final String[] DFA49_transitionS = {
			"\1\1\74\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\1\1\35\uffff\1\3\36\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"",
			"\1\4\61\uffff\1\2\12\uffff\1\4\105\uffff\1\4",
			"\1\4\35\uffff\1\5\23\uffff\1\2\12\uffff\1\4\105\uffff\1\4",
			""
	};

	static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
	static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
	static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
	static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
	static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
	static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
	static final short[][] DFA49_transition;

	static {
		int numStates = DFA49_transitionS.length;
		DFA49_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
		}
	}

	protected class DFA49 extends DFA {

		public DFA49(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 49;
			this.eot = DFA49_eot;
			this.eof = DFA49_eof;
			this.min = DFA49_min;
			this.max = DFA49_max;
			this.accept = DFA49_accept;
			this.special = DFA49_special;
			this.transition = DFA49_transition;
		}
		@Override
		public String getDescription() {
			return "363:93: ({...}? ws sass_forward_as )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA50_eotS =
		"\4\uffff";
	static final String DFA50_eofS =
		"\4\uffff";
	static final String DFA50_minS =
		"\2\25\2\uffff";
	static final String DFA50_maxS =
		"\2\u0098\2\uffff";
	static final String DFA50_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA50_specialS =
		"\4\uffff}>";
	static final String[] DFA50_transitionS = {
			"\1\1\74\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\1\1\35\uffff\1\3\36\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"",
			""
	};

	static final short[] DFA50_eot = DFA.unpackEncodedString(DFA50_eotS);
	static final short[] DFA50_eof = DFA.unpackEncodedString(DFA50_eofS);
	static final char[] DFA50_min = DFA.unpackEncodedStringToUnsignedChars(DFA50_minS);
	static final char[] DFA50_max = DFA.unpackEncodedStringToUnsignedChars(DFA50_maxS);
	static final short[] DFA50_accept = DFA.unpackEncodedString(DFA50_acceptS);
	static final short[] DFA50_special = DFA.unpackEncodedString(DFA50_specialS);
	static final short[][] DFA50_transition;

	static {
		int numStates = DFA50_transitionS.length;
		DFA50_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA50_transition[i] = DFA.unpackEncodedString(DFA50_transitionS[i]);
		}
	}

	protected class DFA50 extends DFA {

		public DFA50(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 50;
			this.eot = DFA50_eot;
			this.eof = DFA50_eof;
			this.min = DFA50_min;
			this.max = DFA50_max;
			this.accept = DFA50_accept;
			this.special = DFA50_special;
			this.transition = DFA50_transition;
		}
		@Override
		public String getDescription() {
			return "363:141: ({...}? ws sass_forward_with )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA55_eotS =
		"\4\uffff";
	static final String DFA55_eofS =
		"\4\uffff";
	static final String DFA55_minS =
		"\2\24\2\uffff";
	static final String DFA55_maxS =
		"\2\u0098\2\uffff";
	static final String DFA55_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA55_specialS =
		"\4\uffff}>";
	static final String[] DFA55_transitionS = {
			"\1\3\1\1\74\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"\1\3\1\1\74\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"",
			""
	};

	static final short[] DFA55_eot = DFA.unpackEncodedString(DFA55_eotS);
	static final short[] DFA55_eof = DFA.unpackEncodedString(DFA55_eofS);
	static final char[] DFA55_min = DFA.unpackEncodedStringToUnsignedChars(DFA55_minS);
	static final char[] DFA55_max = DFA.unpackEncodedStringToUnsignedChars(DFA55_maxS);
	static final short[] DFA55_accept = DFA.unpackEncodedString(DFA55_acceptS);
	static final short[] DFA55_special = DFA.unpackEncodedString(DFA55_specialS);
	static final short[][] DFA55_transition;

	static {
		int numStates = DFA55_transitionS.length;
		DFA55_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA55_transition[i] = DFA.unpackEncodedString(DFA55_transitionS[i]);
		}
	}

	protected class DFA55 extends DFA {

		public DFA55(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 55;
			this.eot = DFA55_eot;
			this.eof = DFA55_eof;
			this.min = DFA55_min;
			this.max = DFA55_max;
			this.accept = DFA55_accept;
			this.special = DFA55_special;
			this.transition = DFA55_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 373:84: ( ( ws )? COMMA ( ws )? sass_forward_with_declaration )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA61_eotS =
		"\4\uffff";
	static final String DFA61_eofS =
		"\4\uffff";
	static final String DFA61_minS =
		"\2\24\2\uffff";
	static final String DFA61_maxS =
		"\2\u0098\2\uffff";
	static final String DFA61_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA61_specialS =
		"\4\uffff}>";
	static final String[] DFA61_transitionS = {
			"\1\3\1\1\74\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\1\3\1\1\35\uffff\1\2\36\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"",
			""
	};

	static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
	static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
	static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_minS);
	static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_maxS);
	static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
	static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
	static final short[][] DFA61_transition;

	static {
		int numStates = DFA61_transitionS.length;
		DFA61_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
		}
	}

	protected class DFA61 extends DFA {

		public DFA61(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 61;
			this.eot = DFA61_eot;
			this.eof = DFA61_eof;
			this.min = DFA61_min;
			this.max = DFA61_max;
			this.accept = DFA61_accept;
			this.special = DFA61_special;
			this.transition = DFA61_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 383:47: ( ( ws )? COMMA ( ws )? IDENT )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA64_eotS =
		"\4\uffff";
	static final String DFA64_eofS =
		"\4\uffff";
	static final String DFA64_minS =
		"\2\24\2\uffff";
	static final String DFA64_maxS =
		"\2\u0098\2\uffff";
	static final String DFA64_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA64_specialS =
		"\4\uffff}>";
	static final String[] DFA64_transitionS = {
			"\1\3\1\1\74\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\1\3\1\1\35\uffff\1\2\36\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"",
			""
	};

	static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_eotS);
	static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_eofS);
	static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_minS);
	static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_maxS);
	static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_acceptS);
	static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_specialS);
	static final short[][] DFA64_transition;

	static {
		int numStates = DFA64_transitionS.length;
		DFA64_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA64_transition[i] = DFA.unpackEncodedString(DFA64_transitionS[i]);
		}
	}

	protected class DFA64 extends DFA {

		public DFA64(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 64;
			this.eot = DFA64_eot;
			this.eof = DFA64_eof;
			this.min = DFA64_min;
			this.max = DFA64_max;
			this.accept = DFA64_accept;
			this.special = DFA64_special;
			this.transition = DFA64_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 388:47: ( ( ws )? COMMA ( ws )? IDENT )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA70_eotS =
		"\6\uffff";
	static final String DFA70_eofS =
		"\6\uffff";
	static final String DFA70_minS =
		"\2\6\1\0\1\uffff\1\0\1\uffff";
	static final String DFA70_maxS =
		"\2\u0098\1\0\1\uffff\1\0\1\uffff";
	static final String DFA70_acceptS =
		"\3\uffff\1\2\1\uffff\1\1";
	static final String DFA70_specialS =
		"\2\uffff\1\0\1\uffff\1\1\1\uffff}>";
	static final String[] DFA70_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\uffff\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\2\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3"+
			"\1\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\uffff\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\4\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3"+
			"\1\uffff\1\3\1\1",
			"\1\uffff",
			"",
			"\1\uffff",
			""
	};

	static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
	static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
	static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
	static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
	static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
	static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
	static final short[][] DFA70_transition;

	static {
		int numStates = DFA70_transitionS.length;
		DFA70_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
		}
	}

	protected class DFA70 extends DFA {

		public DFA70(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 70;
			this.eot = DFA70_eot;
			this.eof = DFA70_eof;
			this.min = DFA70_min;
			this.max = DFA70_max;
			this.accept = DFA70_accept;
			this.special = DFA70_special;
			this.transition = DFA70_transition;
		}
		@Override
		public String getDescription() {
			return "404:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA70_2 = input.LA(1);
						 
						int index70_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred4_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index70_2);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA70_4 = input.LA(1);
						 
						int index70_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred4_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index70_4);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 70, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA76_eotS =
		"\4\uffff";
	static final String DFA76_eofS =
		"\4\uffff";
	static final String DFA76_minS =
		"\2\6\2\uffff";
	static final String DFA76_maxS =
		"\2\u0098\2\uffff";
	static final String DFA76_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA76_specialS =
		"\4\uffff}>";
	static final String[] DFA76_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"",
			""
	};

	static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_eotS);
	static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_eofS);
	static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_minS);
	static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_maxS);
	static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_acceptS);
	static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_specialS);
	static final short[][] DFA76_transition;

	static {
		int numStates = DFA76_transitionS.length;
		DFA76_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA76_transition[i] = DFA.unpackEncodedString(DFA76_transitionS[i]);
		}
	}

	protected class DFA76 extends DFA {

		public DFA76(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 76;
			this.eot = DFA76_eot;
			this.eof = DFA76_eof;
			this.min = DFA76_min;
			this.max = DFA76_max;
			this.accept = DFA76_accept;
			this.special = DFA76_special;
			this.transition = DFA76_transition;
		}
		@Override
		public String getDescription() {
			return "415:87: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA78_eotS =
		"\4\uffff";
	static final String DFA78_eofS =
		"\4\uffff";
	static final String DFA78_minS =
		"\2\6\2\uffff";
	static final String DFA78_maxS =
		"\2\u0098\2\uffff";
	static final String DFA78_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA78_specialS =
		"\4\uffff}>";
	static final String[] DFA78_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"",
			""
	};

	static final short[] DFA78_eot = DFA.unpackEncodedString(DFA78_eotS);
	static final short[] DFA78_eof = DFA.unpackEncodedString(DFA78_eofS);
	static final char[] DFA78_min = DFA.unpackEncodedStringToUnsignedChars(DFA78_minS);
	static final char[] DFA78_max = DFA.unpackEncodedStringToUnsignedChars(DFA78_maxS);
	static final short[] DFA78_accept = DFA.unpackEncodedString(DFA78_acceptS);
	static final short[] DFA78_special = DFA.unpackEncodedString(DFA78_specialS);
	static final short[][] DFA78_transition;

	static {
		int numStates = DFA78_transitionS.length;
		DFA78_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA78_transition[i] = DFA.unpackEncodedString(DFA78_transitionS[i]);
		}
	}

	protected class DFA78 extends DFA {

		public DFA78(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 78;
			this.eot = DFA78_eot;
			this.eof = DFA78_eof;
			this.min = DFA78_min;
			this.max = DFA78_max;
			this.accept = DFA78_accept;
			this.special = DFA78_special;
			this.transition = DFA78_transition;
		}
		@Override
		public String getDescription() {
			return "416:57: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA82_eotS =
		"\4\uffff";
	static final String DFA82_eofS =
		"\2\2\2\uffff";
	static final String DFA82_minS =
		"\2\6\2\uffff";
	static final String DFA82_maxS =
		"\2\u0098\2\uffff";
	static final String DFA82_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA82_specialS =
		"\1\1\1\0\2\uffff}>";
	static final String[] DFA82_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\3\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\5\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2\2\uffff\1\2"+
			"\3\uffff\4\2\1\uffff\3\2\1\uffff\2\2\2\uffff\5\2\1\uffff\3\2\1\uffff"+
			"\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff"+
			"\1\2\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\3\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\5\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2\2\uffff\1\2"+
			"\3\uffff\4\2\1\uffff\3\2\1\uffff\2\2\1\uffff\6\2\1\uffff\3\2\1\uffff"+
			"\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff"+
			"\1\2\1\1",
			"",
			""
	};

	static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_eotS);
	static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_eofS);
	static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_minS);
	static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_maxS);
	static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_acceptS);
	static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_specialS);
	static final short[][] DFA82_transition;

	static {
		int numStates = DFA82_transitionS.length;
		DFA82_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA82_transition[i] = DFA.unpackEncodedString(DFA82_transitionS[i]);
		}
	}

	protected class DFA82 extends DFA {

		public DFA82(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 82;
			this.eot = DFA82_eot;
			this.eof = DFA82_eof;
			this.min = DFA82_min;
			this.max = DFA82_max;
			this.accept = DFA82_accept;
			this.special = DFA82_special;
			this.transition = DFA82_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 433:15: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA82_1 = input.LA(1);
						 
						int index82_1 = input.index();
						input.rewind();
						s = -1;
						if ( (LA82_1==EOF||(LA82_1 >= AT_IDENT && LA82_1 <= AT_SIGN)||(LA82_1 >= BOTTOMCENTER_SYM && LA82_1 <= BOTTOMRIGHT_SYM)||(LA82_1 >= CHARSET_SYM && LA82_1 <= COLON)||LA82_1==COUNTER_STYLE_SYM||(LA82_1 >= DCOLON && LA82_1 <= DOT)||LA82_1==FONT_FACE_SYM||(LA82_1 >= GEN && LA82_1 <= GREATER)||(LA82_1 >= HASH && LA82_1 <= HASH_SYMBOL)||LA82_1==IDENT||LA82_1==IMPORT_SYM||(LA82_1 >= LBRACE && LA82_1 <= LEFTTOP_SYM)||LA82_1==LESS_AND||(LA82_1 >= MEDIA_SYM && LA82_1 <= MOZ_DOCUMENT_SYM)||LA82_1==NAMESPACE_SYM||LA82_1==PAGE_SYM||(LA82_1 >= PIPE && LA82_1 <= PLUS)||LA82_1==RBRACE||(LA82_1 >= RIGHTBOTTOM_SYM && LA82_1 <= RPAREN)||(LA82_1 >= SASS_AT_ROOT && LA82_1 <= SASS_DEBUG)||(LA82_1 >= SASS_EACH && LA82_1 <= SASS_ELSE)||(LA82_1 >= SASS_ERROR && LA82_1 <= SASS_FUNCTION)||(LA82_1 >= SASS_IF && LA82_1 <= SASS_MIXIN)||(LA82_1 >= SASS_RETURN && LA82_1 <= SEMI)||LA82_1==STAR||LA82_1==SUPPORTS_SYM||LA82_1==TILDE||(LA82_1 >= TOPCENTER_SYM && LA82_1 <= TOPRIGHT_SYM)||LA82_1==VARIABLE||LA82_1==WEBKIT_KEYFRAMES_SYM) ) {s = 2;}
						else if ( (LA82_1==COMMENT||LA82_1==NL||LA82_1==WS) ) {s = 1;}
						else if ( (LA82_1==COMMA) && (synpred10_Css3())) {s = 3;}
						 
						input.seek(index82_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA82_0 = input.LA(1);
						 
						int index82_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA82_0==COMMENT||LA82_0==NL||LA82_0==WS) ) {s = 1;}
						else if ( (LA82_0==EOF||(LA82_0 >= AT_IDENT && LA82_0 <= AT_SIGN)||(LA82_0 >= BOTTOMCENTER_SYM && LA82_0 <= BOTTOMRIGHT_SYM)||(LA82_0 >= CHARSET_SYM && LA82_0 <= COLON)||LA82_0==COUNTER_STYLE_SYM||(LA82_0 >= DCOLON && LA82_0 <= DOT)||LA82_0==FONT_FACE_SYM||(LA82_0 >= GEN && LA82_0 <= GREATER)||(LA82_0 >= HASH && LA82_0 <= HASH_SYMBOL)||LA82_0==IDENT||LA82_0==IMPORT_SYM||(LA82_0 >= LBRACE && LA82_0 <= LEFTTOP_SYM)||LA82_0==LESS_AND||(LA82_0 >= MEDIA_SYM && LA82_0 <= MOZ_DOCUMENT_SYM)||LA82_0==NAMESPACE_SYM||LA82_0==PAGE_SYM||(LA82_0 >= PIPE && LA82_0 <= PLUS)||LA82_0==RBRACE||(LA82_0 >= RIGHTBOTTOM_SYM && LA82_0 <= RPAREN)||(LA82_0 >= SASS_AT_ROOT && LA82_0 <= SASS_DEBUG)||(LA82_0 >= SASS_EACH && LA82_0 <= SASS_ELSE)||(LA82_0 >= SASS_EXTEND && LA82_0 <= SASS_FUNCTION)||(LA82_0 >= SASS_IF && LA82_0 <= SASS_MIXIN)||(LA82_0 >= SASS_RETURN && LA82_0 <= SEMI)||LA82_0==STAR||LA82_0==SUPPORTS_SYM||LA82_0==TILDE||(LA82_0 >= TOPCENTER_SYM && LA82_0 <= TOPRIGHT_SYM)||LA82_0==VARIABLE||LA82_0==WEBKIT_KEYFRAMES_SYM) ) {s = 2;}
						else if ( (LA82_0==COMMA) && (synpred10_Css3())) {s = 3;}
						 
						input.seek(index82_0);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 82, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA95_eotS =
		"\4\uffff";
	static final String DFA95_eofS =
		"\4\uffff";
	static final String DFA95_minS =
		"\2\23\2\uffff";
	static final String DFA95_maxS =
		"\2\u0098\2\uffff";
	static final String DFA95_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA95_specialS =
		"\4\uffff}>";
	static final String[] DFA95_transitionS = {
			"\1\2\1\uffff\1\1\74\uffff\1\1\26\uffff\1\3\56\uffff\1\1",
			"\1\2\1\uffff\1\1\74\uffff\1\1\26\uffff\1\3\56\uffff\1\1",
			"",
			""
	};

	static final short[] DFA95_eot = DFA.unpackEncodedString(DFA95_eotS);
	static final short[] DFA95_eof = DFA.unpackEncodedString(DFA95_eofS);
	static final char[] DFA95_min = DFA.unpackEncodedStringToUnsignedChars(DFA95_minS);
	static final char[] DFA95_max = DFA.unpackEncodedStringToUnsignedChars(DFA95_maxS);
	static final short[] DFA95_accept = DFA.unpackEncodedString(DFA95_acceptS);
	static final short[] DFA95_special = DFA.unpackEncodedString(DFA95_specialS);
	static final short[][] DFA95_transition;

	static {
		int numStates = DFA95_transitionS.length;
		DFA95_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA95_transition[i] = DFA.unpackEncodedString(DFA95_transitionS[i]);
		}
	}

	protected class DFA95 extends DFA {

		public DFA95(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 95;
			this.eot = DFA95_eot;
			this.eof = DFA95_eof;
			this.min = DFA95_min;
			this.max = DFA95_max;
			this.accept = DFA95_accept;
			this.special = DFA95_special;
			this.transition = DFA95_transition;
		}
		@Override
		public String getDescription() {
			return "453:42: ( mediaFeatureValue )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA104_eotS =
		"\6\uffff";
	static final String DFA104_eofS =
		"\2\3\4\uffff";
	static final String DFA104_minS =
		"\2\6\1\0\1\uffff\1\0\1\uffff";
	static final String DFA104_maxS =
		"\2\u0098\1\0\1\uffff\1\0\1\uffff";
	static final String DFA104_acceptS =
		"\3\uffff\1\2\1\uffff\1\1";
	static final String DFA104_specialS =
		"\2\uffff\1\0\1\uffff\1\1\1\uffff}>";
	static final String[] DFA104_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\uffff\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\2\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\10\uffff\1\3"+
			"\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\uffff\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\4\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\10\uffff\1\3"+
			"\1\1",
			"\1\uffff",
			"",
			"\1\uffff",
			""
	};

	static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_eotS);
	static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_eofS);
	static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_minS);
	static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_maxS);
	static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_acceptS);
	static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_specialS);
	static final short[][] DFA104_transition;

	static {
		int numStates = DFA104_transitionS.length;
		DFA104_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA104_transition[i] = DFA.unpackEncodedString(DFA104_transitionS[i]);
		}
	}

	protected class DFA104 extends DFA {

		public DFA104(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 104;
			this.eot = DFA104_eot;
			this.eof = DFA104_eof;
			this.min = DFA104_min;
			this.max = DFA104_max;
			this.accept = DFA104_accept;
			this.special = DFA104_special;
			this.transition = DFA104_transition;
		}
		@Override
		public String getDescription() {
			return "474:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA104_2 = input.LA(1);
						 
						int index104_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred15_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index104_2);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA104_4 = input.LA(1);
						 
						int index104_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred15_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index104_4);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 104, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA113_eotS =
		"\4\uffff";
	static final String DFA113_eofS =
		"\4\uffff";
	static final String DFA113_minS =
		"\2\25\2\uffff";
	static final String DFA113_maxS =
		"\2\u0098\2\uffff";
	static final String DFA113_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA113_specialS =
		"\4\uffff}>";
	static final String[] DFA113_transitionS = {
			"\1\1\45\uffff\1\2\26\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"\1\1\35\uffff\1\3\7\uffff\1\2\26\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"",
			""
	};

	static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_eotS);
	static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_eofS);
	static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_minS);
	static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_maxS);
	static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_acceptS);
	static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_specialS);
	static final short[][] DFA113_transition;

	static {
		int numStates = DFA113_transitionS.length;
		DFA113_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA113_transition[i] = DFA.unpackEncodedString(DFA113_transitionS[i]);
		}
	}

	protected class DFA113 extends DFA {

		public DFA113(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 113;
			this.eot = DFA113_eot;
			this.eof = DFA113_eof;
			this.min = DFA113_min;
			this.max = DFA113_max;
			this.accept = DFA113_accept;
			this.special = DFA113_special;
			this.transition = DFA113_transition;
		}
		@Override
		public String getDescription() {
			return "509:21: ( ws supportsWithOperator )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA115_eotS =
		"\4\uffff";
	static final String DFA115_eofS =
		"\4\uffff";
	static final String DFA115_minS =
		"\2\25\2\uffff";
	static final String DFA115_maxS =
		"\2\u0098\2\uffff";
	static final String DFA115_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA115_specialS =
		"\4\uffff}>";
	static final String[] DFA115_transitionS = {
			"\1\1\45\uffff\1\2\26\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"\1\1\35\uffff\1\3\7\uffff\1\2\26\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"",
			""
	};

	static final short[] DFA115_eot = DFA.unpackEncodedString(DFA115_eotS);
	static final short[] DFA115_eof = DFA.unpackEncodedString(DFA115_eofS);
	static final char[] DFA115_min = DFA.unpackEncodedStringToUnsignedChars(DFA115_minS);
	static final char[] DFA115_max = DFA.unpackEncodedStringToUnsignedChars(DFA115_maxS);
	static final short[] DFA115_accept = DFA.unpackEncodedString(DFA115_acceptS);
	static final short[] DFA115_special = DFA.unpackEncodedString(DFA115_specialS);
	static final short[][] DFA115_transition;

	static {
		int numStates = DFA115_transitionS.length;
		DFA115_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA115_transition[i] = DFA.unpackEncodedString(DFA115_transitionS[i]);
		}
	}

	protected class DFA115 extends DFA {

		public DFA115(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 115;
			this.eot = DFA115_eot;
			this.eof = DFA115_eof;
			this.min = DFA115_min;
			this.max = DFA115_max;
			this.accept = DFA115_accept;
			this.special = DFA115_special;
			this.transition = DFA115_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 514:29: ( ws supportsConjunction )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA116_eotS =
		"\4\uffff";
	static final String DFA116_eofS =
		"\4\uffff";
	static final String DFA116_minS =
		"\2\25\2\uffff";
	static final String DFA116_maxS =
		"\2\u0098\2\uffff";
	static final String DFA116_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA116_specialS =
		"\4\uffff}>";
	static final String[] DFA116_transitionS = {
			"\1\1\45\uffff\1\2\26\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"\1\1\35\uffff\1\3\7\uffff\1\2\26\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"",
			""
	};

	static final short[] DFA116_eot = DFA.unpackEncodedString(DFA116_eotS);
	static final short[] DFA116_eof = DFA.unpackEncodedString(DFA116_eofS);
	static final char[] DFA116_min = DFA.unpackEncodedStringToUnsignedChars(DFA116_minS);
	static final char[] DFA116_max = DFA.unpackEncodedStringToUnsignedChars(DFA116_maxS);
	static final short[] DFA116_accept = DFA.unpackEncodedString(DFA116_acceptS);
	static final short[] DFA116_special = DFA.unpackEncodedString(DFA116_specialS);
	static final short[][] DFA116_transition;

	static {
		int numStates = DFA116_transitionS.length;
		DFA116_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA116_transition[i] = DFA.unpackEncodedString(DFA116_transitionS[i]);
		}
	}

	protected class DFA116 extends DFA {

		public DFA116(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 116;
			this.eot = DFA116_eot;
			this.eof = DFA116_eof;
			this.min = DFA116_min;
			this.max = DFA116_max;
			this.accept = DFA116_accept;
			this.special = DFA116_special;
			this.transition = DFA116_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 515:31: ( ws supportsDisjunction )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA149_eotS =
		"\4\uffff";
	static final String DFA149_eofS =
		"\1\2\3\uffff";
	static final String DFA149_minS =
		"\2\24\2\uffff";
	static final String DFA149_maxS =
		"\2\u0098\2\uffff";
	static final String DFA149_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA149_specialS =
		"\4\uffff}>";
	static final String[] DFA149_transitionS = {
			"\1\3\1\1\45\uffff\1\2\26\uffff\1\1\105\uffff\1\1",
			"\1\3\1\1\45\uffff\1\2\26\uffff\1\1\105\uffff\1\1",
			"",
			""
	};

	static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_eotS);
	static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_eofS);
	static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_minS);
	static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_maxS);
	static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_acceptS);
	static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_specialS);
	static final short[][] DFA149_transition;

	static {
		int numStates = DFA149_transitionS.length;
		DFA149_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA149_transition[i] = DFA.unpackEncodedString(DFA149_transitionS[i]);
		}
	}

	protected class DFA149 extends DFA {

		public DFA149(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 149;
			this.eot = DFA149_eot;
			this.eof = DFA149_eof;
			this.min = DFA149_min;
			this.max = DFA149_max;
			this.accept = DFA149_accept;
			this.special = DFA149_special;
			this.transition = DFA149_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 598:85: ( ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE ) )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA161_eotS =
		"\6\uffff";
	static final String DFA161_eofS =
		"\6\uffff";
	static final String DFA161_minS =
		"\3\6\2\uffff\1\6";
	static final String DFA161_maxS =
		"\3\u0098\2\uffff\1\u0098";
	static final String DFA161_acceptS =
		"\3\uffff\1\2\1\1\1\uffff";
	static final String DFA161_specialS =
		"\6\uffff}>";
	static final String[] DFA161_transitionS = {
			"\2\4\2\uffff\5\4\3\uffff\1\4\2\uffff\1\2\1\uffff\1\4\17\uffff\1\4\2\uffff"+
			"\1\4\4\uffff\1\4\3\uffff\1\4\1\uffff\1\4\7\uffff\3\4\11\uffff\3\4\5\uffff"+
			"\1\4\1\2\10\uffff\1\4\6\uffff\1\3\3\uffff\3\4\2\uffff\3\4\1\uffff\2\4"+
			"\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\1\1\1\uffff\1\4\5\uffff"+
			"\5\4\6\uffff\1\4\1\uffff\1\4\1\2",
			"\2\4\2\uffff\5\4\3\uffff\1\4\2\uffff\1\5\1\uffff\1\4\17\uffff\1\4\2"+
			"\uffff\1\4\4\uffff\1\4\3\uffff\1\4\1\uffff\1\4\7\uffff\3\4\11\uffff\3"+
			"\4\5\uffff\1\4\1\5\10\uffff\1\4\6\uffff\1\3\3\uffff\3\4\2\uffff\3\4\1"+
			"\uffff\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\2\uffff\1"+
			"\4\5\uffff\5\4\6\uffff\1\4\1\uffff\1\4\1\5",
			"\2\4\2\uffff\5\4\3\uffff\1\4\2\uffff\1\2\1\uffff\1\4\17\uffff\1\4\2"+
			"\uffff\1\4\4\uffff\1\4\3\uffff\1\4\1\uffff\1\4\7\uffff\3\4\11\uffff\3"+
			"\4\5\uffff\1\4\1\2\10\uffff\1\4\6\uffff\1\3\3\uffff\3\4\2\uffff\3\4\1"+
			"\uffff\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\6\4\1\uffff\1"+
			"\4\5\uffff\5\4\6\uffff\1\4\1\uffff\1\4\1\2",
			"",
			"",
			"\2\4\2\uffff\5\4\3\uffff\1\4\2\uffff\1\5\1\uffff\1\4\17\uffff\1\4\2"+
			"\uffff\1\4\4\uffff\1\4\3\uffff\1\4\1\uffff\1\4\7\uffff\3\4\11\uffff\3"+
			"\4\5\uffff\1\4\1\5\10\uffff\1\4\6\uffff\1\3\3\uffff\3\4\2\uffff\3\4\1"+
			"\uffff\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\2\uffff\1"+
			"\4\5\uffff\5\4\6\uffff\1\4\1\uffff\1\4\1\5"
	};

	static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
	static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
	static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
	static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
	static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
	static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
	static final short[][] DFA161_transition;

	static {
		int numStates = DFA161_transitionS.length;
		DFA161_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
		}
	}

	protected class DFA161 extends DFA {

		public DFA161(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 161;
			this.eot = DFA161_eot;
			this.eof = DFA161_eof;
			this.min = DFA161_min;
			this.max = DFA161_max;
			this.accept = DFA161_accept;
			this.special = DFA161_special;
			this.transition = DFA161_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 609:13: ( ( ws )? ({...}? ( SEMI ( ws )? ) | ( SEMI ( ws )? )? ) ( propertyDeclaration | margin ) )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA160_eotS =
		"\5\uffff";
	static final String DFA160_eofS =
		"\5\uffff";
	static final String DFA160_minS =
		"\1\6\1\uffff\2\23\1\uffff";
	static final String DFA160_maxS =
		"\1\u0097\1\uffff\2\u0098\1\uffff";
	static final String DFA160_acceptS =
		"\1\uffff\1\1\2\uffff\1\2";
	static final String DFA160_specialS =
		"\5\uffff}>";
	static final String[] DFA160_transitionS = {
			"\2\1\2\uffff\5\2\3\uffff\1\1\4\uffff\1\1\17\uffff\1\1\2\uffff\1\1\4\uffff"+
			"\1\1\3\uffff\1\1\1\uffff\1\1\7\uffff\3\2\11\uffff\3\1\5\uffff\1\1\11"+
			"\uffff\1\1\12\uffff\3\2\2\uffff\3\1\1\uffff\2\1\2\uffff\1\1\1\uffff\3"+
			"\1\1\uffff\3\1\1\uffff\5\1\2\uffff\1\1\5\uffff\5\2\6\uffff\1\1\1\uffff"+
			"\1\1",
			"",
			"\1\1\1\uffff\1\3\45\uffff\1\4\26\uffff\1\3\105\uffff\1\3",
			"\1\1\1\uffff\1\3\45\uffff\1\4\26\uffff\1\3\105\uffff\1\3",
			""
	};

	static final short[] DFA160_eot = DFA.unpackEncodedString(DFA160_eotS);
	static final short[] DFA160_eof = DFA.unpackEncodedString(DFA160_eofS);
	static final char[] DFA160_min = DFA.unpackEncodedStringToUnsignedChars(DFA160_minS);
	static final char[] DFA160_max = DFA.unpackEncodedStringToUnsignedChars(DFA160_maxS);
	static final short[] DFA160_accept = DFA.unpackEncodedString(DFA160_acceptS);
	static final short[] DFA160_special = DFA.unpackEncodedString(DFA160_specialS);
	static final short[][] DFA160_transition;

	static {
		int numStates = DFA160_transitionS.length;
		DFA160_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA160_transition[i] = DFA.unpackEncodedString(DFA160_transitionS[i]);
		}
	}

	protected class DFA160 extends DFA {

		public DFA160(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 160;
			this.eot = DFA160_eot;
			this.eof = DFA160_eof;
			this.min = DFA160_min;
			this.max = DFA160_max;
			this.accept = DFA160_accept;
			this.special = DFA160_special;
			this.transition = DFA160_transition;
		}
		@Override
		public String getDescription() {
			return "609:62: ( propertyDeclaration | margin )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA180_eotS =
		"\5\uffff";
	static final String DFA180_eofS =
		"\2\2\3\uffff";
	static final String DFA180_minS =
		"\2\6\3\uffff";
	static final String DFA180_maxS =
		"\2\u0098\3\uffff";
	static final String DFA180_acceptS =
		"\2\uffff\1\3\1\1\1\2";
	static final String DFA180_specialS =
		"\5\uffff}>";
	static final String[] DFA180_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2\2\uffff\1\2"+
			"\3\uffff\4\2\1\uffff\3\2\1\3\2\2\2\uffff\5\2\1\4\3\2\1\uffff\6\2\1\uffff"+
			"\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\10\uffff\1\2\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2\2\uffff\1\2"+
			"\3\uffff\4\2\1\uffff\3\2\1\3\2\2\1\uffff\6\2\1\4\3\2\1\uffff\6\2\1\uffff"+
			"\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff\1\2\1\1",
			"",
			"",
			""
	};

	static final short[] DFA180_eot = DFA.unpackEncodedString(DFA180_eotS);
	static final short[] DFA180_eof = DFA.unpackEncodedString(DFA180_eofS);
	static final char[] DFA180_min = DFA.unpackEncodedStringToUnsignedChars(DFA180_minS);
	static final char[] DFA180_max = DFA.unpackEncodedStringToUnsignedChars(DFA180_maxS);
	static final short[] DFA180_accept = DFA.unpackEncodedString(DFA180_acceptS);
	static final short[] DFA180_special = DFA.unpackEncodedString(DFA180_specialS);
	static final short[][] DFA180_transition;

	static {
		int numStates = DFA180_transitionS.length;
		DFA180_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA180_transition[i] = DFA.unpackEncodedString(DFA180_transitionS[i]);
		}
	}

	protected class DFA180 extends DFA {

		public DFA180(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 180;
			this.eot = DFA180_eot;
			this.eof = DFA180_eof;
			this.min = DFA180_min;
			this.max = DFA180_max;
			this.accept = DFA180_accept;
			this.special = DFA180_special;
			this.transition = DFA180_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 689:12: ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA182_eotS =
		"\6\uffff";
	static final String DFA182_eofS =
		"\6\uffff";
	static final String DFA182_minS =
		"\2\6\1\0\1\uffff\1\0\1\uffff";
	static final String DFA182_maxS =
		"\2\u0098\1\0\1\uffff\1\0\1\uffff";
	static final String DFA182_acceptS =
		"\3\uffff\1\2\1\uffff\1\1";
	static final String DFA182_specialS =
		"\2\uffff\1\0\1\uffff\1\1\1\uffff}>";
	static final String[] DFA182_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\17\uffff\1\3"+
			"\2\uffff\1\3\4\uffff\1\3\3\uffff\1\3\1\uffff\1\3\7\uffff\3\3\11\uffff"+
			"\3\3\5\uffff\1\3\1\1\4\uffff\1\3\3\uffff\1\3\12\uffff\4\3\1\uffff\3\3"+
			"\1\uffff\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\3\uffff"+
			"\1\3\4\uffff\5\3\6\uffff\1\3\1\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\4\1\1\1\uffff\1\3\17\uffff\1"+
			"\3\2\uffff\1\3\4\uffff\1\3\3\uffff\1\3\1\uffff\1\3\7\uffff\3\3\11\uffff"+
			"\3\3\5\uffff\1\3\1\1\4\uffff\1\3\3\uffff\1\3\12\uffff\4\3\1\uffff\3\3"+
			"\1\uffff\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\3\uffff"+
			"\1\3\4\uffff\5\3\6\uffff\1\3\1\uffff\1\3\1\1",
			"\1\uffff",
			"",
			"\1\uffff",
			""
	};

	static final short[] DFA182_eot = DFA.unpackEncodedString(DFA182_eotS);
	static final short[] DFA182_eof = DFA.unpackEncodedString(DFA182_eofS);
	static final char[] DFA182_min = DFA.unpackEncodedStringToUnsignedChars(DFA182_minS);
	static final char[] DFA182_max = DFA.unpackEncodedStringToUnsignedChars(DFA182_maxS);
	static final short[] DFA182_accept = DFA.unpackEncodedString(DFA182_acceptS);
	static final short[] DFA182_special = DFA.unpackEncodedString(DFA182_specialS);
	static final short[][] DFA182_transition;

	static {
		int numStates = DFA182_transitionS.length;
		DFA182_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA182_transition[i] = DFA.unpackEncodedString(DFA182_transitionS[i]);
		}
	}

	protected class DFA182 extends DFA {

		public DFA182(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 182;
			this.eot = DFA182_eot;
			this.eof = DFA182_eof;
			this.min = DFA182_min;
			this.max = DFA182_max;
			this.accept = DFA182_accept;
			this.special = DFA182_special;
			this.transition = DFA182_transition;
		}
		@Override
		public String getDescription() {
			return "700:26: ( ( ( ws )? COMMA )=> ( ws )? COMMA )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA182_2 = input.LA(1);
						 
						int index182_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred21_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index182_2);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA182_4 = input.LA(1);
						 
						int index182_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred21_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index182_4);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 182, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA187_eotS =
		"\4\uffff";
	static final String DFA187_eofS =
		"\4\uffff";
	static final String DFA187_minS =
		"\2\23\2\uffff";
	static final String DFA187_maxS =
		"\2\u0098\2\uffff";
	static final String DFA187_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA187_specialS =
		"\4\uffff}>";
	static final String[] DFA187_transitionS = {
			"\1\2\1\uffff\1\1\74\uffff\1\1\62\uffff\1\3\22\uffff\1\1",
			"\1\2\1\uffff\1\1\74\uffff\1\1\62\uffff\1\3\22\uffff\1\1",
			"",
			""
	};

	static final short[] DFA187_eot = DFA.unpackEncodedString(DFA187_eotS);
	static final short[] DFA187_eof = DFA.unpackEncodedString(DFA187_eofS);
	static final char[] DFA187_min = DFA.unpackEncodedStringToUnsignedChars(DFA187_minS);
	static final char[] DFA187_max = DFA.unpackEncodedStringToUnsignedChars(DFA187_maxS);
	static final short[] DFA187_accept = DFA.unpackEncodedString(DFA187_acceptS);
	static final short[] DFA187_special = DFA.unpackEncodedString(DFA187_specialS);
	static final short[][] DFA187_transition;

	static {
		int numStates = DFA187_transitionS.length;
		DFA187_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA187_transition[i] = DFA.unpackEncodedString(DFA187_transitionS[i]);
		}
	}

	protected class DFA187 extends DFA {

		public DFA187(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 187;
			this.eot = DFA187_eot;
			this.eof = DFA187_eof;
			this.min = DFA187_min;
			this.max = DFA187_max;
			this.accept = DFA187_accept;
			this.special = DFA187_special;
			this.transition = DFA187_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 708:25: ( ( ws )? STRING )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA192_eotS =
		"\4\uffff";
	static final String DFA192_eofS =
		"\4\uffff";
	static final String DFA192_minS =
		"\2\6\2\uffff";
	static final String DFA192_maxS =
		"\2\u0098\2\uffff";
	static final String DFA192_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA192_specialS =
		"\4\uffff}>";
	static final String[] DFA192_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\3\1\1\1\uffff\1\3\17\uffff\1\3"+
			"\2\uffff\1\3\4\uffff\1\3\3\uffff\1\3\1\2\1\3\7\uffff\3\3\11\uffff\3\3"+
			"\5\uffff\1\3\1\1\4\uffff\1\3\3\uffff\1\3\12\uffff\4\3\1\uffff\3\3\1\uffff"+
			"\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\3\uffff\1\3\4\uffff"+
			"\5\3\6\uffff\1\3\1\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\3\1\1\1\uffff\1\3\17\uffff\1"+
			"\3\2\uffff\1\3\4\uffff\1\3\3\uffff\1\3\1\2\1\3\7\uffff\3\3\11\uffff\3"+
			"\3\5\uffff\1\3\1\1\4\uffff\1\3\3\uffff\1\3\12\uffff\4\3\1\uffff\3\3\1"+
			"\uffff\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\3\uffff\1"+
			"\3\4\uffff\5\3\6\uffff\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA192_eot = DFA.unpackEncodedString(DFA192_eotS);
	static final short[] DFA192_eof = DFA.unpackEncodedString(DFA192_eofS);
	static final char[] DFA192_min = DFA.unpackEncodedStringToUnsignedChars(DFA192_minS);
	static final char[] DFA192_max = DFA.unpackEncodedStringToUnsignedChars(DFA192_maxS);
	static final short[] DFA192_accept = DFA.unpackEncodedString(DFA192_acceptS);
	static final short[] DFA192_special = DFA.unpackEncodedString(DFA192_specialS);
	static final short[][] DFA192_transition;

	static {
		int numStates = DFA192_transitionS.length;
		DFA192_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA192_transition[i] = DFA.unpackEncodedString(DFA192_transitionS[i]);
		}
	}

	protected class DFA192 extends DFA {

		public DFA192(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 192;
			this.eot = DFA192_eot;
			this.eof = DFA192_eof;
			this.min = DFA192_min;
			this.max = DFA192_max;
			this.accept = DFA192_accept;
			this.special = DFA192_special;
			this.transition = DFA192_transition;
		}
		@Override
		public String getDescription() {
			return "708:110: ( ( ws )? prio )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA198_eotS =
		"\6\uffff";
	static final String DFA198_eofS =
		"\6\uffff";
	static final String DFA198_minS =
		"\1\7\1\25\1\uffff\1\7\2\uffff";
	static final String DFA198_maxS =
		"\1\u0088\1\u0098\1\uffff\1\u0098\2\uffff";
	static final String DFA198_acceptS =
		"\2\uffff\1\3\1\uffff\1\1\1\2";
	static final String DFA198_specialS =
		"\6\uffff}>";
	static final String[] DFA198_transitionS = {
			"\1\2\13\uffff\1\2\11\uffff\3\2\12\uffff\2\2\2\uffff\2\2\3\uffff\1\2\10"+
			"\uffff\1\2\5\uffff\1\2\7\uffff\1\2\23\uffff\2\2\13\uffff\1\1\10\uffff"+
			"\1\2\17\uffff\1\2\3\uffff\1\2",
			"\1\3\45\uffff\1\4\26\uffff\1\3\105\uffff\1\3",
			"",
			"\1\4\13\uffff\1\4\1\uffff\1\3\7\uffff\3\4\12\uffff\2\4\2\uffff\2\4\3"+
			"\uffff\1\4\7\uffff\2\4\5\uffff\1\4\4\uffff\1\5\2\uffff\1\4\7\uffff\1"+
			"\3\13\uffff\2\4\24\uffff\1\4\17\uffff\1\4\3\uffff\1\4\17\uffff\1\3",
			"",
			""
	};

	static final short[] DFA198_eot = DFA.unpackEncodedString(DFA198_eotS);
	static final short[] DFA198_eof = DFA.unpackEncodedString(DFA198_eofS);
	static final char[] DFA198_min = DFA.unpackEncodedStringToUnsignedChars(DFA198_minS);
	static final char[] DFA198_max = DFA.unpackEncodedStringToUnsignedChars(DFA198_maxS);
	static final short[] DFA198_accept = DFA.unpackEncodedString(DFA198_acceptS);
	static final short[] DFA198_special = DFA.unpackEncodedString(DFA198_specialS);
	static final short[][] DFA198_transition;

	static {
		int numStates = DFA198_transitionS.length;
		DFA198_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA198_transition[i] = DFA.unpackEncodedString(DFA198_transitionS[i]);
		}
	}

	protected class DFA198 extends DFA {

		public DFA198(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 198;
			this.eot = DFA198_eot;
			this.eof = DFA198_eof;
			this.min = DFA198_min;
			this.max = DFA198_max;
			this.accept = DFA198_accept;
			this.special = DFA198_special;
			this.transition = DFA198_transition;
		}
		@Override
		public String getDescription() {
			return "713:9: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA193_eotS =
		"\4\uffff";
	static final String DFA193_eofS =
		"\4\uffff";
	static final String DFA193_minS =
		"\1\25\1\7\2\uffff";
	static final String DFA193_maxS =
		"\2\u0098\2\uffff";
	static final String DFA193_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA193_specialS =
		"\4\uffff}>";
	static final String[] DFA193_transitionS = {
			"\1\1\45\uffff\1\2\26\uffff\1\1\105\uffff\1\1",
			"\1\3\13\uffff\1\3\1\uffff\1\1\7\uffff\3\3\12\uffff\2\3\2\uffff\2\3\3"+
			"\uffff\1\3\7\uffff\1\2\1\3\5\uffff\1\3\7\uffff\1\3\7\uffff\1\1\13\uffff"+
			"\2\3\24\uffff\1\3\17\uffff\1\3\3\uffff\1\3\17\uffff\1\1",
			"",
			""
	};

	static final short[] DFA193_eot = DFA.unpackEncodedString(DFA193_eotS);
	static final short[] DFA193_eof = DFA.unpackEncodedString(DFA193_eofS);
	static final char[] DFA193_min = DFA.unpackEncodedStringToUnsignedChars(DFA193_minS);
	static final char[] DFA193_max = DFA.unpackEncodedStringToUnsignedChars(DFA193_maxS);
	static final short[] DFA193_accept = DFA.unpackEncodedString(DFA193_acceptS);
	static final short[] DFA193_special = DFA.unpackEncodedString(DFA193_specialS);
	static final short[][] DFA193_transition;

	static {
		int numStates = DFA193_transitionS.length;
		DFA193_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA193_transition[i] = DFA.unpackEncodedString(DFA193_transitionS[i]);
		}
	}

	protected class DFA193 extends DFA {

		public DFA193(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 193;
			this.eot = DFA193_eot;
			this.eof = DFA193_eof;
			this.min = DFA193_min;
			this.max = DFA193_max;
			this.accept = DFA193_accept;
			this.special = DFA193_special;
			this.transition = DFA193_transition;
		}
		@Override
		public String getDescription() {
			return "714:27: ( ws selectorsGroup )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA215_eotS =
		"\5\uffff";
	static final String DFA215_eofS =
		"\5\uffff";
	static final String DFA215_minS =
		"\2\6\1\uffff\1\6\1\uffff";
	static final String DFA215_maxS =
		"\1\u0097\1\u0098\1\uffff\1\u0098\1\uffff";
	static final String DFA215_acceptS =
		"\2\uffff\1\1\1\uffff\1\2";
	static final String DFA215_specialS =
		"\5\uffff}>";
	static final String[] DFA215_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\3\uffff\1\2\5\uffff\3\2\7\uffff\1\2\2\uffff"+
			"\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff\1\2\6\uffff"+
			"\3\2\5\uffff\1\2\11\uffff\1\2\2\uffff\2\2\6\uffff\3\2\2\uffff\3\2\1\uffff"+
			"\2\2\1\uffff\6\2\1\uffff\3\2\1\uffff\5\2\1\1\1\uffff\1\2\1\uffff\1\2"+
			"\1\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff\1\2",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\3\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\3\10\uffff\1\2\2\uffff\2\2\2\uffff\1\4"+
			"\3\uffff\3\2\2\uffff\3\2\1\uffff\2\2\1\uffff\6\2\1\uffff\3\2\1\uffff"+
			"\5\2\1\1\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff\1\2"+
			"\1\uffff\1\2\1\3",
			"",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\3\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\3\10\uffff\1\2\2\uffff\2\2\2\uffff\1\4"+
			"\3\uffff\3\2\2\uffff\3\2\1\uffff\2\2\1\uffff\6\2\1\uffff\3\2\1\uffff"+
			"\5\2\1\1\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff\1\2"+
			"\1\uffff\1\2\1\3",
			""
	};

	static final short[] DFA215_eot = DFA.unpackEncodedString(DFA215_eotS);
	static final short[] DFA215_eof = DFA.unpackEncodedString(DFA215_eofS);
	static final char[] DFA215_min = DFA.unpackEncodedStringToUnsignedChars(DFA215_minS);
	static final char[] DFA215_max = DFA.unpackEncodedStringToUnsignedChars(DFA215_maxS);
	static final short[] DFA215_accept = DFA.unpackEncodedString(DFA215_acceptS);
	static final short[] DFA215_special = DFA.unpackEncodedString(DFA215_specialS);
	static final short[][] DFA215_transition;

	static {
		int numStates = DFA215_transitionS.length;
		DFA215_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA215_transition[i] = DFA.unpackEncodedString(DFA215_transitionS[i]);
		}
	}

	protected class DFA215 extends DFA {

		public DFA215(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 215;
			this.eot = DFA215_eot;
			this.eof = DFA215_eof;
			this.min = DFA215_min;
			this.max = DFA215_max;
			this.accept = DFA215_accept;
			this.special = DFA215_special;
			this.transition = DFA215_transition;
		}
		@Override
		public String getDescription() {
			return "728:1: declarations : ( ( SEMI ( ws )? )* declaration ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )* ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )? | ( SEMI ( ws )? )+ );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA208_eotS =
		"\6\uffff";
	static final String DFA208_eofS =
		"\6\uffff";
	static final String DFA208_minS =
		"\1\25\2\6\2\uffff\1\6";
	static final String DFA208_maxS =
		"\3\u0098\2\uffff\1\u0098";
	static final String DFA208_acceptS =
		"\3\uffff\1\2\1\1\1\uffff";
	static final String DFA208_specialS =
		"\6\uffff}>";
	static final String[] DFA208_transitionS = {
			"\1\1\74\uffff\1\1\17\uffff\1\3\37\uffff\1\2\25\uffff\1\1",
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\1\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\3\uffff\1\4\1\uffff\1\4\6\uffff\4\4\2\uffff"+
			"\1\4\6\uffff\3\4\5\uffff\1\4\1\1\10\uffff\1\4\2\uffff\2\4\2\uffff\1\3"+
			"\3\uffff\3\4\2\uffff\3\4\1\uffff\2\4\1\uffff\6\4\1\uffff\3\4\1\uffff"+
			"\5\4\1\2\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4\6\uffff\1\4"+
			"\1\uffff\1\4\1\1",
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\5\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\3\uffff\1\4\1\uffff\1\4\6\uffff\4\4\2\uffff"+
			"\1\4\6\uffff\3\4\5\uffff\1\4\1\5\10\uffff\1\4\2\uffff\2\4\2\uffff\1\3"+
			"\3\uffff\3\4\2\uffff\3\4\1\uffff\2\4\1\uffff\6\4\1\uffff\3\4\1\uffff"+
			"\5\4\1\2\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4\6\uffff\1\4"+
			"\1\uffff\1\4\1\5",
			"",
			"",
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\5\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\3\uffff\1\4\1\uffff\1\4\6\uffff\4\4\2\uffff"+
			"\1\4\6\uffff\3\4\5\uffff\1\4\1\5\10\uffff\1\4\2\uffff\2\4\2\uffff\1\3"+
			"\3\uffff\3\4\2\uffff\3\4\1\uffff\2\4\1\uffff\6\4\1\uffff\3\4\1\uffff"+
			"\5\4\1\2\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4\6\uffff\1\4"+
			"\1\uffff\1\4\1\5"
	};

	static final short[] DFA208_eot = DFA.unpackEncodedString(DFA208_eotS);
	static final short[] DFA208_eof = DFA.unpackEncodedString(DFA208_eofS);
	static final char[] DFA208_min = DFA.unpackEncodedStringToUnsignedChars(DFA208_minS);
	static final char[] DFA208_max = DFA.unpackEncodedStringToUnsignedChars(DFA208_maxS);
	static final short[] DFA208_accept = DFA.unpackEncodedString(DFA208_acceptS);
	static final short[] DFA208_special = DFA.unpackEncodedString(DFA208_specialS);
	static final short[][] DFA208_transition;

	static {
		int numStates = DFA208_transitionS.length;
		DFA208_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA208_transition[i] = DFA.unpackEncodedString(DFA208_transitionS[i]);
		}
	}

	protected class DFA208 extends DFA {

		public DFA208(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 208;
			this.eot = DFA208_eot;
			this.eof = DFA208_eof;
			this.min = DFA208_min;
			this.max = DFA208_max;
			this.accept = DFA208_accept;
			this.special = DFA208_special;
			this.transition = DFA208_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 730:33: ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA207_eotS =
		"\4\uffff";
	static final String DFA207_eofS =
		"\4\uffff";
	static final String DFA207_minS =
		"\1\25\1\6\2\uffff";
	static final String DFA207_maxS =
		"\2\u0098\2\uffff";
	static final String DFA207_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA207_specialS =
		"\4\uffff}>";
	static final String[] DFA207_transitionS = {
			"\1\1\74\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\uffff\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\6\uffff\3\3"+
			"\2\uffff\3\3\1\uffff\2\3\1\uffff\6\3\1\uffff\3\3\1\uffff\5\3\1\2\1\uffff"+
			"\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA207_eot = DFA.unpackEncodedString(DFA207_eotS);
	static final short[] DFA207_eof = DFA.unpackEncodedString(DFA207_eofS);
	static final char[] DFA207_min = DFA.unpackEncodedStringToUnsignedChars(DFA207_minS);
	static final char[] DFA207_max = DFA.unpackEncodedStringToUnsignedChars(DFA207_maxS);
	static final short[] DFA207_accept = DFA.unpackEncodedString(DFA207_acceptS);
	static final short[] DFA207_special = DFA.unpackEncodedString(DFA207_specialS);
	static final short[][] DFA207_transition;

	static {
		int numStates = DFA207_transitionS.length;
		DFA207_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA207_transition[i] = DFA.unpackEncodedString(DFA207_transitionS[i]);
		}
	}

	protected class DFA207 extends DFA {

		public DFA207(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 207;
			this.eot = DFA207_eot;
			this.eof = DFA207_eof;
			this.min = DFA207_min;
			this.max = DFA207_max;
			this.accept = DFA207_accept;
			this.special = DFA207_special;
			this.transition = DFA207_transition;
		}
		@Override
		public String getDescription() {
			return "730:34: ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA212_eotS =
		"\5\uffff";
	static final String DFA212_eofS =
		"\5\uffff";
	static final String DFA212_minS =
		"\2\25\3\uffff";
	static final String DFA212_maxS =
		"\2\u0098\3\uffff";
	static final String DFA212_acceptS =
		"\2\uffff\1\1\1\3\1\2";
	static final String DFA212_specialS =
		"\5\uffff}>";
	static final String[] DFA212_transitionS = {
			"\1\1\74\uffff\1\1\17\uffff\1\3\37\uffff\1\2\25\uffff\1\1",
			"\1\1\74\uffff\1\1\17\uffff\1\4\37\uffff\1\2\25\uffff\1\1",
			"",
			"",
			""
	};

	static final short[] DFA212_eot = DFA.unpackEncodedString(DFA212_eotS);
	static final short[] DFA212_eof = DFA.unpackEncodedString(DFA212_eofS);
	static final char[] DFA212_min = DFA.unpackEncodedStringToUnsignedChars(DFA212_minS);
	static final char[] DFA212_max = DFA.unpackEncodedStringToUnsignedChars(DFA212_maxS);
	static final short[] DFA212_accept = DFA.unpackEncodedString(DFA212_acceptS);
	static final short[] DFA212_special = DFA.unpackEncodedString(DFA212_specialS);
	static final short[][] DFA212_transition;

	static {
		int numStates = DFA212_transitionS.length;
		DFA212_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA212_transition[i] = DFA.unpackEncodedString(DFA212_transitionS[i]);
		}
	}

	protected class DFA212 extends DFA {

		public DFA212(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 212;
			this.eot = DFA212_eot;
			this.eof = DFA212_eof;
			this.min = DFA212_min;
			this.max = DFA212_max;
			this.accept = DFA212_accept;
			this.special = DFA212_special;
			this.transition = DFA212_transition;
		}
		@Override
		public String getDescription() {
			return "730:71: ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA217_eotS =
		"\4\uffff";
	static final String DFA217_eofS =
		"\4\uffff";
	static final String DFA217_minS =
		"\1\25\1\6\2\uffff";
	static final String DFA217_maxS =
		"\2\u0098\2\uffff";
	static final String DFA217_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA217_specialS =
		"\4\uffff}>";
	static final String[] DFA217_transitionS = {
			"\1\1\36\uffff\1\2\35\uffff\1\1\17\uffff\1\3\6\uffff\1\3\30\uffff\1\3"+
			"\25\uffff\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\6\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"",
			""
	};

	static final short[] DFA217_eot = DFA.unpackEncodedString(DFA217_eotS);
	static final short[] DFA217_eof = DFA.unpackEncodedString(DFA217_eofS);
	static final char[] DFA217_min = DFA.unpackEncodedStringToUnsignedChars(DFA217_minS);
	static final char[] DFA217_max = DFA.unpackEncodedStringToUnsignedChars(DFA217_maxS);
	static final short[] DFA217_accept = DFA.unpackEncodedString(DFA217_acceptS);
	static final short[] DFA217_special = DFA.unpackEncodedString(DFA217_specialS);
	static final short[][] DFA217_transition;

	static {
		int numStates = DFA217_transitionS.length;
		DFA217_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA217_transition[i] = DFA.unpackEncodedString(DFA217_transitionS[i]);
		}
	}

	protected class DFA217 extends DFA {

		public DFA217(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 217;
			this.eot = DFA217_eot;
			this.eof = DFA217_eof;
			this.min = DFA217_min;
			this.max = DFA217_max;
			this.accept = DFA217_accept;
			this.special = DFA217_special;
			this.transition = DFA217_transition;
		}
		@Override
		public String getDescription() {
			return "744:39: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA219_eotS =
		"\4\uffff";
	static final String DFA219_eofS =
		"\4\uffff";
	static final String DFA219_minS =
		"\1\25\1\6\2\uffff";
	static final String DFA219_maxS =
		"\2\u0098\2\uffff";
	static final String DFA219_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA219_specialS =
		"\4\uffff}>";
	static final String[] DFA219_transitionS = {
			"\1\1\36\uffff\1\2\35\uffff\1\1\17\uffff\1\3\6\uffff\1\3\30\uffff\1\3"+
			"\25\uffff\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\6\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"",
			""
	};

	static final short[] DFA219_eot = DFA.unpackEncodedString(DFA219_eotS);
	static final short[] DFA219_eof = DFA.unpackEncodedString(DFA219_eofS);
	static final char[] DFA219_min = DFA.unpackEncodedStringToUnsignedChars(DFA219_minS);
	static final char[] DFA219_max = DFA.unpackEncodedStringToUnsignedChars(DFA219_maxS);
	static final short[] DFA219_accept = DFA.unpackEncodedString(DFA219_acceptS);
	static final short[] DFA219_special = DFA.unpackEncodedString(DFA219_specialS);
	static final short[][] DFA219_transition;

	static {
		int numStates = DFA219_transitionS.length;
		DFA219_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA219_transition[i] = DFA.unpackEncodedString(DFA219_transitionS[i]);
		}
	}

	protected class DFA219 extends DFA {

		public DFA219(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 219;
			this.eot = DFA219_eot;
			this.eof = DFA219_eof;
			this.min = DFA219_min;
			this.max = DFA219_max;
			this.accept = DFA219_accept;
			this.special = DFA219_special;
			this.transition = DFA219_transition;
		}
		@Override
		public String getDescription() {
			return "745:57: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA223_eotS =
		"\6\uffff";
	static final String DFA223_eofS =
		"\6\uffff";
	static final String DFA223_minS =
		"\1\24\1\7\1\24\1\uffff\1\7\1\uffff";
	static final String DFA223_maxS =
		"\3\u0098\1\uffff\1\u0098\1\uffff";
	static final String DFA223_acceptS =
		"\3\uffff\1\2\1\uffff\1\1";
	static final String DFA223_specialS =
		"\6\uffff}>";
	static final String[] DFA223_transitionS = {
			"\1\1\1\2\45\uffff\1\3\26\uffff\1\2\26\uffff\1\3\56\uffff\1\2",
			"\1\5\13\uffff\1\5\1\uffff\1\4\7\uffff\3\5\12\uffff\2\5\2\uffff\2\5\3"+
			"\uffff\1\5\7\uffff\1\3\1\5\5\uffff\1\5\7\uffff\1\5\7\uffff\1\4\13\uffff"+
			"\2\5\11\uffff\1\3\12\uffff\1\5\17\uffff\1\5\3\uffff\1\5\17\uffff\1\4",
			"\1\5\1\2\45\uffff\1\3\26\uffff\1\2\26\uffff\1\3\56\uffff\1\2",
			"",
			"\1\5\13\uffff\1\5\1\uffff\1\4\7\uffff\3\5\12\uffff\2\5\2\uffff\2\5\3"+
			"\uffff\1\5\7\uffff\1\3\1\5\5\uffff\1\5\7\uffff\1\5\7\uffff\1\4\13\uffff"+
			"\2\5\11\uffff\1\3\12\uffff\1\5\17\uffff\1\5\3\uffff\1\5\17\uffff\1\4",
			""
	};

	static final short[] DFA223_eot = DFA.unpackEncodedString(DFA223_eotS);
	static final short[] DFA223_eof = DFA.unpackEncodedString(DFA223_eofS);
	static final char[] DFA223_min = DFA.unpackEncodedStringToUnsignedChars(DFA223_minS);
	static final char[] DFA223_max = DFA.unpackEncodedStringToUnsignedChars(DFA223_maxS);
	static final short[] DFA223_accept = DFA.unpackEncodedString(DFA223_acceptS);
	static final short[] DFA223_special = DFA.unpackEncodedString(DFA223_specialS);
	static final short[][] DFA223_transition;

	static {
		int numStates = DFA223_transitionS.length;
		DFA223_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA223_transition[i] = DFA.unpackEncodedString(DFA223_transitionS[i]);
		}
	}

	protected class DFA223 extends DFA {

		public DFA223(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 223;
			this.eot = DFA223_eot;
			this.eof = DFA223_eof;
			this.min = DFA223_min;
			this.max = DFA223_max;
			this.accept = DFA223_accept;
			this.special = DFA223_special;
			this.transition = DFA223_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 763:18: ( ( ws )? COMMA ( ws )? selector )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA231_eotS =
		"\5\uffff";
	static final String DFA231_eofS =
		"\5\uffff";
	static final String DFA231_minS =
		"\2\7\1\uffff\1\7\1\uffff";
	static final String DFA231_maxS =
		"\1\u0088\1\u0098\1\uffff\1\u0098\1\uffff";
	static final String DFA231_acceptS =
		"\2\uffff\1\1\1\uffff\1\2";
	static final String DFA231_specialS =
		"\5\uffff}>";
	static final String[] DFA231_transitionS = {
			"\1\2\13\uffff\1\2\11\uffff\3\2\12\uffff\1\2\1\1\2\uffff\2\2\3\uffff\1"+
			"\2\10\uffff\1\2\5\uffff\1\2\7\uffff\1\2\23\uffff\1\2\1\1\24\uffff\1\2"+
			"\17\uffff\1\2\3\uffff\1\1",
			"\1\2\13\uffff\1\2\1\4\1\3\7\uffff\3\2\12\uffff\1\2\3\uffff\2\2\3\uffff"+
			"\1\2\7\uffff\1\4\1\2\5\uffff\1\2\7\uffff\1\2\7\uffff\1\3\13\uffff\1\2"+
			"\12\uffff\1\4\12\uffff\1\2\17\uffff\1\2\23\uffff\1\3",
			"",
			"\1\2\13\uffff\1\2\1\4\1\3\7\uffff\3\2\12\uffff\1\2\3\uffff\2\2\3\uffff"+
			"\1\2\7\uffff\1\4\1\2\5\uffff\1\2\7\uffff\1\2\7\uffff\1\3\13\uffff\1\2"+
			"\12\uffff\1\4\12\uffff\1\2\17\uffff\1\2\23\uffff\1\3",
			""
	};

	static final short[] DFA231_eot = DFA.unpackEncodedString(DFA231_eotS);
	static final short[] DFA231_eof = DFA.unpackEncodedString(DFA231_eofS);
	static final char[] DFA231_min = DFA.unpackEncodedStringToUnsignedChars(DFA231_minS);
	static final char[] DFA231_max = DFA.unpackEncodedStringToUnsignedChars(DFA231_maxS);
	static final short[] DFA231_accept = DFA.unpackEncodedString(DFA231_acceptS);
	static final short[] DFA231_special = DFA.unpackEncodedString(DFA231_specialS);
	static final short[][] DFA231_transition;

	static {
		int numStates = DFA231_transitionS.length;
		DFA231_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA231_transition[i] = DFA.unpackEncodedString(DFA231_transitionS[i]);
		}
	}

	protected class DFA231 extends DFA {

		public DFA231(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 231;
			this.eot = DFA231_eot;
			this.eof = DFA231_eof;
			this.min = DFA231_min;
			this.max = DFA231_max;
			this.accept = DFA231_accept;
			this.special = DFA231_special;
			this.transition = DFA231_transition;
		}
		@Override
		public String getDescription() {
			return "766:1: selector : ( ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )* |{...}? combinator );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA230_eotS =
		"\4\uffff";
	static final String DFA230_eofS =
		"\4\uffff";
	static final String DFA230_minS =
		"\1\24\1\7\2\uffff";
	static final String DFA230_maxS =
		"\2\u0098\2\uffff";
	static final String DFA230_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA230_specialS =
		"\4\uffff}>";
	static final String[] DFA230_transitionS = {
			"\1\2\1\1\25\uffff\1\3\17\uffff\1\2\26\uffff\1\1\14\uffff\1\3\11\uffff"+
			"\1\2\36\uffff\1\3\17\uffff\1\1",
			"\1\3\13\uffff\1\3\1\2\1\1\7\uffff\3\3\12\uffff\2\3\2\uffff\2\3\3\uffff"+
			"\1\3\7\uffff\1\2\1\3\5\uffff\1\3\7\uffff\1\3\7\uffff\1\1\13\uffff\2\3"+
			"\11\uffff\1\2\12\uffff\1\3\17\uffff\1\3\3\uffff\1\3\17\uffff\1\1",
			"",
			""
	};

	static final short[] DFA230_eot = DFA.unpackEncodedString(DFA230_eotS);
	static final short[] DFA230_eof = DFA.unpackEncodedString(DFA230_eofS);
	static final char[] DFA230_min = DFA.unpackEncodedStringToUnsignedChars(DFA230_minS);
	static final char[] DFA230_max = DFA.unpackEncodedStringToUnsignedChars(DFA230_maxS);
	static final short[] DFA230_accept = DFA.unpackEncodedString(DFA230_acceptS);
	static final short[] DFA230_special = DFA.unpackEncodedString(DFA230_specialS);
	static final short[][] DFA230_transition;

	static {
		int numStates = DFA230_transitionS.length;
		DFA230_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA230_transition[i] = DFA.unpackEncodedString(DFA230_transitionS[i]);
		}
	}

	protected class DFA230 extends DFA {

		public DFA230(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 230;
			this.eot = DFA230_eot;
			this.eof = DFA230_eof;
			this.min = DFA230_min;
			this.max = DFA230_max;
			this.accept = DFA230_accept;
			this.special = DFA230_special;
			this.transition = DFA230_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 767:49: ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA229_eotS =
		"\4\uffff";
	static final String DFA229_eofS =
		"\4\uffff";
	static final String DFA229_minS =
		"\1\25\1\7\2\uffff";
	static final String DFA229_maxS =
		"\2\u0098\2\uffff";
	static final String DFA229_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA229_specialS =
		"\4\uffff}>";
	static final String[] DFA229_transitionS = {
			"\1\1\25\uffff\1\2\46\uffff\1\1\14\uffff\1\2\50\uffff\1\2\17\uffff\1\1",
			"\1\3\13\uffff\1\3\1\uffff\1\1\7\uffff\3\3\12\uffff\1\3\1\2\2\uffff\2"+
			"\3\3\uffff\1\3\10\uffff\1\3\5\uffff\1\3\7\uffff\1\3\7\uffff\1\1\13\uffff"+
			"\1\3\1\2\24\uffff\1\3\17\uffff\1\3\3\uffff\1\2\17\uffff\1\1",
			"",
			""
	};

	static final short[] DFA229_eot = DFA.unpackEncodedString(DFA229_eotS);
	static final short[] DFA229_eof = DFA.unpackEncodedString(DFA229_eofS);
	static final char[] DFA229_min = DFA.unpackEncodedStringToUnsignedChars(DFA229_minS);
	static final char[] DFA229_max = DFA.unpackEncodedStringToUnsignedChars(DFA229_maxS);
	static final short[] DFA229_accept = DFA.unpackEncodedString(DFA229_acceptS);
	static final short[] DFA229_special = DFA.unpackEncodedString(DFA229_specialS);
	static final short[][] DFA229_transition;

	static {
		int numStates = DFA229_transitionS.length;
		DFA229_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA229_transition[i] = DFA.unpackEncodedString(DFA229_transitionS[i]);
		}
	}

	protected class DFA229 extends DFA {

		public DFA229(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 229;
			this.eot = DFA229_eot;
			this.eof = DFA229_eof;
			this.min = DFA229_min;
			this.max = DFA229_max;
			this.accept = DFA229_accept;
			this.special = DFA229_special;
			this.transition = DFA229_transition;
		}
		@Override
		public String getDescription() {
			return "767:51: ( ( ( ws )? combinator ( ws )? ) | ws )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA235_eotS =
		"\5\uffff";
	static final String DFA235_eofS =
		"\5\uffff";
	static final String DFA235_minS =
		"\1\23\1\7\1\uffff\1\7\1\uffff";
	static final String DFA235_maxS =
		"\2\u0098\1\uffff\1\120\1\uffff";
	static final String DFA235_acceptS =
		"\2\uffff\1\1\1\uffff\1\2";
	static final String DFA235_specialS =
		"\5\uffff}>";
	static final String[] DFA235_transitionS = {
			"\1\2\1\uffff\1\1\7\uffff\3\2\16\uffff\2\2\14\uffff\1\2\5\uffff\1\2\17"+
			"\uffff\1\1\41\uffff\1\2\43\uffff\1\1",
			"\1\4\13\uffff\1\2\1\uffff\1\1\7\uffff\3\2\16\uffff\1\2\1\3\3\uffff\1"+
			"\4\10\uffff\1\2\5\uffff\1\2\7\uffff\1\4\7\uffff\1\1\41\uffff\1\2\43\uffff"+
			"\1\1",
			"",
			"\1\2\53\uffff\1\2\7\uffff\1\4\16\uffff\1\2\5\uffff\1\2",
			""
	};

	static final short[] DFA235_eot = DFA.unpackEncodedString(DFA235_eotS);
	static final short[] DFA235_eof = DFA.unpackEncodedString(DFA235_eofS);
	static final char[] DFA235_min = DFA.unpackEncodedStringToUnsignedChars(DFA235_minS);
	static final char[] DFA235_max = DFA.unpackEncodedStringToUnsignedChars(DFA235_maxS);
	static final short[] DFA235_accept = DFA.unpackEncodedString(DFA235_acceptS);
	static final short[] DFA235_special = DFA.unpackEncodedString(DFA235_specialS);
	static final short[][] DFA235_transition;

	static {
		int numStates = DFA235_transitionS.length;
		DFA235_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA235_transition[i] = DFA.unpackEncodedString(DFA235_transitionS[i]);
		}
	}

	protected class DFA235 extends DFA {

		public DFA235(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 235;
			this.eot = DFA235_eot;
			this.eof = DFA235_eof;
			this.min = DFA235_min;
			this.max = DFA235_max;
			this.accept = DFA235_accept;
			this.special = DFA235_special;
			this.transition = DFA235_transition;
		}
		@Override
		public String getDescription() {
			return "779:79: ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA238_eotS =
		"\5\uffff";
	static final String DFA238_eofS =
		"\5\uffff";
	static final String DFA238_minS =
		"\2\23\1\uffff\1\7\1\uffff";
	static final String DFA238_maxS =
		"\2\u0098\1\uffff\1\120\1\uffff";
	static final String DFA238_acceptS =
		"\2\uffff\1\1\1\uffff\1\2";
	static final String DFA238_specialS =
		"\5\uffff}>";
	static final String[] DFA238_transitionS = {
			"\1\2\1\uffff\1\1\7\uffff\3\2\16\uffff\2\2\14\uffff\1\2\5\uffff\1\2\17"+
			"\uffff\1\1\41\uffff\1\2\43\uffff\1\1",
			"\1\2\1\uffff\1\1\7\uffff\3\2\16\uffff\1\2\1\3\3\uffff\1\4\10\uffff\1"+
			"\2\5\uffff\1\2\7\uffff\1\4\7\uffff\1\1\41\uffff\1\2\43\uffff\1\1",
			"",
			"\1\2\53\uffff\1\2\7\uffff\1\4\16\uffff\1\2\5\uffff\1\2",
			""
	};

	static final short[] DFA238_eot = DFA.unpackEncodedString(DFA238_eotS);
	static final short[] DFA238_eof = DFA.unpackEncodedString(DFA238_eofS);
	static final char[] DFA238_min = DFA.unpackEncodedStringToUnsignedChars(DFA238_minS);
	static final char[] DFA238_max = DFA.unpackEncodedStringToUnsignedChars(DFA238_maxS);
	static final short[] DFA238_accept = DFA.unpackEncodedString(DFA238_acceptS);
	static final short[] DFA238_special = DFA.unpackEncodedString(DFA238_specialS);
	static final short[][] DFA238_transition;

	static {
		int numStates = DFA238_transitionS.length;
		DFA238_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA238_transition[i] = DFA.unpackEncodedString(DFA238_transitionS[i]);
		}
	}

	protected class DFA238 extends DFA {

		public DFA238(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 238;
			this.eot = DFA238_eot;
			this.eof = DFA238_eof;
			this.min = DFA238_min;
			this.max = DFA238_max;
			this.accept = DFA238_accept;
			this.special = DFA238_special;
			this.transition = DFA238_transition;
		}
		@Override
		public String getDescription() {
			return "780:48: ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA261_eotS =
		"\4\uffff";
	static final String DFA261_eofS =
		"\2\3\2\uffff";
	static final String DFA261_minS =
		"\2\6\2\uffff";
	static final String DFA261_maxS =
		"\2\u0098\2\uffff";
	static final String DFA261_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA261_specialS =
		"\4\uffff}>";
	static final String[] DFA261_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff\1\3"+
			"\2\uffff\2\3\2\uffff\2\3\3\uffff\3\3\5\uffff\5\3\2\uffff\1\3\4\uffff"+
			"\1\2\1\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff\1\3"+
			"\2\uffff\2\3\2\uffff\2\3\3\uffff\3\3\5\uffff\5\3\2\uffff\1\3\4\uffff"+
			"\1\2\1\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\6\3\1\uffff\12\3\1\uffff"+
			"\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA261_eot = DFA.unpackEncodedString(DFA261_eotS);
	static final short[] DFA261_eof = DFA.unpackEncodedString(DFA261_eofS);
	static final char[] DFA261_min = DFA.unpackEncodedStringToUnsignedChars(DFA261_minS);
	static final char[] DFA261_max = DFA.unpackEncodedStringToUnsignedChars(DFA261_maxS);
	static final short[] DFA261_accept = DFA.unpackEncodedString(DFA261_acceptS);
	static final short[] DFA261_special = DFA.unpackEncodedString(DFA261_specialS);
	static final short[][] DFA261_transition;

	static {
		int numStates = DFA261_transitionS.length;
		DFA261_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA261_transition[i] = DFA.unpackEncodedString(DFA261_transitionS[i]);
		}
	}

	protected class DFA261 extends DFA {

		public DFA261(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 261;
			this.eot = DFA261_eot;
			this.eof = DFA261_eof;
			this.min = DFA261_min;
			this.max = DFA261_max;
			this.accept = DFA261_accept;
			this.special = DFA261_special;
			this.transition = DFA261_transition;
		}
		@Override
		public String getDescription() {
			return "895:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA284_eotS =
		"\4\uffff";
	static final String DFA284_eofS =
		"\1\3\3\uffff";
	static final String DFA284_minS =
		"\2\6\2\uffff";
	static final String DFA284_maxS =
		"\2\u0098\2\uffff";
	static final String DFA284_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA284_specialS =
		"\4\uffff}>";
	static final String[] DFA284_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\6\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"",
			""
	};

	static final short[] DFA284_eot = DFA.unpackEncodedString(DFA284_eotS);
	static final short[] DFA284_eof = DFA.unpackEncodedString(DFA284_eofS);
	static final char[] DFA284_min = DFA.unpackEncodedStringToUnsignedChars(DFA284_minS);
	static final char[] DFA284_max = DFA.unpackEncodedStringToUnsignedChars(DFA284_maxS);
	static final short[] DFA284_accept = DFA.unpackEncodedString(DFA284_acceptS);
	static final short[] DFA284_special = DFA.unpackEncodedString(DFA284_specialS);
	static final short[][] DFA284_transition;

	static {
		int numStates = DFA284_transitionS.length;
		DFA284_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA284_transition[i] = DFA.unpackEncodedString(DFA284_transitionS[i]);
		}
	}

	protected class DFA284 extends DFA {

		public DFA284(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 284;
			this.eot = DFA284_eot;
			this.eof = DFA284_eof;
			this.min = DFA284_min;
			this.max = DFA284_max;
			this.accept = DFA284_accept;
			this.special = DFA284_special;
			this.transition = DFA284_transition;
		}
		@Override
		public String getDescription() {
			return "910:50: ( ( ws )? prio )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA297_eotS =
		"\100\uffff";
	static final String DFA297_eofS =
		"\1\2\77\uffff";
	static final String DFA297_minS =
		"\1\5\1\0\4\uffff\1\0\1\uffff\6\0\1\uffff\3\0\1\uffff\3\0\2\uffff\20\0"+
		"\1\uffff\2\0\2\uffff\1\0\1\uffff\1\0\20\uffff";
	static final String DFA297_maxS =
		"\1\u0098\1\0\4\uffff\1\0\1\uffff\6\0\1\uffff\3\0\1\uffff\3\0\2\uffff\20"+
		"\0\1\uffff\2\0\2\uffff\1\0\1\uffff\1\0\20\uffff";
	static final String DFA297_acceptS =
		"\2\uffff\1\2\53\uffff\1\1\1\uffff\14\1\1\uffff\3\1";
	static final String DFA297_specialS =
		"\1\0\1\1\4\uffff\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\uffff\1\11\1\12"+
		"\1\13\1\uffff\1\14\1\15\1\16\2\uffff\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
		"\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\uffff\1\37\1\40\2\uffff"+
		"\1\41\1\uffff\1\42\20\uffff}>";
	static final String[] DFA297_transitionS = {
			"\1\67\1\12\1\24\2\uffff\5\51\3\uffff\1\52\1\2\1\55\1\1\1\uffff\1\52\5"+
			"\uffff\1\2\1\20\1\2\1\uffff\1\64\3\uffff\1\66\1\uffff\1\43\1\71\1\uffff"+
			"\1\30\1\2\2\uffff\1\10\1\17\3\uffff\1\23\1\2\1\41\5\uffff\1\2\1\21\3"+
			"\51\1\63\1\uffff\1\6\1\75\5\uffff\1\46\1\25\1\44\5\uffff\1\52\1\1\4\uffff"+
			"\1\60\3\uffff\1\42\1\62\1\77\1\2\1\15\2\uffff\1\2\1\uffff\1\65\1\72\3"+
			"\51\1\2\1\uffff\1\14\1\40\1\32\1\uffff\1\36\1\52\2\uffff\1\47\1\2\1\35"+
			"\2\52\1\uffff\1\34\1\13\1\11\1\uffff\2\52\1\33\1\32\1\37\1\2\1\56\1\2"+
			"\1\73\1\2\1\uffff\1\57\1\70\5\51\2\uffff\1\61\1\76\2\uffff\1\31\1\uffff"+
			"\1\45\1\1",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA297_eot = DFA.unpackEncodedString(DFA297_eotS);
	static final short[] DFA297_eof = DFA.unpackEncodedString(DFA297_eofS);
	static final char[] DFA297_min = DFA.unpackEncodedStringToUnsignedChars(DFA297_minS);
	static final char[] DFA297_max = DFA.unpackEncodedStringToUnsignedChars(DFA297_maxS);
	static final short[] DFA297_accept = DFA.unpackEncodedString(DFA297_acceptS);
	static final short[] DFA297_special = DFA.unpackEncodedString(DFA297_specialS);
	static final short[][] DFA297_transition;

	static {
		int numStates = DFA297_transitionS.length;
		DFA297_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA297_transition[i] = DFA.unpackEncodedString(DFA297_transitionS[i]);
		}
	}

	protected class DFA297 extends DFA {

		public DFA297(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 297;
			this.eot = DFA297_eot;
			this.eof = DFA297_eof;
			this.min = DFA297_min;
			this.max = DFA297_max;
			this.accept = DFA297_accept;
			this.special = DFA297_special;
			this.transition = DFA297_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 991:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA297_0 = input.LA(1);
						 
						int index297_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA297_0==COMMENT||LA297_0==NL||LA297_0==WS) ) {s = 1;}
						else if ( (LA297_0==EOF||LA297_0==COLON||LA297_0==DCOLON||LA297_0==DOT||LA297_0==GREATER||LA297_0==IMPORTANT_SYM||LA297_0==LBRACE||LA297_0==PIPE||LA297_0==RBRACE||LA297_0==RPAREN||LA297_0==SASS_EXTEND_ONLY_SELECTOR||LA297_0==SEMI||LA297_0==STAR||LA297_0==SUPPORTS_SYM) ) {s = 2;}
						else if ( (LA297_0==LESS_AND) ) {s = 6;}
						else if ( (LA297_0==HASH) ) {s = 8;}
						else if ( (LA297_0==SASS_MIXIN) ) {s = 9;}
						else if ( (LA297_0==AT_IDENT) ) {s = 10;}
						else if ( (LA297_0==SASS_INCLUDE) ) {s = 11;}
						else if ( (LA297_0==SASS_AT_ROOT) ) {s = 12;}
						else if ( (LA297_0==PLUS) ) {s = 13;}
						else if ( (LA297_0==HASH_SYMBOL) ) {s = 15;}
						else if ( (LA297_0==DIMENSION) ) {s = 16;}
						else if ( (LA297_0==LBRACKET) ) {s = 17;}
						else if ( (LA297_0==IDENT) ) {s = 19;}
						else if ( (LA297_0==AT_SIGN) ) {s = 20;}
						else if ( (LA297_0==MINUS) ) {s = 21;}
						else if ( (LA297_0==GEN) ) {s = 24;}
						else if ( (LA297_0==VARIABLE) ) {s = 25;}
						else if ( (LA297_0==SASS_DEBUG||LA297_0==SASS_WARN) ) {s = 26;}
						else if ( (LA297_0==SASS_VAR) ) {s = 27;}
						else if ( (LA297_0==SASS_IF) ) {s = 28;}
						else if ( (LA297_0==SASS_FOR) ) {s = 29;}
						else if ( (LA297_0==SASS_EACH) ) {s = 30;}
						else if ( (LA297_0==SASS_WHILE) ) {s = 31;}
						else if ( (LA297_0==SASS_CONTENT) ) {s = 32;}
						else if ( (LA297_0==IMPORT_SYM) ) {s = 33;}
						else if ( (LA297_0==PAGE_SYM) ) {s = 34;}
						else if ( (LA297_0==FONT_FACE_SYM) ) {s = 35;}
						else if ( (LA297_0==MOZ_DOCUMENT_SYM) ) {s = 36;}
						else if ( (LA297_0==WEBKIT_KEYFRAMES_SYM) ) {s = 37;}
						else if ( (LA297_0==MEDIA_SYM) ) {s = 38;}
						else if ( (LA297_0==SASS_EXTEND) ) {s = 39;}
						else if ( ((LA297_0 >= BOTTOMCENTER_SYM && LA297_0 <= BOTTOMRIGHT_SYM)||(LA297_0 >= LEFTBOTTOM_SYM && LA297_0 <= LEFTTOP_SYM)||(LA297_0 >= RIGHTBOTTOM_SYM && LA297_0 <= RIGHTTOP_SYM)||(LA297_0 >= TOPCENTER_SYM && LA297_0 <= TOPRIGHT_SYM)) ) {s = 41;}
						else if ( (LA297_0==CHARSET_SYM||LA297_0==COUNTER_STYLE_SYM||LA297_0==NAMESPACE_SYM||LA297_0==SASS_ELSE||(LA297_0 >= SASS_FORWARD && LA297_0 <= SASS_FUNCTION)||(LA297_0 >= SASS_RETURN && LA297_0 <= SASS_USE)) ) {s = 42;}
						else if ( (LA297_0==COMMA) ) {s = 45;}
						else if ( (LA297_0==SOLIDUS) && (synpred38_Css3())) {s = 46;}
						else if ( (LA297_0==TILDE) ) {s = 47;}
						else if ( (LA297_0==NUMBER) && (synpred38_Css3())) {s = 48;}
						else if ( (LA297_0==URANGE) && (synpred38_Css3())) {s = 49;}
						else if ( (LA297_0==PERCENTAGE) && (synpred38_Css3())) {s = 50;}
						else if ( (LA297_0==LENGTH) && (synpred38_Css3())) {s = 51;}
						else if ( (LA297_0==EMS) && (synpred38_Css3())) {s = 52;}
						else if ( (LA297_0==REM) && (synpred38_Css3())) {s = 53;}
						else if ( (LA297_0==EXS) && (synpred38_Css3())) {s = 54;}
						else if ( (LA297_0==ANGLE) && (synpred38_Css3())) {s = 55;}
						else if ( (LA297_0==TIME) && (synpred38_Css3())) {s = 56;}
						else if ( (LA297_0==FREQ) && (synpred38_Css3())) {s = 57;}
						else if ( (LA297_0==RESOLUTION) && (synpred38_Css3())) {s = 58;}
						else if ( (LA297_0==STRING) && (synpred38_Css3())) {s = 59;}
						else if ( (LA297_0==LESS_JS_STRING) && (synpred38_Css3())) {s = 61;}
						else if ( (LA297_0==URI) && (synpred38_Css3())) {s = 62;}
						else if ( (LA297_0==PERCENTAGE_SYMBOL) && (synpred38_Css3())) {s = 63;}
						 
						input.seek(index297_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA297_1 = input.LA(1);
						 
						int index297_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_1);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA297_6 = input.LA(1);
						 
						int index297_6 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred38_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_6);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA297_8 = input.LA(1);
						 
						int index297_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_8);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA297_9 = input.LA(1);
						 
						int index297_9 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_9);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA297_10 = input.LA(1);
						 
						int index297_10 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_10);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA297_11 = input.LA(1);
						 
						int index297_11 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_11);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA297_12 = input.LA(1);
						 
						int index297_12 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_12);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA297_13 = input.LA(1);
						 
						int index297_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_13);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA297_15 = input.LA(1);
						 
						int index297_15 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred38_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_15);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA297_16 = input.LA(1);
						 
						int index297_16 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")")) ) {s = 2;}
						 
						input.seek(index297_16);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA297_17 = input.LA(1);
						 
						int index297_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_17);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA297_19 = input.LA(1);
						 
						int index297_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_19);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA297_20 = input.LA(1);
						 
						int index297_20 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred38_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_20);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA297_21 = input.LA(1);
						 
						int index297_21 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_21);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA297_24 = input.LA(1);
						 
						int index297_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_24);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA297_25 = input.LA(1);
						 
						int index297_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_25);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA297_26 = input.LA(1);
						 
						int index297_26 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_26);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA297_27 = input.LA(1);
						 
						int index297_27 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_27);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA297_28 = input.LA(1);
						 
						int index297_28 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_28);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA297_29 = input.LA(1);
						 
						int index297_29 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_29);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA297_30 = input.LA(1);
						 
						int index297_30 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_30);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA297_31 = input.LA(1);
						 
						int index297_31 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_31);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA297_32 = input.LA(1);
						 
						int index297_32 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_32);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA297_33 = input.LA(1);
						 
						int index297_33 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_33);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA297_34 = input.LA(1);
						 
						int index297_34 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_34);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA297_35 = input.LA(1);
						 
						int index297_35 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_35);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA297_36 = input.LA(1);
						 
						int index297_36 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_36);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA297_37 = input.LA(1);
						 
						int index297_37 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_37);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA297_38 = input.LA(1);
						 
						int index297_38 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_38);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA297_39 = input.LA(1);
						 
						int index297_39 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_39);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA297_41 = input.LA(1);
						 
						int index297_41 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_41);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA297_42 = input.LA(1);
						 
						int index297_42 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_42);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA297_45 = input.LA(1);
						 
						int index297_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_45);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA297_47 = input.LA(1);
						 
						int index297_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index297_47);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 297, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA296_eotS =
		"\5\uffff";
	static final String DFA296_eofS =
		"\5\uffff";
	static final String DFA296_minS =
		"\2\5\3\uffff";
	static final String DFA296_maxS =
		"\2\u0098\3\uffff";
	static final String DFA296_acceptS =
		"\2\uffff\1\2\1\3\1\1";
	static final String DFA296_specialS =
		"\5\uffff}>";
	static final String[] DFA296_transitionS = {
			"\3\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\6\uffff\1\3"+
			"\2\uffff\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\3\uffff"+
			"\1\3\1\uffff\1\3\6\uffff\5\3\1\uffff\2\3\5\uffff\3\3\5\uffff\1\3\1\1"+
			"\4\uffff\1\3\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff"+
			"\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\1\uffff\1\2\1\uffff"+
			"\1\3\2\uffff\7\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\uffff\1\2\1\1\1\uffff\1\4\6\uffff\1\4"+
			"\2\uffff\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\1\4\3\uffff\2\4\3\uffff"+
			"\1\4\1\uffff\1\4\6\uffff\5\4\1\uffff\2\4\5\uffff\3\4\5\uffff\1\4\1\1"+
			"\4\uffff\1\4\3\uffff\3\4\1\uffff\1\4\4\uffff\5\4\2\uffff\3\4\1\uffff"+
			"\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\1\uffff\1\2\1\uffff"+
			"\1\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff\1\4\1\1",
			"",
			"",
			""
	};

	static final short[] DFA296_eot = DFA.unpackEncodedString(DFA296_eotS);
	static final short[] DFA296_eof = DFA.unpackEncodedString(DFA296_eofS);
	static final char[] DFA296_min = DFA.unpackEncodedStringToUnsignedChars(DFA296_minS);
	static final char[] DFA296_max = DFA.unpackEncodedStringToUnsignedChars(DFA296_maxS);
	static final short[] DFA296_accept = DFA.unpackEncodedString(DFA296_acceptS);
	static final short[] DFA296_special = DFA.unpackEncodedString(DFA296_specialS);
	static final short[][] DFA296_transition;

	static {
		int numStates = DFA296_transitionS.length;
		DFA296_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA296_transition[i] = DFA.unpackEncodedString(DFA296_transitionS[i]);
		}
	}

	protected class DFA296 extends DFA {

		public DFA296(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 296;
			this.eot = DFA296_eot;
			this.eof = DFA296_eof;
			this.min = DFA296_min;
			this.max = DFA296_max;
			this.accept = DFA296_accept;
			this.special = DFA296_special;
			this.transition = DFA296_transition;
		}
		@Override
		public String getDescription() {
			return "991:66: ( ws | ( ( ws )? operator ( ws )? ) |)";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA312_eotS =
		"\4\uffff";
	static final String DFA312_eofS =
		"\4\uffff";
	static final String DFA312_minS =
		"\2\24\2\uffff";
	static final String DFA312_maxS =
		"\2\u0098\2\uffff";
	static final String DFA312_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA312_specialS =
		"\4\uffff}>";
	static final String[] DFA312_transitionS = {
			"\1\3\1\1\74\uffff\1\1\26\uffff\1\2\30\uffff\1\3\25\uffff\1\1",
			"\1\3\1\1\74\uffff\1\1\26\uffff\1\2\30\uffff\1\3\25\uffff\1\1",
			"",
			""
	};

	static final short[] DFA312_eot = DFA.unpackEncodedString(DFA312_eotS);
	static final short[] DFA312_eof = DFA.unpackEncodedString(DFA312_eofS);
	static final char[] DFA312_min = DFA.unpackEncodedStringToUnsignedChars(DFA312_minS);
	static final char[] DFA312_max = DFA.unpackEncodedStringToUnsignedChars(DFA312_maxS);
	static final short[] DFA312_accept = DFA.unpackEncodedString(DFA312_acceptS);
	static final short[] DFA312_special = DFA.unpackEncodedString(DFA312_specialS);
	static final short[][] DFA312_transition;

	static {
		int numStates = DFA312_transitionS.length;
		DFA312_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA312_transition[i] = DFA.unpackEncodedString(DFA312_transitionS[i]);
		}
	}

	protected class DFA312 extends DFA {

		public DFA312(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 312;
			this.eot = DFA312_eot;
			this.eof = DFA312_eof;
			this.min = DFA312_min;
			this.max = DFA312_max;
			this.accept = DFA312_accept;
			this.special = DFA312_special;
			this.transition = DFA312_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1059:17: ( ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA322_eotS =
		"\47\uffff";
	static final String DFA322_eofS =
		"\47\uffff";
	static final String DFA322_minS =
		"\2\5\45\uffff";
	static final String DFA322_maxS =
		"\2\u0098\45\uffff";
	static final String DFA322_acceptS =
		"\2\uffff\1\2\44\1";
	static final String DFA322_specialS =
		"\1\1\1\0\45\uffff}>";
	static final String[] DFA322_transitionS = {
			"\1\17\1\32\1\36\2\uffff\5\32\3\uffff\1\32\1\uffff\1\2\1\1\1\uffff\1\32"+
			"\6\uffff\1\23\2\uffff\1\14\3\uffff\1\16\1\uffff\1\32\1\21\1\uffff\1\27"+
			"\3\uffff\1\31\1\35\3\uffff\1\5\1\uffff\1\32\6\uffff\1\7\3\32\1\13\1\uffff"+
			"\1\34\1\26\5\uffff\1\32\1\4\1\32\5\uffff\1\32\1\1\4\uffff\1\10\3\uffff"+
			"\1\32\1\12\1\37\1\uffff\1\4\4\uffff\1\15\1\22\3\32\1\2\1\uffff\3\32\1"+
			"\uffff\2\32\2\uffff\1\32\1\uffff\3\32\1\uffff\3\32\1\uffff\2\32\1\33"+
			"\2\32\1\2\1\3\1\uffff\1\24\2\uffff\1\25\1\20\5\32\2\uffff\1\11\1\30\2"+
			"\uffff\1\6\1\uffff\1\32\1\1",
			"\1\17\1\41\1\45\2\uffff\5\41\3\uffff\1\41\1\uffff\1\2\1\1\1\uffff\1"+
			"\41\6\uffff\1\23\2\uffff\1\14\3\uffff\1\16\1\uffff\1\41\1\21\1\uffff"+
			"\1\27\3\uffff\1\31\1\44\3\uffff\1\40\1\uffff\1\41\6\uffff\1\7\3\41\1"+
			"\13\1\uffff\1\43\1\26\5\uffff\1\41\1\4\1\41\5\uffff\1\41\1\1\4\uffff"+
			"\1\10\3\uffff\1\41\1\12\1\46\1\uffff\1\4\4\uffff\1\15\1\22\3\41\1\2\1"+
			"\uffff\3\41\1\uffff\2\41\2\uffff\1\41\1\uffff\3\41\1\uffff\3\41\1\uffff"+
			"\2\41\1\42\2\41\1\2\1\3\1\uffff\1\24\2\uffff\1\25\1\20\5\41\2\uffff\1"+
			"\11\1\30\2\uffff\1\6\1\uffff\1\41\1\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA322_eot = DFA.unpackEncodedString(DFA322_eotS);
	static final short[] DFA322_eof = DFA.unpackEncodedString(DFA322_eofS);
	static final char[] DFA322_min = DFA.unpackEncodedStringToUnsignedChars(DFA322_minS);
	static final char[] DFA322_max = DFA.unpackEncodedStringToUnsignedChars(DFA322_maxS);
	static final short[] DFA322_accept = DFA.unpackEncodedString(DFA322_acceptS);
	static final short[] DFA322_special = DFA.unpackEncodedString(DFA322_specialS);
	static final short[][] DFA322_transition;

	static {
		int numStates = DFA322_transitionS.length;
		DFA322_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA322_transition[i] = DFA.unpackEncodedString(DFA322_transitionS[i]);
		}
	}

	protected class DFA322 extends DFA {

		public DFA322(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 322;
			this.eot = DFA322_eot;
			this.eof = DFA322_eof;
			this.min = DFA322_min;
			this.max = DFA322_max;
			this.accept = DFA322_accept;
			this.special = DFA322_special;
			this.transition = DFA322_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1077:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA322_1 = input.LA(1);
						 
						int index322_1 = input.index();
						input.rewind();
						s = -1;
						if ( (LA322_1==COMMA||LA322_1==RPAREN||LA322_1==SEMI) ) {s = 2;}
						else if ( (LA322_1==COMMENT||LA322_1==NL||LA322_1==WS) ) {s = 1;}
						else if ( (LA322_1==MINUS||LA322_1==PLUS) && (synpred42_Css3())) {s = 4;}
						else if ( (LA322_1==IDENT) && (synpred42_Css3())) {s = 32;}
						else if ( (LA322_1==VARIABLE) && (synpred42_Css3())) {s = 6;}
						else if ( (LA322_1==LBRACKET) && (synpred42_Css3())) {s = 7;}
						else if ( (LA322_1==NUMBER) && (synpred42_Css3())) {s = 8;}
						else if ( (LA322_1==URANGE) && (synpred42_Css3())) {s = 9;}
						else if ( (LA322_1==PERCENTAGE) && (synpred42_Css3())) {s = 10;}
						else if ( (LA322_1==LENGTH) && (synpred42_Css3())) {s = 11;}
						else if ( (LA322_1==EMS) && (synpred42_Css3())) {s = 12;}
						else if ( (LA322_1==REM) && (synpred42_Css3())) {s = 13;}
						else if ( (LA322_1==EXS) && (synpred42_Css3())) {s = 14;}
						else if ( (LA322_1==ANGLE) && (synpred42_Css3())) {s = 15;}
						else if ( (LA322_1==TIME) && (synpred42_Css3())) {s = 16;}
						else if ( (LA322_1==FREQ) && (synpred42_Css3())) {s = 17;}
						else if ( (LA322_1==RESOLUTION) && (synpred42_Css3())) {s = 18;}
						else if ( (LA322_1==DIMENSION) && (synpred42_Css3())) {s = 19;}
						else if ( (LA322_1==STRING) && (synpred42_Css3())) {s = 20;}
						else if ( (LA322_1==TILDE) && (synpred42_Css3())) {s = 21;}
						else if ( (LA322_1==LESS_JS_STRING) && (synpred42_Css3())) {s = 22;}
						else if ( (LA322_1==GEN) && (synpred42_Css3())) {s = 23;}
						else if ( (LA322_1==URI) && (synpred42_Css3())) {s = 24;}
						else if ( (LA322_1==HASH) && (synpred42_Css3())) {s = 25;}
						else if ( (LA322_1==AT_IDENT||(LA322_1 >= BOTTOMCENTER_SYM && LA322_1 <= BOTTOMRIGHT_SYM)||LA322_1==CHARSET_SYM||LA322_1==COUNTER_STYLE_SYM||LA322_1==FONT_FACE_SYM||LA322_1==IMPORT_SYM||(LA322_1 >= LEFTBOTTOM_SYM && LA322_1 <= LEFTTOP_SYM)||LA322_1==MEDIA_SYM||LA322_1==MOZ_DOCUMENT_SYM||LA322_1==NAMESPACE_SYM||LA322_1==PAGE_SYM||(LA322_1 >= RIGHTBOTTOM_SYM && LA322_1 <= RIGHTTOP_SYM)||(LA322_1 >= SASS_AT_ROOT && LA322_1 <= SASS_DEBUG)||(LA322_1 >= SASS_EACH && LA322_1 <= SASS_ELSE)||LA322_1==SASS_EXTEND||(LA322_1 >= SASS_FOR && LA322_1 <= SASS_FUNCTION)||(LA322_1 >= SASS_IF && LA322_1 <= SASS_MIXIN)||(LA322_1 >= SASS_RETURN && LA322_1 <= SASS_USE)||(LA322_1 >= SASS_WARN && LA322_1 <= SASS_WHILE)||(LA322_1 >= TOPCENTER_SYM && LA322_1 <= TOPRIGHT_SYM)||LA322_1==WEBKIT_KEYFRAMES_SYM) && (synpred42_Css3())) {s = 33;}
						else if ( (LA322_1==SASS_VAR) && (synpred42_Css3())) {s = 34;}
						else if ( (LA322_1==LESS_AND) && (synpred42_Css3())) {s = 35;}
						else if ( (LA322_1==HASH_SYMBOL) && (synpred42_Css3())) {s = 36;}
						else if ( (LA322_1==AT_SIGN) && (synpred42_Css3())) {s = 37;}
						else if ( (LA322_1==PERCENTAGE_SYMBOL) && (synpred42_Css3())) {s = 38;}
						else if ( (LA322_1==SOLIDUS) && (synpred42_Css3())) {s = 3;}
						 
						input.seek(index322_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA322_0 = input.LA(1);
						 
						int index322_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA322_0==COMMENT||LA322_0==NL||LA322_0==WS) ) {s = 1;}
						else if ( (LA322_0==COMMA||LA322_0==RPAREN||LA322_0==SEMI) ) {s = 2;}
						else if ( (LA322_0==SOLIDUS) && (synpred42_Css3())) {s = 3;}
						else if ( (LA322_0==MINUS||LA322_0==PLUS) && (synpred42_Css3())) {s = 4;}
						else if ( (LA322_0==IDENT) && (synpred42_Css3())) {s = 5;}
						else if ( (LA322_0==VARIABLE) && (synpred42_Css3())) {s = 6;}
						else if ( (LA322_0==LBRACKET) && (synpred42_Css3())) {s = 7;}
						else if ( (LA322_0==NUMBER) && (synpred42_Css3())) {s = 8;}
						else if ( (LA322_0==URANGE) && (synpred42_Css3())) {s = 9;}
						else if ( (LA322_0==PERCENTAGE) && (synpred42_Css3())) {s = 10;}
						else if ( (LA322_0==LENGTH) && (synpred42_Css3())) {s = 11;}
						else if ( (LA322_0==EMS) && (synpred42_Css3())) {s = 12;}
						else if ( (LA322_0==REM) && (synpred42_Css3())) {s = 13;}
						else if ( (LA322_0==EXS) && (synpred42_Css3())) {s = 14;}
						else if ( (LA322_0==ANGLE) && (synpred42_Css3())) {s = 15;}
						else if ( (LA322_0==TIME) && (synpred42_Css3())) {s = 16;}
						else if ( (LA322_0==FREQ) && (synpred42_Css3())) {s = 17;}
						else if ( (LA322_0==RESOLUTION) && (synpred42_Css3())) {s = 18;}
						else if ( (LA322_0==DIMENSION) && (synpred42_Css3())) {s = 19;}
						else if ( (LA322_0==STRING) && (synpred42_Css3())) {s = 20;}
						else if ( (LA322_0==TILDE) && (synpred42_Css3())) {s = 21;}
						else if ( (LA322_0==LESS_JS_STRING) && (synpred42_Css3())) {s = 22;}
						else if ( (LA322_0==GEN) && (synpred42_Css3())) {s = 23;}
						else if ( (LA322_0==URI) && (synpred42_Css3())) {s = 24;}
						else if ( (LA322_0==HASH) && (synpred42_Css3())) {s = 25;}
						else if ( (LA322_0==AT_IDENT||(LA322_0 >= BOTTOMCENTER_SYM && LA322_0 <= BOTTOMRIGHT_SYM)||LA322_0==CHARSET_SYM||LA322_0==COUNTER_STYLE_SYM||LA322_0==FONT_FACE_SYM||LA322_0==IMPORT_SYM||(LA322_0 >= LEFTBOTTOM_SYM && LA322_0 <= LEFTTOP_SYM)||LA322_0==MEDIA_SYM||LA322_0==MOZ_DOCUMENT_SYM||LA322_0==NAMESPACE_SYM||LA322_0==PAGE_SYM||(LA322_0 >= RIGHTBOTTOM_SYM && LA322_0 <= RIGHTTOP_SYM)||(LA322_0 >= SASS_AT_ROOT && LA322_0 <= SASS_DEBUG)||(LA322_0 >= SASS_EACH && LA322_0 <= SASS_ELSE)||LA322_0==SASS_EXTEND||(LA322_0 >= SASS_FOR && LA322_0 <= SASS_FUNCTION)||(LA322_0 >= SASS_IF && LA322_0 <= SASS_MIXIN)||(LA322_0 >= SASS_RETURN && LA322_0 <= SASS_USE)||(LA322_0 >= SASS_WARN && LA322_0 <= SASS_WHILE)||(LA322_0 >= TOPCENTER_SYM && LA322_0 <= TOPRIGHT_SYM)||LA322_0==WEBKIT_KEYFRAMES_SYM) && (synpred42_Css3())) {s = 26;}
						else if ( (LA322_0==SASS_VAR) && (synpred42_Css3())) {s = 27;}
						else if ( (LA322_0==LESS_AND) && (synpred42_Css3())) {s = 28;}
						else if ( (LA322_0==HASH_SYMBOL) && (synpred42_Css3())) {s = 29;}
						else if ( (LA322_0==AT_SIGN) && (synpred42_Css3())) {s = 30;}
						else if ( (LA322_0==PERCENTAGE_SYMBOL) && (synpred42_Css3())) {s = 31;}
						 
						input.seek(index322_0);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 322, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA321_eotS =
		"\5\uffff";
	static final String DFA321_eofS =
		"\5\uffff";
	static final String DFA321_minS =
		"\2\5\3\uffff";
	static final String DFA321_maxS =
		"\2\u0098\3\uffff";
	static final String DFA321_acceptS =
		"\2\uffff\1\2\1\3\1\1";
	static final String DFA321_specialS =
		"\5\uffff}>";
	static final String[] DFA321_transitionS = {
			"\3\3\2\uffff\5\3\3\uffff\1\3\2\uffff\1\1\1\uffff\1\3\6\uffff\1\3\2\uffff"+
			"\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\3\uffff\1\3\1\uffff"+
			"\1\3\6\uffff\5\3\1\uffff\2\3\5\uffff\3\3\5\uffff\1\3\1\1\4\uffff\1\3"+
			"\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff\2\3\2\uffff"+
			"\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\1\uffff\1\2\1\uffff\1\3\2\uffff"+
			"\7\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"\3\4\2\uffff\5\4\3\uffff\1\4\2\uffff\1\1\1\uffff\1\4\6\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\1\4\3\uffff\2\4\3\uffff\1\4\1\uffff"+
			"\1\4\6\uffff\5\4\1\uffff\2\4\5\uffff\3\4\5\uffff\1\4\1\1\4\uffff\1\4"+
			"\3\uffff\3\4\1\uffff\1\4\4\uffff\5\4\2\uffff\3\4\1\uffff\2\4\2\uffff"+
			"\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\1\uffff\1\2\1\uffff\1\4\2\uffff"+
			"\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff\1\4\1\1",
			"",
			"",
			""
	};

	static final short[] DFA321_eot = DFA.unpackEncodedString(DFA321_eotS);
	static final short[] DFA321_eof = DFA.unpackEncodedString(DFA321_eofS);
	static final char[] DFA321_min = DFA.unpackEncodedStringToUnsignedChars(DFA321_minS);
	static final char[] DFA321_max = DFA.unpackEncodedStringToUnsignedChars(DFA321_maxS);
	static final short[] DFA321_accept = DFA.unpackEncodedString(DFA321_acceptS);
	static final short[] DFA321_special = DFA.unpackEncodedString(DFA321_specialS);
	static final short[][] DFA321_transition;

	static {
		int numStates = DFA321_transitionS.length;
		DFA321_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA321_transition[i] = DFA.unpackEncodedString(DFA321_transitionS[i]);
		}
	}

	protected class DFA321 extends DFA {

		public DFA321(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 321;
			this.eot = DFA321_eot;
			this.eof = DFA321_eof;
			this.min = DFA321_min;
			this.max = DFA321_max;
			this.accept = DFA321_accept;
			this.special = DFA321_special;
			this.transition = DFA321_transition;
		}
		@Override
		public String getDescription() {
			return "1077:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |)";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA331_eotS =
		"\5\uffff";
	static final String DFA331_eofS =
		"\2\2\3\uffff";
	static final String DFA331_minS =
		"\2\6\3\uffff";
	static final String DFA331_maxS =
		"\2\u0098\3\uffff";
	static final String DFA331_acceptS =
		"\2\uffff\1\3\1\1\1\2";
	static final String DFA331_specialS =
		"\5\uffff}>";
	static final String[] DFA331_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2\2\uffff\1\2"+
			"\3\uffff\4\2\1\uffff\3\2\1\3\2\2\2\uffff\5\2\1\4\3\2\1\uffff\6\2\1\uffff"+
			"\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\10\uffff\1\2\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2\2\uffff\1\2"+
			"\3\uffff\4\2\1\uffff\3\2\1\3\2\2\1\uffff\6\2\1\4\3\2\1\uffff\6\2\1\uffff"+
			"\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff\1\2\1\1",
			"",
			"",
			""
	};

	static final short[] DFA331_eot = DFA.unpackEncodedString(DFA331_eotS);
	static final short[] DFA331_eof = DFA.unpackEncodedString(DFA331_eofS);
	static final char[] DFA331_min = DFA.unpackEncodedStringToUnsignedChars(DFA331_minS);
	static final char[] DFA331_max = DFA.unpackEncodedStringToUnsignedChars(DFA331_maxS);
	static final short[] DFA331_accept = DFA.unpackEncodedString(DFA331_acceptS);
	static final short[] DFA331_special = DFA.unpackEncodedString(DFA331_specialS);
	static final short[][] DFA331_transition;

	static {
		int numStates = DFA331_transitionS.length;
		DFA331_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA331_transition[i] = DFA.unpackEncodedString(DFA331_transitionS[i]);
		}
	}

	protected class DFA331 extends DFA {

		public DFA331(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 331;
			this.eot = DFA331_eot;
			this.eof = DFA331_eof;
			this.min = DFA331_min;
			this.max = DFA331_max;
			this.accept = DFA331_accept;
			this.special = DFA331_special;
			this.transition = DFA331_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1096:72: ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA337_eotS =
		"\106\uffff";
	static final String DFA337_eofS =
		"\1\2\105\uffff";
	static final String DFA337_minS =
		"\1\5\1\0\55\uffff\1\0\26\uffff";
	static final String DFA337_maxS =
		"\1\u0098\1\0\55\uffff\1\0\26\uffff";
	static final String DFA337_acceptS =
		"\2\uffff\1\2\102\uffff\1\1";
	static final String DFA337_specialS =
		"\1\uffff\1\0\55\uffff\1\1\26\uffff}>";
	static final String[] DFA337_transitionS = {
			"\3\2\2\uffff\5\2\3\uffff\2\2\1\57\1\1\1\uffff\1\2\5\uffff\3\2\1\uffff"+
			"\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\2\2\2\uffff\2\2\3\uffff\3\2\5\uffff"+
			"\6\2\1\uffff\2\2\3\uffff\1\2\1\uffff\3\2\5\uffff\1\2\1\1\3\uffff\2\2"+
			"\3\uffff\5\2\2\uffff\1\2\1\uffff\6\2\1\uffff\6\2\2\uffff\11\2\1\uffff"+
			"\6\2\1\uffff\3\2\1\uffff\7\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\1\1",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA337_eot = DFA.unpackEncodedString(DFA337_eotS);
	static final short[] DFA337_eof = DFA.unpackEncodedString(DFA337_eofS);
	static final char[] DFA337_min = DFA.unpackEncodedStringToUnsignedChars(DFA337_minS);
	static final char[] DFA337_max = DFA.unpackEncodedStringToUnsignedChars(DFA337_maxS);
	static final short[] DFA337_accept = DFA.unpackEncodedString(DFA337_acceptS);
	static final short[] DFA337_special = DFA.unpackEncodedString(DFA337_specialS);
	static final short[][] DFA337_transition;

	static {
		int numStates = DFA337_transitionS.length;
		DFA337_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA337_transition[i] = DFA.unpackEncodedString(DFA337_transitionS[i]);
		}
	}

	protected class DFA337 extends DFA {

		public DFA337(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 337;
			this.eot = DFA337_eot;
			this.eof = DFA337_eof;
			this.min = DFA337_min;
			this.max = DFA337_max;
			this.accept = DFA337_accept;
			this.special = DFA337_special;
			this.transition = DFA337_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1112:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA337_1 = input.LA(1);
						 
						int index337_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Css3()) ) {s = 69;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index337_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA337_47 = input.LA(1);
						 
						int index337_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Css3()) ) {s = 69;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index337_47);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 337, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA343_eotS =
		"\116\uffff";
	static final String DFA343_eofS =
		"\1\2\115\uffff";
	static final String DFA343_minS =
		"\1\5\1\0\2\uffff\13\0\2\uffff\1\0\1\uffff\6\0\1\uffff\2\0\3\uffff\14\0"+
		"\1\uffff\2\0\1\uffff\2\0\3\uffff\21\0\2\uffff\1\0\6\uffff";
	static final String DFA343_maxS =
		"\1\u0098\1\0\2\uffff\13\0\2\uffff\1\0\1\uffff\6\0\1\uffff\2\0\3\uffff"+
		"\14\0\1\uffff\2\0\1\uffff\2\0\3\uffff\21\0\2\uffff\1\0\6\uffff";
	static final String DFA343_acceptS =
		"\2\uffff\1\3\105\uffff\5\1\1\2";
	static final String DFA343_specialS =
		"\1\0\1\1\2\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\2\uffff"+
		"\1\15\1\uffff\1\16\1\17\1\20\1\21\1\22\1\23\1\uffff\1\24\1\25\3\uffff"+
		"\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\uffff\1"+
		"\42\1\43\1\uffff\1\44\1\45\3\uffff\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
		"\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\2\uffff\1\67\6\uffff}>";
	static final String[] DFA343_transitionS = {
			"\1\74\1\24\1\12\2\uffff\5\54\3\uffff\1\60\2\2\1\107\1\uffff\1\55\1\2"+
			"\1\110\1\111\2\uffff\1\2\1\32\1\2\1\uffff\1\71\3\uffff\1\73\1\uffff\1"+
			"\46\1\76\1\uffff\1\14\1\100\1\114\1\uffff\1\23\1\11\3\uffff\1\7\1\4\1"+
			"\44\5\uffff\1\2\1\33\3\54\1\70\1\112\1\21\1\101\1\113\1\2\1\uffff\1\104"+
			"\1\uffff\1\51\1\10\1\47\5\uffff\1\60\1\107\3\uffff\1\64\1\5\3\uffff\1"+
			"\45\1\67\1\103\1\2\1\30\2\uffff\1\2\1\uffff\1\72\1\77\3\54\1\2\1\uffff"+
			"\1\26\1\43\1\27\1\2\1\41\1\60\2\uffff\1\52\1\2\1\40\1\60\1\57\1\2\1\37"+
			"\1\25\1\15\1\uffff\2\60\1\16\1\27\1\42\1\2\1\uffff\1\2\1\6\1\2\1\uffff"+
			"\1\65\1\75\5\54\2\uffff\1\66\1\102\2\uffff\1\13\1\uffff\1\50\1\1",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA343_eot = DFA.unpackEncodedString(DFA343_eotS);
	static final short[] DFA343_eof = DFA.unpackEncodedString(DFA343_eofS);
	static final char[] DFA343_min = DFA.unpackEncodedStringToUnsignedChars(DFA343_minS);
	static final char[] DFA343_max = DFA.unpackEncodedStringToUnsignedChars(DFA343_maxS);
	static final short[] DFA343_accept = DFA.unpackEncodedString(DFA343_acceptS);
	static final short[] DFA343_special = DFA.unpackEncodedString(DFA343_specialS);
	static final short[][] DFA343_transition;

	static {
		int numStates = DFA343_transitionS.length;
		DFA343_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA343_transition[i] = DFA.unpackEncodedString(DFA343_transitionS[i]);
		}
	}

	protected class DFA343 extends DFA {

		public DFA343(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 343;
			this.eot = DFA343_eot;
			this.eof = DFA343_eof;
			this.min = DFA343_min;
			this.max = DFA343_max;
			this.accept = DFA343_accept;
			this.special = DFA343_special;
			this.transition = DFA343_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1129:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA343_0 = input.LA(1);
						 
						int index343_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA343_0==WS) ) {s = 1;}
						else if ( (LA343_0==EOF||(LA343_0 >= COLON && LA343_0 <= COMMA)||LA343_0==CP_DOTS||LA343_0==DCOLON||LA343_0==DOT||LA343_0==LBRACE||LA343_0==LESS_REST||LA343_0==PIPE||LA343_0==RBRACE||LA343_0==RPAREN||LA343_0==SASS_DEFAULT||LA343_0==SASS_EXTEND_ONLY_SELECTOR||LA343_0==SASS_GLOBAL||LA343_0==SEMI||LA343_0==STAR||LA343_0==SUPPORTS_SYM) ) {s = 2;}
						else if ( (LA343_0==IMPORTANT_SYM) ) {s = 4;}
						else if ( (LA343_0==NUMBER) ) {s = 5;}
						else if ( (LA343_0==STRING) ) {s = 6;}
						else if ( (LA343_0==IDENT) ) {s = 7;}
						else if ( (LA343_0==MINUS) ) {s = 8;}
						else if ( (LA343_0==HASH_SYMBOL) ) {s = 9;}
						else if ( (LA343_0==AT_SIGN) ) {s = 10;}
						else if ( (LA343_0==VARIABLE) ) {s = 11;}
						else if ( (LA343_0==GEN) ) {s = 12;}
						else if ( (LA343_0==SASS_MIXIN) ) {s = 13;}
						else if ( (LA343_0==SASS_VAR) ) {s = 14;}
						else if ( (LA343_0==LESS_AND) ) {s = 17;}
						else if ( (LA343_0==HASH) ) {s = 19;}
						else if ( (LA343_0==AT_IDENT) ) {s = 20;}
						else if ( (LA343_0==SASS_INCLUDE) ) {s = 21;}
						else if ( (LA343_0==SASS_AT_ROOT) ) {s = 22;}
						else if ( (LA343_0==SASS_DEBUG||LA343_0==SASS_WARN) ) {s = 23;}
						else if ( (LA343_0==PLUS) ) {s = 24;}
						else if ( (LA343_0==DIMENSION) ) {s = 26;}
						else if ( (LA343_0==LBRACKET) ) {s = 27;}
						else if ( (LA343_0==SASS_IF) ) {s = 31;}
						else if ( (LA343_0==SASS_FOR) ) {s = 32;}
						else if ( (LA343_0==SASS_EACH) ) {s = 33;}
						else if ( (LA343_0==SASS_WHILE) ) {s = 34;}
						else if ( (LA343_0==SASS_CONTENT) ) {s = 35;}
						else if ( (LA343_0==IMPORT_SYM) ) {s = 36;}
						else if ( (LA343_0==PAGE_SYM) ) {s = 37;}
						else if ( (LA343_0==FONT_FACE_SYM) ) {s = 38;}
						else if ( (LA343_0==MOZ_DOCUMENT_SYM) ) {s = 39;}
						else if ( (LA343_0==WEBKIT_KEYFRAMES_SYM) ) {s = 40;}
						else if ( (LA343_0==MEDIA_SYM) ) {s = 41;}
						else if ( (LA343_0==SASS_EXTEND) ) {s = 42;}
						else if ( ((LA343_0 >= BOTTOMCENTER_SYM && LA343_0 <= BOTTOMRIGHT_SYM)||(LA343_0 >= LEFTBOTTOM_SYM && LA343_0 <= LEFTTOP_SYM)||(LA343_0 >= RIGHTBOTTOM_SYM && LA343_0 <= RIGHTTOP_SYM)||(LA343_0 >= TOPCENTER_SYM && LA343_0 <= TOPRIGHT_SYM)) ) {s = 44;}
						else if ( (LA343_0==COUNTER_STYLE_SYM) ) {s = 45;}
						else if ( (LA343_0==SASS_FUNCTION) ) {s = 47;}
						else if ( (LA343_0==CHARSET_SYM||LA343_0==NAMESPACE_SYM||LA343_0==SASS_ELSE||LA343_0==SASS_FORWARD||(LA343_0 >= SASS_RETURN && LA343_0 <= SASS_USE)) ) {s = 48;}
						else if ( (LA343_0==NOT) ) {s = 52;}
						else if ( (LA343_0==TILDE) ) {s = 53;}
						else if ( (LA343_0==URANGE) ) {s = 54;}
						else if ( (LA343_0==PERCENTAGE) ) {s = 55;}
						else if ( (LA343_0==LENGTH) ) {s = 56;}
						else if ( (LA343_0==EMS) ) {s = 57;}
						else if ( (LA343_0==REM) ) {s = 58;}
						else if ( (LA343_0==EXS) ) {s = 59;}
						else if ( (LA343_0==ANGLE) ) {s = 60;}
						else if ( (LA343_0==TIME) ) {s = 61;}
						else if ( (LA343_0==FREQ) ) {s = 62;}
						else if ( (LA343_0==RESOLUTION) ) {s = 63;}
						else if ( (LA343_0==GREATER) ) {s = 64;}
						else if ( (LA343_0==LESS_JS_STRING) ) {s = 65;}
						else if ( (LA343_0==URI) ) {s = 66;}
						else if ( (LA343_0==PERCENTAGE_SYMBOL) ) {s = 67;}
						else if ( (LA343_0==LPAREN) ) {s = 68;}
						else if ( (LA343_0==COMMENT||LA343_0==NL) ) {s = 71;}
						else if ( (LA343_0==CP_EQ) && (synpred46_Css3())) {s = 72;}
						else if ( (LA343_0==CP_NOT_EQ) && (synpred46_Css3())) {s = 73;}
						else if ( (LA343_0==LESS) && (synpred46_Css3())) {s = 74;}
						else if ( (LA343_0==LESS_OR_EQ) && (synpred46_Css3())) {s = 75;}
						else if ( (LA343_0==GREATER_OR_EQ) && (synpred46_Css3())) {s = 76;}
						 
						input.seek(index343_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA343_1 = input.LA(1);
						 
						int index343_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred46_Css3()) ) {s = 76;}
						else if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_1);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA343_4 = input.LA(1);
						 
						int index343_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_4);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA343_5 = input.LA(1);
						 
						int index343_5 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_5);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA343_6 = input.LA(1);
						 
						int index343_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_6);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA343_7 = input.LA(1);
						 
						int index343_7 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred46_Css3()&&(evalPredicate(tokenNameEquals("or"),"tokenNameEquals(\"or\")")||evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")")))) ) {s = 76;}
						else if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_7);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA343_8 = input.LA(1);
						 
						int index343_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_8);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA343_9 = input.LA(1);
						 
						int index343_9 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred47_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_9);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA343_10 = input.LA(1);
						 
						int index343_10 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred47_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_10);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA343_11 = input.LA(1);
						 
						int index343_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_11);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA343_12 = input.LA(1);
						 
						int index343_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_12);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA343_13 = input.LA(1);
						 
						int index343_13 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_13);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA343_14 = input.LA(1);
						 
						int index343_14 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_14);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA343_17 = input.LA(1);
						 
						int index343_17 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred47_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_17);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA343_19 = input.LA(1);
						 
						int index343_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_19);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA343_20 = input.LA(1);
						 
						int index343_20 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_20);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA343_21 = input.LA(1);
						 
						int index343_21 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_21);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA343_22 = input.LA(1);
						 
						int index343_22 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_22);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA343_23 = input.LA(1);
						 
						int index343_23 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_23);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA343_24 = input.LA(1);
						 
						int index343_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_24);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA343_26 = input.LA(1);
						 
						int index343_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_26);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA343_27 = input.LA(1);
						 
						int index343_27 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_27);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA343_31 = input.LA(1);
						 
						int index343_31 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_31);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA343_32 = input.LA(1);
						 
						int index343_32 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_32);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA343_33 = input.LA(1);
						 
						int index343_33 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_33);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA343_34 = input.LA(1);
						 
						int index343_34 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_34);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA343_35 = input.LA(1);
						 
						int index343_35 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_35);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA343_36 = input.LA(1);
						 
						int index343_36 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_36);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA343_37 = input.LA(1);
						 
						int index343_37 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_37);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA343_38 = input.LA(1);
						 
						int index343_38 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_38);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA343_39 = input.LA(1);
						 
						int index343_39 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_39);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA343_40 = input.LA(1);
						 
						int index343_40 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_40);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA343_41 = input.LA(1);
						 
						int index343_41 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_41);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA343_42 = input.LA(1);
						 
						int index343_42 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_42);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA343_44 = input.LA(1);
						 
						int index343_44 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_44);
						if ( s>=0 ) return s;
						break;

					case 35 : 
						int LA343_45 = input.LA(1);
						 
						int index343_45 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_45);
						if ( s>=0 ) return s;
						break;

					case 36 : 
						int LA343_47 = input.LA(1);
						 
						int index343_47 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_47);
						if ( s>=0 ) return s;
						break;

					case 37 : 
						int LA343_48 = input.LA(1);
						 
						int index343_48 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_48);
						if ( s>=0 ) return s;
						break;

					case 38 : 
						int LA343_52 = input.LA(1);
						 
						int index343_52 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_52);
						if ( s>=0 ) return s;
						break;

					case 39 : 
						int LA343_53 = input.LA(1);
						 
						int index343_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_53);
						if ( s>=0 ) return s;
						break;

					case 40 : 
						int LA343_54 = input.LA(1);
						 
						int index343_54 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_54);
						if ( s>=0 ) return s;
						break;

					case 41 : 
						int LA343_55 = input.LA(1);
						 
						int index343_55 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_55);
						if ( s>=0 ) return s;
						break;

					case 42 : 
						int LA343_56 = input.LA(1);
						 
						int index343_56 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_56);
						if ( s>=0 ) return s;
						break;

					case 43 : 
						int LA343_57 = input.LA(1);
						 
						int index343_57 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_57);
						if ( s>=0 ) return s;
						break;

					case 44 : 
						int LA343_58 = input.LA(1);
						 
						int index343_58 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_58);
						if ( s>=0 ) return s;
						break;

					case 45 : 
						int LA343_59 = input.LA(1);
						 
						int index343_59 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_59);
						if ( s>=0 ) return s;
						break;

					case 46 : 
						int LA343_60 = input.LA(1);
						 
						int index343_60 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_60);
						if ( s>=0 ) return s;
						break;

					case 47 : 
						int LA343_61 = input.LA(1);
						 
						int index343_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_61);
						if ( s>=0 ) return s;
						break;

					case 48 : 
						int LA343_62 = input.LA(1);
						 
						int index343_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_62);
						if ( s>=0 ) return s;
						break;

					case 49 : 
						int LA343_63 = input.LA(1);
						 
						int index343_63 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_63);
						if ( s>=0 ) return s;
						break;

					case 50 : 
						int LA343_64 = input.LA(1);
						 
						int index343_64 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred46_Css3()) ) {s = 76;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_64);
						if ( s>=0 ) return s;
						break;

					case 51 : 
						int LA343_65 = input.LA(1);
						 
						int index343_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_65);
						if ( s>=0 ) return s;
						break;

					case 52 : 
						int LA343_66 = input.LA(1);
						 
						int index343_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_66);
						if ( s>=0 ) return s;
						break;

					case 53 : 
						int LA343_67 = input.LA(1);
						 
						int index343_67 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 77;}
						else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 2;}
						 
						input.seek(index343_67);
						if ( s>=0 ) return s;
						break;

					case 54 : 
						int LA343_68 = input.LA(1);
						 
						int index343_68 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_68);
						if ( s>=0 ) return s;
						break;

					case 55 : 
						int LA343_71 = input.LA(1);
						 
						int index343_71 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred46_Css3()) ) {s = 76;}
						else if ( (synpred47_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index343_71);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 343, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA357_eotS =
		"\116\uffff";
	static final String DFA357_eofS =
		"\1\2\115\uffff";
	static final String DFA357_minS =
		"\1\5\1\0\13\uffff\1\0\34\uffff\1\0\10\uffff\1\0\30\uffff\1\0\1\uffff";
	static final String DFA357_maxS =
		"\1\u0098\1\0\13\uffff\1\0\34\uffff\1\0\10\uffff\1\0\30\uffff\1\0\1\uffff";
	static final String DFA357_acceptS =
		"\2\uffff\1\2\112\uffff\1\1";
	static final String DFA357_specialS =
		"\1\0\1\1\13\uffff\1\2\34\uffff\1\3\10\uffff\1\4\30\uffff\1\5\1\uffff}>";
	static final String[] DFA357_transitionS = {
			"\3\2\2\uffff\5\2\3\uffff\3\2\1\114\1\uffff\4\2\2\uffff\3\2\1\uffff\1"+
			"\2\3\uffff\1\2\1\uffff\2\2\1\uffff\3\2\1\uffff\2\2\3\uffff\3\2\5\uffff"+
			"\13\2\1\uffff\1\2\1\uffff\1\2\1\15\1\2\5\uffff\1\2\1\114\3\uffff\2\2"+
			"\3\uffff\4\2\1\52\2\uffff\1\2\1\uffff\6\2\1\uffff\6\2\2\uffff\11\2\1"+
			"\uffff\6\2\1\115\1\63\2\2\1\uffff\7\2\2\uffff\2\2\2\uffff\1\2\1\uffff"+
			"\1\2\1\1",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			""
	};

	static final short[] DFA357_eot = DFA.unpackEncodedString(DFA357_eotS);
	static final short[] DFA357_eof = DFA.unpackEncodedString(DFA357_eofS);
	static final char[] DFA357_min = DFA.unpackEncodedStringToUnsignedChars(DFA357_minS);
	static final char[] DFA357_max = DFA.unpackEncodedStringToUnsignedChars(DFA357_maxS);
	static final short[] DFA357_accept = DFA.unpackEncodedString(DFA357_acceptS);
	static final short[] DFA357_special = DFA.unpackEncodedString(DFA357_specialS);
	static final short[][] DFA357_transition;

	static {
		int numStates = DFA357_transitionS.length;
		DFA357_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA357_transition[i] = DFA.unpackEncodedString(DFA357_transitionS[i]);
		}
	}

	protected class DFA357 extends DFA {

		public DFA357(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 357;
			this.eot = DFA357_eot;
			this.eof = DFA357_eof;
			this.min = DFA357_min;
			this.max = DFA357_max;
			this.accept = DFA357_accept;
			this.special = DFA357_special;
			this.transition = DFA357_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1171:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA357_0 = input.LA(1);
						 
						int index357_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA357_0==WS) ) {s = 1;}
						else if ( (LA357_0==EOF||(LA357_0 >= ANGLE && LA357_0 <= AT_SIGN)||(LA357_0 >= BOTTOMCENTER_SYM && LA357_0 <= BOTTOMRIGHT_SYM)||(LA357_0 >= CHARSET_SYM && LA357_0 <= COMMA)||(LA357_0 >= COUNTER_STYLE_SYM && LA357_0 <= CP_NOT_EQ)||(LA357_0 >= DCOLON && LA357_0 <= DOT)||LA357_0==EMS||LA357_0==EXS||(LA357_0 >= FONT_FACE_SYM && LA357_0 <= FREQ)||(LA357_0 >= GEN && LA357_0 <= GREATER_OR_EQ)||(LA357_0 >= HASH && LA357_0 <= HASH_SYMBOL)||(LA357_0 >= IDENT && LA357_0 <= IMPORT_SYM)||(LA357_0 >= LBRACE && LA357_0 <= LESS_REST)||LA357_0==LPAREN||LA357_0==MEDIA_SYM||LA357_0==MOZ_DOCUMENT_SYM||LA357_0==NAMESPACE_SYM||(LA357_0 >= NOT && LA357_0 <= NUMBER)||(LA357_0 >= PAGE_SYM && LA357_0 <= PIPE)||LA357_0==RBRACE||(LA357_0 >= REM && LA357_0 <= RPAREN)||(LA357_0 >= SASS_AT_ROOT && LA357_0 <= SASS_ELSE)||(LA357_0 >= SASS_EXTEND && LA357_0 <= SASS_MIXIN)||(LA357_0 >= SASS_RETURN && LA357_0 <= SEMI)||(LA357_0 >= STRING && LA357_0 <= SUPPORTS_SYM)||(LA357_0 >= TILDE && LA357_0 <= TOPRIGHT_SYM)||(LA357_0 >= URANGE && LA357_0 <= URI)||LA357_0==VARIABLE||LA357_0==WEBKIT_KEYFRAMES_SYM) ) {s = 2;}
						else if ( (LA357_0==MINUS) ) {s = 13;}
						else if ( (LA357_0==PLUS) ) {s = 42;}
						else if ( (LA357_0==STAR) ) {s = 51;}
						else if ( (LA357_0==COMMENT||LA357_0==NL) ) {s = 76;}
						else if ( (LA357_0==SOLIDUS) && (synpred49_Css3())) {s = 77;}
						 
						input.seek(index357_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA357_1 = input.LA(1);
						 
						int index357_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index357_1);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA357_13 = input.LA(1);
						 
						int index357_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index357_13);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA357_42 = input.LA(1);
						 
						int index357_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index357_42);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA357_51 = input.LA(1);
						 
						int index357_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index357_51);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA357_76 = input.LA(1);
						 
						int index357_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index357_76);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 357, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA362_eotS =
		"\6\uffff";
	static final String DFA362_eofS =
		"\6\uffff";
	static final String DFA362_minS =
		"\2\5\3\uffff\1\5";
	static final String DFA362_maxS =
		"\1\u0097\1\u0098\3\uffff\1\u0098";
	static final String DFA362_acceptS =
		"\2\uffff\1\1\1\2\1\3\1\uffff";
	static final String DFA362_specialS =
		"\6\uffff}>";
	static final String[] DFA362_transitionS = {
			"\3\2\2\uffff\5\2\3\uffff\1\2\4\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff"+
			"\1\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\3\uffff\1\2\1\3\1\2\6\uffff"+
			"\5\2\1\uffff\2\2\3\uffff\1\4\1\uffff\1\2\1\1\1\2\5\uffff\1\2\5\uffff"+
			"\1\2\3\uffff\3\2\1\uffff\1\1\4\uffff\5\2\2\uffff\3\2\1\uffff\2\2\2\uffff"+
			"\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\5\2\3\uffff\1\2\2\uffff\7\2\2\uffff"+
			"\2\2\2\uffff\1\2\1\uffff\1\2",
			"\3\2\2\uffff\5\2\3\uffff\1\2\2\uffff\1\5\1\uffff\1\2\6\uffff\1\2\2\uffff"+
			"\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\3\uffff\1\2\1\uffff"+
			"\1\2\6\uffff\5\2\1\uffff\2\2\3\uffff\1\4\1\uffff\1\2\1\uffff\1\2\5\uffff"+
			"\1\2\1\5\4\uffff\1\2\3\uffff\3\2\6\uffff\5\2\2\uffff\3\2\1\uffff\2\2"+
			"\2\uffff\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\5\2\3\uffff\1\2\2\uffff"+
			"\7\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\1\5",
			"",
			"",
			"",
			"\3\2\2\uffff\5\2\3\uffff\1\2\2\uffff\1\5\1\uffff\1\2\6\uffff\1\2\2\uffff"+
			"\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\3\uffff\1\2\1\uffff"+
			"\1\2\6\uffff\5\2\1\uffff\2\2\3\uffff\1\4\1\uffff\1\2\1\uffff\1\2\5\uffff"+
			"\1\2\1\5\4\uffff\1\2\3\uffff\3\2\6\uffff\5\2\2\uffff\3\2\1\uffff\2\2"+
			"\2\uffff\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\5\2\3\uffff\1\2\2\uffff"+
			"\7\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\1\5"
	};

	static final short[] DFA362_eot = DFA.unpackEncodedString(DFA362_eotS);
	static final short[] DFA362_eof = DFA.unpackEncodedString(DFA362_eofS);
	static final char[] DFA362_min = DFA.unpackEncodedStringToUnsignedChars(DFA362_minS);
	static final char[] DFA362_max = DFA.unpackEncodedStringToUnsignedChars(DFA362_maxS);
	static final short[] DFA362_accept = DFA.unpackEncodedString(DFA362_acceptS);
	static final short[] DFA362_special = DFA.unpackEncodedString(DFA362_specialS);
	static final short[][] DFA362_transition;

	static {
		int numStates = DFA362_transitionS.length;
		DFA362_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA362_transition[i] = DFA.unpackEncodedString(DFA362_transitionS[i]);
		}
	}

	protected class DFA362 extends DFA {

		public DFA362(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 362;
			this.eot = DFA362_eot;
			this.eof = DFA362_eof;
			this.min = DFA362_min;
			this.max = DFA362_max;
			this.accept = DFA362_accept;
			this.special = DFA362_special;
			this.transition = DFA362_transition;
		}
		@Override
		public String getDescription() {
			return "1176:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA369_eotS =
		"\4\uffff";
	static final String DFA369_eofS =
		"\4\uffff";
	static final String DFA369_minS =
		"\2\25\2\uffff";
	static final String DFA369_maxS =
		"\2\u0098\2\uffff";
	static final String DFA369_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA369_specialS =
		"\4\uffff}>";
	static final String[] DFA369_transitionS = {
			"\1\1\35\uffff\1\2\7\uffff\1\3\26\uffff\1\1\105\uffff\1\1",
			"\1\1\35\uffff\1\2\7\uffff\1\3\26\uffff\1\1\105\uffff\1\1",
			"",
			""
	};

	static final short[] DFA369_eot = DFA.unpackEncodedString(DFA369_eotS);
	static final short[] DFA369_eof = DFA.unpackEncodedString(DFA369_eofS);
	static final char[] DFA369_min = DFA.unpackEncodedStringToUnsignedChars(DFA369_minS);
	static final char[] DFA369_max = DFA.unpackEncodedStringToUnsignedChars(DFA369_maxS);
	static final short[] DFA369_accept = DFA.unpackEncodedString(DFA369_acceptS);
	static final short[] DFA369_special = DFA.unpackEncodedString(DFA369_specialS);
	static final short[][] DFA369_transition;

	static {
		int numStates = DFA369_transitionS.length;
		DFA369_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA369_transition[i] = DFA.unpackEncodedString(DFA369_transitionS[i]);
		}
	}

	protected class DFA369 extends DFA {

		public DFA369(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 369;
			this.eot = DFA369_eot;
			this.eof = DFA369_eof;
			this.min = DFA369_min;
			this.max = DFA369_max;
			this.accept = DFA369_accept;
			this.special = DFA369_special;
			this.transition = DFA369_transition;
		}
		@Override
		public String getDescription() {
			return "1192:107: ( ( ws )? less_mixin_guarded )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA373_eotS =
		"\4\uffff";
	static final String DFA373_eofS =
		"\4\uffff";
	static final String DFA373_minS =
		"\2\25\2\uffff";
	static final String DFA373_maxS =
		"\2\u0098\2\uffff";
	static final String DFA373_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA373_specialS =
		"\4\uffff}>";
	static final String[] DFA373_transitionS = {
			"\1\1\45\uffff\1\3\13\uffff\1\2\12\uffff\1\1\105\uffff\1\1",
			"\1\1\45\uffff\1\3\13\uffff\1\2\12\uffff\1\1\105\uffff\1\1",
			"",
			""
	};

	static final short[] DFA373_eot = DFA.unpackEncodedString(DFA373_eotS);
	static final short[] DFA373_eof = DFA.unpackEncodedString(DFA373_eofS);
	static final char[] DFA373_min = DFA.unpackEncodedStringToUnsignedChars(DFA373_minS);
	static final char[] DFA373_max = DFA.unpackEncodedStringToUnsignedChars(DFA373_maxS);
	static final short[] DFA373_accept = DFA.unpackEncodedString(DFA373_acceptS);
	static final short[] DFA373_special = DFA.unpackEncodedString(DFA373_specialS);
	static final short[][] DFA373_transition;

	static {
		int numStates = DFA373_transitionS.length;
		DFA373_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA373_transition[i] = DFA.unpackEncodedString(DFA373_transitionS[i]);
		}
	}

	protected class DFA373 extends DFA {

		public DFA373(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 373;
			this.eot = DFA373_eot;
			this.eof = DFA373_eof;
			this.min = DFA373_min;
			this.max = DFA373_max;
			this.accept = DFA373_accept;
			this.special = DFA373_special;
			this.transition = DFA373_transition;
		}
		@Override
		public String getDescription() {
			return "1194:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA388_eotS =
		"\4\uffff";
	static final String DFA388_eofS =
		"\2\3\2\uffff";
	static final String DFA388_minS =
		"\2\6\2\uffff";
	static final String DFA388_maxS =
		"\2\u0098\2\uffff";
	static final String DFA388_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA388_specialS =
		"\4\uffff}>";
	static final String[] DFA388_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\3\3\5\uffff\5\3\2\uffff\1\3\4\uffff"+
			"\1\2\1\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\3\3\5\uffff\5\3\2\uffff\1\3\4\uffff"+
			"\1\2\1\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\6\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"",
			""
	};

	static final short[] DFA388_eot = DFA.unpackEncodedString(DFA388_eotS);
	static final short[] DFA388_eof = DFA.unpackEncodedString(DFA388_eofS);
	static final char[] DFA388_min = DFA.unpackEncodedStringToUnsignedChars(DFA388_minS);
	static final char[] DFA388_max = DFA.unpackEncodedStringToUnsignedChars(DFA388_maxS);
	static final short[] DFA388_accept = DFA.unpackEncodedString(DFA388_acceptS);
	static final short[] DFA388_special = DFA.unpackEncodedString(DFA388_specialS);
	static final short[][] DFA388_transition;

	static {
		int numStates = DFA388_transitionS.length;
		DFA388_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA388_transition[i] = DFA.unpackEncodedString(DFA388_transitionS[i]);
		}
	}

	protected class DFA388 extends DFA {

		public DFA388(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 388;
			this.eot = DFA388_eot;
			this.eof = DFA388_eof;
			this.min = DFA388_min;
			this.max = DFA388_max;
			this.accept = DFA388_accept;
			this.special = DFA388_special;
			this.transition = DFA388_transition;
		}
		@Override
		public String getDescription() {
			return "1206:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA390_eotS =
		"\4\uffff";
	static final String DFA390_eofS =
		"\2\3\2\uffff";
	static final String DFA390_minS =
		"\2\6\2\uffff";
	static final String DFA390_maxS =
		"\2\u0098\2\uffff";
	static final String DFA390_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA390_specialS =
		"\4\uffff}>";
	static final String[] DFA390_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\3\3\5\uffff\1\2\4\3\2\uffff\1\3"+
			"\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3\3\uffff"+
			"\4\3\1\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff\6\3\1\uffff"+
			"\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\3\3\5\uffff\1\2\4\3\2\uffff\1\3"+
			"\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3\3\uffff"+
			"\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\6\3\1\uffff\3\3\1\uffff\6\3\1\uffff"+
			"\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA390_eot = DFA.unpackEncodedString(DFA390_eotS);
	static final short[] DFA390_eof = DFA.unpackEncodedString(DFA390_eofS);
	static final char[] DFA390_min = DFA.unpackEncodedStringToUnsignedChars(DFA390_minS);
	static final char[] DFA390_max = DFA.unpackEncodedStringToUnsignedChars(DFA390_maxS);
	static final short[] DFA390_accept = DFA.unpackEncodedString(DFA390_acceptS);
	static final short[] DFA390_special = DFA.unpackEncodedString(DFA390_specialS);
	static final short[][] DFA390_transition;

	static {
		int numStates = DFA390_transitionS.length;
		DFA390_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA390_transition[i] = DFA.unpackEncodedString(DFA390_transitionS[i]);
		}
	}

	protected class DFA390 extends DFA {

		public DFA390(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 390;
			this.eot = DFA390_eot;
			this.eof = DFA390_eof;
			this.min = DFA390_min;
			this.max = DFA390_max;
			this.accept = DFA390_accept;
			this.special = DFA390_special;
			this.transition = DFA390_transition;
		}
		@Override
		public String getDescription() {
			return "1206:102: ( ( ws )? cp_mixin_block )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA403_eotS =
		"\12\uffff";
	static final String DFA403_eofS =
		"\12\uffff";
	static final String DFA403_minS =
		"\4\5\1\uffff\1\5\1\uffff\1\5\1\63\1\5";
	static final String DFA403_maxS =
		"\1\u0097\3\u0098\1\uffff\1\u0098\1\uffff\1\u0098\1\177\1\u0098";
	static final String DFA403_acceptS =
		"\4\uffff\1\2\1\uffff\1\1\3\uffff";
	static final String DFA403_specialS =
		"\12\uffff}>";
	static final String[] DFA403_transitionS = {
			"\1\4\1\1\1\4\2\uffff\5\1\3\uffff\1\1\4\uffff\1\1\6\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\1\1\1\4\1\uffff\1\4\3\uffff\2\4\3\uffff\1\3"+
			"\1\4\1\1\5\uffff\2\4\3\1\1\4\1\uffff\2\4\3\uffff\1\4\1\uffff\1\1\1\4"+
			"\1\1\5\uffff\1\1\4\uffff\2\4\3\uffff\1\1\2\4\1\uffff\1\4\4\uffff\2\4"+
			"\3\1\2\uffff\3\1\1\uffff\2\1\2\uffff\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff"+
			"\2\1\1\2\2\1\3\uffff\1\4\2\uffff\2\4\5\1\2\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\1",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\6\1\4\1\5\1\uffff\4\4\3\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\2\4\3\uffff\3\4\6\uffff"+
			"\11\4\2\uffff\1\4\1\uffff\3\4\5\uffff\1\4\1\5\3\uffff\2\4\3\uffff\3\4"+
			"\1\uffff\1\4\4\uffff\6\4\1\uffff\3\4\1\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\3\4\1\uffff\3\4\1\uffff\11\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\4\1\5",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\6\1\4\1\7\1\uffff\4\4\3\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\2\4\3\uffff\3\4\6\uffff"+
			"\11\4\2\uffff\1\4\1\uffff\3\4\5\uffff\1\4\1\7\3\uffff\2\4\3\uffff\3\4"+
			"\1\uffff\1\4\4\uffff\6\4\1\uffff\3\4\1\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\3\4\1\uffff\3\4\1\uffff\11\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\4\1\7",
			"\3\4\2\uffff\5\4\3\uffff\4\4\1\uffff\4\4\3\uffff\1\4\1\10\1\uffff\1"+
			"\4\3\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\2\4\3\uffff\3\4\6\uffff"+
			"\11\4\2\uffff\1\4\1\uffff\3\4\5\uffff\2\4\3\uffff\2\4\3\uffff\3\4\1\uffff"+
			"\1\4\4\uffff\6\4\1\uffff\3\4\1\uffff\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff"+
			"\3\4\1\uffff\11\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff\2\4",
			"",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\6\1\4\1\5\1\uffff\4\4\3\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\2\4\3\uffff\3\4\6\uffff"+
			"\11\4\2\uffff\1\4\1\uffff\3\4\5\uffff\1\4\1\5\3\uffff\2\4\3\uffff\3\4"+
			"\1\uffff\1\4\4\uffff\6\4\1\uffff\3\4\1\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\3\4\1\uffff\3\4\1\uffff\11\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\4\1\5",
			"",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\6\1\4\1\7\1\uffff\4\4\3\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\2\4\3\uffff\3\4\6\uffff"+
			"\11\4\2\uffff\1\4\1\uffff\3\4\5\uffff\1\4\1\7\3\uffff\2\4\3\uffff\3\4"+
			"\1\uffff\1\4\4\uffff\6\4\1\uffff\3\4\1\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\3\4\1\uffff\3\4\1\uffff\11\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\4\1\7",
			"\1\4\113\uffff\1\11",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\6\1\4\1\7\1\uffff\4\4\3\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\2\4\3\uffff\3\4\6\uffff"+
			"\11\4\2\uffff\1\4\1\uffff\3\4\5\uffff\1\4\1\7\3\uffff\2\4\3\uffff\3\4"+
			"\1\uffff\1\4\4\uffff\6\4\1\uffff\3\4\1\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\3\4\1\uffff\3\4\1\uffff\11\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\4\1\7"
	};

	static final short[] DFA403_eot = DFA.unpackEncodedString(DFA403_eotS);
	static final short[] DFA403_eof = DFA.unpackEncodedString(DFA403_eofS);
	static final char[] DFA403_min = DFA.unpackEncodedStringToUnsignedChars(DFA403_minS);
	static final char[] DFA403_max = DFA.unpackEncodedStringToUnsignedChars(DFA403_maxS);
	static final short[] DFA403_accept = DFA.unpackEncodedString(DFA403_acceptS);
	static final short[] DFA403_special = DFA.unpackEncodedString(DFA403_specialS);
	static final short[][] DFA403_transition;

	static {
		int numStates = DFA403_transitionS.length;
		DFA403_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA403_transition[i] = DFA.unpackEncodedString(DFA403_transitionS[i]);
		}
	}

	protected class DFA403 extends DFA {

		public DFA403(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 403;
			this.eot = DFA403_eot;
			this.eof = DFA403_eof;
			this.min = DFA403_min;
			this.max = DFA403_max;
			this.accept = DFA403_accept;
			this.special = DFA403_special;
			this.transition = DFA403_transition;
		}
		@Override
		public String getDescription() {
			return "1232:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA406_eotS =
		"\5\uffff";
	static final String DFA406_eofS =
		"\5\uffff";
	static final String DFA406_minS =
		"\1\24\1\6\1\uffff\1\6\1\uffff";
	static final String DFA406_maxS =
		"\1\u0082\1\u0098\1\uffff\1\u0098\1\uffff";
	static final String DFA406_acceptS =
		"\2\uffff\1\2\1\uffff\1\1";
	static final String DFA406_specialS =
		"\5\uffff}>";
	static final String[] DFA406_transitionS = {
			"\1\1\3\uffff\1\2\54\uffff\1\2\43\uffff\1\2\30\uffff\1\1",
			"\1\4\3\uffff\5\4\3\uffff\1\4\2\uffff\1\3\1\uffff\1\4\1\2\16\uffff\1"+
			"\4\13\uffff\1\4\1\uffff\1\4\7\uffff\3\4\5\uffff\1\2\3\uffff\1\4\1\uffff"+
			"\1\4\5\uffff\1\4\1\3\10\uffff\1\4\12\uffff\3\4\1\2\1\uffff\3\4\1\uffff"+
			"\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\10\uffff\5\4\10"+
			"\uffff\1\4\1\3",
			"",
			"\1\4\3\uffff\5\4\3\uffff\1\4\2\uffff\1\3\1\uffff\1\4\1\2\16\uffff\1"+
			"\4\13\uffff\1\4\1\uffff\1\4\7\uffff\3\4\5\uffff\1\2\3\uffff\1\4\1\uffff"+
			"\1\4\5\uffff\1\4\1\3\10\uffff\1\4\12\uffff\3\4\1\2\1\uffff\3\4\1\uffff"+
			"\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\10\uffff\5\4\10"+
			"\uffff\1\4\1\3",
			""
	};

	static final short[] DFA406_eot = DFA.unpackEncodedString(DFA406_eotS);
	static final short[] DFA406_eof = DFA.unpackEncodedString(DFA406_eofS);
	static final char[] DFA406_min = DFA.unpackEncodedStringToUnsignedChars(DFA406_minS);
	static final char[] DFA406_max = DFA.unpackEncodedStringToUnsignedChars(DFA406_maxS);
	static final short[] DFA406_accept = DFA.unpackEncodedString(DFA406_acceptS);
	static final short[] DFA406_special = DFA.unpackEncodedString(DFA406_specialS);
	static final short[][] DFA406_transition;

	static {
		int numStates = DFA406_transitionS.length;
		DFA406_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA406_transition[i] = DFA.unpackEncodedString(DFA406_transitionS[i]);
		}
	}

	protected class DFA406 extends DFA {

		public DFA406(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 406;
			this.eot = DFA406_eot;
			this.eof = DFA406_eof;
			this.min = DFA406_min;
			this.max = DFA406_max;
			this.accept = DFA406_accept;
			this.special = DFA406_special;
			this.transition = DFA406_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1247:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA422_eotS =
		"\4\uffff";
	static final String DFA422_eofS =
		"\4\uffff";
	static final String DFA422_minS =
		"\2\24\2\uffff";
	static final String DFA422_maxS =
		"\2\u0098\2\uffff";
	static final String DFA422_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA422_specialS =
		"\4\uffff}>";
	static final String[] DFA422_transitionS = {
			"\1\3\1\1\35\uffff\1\3\7\uffff\1\2\26\uffff\1\1\105\uffff\1\1",
			"\1\3\1\1\35\uffff\1\3\7\uffff\1\2\26\uffff\1\1\105\uffff\1\1",
			"",
			""
	};

	static final short[] DFA422_eot = DFA.unpackEncodedString(DFA422_eotS);
	static final short[] DFA422_eof = DFA.unpackEncodedString(DFA422_eofS);
	static final char[] DFA422_min = DFA.unpackEncodedStringToUnsignedChars(DFA422_minS);
	static final char[] DFA422_max = DFA.unpackEncodedStringToUnsignedChars(DFA422_maxS);
	static final short[] DFA422_accept = DFA.unpackEncodedString(DFA422_acceptS);
	static final short[] DFA422_special = DFA.unpackEncodedString(DFA422_specialS);
	static final short[][] DFA422_transition;

	static {
		int numStates = DFA422_transitionS.length;
		DFA422_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA422_transition[i] = DFA.unpackEncodedString(DFA422_transitionS[i]);
		}
	}

	protected class DFA422 extends DFA {

		public DFA422(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 422;
			this.eot = DFA422_eot;
			this.eof = DFA422_eof;
			this.min = DFA422_min;
			this.max = DFA422_max;
			this.accept = DFA422_accept;
			this.special = DFA422_special;
			this.transition = DFA422_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1263:34: ( ( ws )? ( COMMA | key_and ) ( ws )? less_condition )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA451_eotS =
		"\4\uffff";
	static final String DFA451_eofS =
		"\4\uffff";
	static final String DFA451_minS =
		"\1\24\1\6\2\uffff";
	static final String DFA451_maxS =
		"\2\u0098\2\uffff";
	static final String DFA451_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA451_specialS =
		"\4\uffff}>";
	static final String[] DFA451_transitionS = {
			"\1\3\1\1\74\uffff\1\1\17\uffff\1\2\6\uffff\1\2\30\uffff\1\2\25\uffff"+
			"\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\3\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2\2\uffff\1\2"+
			"\3\uffff\4\2\1\uffff\3\2\1\uffff\2\2\1\uffff\6\2\1\uffff\12\2\1\uffff"+
			"\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff\1\2\1\1",
			"",
			""
	};

	static final short[] DFA451_eot = DFA.unpackEncodedString(DFA451_eotS);
	static final short[] DFA451_eof = DFA.unpackEncodedString(DFA451_eofS);
	static final char[] DFA451_min = DFA.unpackEncodedStringToUnsignedChars(DFA451_minS);
	static final char[] DFA451_max = DFA.unpackEncodedStringToUnsignedChars(DFA451_maxS);
	static final short[] DFA451_accept = DFA.unpackEncodedString(DFA451_acceptS);
	static final short[] DFA451_special = DFA.unpackEncodedString(DFA451_specialS);
	static final short[][] DFA451_transition;

	static {
		int numStates = DFA451_transitionS.length;
		DFA451_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA451_transition[i] = DFA.unpackEncodedString(DFA451_transitionS[i]);
		}
	}

	protected class DFA451 extends DFA {

		public DFA451(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 451;
			this.eot = DFA451_eot;
			this.eof = DFA451_eof;
			this.min = DFA451_min;
			this.max = DFA451_max;
			this.accept = DFA451_accept;
			this.special = DFA451_special;
			this.transition = DFA451_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1339:43: ( ( ws )? COMMA ( ws )? simpleSelectorSequence )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA452_eotS =
		"\4\uffff";
	static final String DFA452_eofS =
		"\4\uffff";
	static final String DFA452_minS =
		"\1\25\1\6\2\uffff";
	static final String DFA452_maxS =
		"\2\u0098\2\uffff";
	static final String DFA452_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA452_specialS =
		"\4\uffff}>";
	static final String[] DFA452_transitionS = {
			"\1\1\74\uffff\1\1\17\uffff\1\2\6\uffff\1\2\30\uffff\1\2\25\uffff\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2\2\uffff\1\2"+
			"\3\uffff\4\2\1\uffff\3\2\1\uffff\2\2\1\uffff\6\2\1\uffff\3\2\1\3\6\2"+
			"\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff"+
			"\1\2\1\1",
			"",
			""
	};

	static final short[] DFA452_eot = DFA.unpackEncodedString(DFA452_eotS);
	static final short[] DFA452_eof = DFA.unpackEncodedString(DFA452_eofS);
	static final char[] DFA452_min = DFA.unpackEncodedStringToUnsignedChars(DFA452_minS);
	static final char[] DFA452_max = DFA.unpackEncodedStringToUnsignedChars(DFA452_maxS);
	static final short[] DFA452_accept = DFA.unpackEncodedString(DFA452_acceptS);
	static final short[] DFA452_special = DFA.unpackEncodedString(DFA452_specialS);
	static final short[][] DFA452_transition;

	static {
		int numStates = DFA452_transitionS.length;
		DFA452_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA452_transition[i] = DFA.unpackEncodedString(DFA452_transitionS[i]);
		}
	}

	protected class DFA452 extends DFA {

		public DFA452(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 452;
			this.eot = DFA452_eot;
			this.eof = DFA452_eof;
			this.min = DFA452_min;
			this.max = DFA452_max;
			this.accept = DFA452_accept;
			this.special = DFA452_special;
			this.transition = DFA452_transition;
		}
		@Override
		public String getDescription() {
			return "1339:83: ( ws SASS_OPTIONAL )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA458_eotS =
		"\10\uffff";
	static final String DFA458_eofS =
		"\2\4\6\uffff";
	static final String DFA458_minS =
		"\2\6\1\23\2\uffff\3\23";
	static final String DFA458_maxS =
		"\3\u0098\2\uffff\3\u0098";
	static final String DFA458_acceptS =
		"\3\uffff\1\1\1\2\3\uffff";
	static final String DFA458_specialS =
		"\10\uffff}>";
	static final String[] DFA458_transitionS = {
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\1\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\3\uffff\1\4\1\uffff\1\4\6\uffff\4\4\2\uffff"+
			"\1\4\6\uffff\3\4\5\uffff\1\4\1\1\10\uffff\1\4\2\uffff\2\4\2\uffff\1\4"+
			"\3\uffff\4\4\1\uffff\3\4\1\uffff\1\4\1\2\1\3\1\uffff\5\4\1\uffff\3\4"+
			"\1\uffff\6\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4\6\uffff"+
			"\1\4\1\uffff\1\4\1\1",
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\1\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\3\uffff\1\4\1\uffff\1\4\6\uffff\4\4\2\uffff"+
			"\1\4\6\uffff\3\4\5\uffff\1\4\1\1\10\uffff\1\4\2\uffff\2\4\2\uffff\1\4"+
			"\3\uffff\4\4\1\uffff\3\4\1\uffff\1\4\1\5\1\3\6\4\1\uffff\3\4\1\uffff"+
			"\6\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4\6\uffff\1\4\1\uffff"+
			"\1\4\1\1",
			"\1\4\1\uffff\1\6\35\uffff\1\3\7\uffff\1\3\26\uffff\1\6\105\uffff\1\6",
			"",
			"",
			"\1\4\1\uffff\1\7\35\uffff\1\3\7\uffff\1\3\26\uffff\1\7\105\uffff\1\7",
			"\1\4\1\uffff\1\6\35\uffff\1\3\7\uffff\1\3\26\uffff\1\6\105\uffff\1\6",
			"\1\4\1\uffff\1\7\35\uffff\1\3\7\uffff\1\3\26\uffff\1\7\105\uffff\1\7"
	};

	static final short[] DFA458_eot = DFA.unpackEncodedString(DFA458_eotS);
	static final short[] DFA458_eof = DFA.unpackEncodedString(DFA458_eofS);
	static final char[] DFA458_min = DFA.unpackEncodedStringToUnsignedChars(DFA458_minS);
	static final char[] DFA458_max = DFA.unpackEncodedStringToUnsignedChars(DFA458_maxS);
	static final short[] DFA458_accept = DFA.unpackEncodedString(DFA458_acceptS);
	static final short[] DFA458_special = DFA.unpackEncodedString(DFA458_specialS);
	static final short[][] DFA458_transition;

	static {
		int numStates = DFA458_transitionS.length;
		DFA458_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA458_transition[i] = DFA.unpackEncodedString(DFA458_transitionS[i]);
		}
	}

	protected class DFA458 extends DFA {

		public DFA458(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 458;
			this.eot = DFA458_eot;
			this.eof = DFA458_eof;
			this.min = DFA458_min;
			this.max = DFA458_max;
			this.accept = DFA458_accept;
			this.special = DFA458_special;
			this.transition = DFA458_transition;
		}
		@Override
		public String getDescription() {
			return "1364:64: ( ( ws )? sass_else )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA466_eotS =
		"\5\uffff";
	static final String DFA466_eofS =
		"\5\uffff";
	static final String DFA466_minS =
		"\1\160\1\25\1\uffff\1\25\1\uffff";
	static final String DFA466_maxS =
		"\1\161\1\u0098\1\uffff\1\u0098\1\uffff";
	static final String DFA466_acceptS =
		"\2\uffff\1\2\1\uffff\1\1";
	static final String DFA466_specialS =
		"\5\uffff}>";
	static final String[] DFA466_transitionS = {
			"\1\1\1\2",
			"\1\3\35\uffff\1\2\7\uffff\1\4\26\uffff\1\3\105\uffff\1\3",
			"",
			"\1\3\35\uffff\1\2\7\uffff\1\4\26\uffff\1\3\105\uffff\1\3",
			""
	};

	static final short[] DFA466_eot = DFA.unpackEncodedString(DFA466_eotS);
	static final short[] DFA466_eof = DFA.unpackEncodedString(DFA466_eofS);
	static final char[] DFA466_min = DFA.unpackEncodedStringToUnsignedChars(DFA466_minS);
	static final char[] DFA466_max = DFA.unpackEncodedStringToUnsignedChars(DFA466_maxS);
	static final short[] DFA466_accept = DFA.unpackEncodedString(DFA466_acceptS);
	static final short[] DFA466_special = DFA.unpackEncodedString(DFA466_specialS);
	static final short[][] DFA466_transition;

	static {
		int numStates = DFA466_transitionS.length;
		DFA466_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA466_transition[i] = DFA.unpackEncodedString(DFA466_transitionS[i]);
		}
	}

	protected class DFA466 extends DFA {

		public DFA466(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 466;
			this.eot = DFA466_eot;
			this.eof = DFA466_eof;
			this.min = DFA466_min;
			this.max = DFA466_max;
			this.accept = DFA466_accept;
			this.special = DFA466_special;
			this.transition = DFA466_transition;
		}
		@Override
		public String getDescription() {
			return "1367:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | ( ( SASS_ELSE ( ws )? {...}? IDENT ) | SASS_ELSEIF ) ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA465_eotS =
		"\10\uffff";
	static final String DFA465_eofS =
		"\2\4\6\uffff";
	static final String DFA465_minS =
		"\2\6\1\23\2\uffff\3\23";
	static final String DFA465_maxS =
		"\3\u0098\2\uffff\3\u0098";
	static final String DFA465_acceptS =
		"\3\uffff\1\1\1\2\3\uffff";
	static final String DFA465_specialS =
		"\10\uffff}>";
	static final String[] DFA465_transitionS = {
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\1\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\3\uffff\1\4\1\uffff\1\4\6\uffff\4\4\2\uffff"+
			"\1\4\6\uffff\3\4\5\uffff\1\4\1\1\10\uffff\1\4\2\uffff\2\4\2\uffff\1\4"+
			"\3\uffff\4\4\1\uffff\3\4\1\uffff\1\4\1\2\1\3\1\uffff\5\4\1\uffff\3\4"+
			"\1\uffff\6\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4\6\uffff"+
			"\1\4\1\uffff\1\4\1\1",
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\1\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\3\uffff\1\4\1\uffff\1\4\6\uffff\4\4\2\uffff"+
			"\1\4\6\uffff\3\4\5\uffff\1\4\1\1\10\uffff\1\4\2\uffff\2\4\2\uffff\1\4"+
			"\3\uffff\4\4\1\uffff\3\4\1\uffff\1\4\1\5\1\3\6\4\1\uffff\3\4\1\uffff"+
			"\6\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4\6\uffff\1\4\1\uffff"+
			"\1\4\1\1",
			"\1\4\1\uffff\1\6\35\uffff\1\3\7\uffff\1\3\26\uffff\1\6\105\uffff\1\6",
			"",
			"",
			"\1\4\1\uffff\1\7\35\uffff\1\3\7\uffff\1\3\26\uffff\1\7\105\uffff\1\7",
			"\1\4\1\uffff\1\6\35\uffff\1\3\7\uffff\1\3\26\uffff\1\6\105\uffff\1\6",
			"\1\4\1\uffff\1\7\35\uffff\1\3\7\uffff\1\3\26\uffff\1\7\105\uffff\1\7"
	};

	static final short[] DFA465_eot = DFA.unpackEncodedString(DFA465_eotS);
	static final short[] DFA465_eof = DFA.unpackEncodedString(DFA465_eofS);
	static final char[] DFA465_min = DFA.unpackEncodedStringToUnsignedChars(DFA465_minS);
	static final char[] DFA465_max = DFA.unpackEncodedStringToUnsignedChars(DFA465_maxS);
	static final short[] DFA465_accept = DFA.unpackEncodedString(DFA465_acceptS);
	static final short[] DFA465_special = DFA.unpackEncodedString(DFA465_specialS);
	static final short[][] DFA465_transition;

	static {
		int numStates = DFA465_transitionS.length;
		DFA465_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA465_transition[i] = DFA.unpackEncodedString(DFA465_transitionS[i]);
		}
	}

	protected class DFA465 extends DFA {

		public DFA465(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 465;
			this.eot = DFA465_eot;
			this.eof = DFA465_eof;
			this.min = DFA465_min;
			this.max = DFA465_max;
			this.accept = DFA465_accept;
			this.special = DFA465_special;
			this.transition = DFA465_transition;
		}
		@Override
		public String getDescription() {
			return "1371:128: ( ( ws )? sass_else )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA469_eotS =
		"\4\uffff";
	static final String DFA469_eofS =
		"\4\uffff";
	static final String DFA469_minS =
		"\2\5\2\uffff";
	static final String DFA469_maxS =
		"\2\u0098\2\uffff";
	static final String DFA469_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA469_specialS =
		"\4\uffff}>";
	static final String[] DFA469_transitionS = {
			"\3\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\6\uffff\1\3"+
			"\2\uffff\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\3\uffff"+
			"\3\3\5\uffff\6\3\1\uffff\2\3\3\uffff\1\3\1\uffff\3\3\5\uffff\1\3\1\1"+
			"\3\uffff\2\3\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff"+
			"\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\3\uffff\1\3\2\uffff"+
			"\7\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"\3\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\6\uffff\1\3"+
			"\2\uffff\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\3\uffff"+
			"\3\3\5\uffff\6\3\1\uffff\2\3\3\uffff\1\3\1\uffff\3\3\5\uffff\1\3\1\1"+
			"\3\uffff\2\3\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff"+
			"\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\3\uffff\1\3\2\uffff"+
			"\7\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA469_eot = DFA.unpackEncodedString(DFA469_eotS);
	static final short[] DFA469_eof = DFA.unpackEncodedString(DFA469_eofS);
	static final char[] DFA469_min = DFA.unpackEncodedStringToUnsignedChars(DFA469_minS);
	static final char[] DFA469_max = DFA.unpackEncodedStringToUnsignedChars(DFA469_maxS);
	static final short[] DFA469_accept = DFA.unpackEncodedString(DFA469_acceptS);
	static final short[] DFA469_special = DFA.unpackEncodedString(DFA469_specialS);
	static final short[][] DFA469_transition;

	static {
		int numStates = DFA469_transitionS.length;
		DFA469_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA469_transition[i] = DFA.unpackEncodedString(DFA469_transitionS[i]);
		}
	}

	protected class DFA469 extends DFA {

		public DFA469(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 469;
			this.eot = DFA469_eot;
			this.eof = DFA469_eof;
			this.min = DFA469_min;
			this.max = DFA469_max;
			this.accept = DFA469_accept;
			this.special = DFA469_special;
			this.transition = DFA469_transition;
		}
		@Override
		public String getDescription() {
			return "1386:102: ( ( ws )? COMMA )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA474_eotS =
		"\4\uffff";
	static final String DFA474_eofS =
		"\4\uffff";
	static final String DFA474_minS =
		"\2\24\2\uffff";
	static final String DFA474_maxS =
		"\2\u0098\2\uffff";
	static final String DFA474_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA474_specialS =
		"\1\0\1\1\2\uffff}>";
	static final String[] DFA474_transitionS = {
			"\1\2\1\1\74\uffff\1\1\105\uffff\1\1",
			"\1\2\1\1\35\uffff\1\3\36\uffff\1\1\105\uffff\1\1",
			"",
			""
	};

	static final short[] DFA474_eot = DFA.unpackEncodedString(DFA474_eotS);
	static final short[] DFA474_eof = DFA.unpackEncodedString(DFA474_eofS);
	static final char[] DFA474_min = DFA.unpackEncodedStringToUnsignedChars(DFA474_minS);
	static final char[] DFA474_max = DFA.unpackEncodedStringToUnsignedChars(DFA474_maxS);
	static final short[] DFA474_accept = DFA.unpackEncodedString(DFA474_acceptS);
	static final short[] DFA474_special = DFA.unpackEncodedString(DFA474_specialS);
	static final short[][] DFA474_transition;

	static {
		int numStates = DFA474_transitionS.length;
		DFA474_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA474_transition[i] = DFA.unpackEncodedString(DFA474_transitionS[i]);
		}
	}

	protected class DFA474 extends DFA {

		public DFA474(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 474;
			this.eot = DFA474_eot;
			this.eof = DFA474_eof;
			this.min = DFA474_min;
			this.max = DFA474_max;
			this.accept = DFA474_accept;
			this.special = DFA474_special;
			this.transition = DFA474_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1391:17: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA474_0 = input.LA(1);
						 
						int index474_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA474_0==COMMENT||LA474_0==NL||LA474_0==WS) ) {s = 1;}
						else if ( (LA474_0==COMMA) && (synpred54_Css3())) {s = 2;}
						 
						input.seek(index474_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA474_1 = input.LA(1);
						 
						int index474_1 = input.index();
						input.rewind();
						s = -1;
						if ( (LA474_1==IDENT) ) {s = 3;}
						else if ( (LA474_1==COMMENT||LA474_1==NL||LA474_1==WS) ) {s = 1;}
						else if ( (LA474_1==COMMA) && (synpred54_Css3())) {s = 2;}
						 
						input.seek(index474_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 474, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA494_eotS =
		"\4\uffff";
	static final String DFA494_eofS =
		"\4\uffff";
	static final String DFA494_minS =
		"\2\25\2\uffff";
	static final String DFA494_maxS =
		"\2\u0098\2\uffff";
	static final String DFA494_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA494_specialS =
		"\4\uffff}>";
	static final String[] DFA494_transitionS = {
			"\1\1\36\uffff\1\2\35\uffff\1\1\57\uffff\1\3\25\uffff\1\1",
			"\1\1\36\uffff\1\2\35\uffff\1\1\57\uffff\1\3\25\uffff\1\1",
			"",
			""
	};

	static final short[] DFA494_eot = DFA.unpackEncodedString(DFA494_eotS);
	static final short[] DFA494_eof = DFA.unpackEncodedString(DFA494_eofS);
	static final char[] DFA494_min = DFA.unpackEncodedStringToUnsignedChars(DFA494_minS);
	static final char[] DFA494_max = DFA.unpackEncodedStringToUnsignedChars(DFA494_maxS);
	static final short[] DFA494_accept = DFA.unpackEncodedString(DFA494_acceptS);
	static final short[] DFA494_special = DFA.unpackEncodedString(DFA494_specialS);
	static final short[][] DFA494_transition;

	static {
		int numStates = DFA494_transitionS.length;
		DFA494_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA494_transition[i] = DFA.unpackEncodedString(DFA494_transitionS[i]);
		}
	}

	protected class DFA494 extends DFA {

		public DFA494(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 494;
			this.eot = DFA494_eot;
			this.eof = DFA494_eof;
			this.min = DFA494_min;
			this.max = DFA494_max;
			this.accept = DFA494_accept;
			this.special = DFA494_special;
			this.transition = DFA494_transition;
		}
		@Override
		public String getDescription() {
			return "415:22: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA501_eotS =
		"\6\uffff";
	static final String DFA501_eofS =
		"\6\uffff";
	static final String DFA501_minS =
		"\1\7\1\25\1\uffff\1\7\2\uffff";
	static final String DFA501_maxS =
		"\1\u0088\1\u0098\1\uffff\1\u0098\2\uffff";
	static final String DFA501_acceptS =
		"\2\uffff\1\3\1\uffff\1\1\1\2";
	static final String DFA501_specialS =
		"\6\uffff}>";
	static final String[] DFA501_transitionS = {
			"\1\2\13\uffff\1\2\11\uffff\3\2\12\uffff\2\2\2\uffff\2\2\3\uffff\1\2\10"+
			"\uffff\1\2\5\uffff\1\2\7\uffff\1\2\23\uffff\2\2\13\uffff\1\1\10\uffff"+
			"\1\2\17\uffff\1\2\3\uffff\1\2",
			"\1\3\45\uffff\1\4\26\uffff\1\3\105\uffff\1\3",
			"",
			"\1\4\13\uffff\1\4\1\uffff\1\3\7\uffff\3\4\12\uffff\2\4\2\uffff\2\4\3"+
			"\uffff\1\4\7\uffff\2\4\5\uffff\1\4\4\uffff\1\5\2\uffff\1\4\7\uffff\1"+
			"\3\13\uffff\2\4\24\uffff\1\4\17\uffff\1\4\3\uffff\1\4\17\uffff\1\3",
			"",
			""
	};

	static final short[] DFA501_eot = DFA.unpackEncodedString(DFA501_eotS);
	static final short[] DFA501_eof = DFA.unpackEncodedString(DFA501_eofS);
	static final char[] DFA501_min = DFA.unpackEncodedStringToUnsignedChars(DFA501_minS);
	static final char[] DFA501_max = DFA.unpackEncodedStringToUnsignedChars(DFA501_maxS);
	static final short[] DFA501_accept = DFA.unpackEncodedString(DFA501_acceptS);
	static final short[] DFA501_special = DFA.unpackEncodedString(DFA501_specialS);
	static final short[][] DFA501_transition;

	static {
		int numStates = DFA501_transitionS.length;
		DFA501_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA501_transition[i] = DFA.unpackEncodedString(DFA501_transitionS[i]);
		}
	}

	protected class DFA501 extends DFA {

		public DFA501(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 501;
			this.eot = DFA501_eot;
			this.eof = DFA501_eof;
			this.min = DFA501_min;
			this.max = DFA501_max;
			this.accept = DFA501_accept;
			this.special = DFA501_special;
			this.transition = DFA501_transition;
		}
		@Override
		public String getDescription() {
			return "417:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA496_eotS =
		"\4\uffff";
	static final String DFA496_eofS =
		"\4\uffff";
	static final String DFA496_minS =
		"\1\25\1\7\2\uffff";
	static final String DFA496_maxS =
		"\2\u0098\2\uffff";
	static final String DFA496_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA496_specialS =
		"\4\uffff}>";
	static final String[] DFA496_transitionS = {
			"\1\1\45\uffff\1\2\26\uffff\1\1\105\uffff\1\1",
			"\1\3\13\uffff\1\3\1\uffff\1\1\7\uffff\3\3\12\uffff\2\3\2\uffff\2\3\3"+
			"\uffff\1\3\7\uffff\1\2\1\3\5\uffff\1\3\7\uffff\1\3\7\uffff\1\1\13\uffff"+
			"\2\3\24\uffff\1\3\17\uffff\1\3\3\uffff\1\3\17\uffff\1\1",
			"",
			""
	};

	static final short[] DFA496_eot = DFA.unpackEncodedString(DFA496_eotS);
	static final short[] DFA496_eof = DFA.unpackEncodedString(DFA496_eofS);
	static final char[] DFA496_min = DFA.unpackEncodedStringToUnsignedChars(DFA496_minS);
	static final char[] DFA496_max = DFA.unpackEncodedStringToUnsignedChars(DFA496_maxS);
	static final short[] DFA496_accept = DFA.unpackEncodedString(DFA496_acceptS);
	static final short[] DFA496_special = DFA.unpackEncodedString(DFA496_specialS);
	static final short[][] DFA496_transition;

	static {
		int numStates = DFA496_transitionS.length;
		DFA496_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA496_transition[i] = DFA.unpackEncodedString(DFA496_transitionS[i]);
		}
	}

	protected class DFA496 extends DFA {

		public DFA496(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 496;
			this.eot = DFA496_eot;
			this.eof = DFA496_eof;
			this.min = DFA496_min;
			this.max = DFA496_max;
			this.accept = DFA496_accept;
			this.special = DFA496_special;
			this.transition = DFA496_transition;
		}
		@Override
		public String getDescription() {
			return "417:23: ( ws selectorsGroup )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA520_eotS =
		"\6\uffff";
	static final String DFA520_eofS =
		"\6\uffff";
	static final String DFA520_minS =
		"\1\7\1\25\1\uffff\1\7\2\uffff";
	static final String DFA520_maxS =
		"\1\u0088\1\u0098\1\uffff\1\u0098\2\uffff";
	static final String DFA520_acceptS =
		"\2\uffff\1\3\1\uffff\1\1\1\2";
	static final String DFA520_specialS =
		"\6\uffff}>";
	static final String[] DFA520_transitionS = {
			"\1\2\13\uffff\1\2\11\uffff\3\2\12\uffff\2\2\2\uffff\2\2\3\uffff\1\2\10"+
			"\uffff\1\2\5\uffff\1\2\7\uffff\1\2\23\uffff\2\2\13\uffff\1\1\10\uffff"+
			"\1\2\17\uffff\1\2\3\uffff\1\2",
			"\1\3\45\uffff\1\4\26\uffff\1\3\105\uffff\1\3",
			"",
			"\1\4\13\uffff\1\4\1\uffff\1\3\7\uffff\3\4\12\uffff\2\4\2\uffff\2\4\3"+
			"\uffff\1\4\7\uffff\2\4\5\uffff\1\4\4\uffff\1\5\2\uffff\1\4\7\uffff\1"+
			"\3\13\uffff\2\4\24\uffff\1\4\17\uffff\1\4\3\uffff\1\4\17\uffff\1\3",
			"",
			""
	};

	static final short[] DFA520_eot = DFA.unpackEncodedString(DFA520_eotS);
	static final short[] DFA520_eof = DFA.unpackEncodedString(DFA520_eofS);
	static final char[] DFA520_min = DFA.unpackEncodedStringToUnsignedChars(DFA520_minS);
	static final char[] DFA520_max = DFA.unpackEncodedStringToUnsignedChars(DFA520_maxS);
	static final short[] DFA520_accept = DFA.unpackEncodedString(DFA520_acceptS);
	static final short[] DFA520_special = DFA.unpackEncodedString(DFA520_specialS);
	static final short[][] DFA520_transition;

	static {
		int numStates = DFA520_transitionS.length;
		DFA520_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA520_transition[i] = DFA.unpackEncodedString(DFA520_transitionS[i]);
		}
	}

	protected class DFA520 extends DFA {

		public DFA520(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 520;
			this.eot = DFA520_eot;
			this.eof = DFA520_eof;
			this.min = DFA520_min;
			this.max = DFA520_max;
			this.accept = DFA520_accept;
			this.special = DFA520_special;
			this.transition = DFA520_transition;
		}
		@Override
		public String getDescription() {
			return "739:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA515_eotS =
		"\4\uffff";
	static final String DFA515_eofS =
		"\4\uffff";
	static final String DFA515_minS =
		"\1\25\1\7\2\uffff";
	static final String DFA515_maxS =
		"\2\u0098\2\uffff";
	static final String DFA515_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA515_specialS =
		"\4\uffff}>";
	static final String[] DFA515_transitionS = {
			"\1\1\45\uffff\1\2\26\uffff\1\1\105\uffff\1\1",
			"\1\3\13\uffff\1\3\1\uffff\1\1\7\uffff\3\3\12\uffff\2\3\2\uffff\2\3\3"+
			"\uffff\1\3\7\uffff\1\2\1\3\5\uffff\1\3\7\uffff\1\3\7\uffff\1\1\13\uffff"+
			"\2\3\24\uffff\1\3\17\uffff\1\3\3\uffff\1\3\17\uffff\1\1",
			"",
			""
	};

	static final short[] DFA515_eot = DFA.unpackEncodedString(DFA515_eotS);
	static final short[] DFA515_eof = DFA.unpackEncodedString(DFA515_eofS);
	static final char[] DFA515_min = DFA.unpackEncodedStringToUnsignedChars(DFA515_minS);
	static final char[] DFA515_max = DFA.unpackEncodedStringToUnsignedChars(DFA515_maxS);
	static final short[] DFA515_accept = DFA.unpackEncodedString(DFA515_acceptS);
	static final short[] DFA515_special = DFA.unpackEncodedString(DFA515_specialS);
	static final short[][] DFA515_transition;

	static {
		int numStates = DFA515_transitionS.length;
		DFA515_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA515_transition[i] = DFA.unpackEncodedString(DFA515_transitionS[i]);
		}
	}

	protected class DFA515 extends DFA {

		public DFA515(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 515;
			this.eot = DFA515_eot;
			this.eof = DFA515_eof;
			this.min = DFA515_min;
			this.max = DFA515_max;
			this.accept = DFA515_accept;
			this.special = DFA515_special;
			this.transition = DFA515_transition;
		}
		@Override
		public String getDescription() {
			return "739:23: ( ws selectorsGroup )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA531_eotS =
		"\5\uffff";
	static final String DFA531_eofS =
		"\5\uffff";
	static final String DFA531_minS =
		"\2\5\3\uffff";
	static final String DFA531_maxS =
		"\2\u0098\3\uffff";
	static final String DFA531_acceptS =
		"\2\uffff\1\2\1\3\1\1";
	static final String DFA531_specialS =
		"\5\uffff}>";
	static final String[] DFA531_transitionS = {
			"\3\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\6\uffff\1\3"+
			"\2\uffff\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\3\uffff"+
			"\1\3\1\uffff\1\3\6\uffff\5\3\1\uffff\2\3\5\uffff\3\3\5\uffff\1\3\1\1"+
			"\4\uffff\1\3\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff"+
			"\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\1\uffff\1\2\1\uffff"+
			"\1\3\2\uffff\7\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\uffff\1\2\1\1\1\uffff\1\4\6\uffff\1\4"+
			"\2\uffff\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\1\4\3\uffff\2\4\3\uffff"+
			"\1\4\1\uffff\1\4\6\uffff\5\4\1\uffff\2\4\5\uffff\3\4\5\uffff\1\4\1\1"+
			"\4\uffff\1\4\3\uffff\3\4\1\uffff\1\4\4\uffff\5\4\2\uffff\3\4\1\uffff"+
			"\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\1\uffff\1\2\1\uffff"+
			"\1\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff\1\4\1\1",
			"",
			"",
			""
	};

	static final short[] DFA531_eot = DFA.unpackEncodedString(DFA531_eotS);
	static final short[] DFA531_eof = DFA.unpackEncodedString(DFA531_eofS);
	static final char[] DFA531_min = DFA.unpackEncodedStringToUnsignedChars(DFA531_minS);
	static final char[] DFA531_max = DFA.unpackEncodedStringToUnsignedChars(DFA531_maxS);
	static final short[] DFA531_accept = DFA.unpackEncodedString(DFA531_acceptS);
	static final short[] DFA531_special = DFA.unpackEncodedString(DFA531_specialS);
	static final short[][] DFA531_transition;

	static {
		int numStates = DFA531_transitionS.length;
		DFA531_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA531_transition[i] = DFA.unpackEncodedString(DFA531_transitionS[i]);
		}
	}

	protected class DFA531 extends DFA {

		public DFA531(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 531;
			this.eot = DFA531_eot;
			this.eof = DFA531_eof;
			this.min = DFA531_min;
			this.max = DFA531_max;
			this.accept = DFA531_accept;
			this.special = DFA531_special;
			this.transition = DFA531_transition;
		}
		@Override
		public String getDescription() {
			return "991:15: ( ws | ( ( ws )? operator ( ws )? ) |)";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA536_eotS =
		"\5\uffff";
	static final String DFA536_eofS =
		"\5\uffff";
	static final String DFA536_minS =
		"\2\5\3\uffff";
	static final String DFA536_maxS =
		"\2\u0098\3\uffff";
	static final String DFA536_acceptS =
		"\2\uffff\1\2\1\3\1\1";
	static final String DFA536_specialS =
		"\5\uffff}>";
	static final String[] DFA536_transitionS = {
			"\3\3\2\uffff\5\3\3\uffff\1\3\2\uffff\1\1\1\uffff\1\3\6\uffff\1\3\2\uffff"+
			"\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\3\uffff\1\3\1\uffff"+
			"\1\3\6\uffff\5\3\1\uffff\2\3\5\uffff\3\3\5\uffff\1\3\1\1\4\uffff\1\3"+
			"\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff\2\3\2\uffff"+
			"\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\1\uffff\1\2\1\uffff\1\3\2\uffff"+
			"\7\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"\3\4\2\uffff\5\4\3\uffff\1\4\2\uffff\1\1\1\uffff\1\4\6\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\1\4\3\uffff\2\4\3\uffff\1\4\1\uffff"+
			"\1\4\6\uffff\5\4\1\uffff\2\4\5\uffff\3\4\5\uffff\1\4\1\1\4\uffff\1\4"+
			"\3\uffff\3\4\1\uffff\1\4\4\uffff\5\4\2\uffff\3\4\1\uffff\2\4\2\uffff"+
			"\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\1\uffff\1\2\1\uffff\1\4\2\uffff"+
			"\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff\1\4\1\1",
			"",
			"",
			""
	};

	static final short[] DFA536_eot = DFA.unpackEncodedString(DFA536_eotS);
	static final short[] DFA536_eof = DFA.unpackEncodedString(DFA536_eofS);
	static final char[] DFA536_min = DFA.unpackEncodedStringToUnsignedChars(DFA536_minS);
	static final char[] DFA536_max = DFA.unpackEncodedStringToUnsignedChars(DFA536_maxS);
	static final short[] DFA536_accept = DFA.unpackEncodedString(DFA536_acceptS);
	static final short[] DFA536_special = DFA.unpackEncodedString(DFA536_specialS);
	static final short[][] DFA536_transition;

	static {
		int numStates = DFA536_transitionS.length;
		DFA536_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA536_transition[i] = DFA.unpackEncodedString(DFA536_transitionS[i]);
		}
	}

	protected class DFA536 extends DFA {

		public DFA536(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 536;
			this.eot = DFA536_eot;
			this.eof = DFA536_eof;
			this.min = DFA536_min;
			this.max = DFA536_max;
			this.accept = DFA536_accept;
			this.special = DFA536_special;
			this.transition = DFA536_transition;
		}
		@Override
		public String getDescription() {
			return "1077:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |)";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	public static final BitSet FOLLOW_ws_in_styleSheet102 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEF9B9C0C8020E04L,0x0000000000807D57L});
	public static final BitSet FOLLOW_charSet_in_styleSheet112 = new BitSet(new long[]{0xF028CC80E0AC7CC0L,0xEEF9B9C0C8060E04L,0x0000000001807D57L});
	public static final BitSet FOLLOW_ws_in_styleSheet114 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEF9B9C0C8020E04L,0x0000000000807D57L});
	public static final BitSet FOLLOW_imports_in_styleSheet128 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEF9B9C0C8020E04L,0x0000000000807D57L});
	public static final BitSet FOLLOW_namespaces_in_styleSheet139 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEF9B9C0C8020E04L,0x0000000000807D57L});
	public static final BitSet FOLLOW_body_in_styleSheet150 = new BitSet(new long[]{0x0000000000000000L});
	public static final BitSet FOLLOW_EOF_in_styleSheet158 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespace_in_namespaces175 = new BitSet(new long[]{0x0000000000200002L,0x0000000000060000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_namespaces177 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
	public static final BitSet FOLLOW_NAMESPACE_SYM_in_namespace193 = new BitSet(new long[]{0x0008000000200000L,0x0000000000040000L,0x0000000001040020L});
	public static final BitSet FOLLOW_ws_in_namespace195 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000000040020L});
	public static final BitSet FOLLOW_namespacePrefixName_in_namespace199 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001040020L});
	public static final BitSet FOLLOW_ws_in_namespace201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040020L});
	public static final BitSet FOLLOW_resourceIdentifier_in_namespace206 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000004L});
	public static final BitSet FOLLOW_ws_in_namespace208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SEMI_in_namespace211 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_namespacePrefixName224 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHARSET_SYM_in_charSet258 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000020L});
	public static final BitSet FOLLOW_ws_in_charSet260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_charSetValue_in_charSet263 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000004L});
	public static final BitSet FOLLOW_ws_in_charSet265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SEMI_in_charSet268 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_charSetValue282 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importItem_in_imports310 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000004L});
	public static final BitSet FOLLOW_ws_in_imports312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SEMI_in_imports315 = new BitSet(new long[]{0x0020000000200002L,0x4040000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_imports317 = new BitSet(new long[]{0x0020000000000002L,0x4040000000000000L});
	public static final BitSet FOLLOW_sass_use_in_imports352 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000004L});
	public static final BitSet FOLLOW_ws_in_imports354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SEMI_in_imports357 = new BitSet(new long[]{0x0020000000200002L,0x4040000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_imports359 = new BitSet(new long[]{0x0020000000000002L,0x4040000000000000L});
	public static final BitSet FOLLOW_sass_forward_in_imports394 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000004L});
	public static final BitSet FOLLOW_ws_in_imports396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SEMI_in_imports399 = new BitSet(new long[]{0x0020000000200002L,0x4040000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_imports401 = new BitSet(new long[]{0x0020000000000002L,0x4040000000000000L});
	public static final BitSet FOLLOW_IMPORT_SYM_in_importItem437 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001040020L});
	public static final BitSet FOLLOW_ws_in_importItem439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040020L});
	public static final BitSet FOLLOW_resourceIdentifier_in_importItem442 = new BitSet(new long[]{0xE028848000A47C42L,0xEEE9B9C008460A80L,0x0000000001807C03L});
	public static final BitSet FOLLOW_ws_in_importItem452 = new BitSet(new long[]{0xE028848000847C40L,0xEEE9B9C008420A80L,0x0000000000807C03L});
	public static final BitSet FOLLOW_mediaQueryList_in_importItem455 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORT_SYM_in_importItem488 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001040020L});
	public static final BitSet FOLLOW_ws_in_importItem490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040020L});
	public static final BitSet FOLLOW_resourceIdentifier_in_importItem493 = new BitSet(new long[]{0xE028848000B47C42L,0xEEE9B9C008460A80L,0x0000000001807C03L});
	public static final BitSet FOLLOW_ws_in_importItem496 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_importItem499 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001040020L});
	public static final BitSet FOLLOW_ws_in_importItem501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040020L});
	public static final BitSet FOLLOW_resourceIdentifier_in_importItem504 = new BitSet(new long[]{0xE028848000B47C42L,0xEEE9B9C008460A80L,0x0000000001807C03L});
	public static final BitSet FOLLOW_ws_in_importItem516 = new BitSet(new long[]{0xE028848000847C40L,0xEEE9B9C008420A80L,0x0000000000807C03L});
	public static final BitSet FOLLOW_mediaQueryList_in_importItem519 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORT_SYM_in_importItem543 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040080L,0x0000000001040020L});
	public static final BitSet FOLLOW_ws_in_importItem545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000040020L});
	public static final BitSet FOLLOW_LPAREN_in_importItem549 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_less_import_types_in_importItem551 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_importItem553 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001040020L});
	public static final BitSet FOLLOW_ws_in_importItem555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040020L});
	public static final BitSet FOLLOW_resourceIdentifier_in_importItem560 = new BitSet(new long[]{0xE028848000A47C42L,0xEEE9B9C008460A80L,0x0000000001807C03L});
	public static final BitSet FOLLOW_ws_in_importItem570 = new BitSet(new long[]{0xE028848000847C40L,0xEEE9B9C008420A80L,0x0000000000807C03L});
	public static final BitSet FOLLOW_mediaQueryList_in_importItem573 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_USE_in_sass_use600 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_use602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040020L});
	public static final BitSet FOLLOW_resourceIdentifier_in_sass_use604 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_use607 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_sass_use_as_in_sass_use609 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_use614 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_sass_use_with_in_sass_use616 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_sass_use_as641 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_use_as643 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_use_as645 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_sass_use_with668 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_use_with670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_sass_use_with673 = new BitSet(new long[]{0xE028008000A47C40L,0xEEE9B9C008060A00L,0x0000000001807C03L});
	public static final BitSet FOLLOW_ws_in_sass_use_with675 = new BitSet(new long[]{0xE028008000847C40L,0xEEE9B9C008020A00L,0x0000000000807C03L});
	public static final BitSet FOLLOW_sass_use_with_declaration_in_sass_use_with678 = new BitSet(new long[]{0x0000000000300000L,0x0000020000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_use_with682 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_use_with685 = new BitSet(new long[]{0xE028008000A47C40L,0xEEE9B9C008060A00L,0x0000000001807C03L});
	public static final BitSet FOLLOW_ws_in_sass_use_with687 = new BitSet(new long[]{0xE028008000847C40L,0xEEE9B9C008020A00L,0x0000000000807C03L});
	public static final BitSet FOLLOW_sass_use_with_declaration_in_sass_use_with690 = new BitSet(new long[]{0x0000000000300000L,0x0000020000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_use_with695 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_sass_use_with698 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_sass_use_with_declaration719 = new BitSet(new long[]{0x0000000000280000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_use_with_declaration721 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_sass_use_with_declaration724 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9B9F0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_sass_use_with_declaration726 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_expression_in_sass_use_with_declaration729 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_FORWARD_in_sass_forward755 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040020L});
	public static final BitSet FOLLOW_resourceIdentifier_in_sass_forward759 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward763 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_sass_forward_hide_in_sass_forward767 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_sass_forward_show_in_sass_forward772 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward780 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_sass_forward_as_in_sass_forward782 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward789 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_sass_forward_with_in_sass_forward791 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_as816 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_as818 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_as820 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_with843 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_with845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_sass_forward_with848 = new BitSet(new long[]{0xE028008000A47C40L,0xEEE9B9C008060A00L,0x0000000001807C03L});
	public static final BitSet FOLLOW_ws_in_sass_forward_with850 = new BitSet(new long[]{0xE028008000847C40L,0xEEE9B9C008020A00L,0x0000000000807C03L});
	public static final BitSet FOLLOW_sass_forward_with_declaration_in_sass_forward_with853 = new BitSet(new long[]{0x0000000000300000L,0x0000020000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_with857 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_forward_with860 = new BitSet(new long[]{0xE028008000A47C40L,0xEEE9B9C008060A00L,0x0000000001807C03L});
	public static final BitSet FOLLOW_ws_in_sass_forward_with862 = new BitSet(new long[]{0xE028008000847C40L,0xEEE9B9C008020A00L,0x0000000000807C03L});
	public static final BitSet FOLLOW_sass_forward_with_declaration_in_sass_forward_with865 = new BitSet(new long[]{0x0000000000300000L,0x0000020000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_with870 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_sass_forward_with873 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_sass_forward_with_declaration894 = new BitSet(new long[]{0x0000000000280000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_with_declaration896 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_sass_forward_with_declaration899 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9B9F0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_sass_forward_with_declaration901 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_expression_in_sass_forward_with_declaration904 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_hide927 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_hide929 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_hide931 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_hide934 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_forward_hide937 = new BitSet(new long[]{0x0008000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_hide939 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_hide942 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_show967 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_show969 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_show971 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_show974 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_forward_show977 = new BitSet(new long[]{0x0008000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_show979 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_show982 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_MEDIA_SYM_in_media1001 = new BitSet(new long[]{0xE028848000A47C40L,0xEEE9B9C008460A80L,0x0000000001807C03L});
	public static final BitSet FOLLOW_ws_in_media1003 = new BitSet(new long[]{0xE028848000847C40L,0xEEE9B9C008420A80L,0x0000000000807C03L});
	public static final BitSet FOLLOW_mediaQueryList_in_media1021 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_media1029 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_media1036 = new BitSet(new long[]{0xF028CC80E0AC7CC0L,0xEEF9B9C4C8060E04L,0x0000000001A07D57L});
	public static final BitSet FOLLOW_ws_in_media1038 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEF9B9C4C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_syncToFollow_in_media1041 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEF9B9C4C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_mediaBody_in_media1051 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_RBRACE_in_media1058 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_mediaBodyItem_in_mediaBody1092 = new BitSet(new long[]{0xF028CC80E0AC7CC2L,0xEEF9B9C0C8060E04L,0x0000000001A07D57L});
	public static final BitSet FOLLOW_ws_in_mediaBody1102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SEMI_in_mediaBody1105 = new BitSet(new long[]{0xF028CC80E0AC7CC2L,0xEEF9B9C0C8060E04L,0x0000000001A07D57L});
	public static final BitSet FOLLOW_ws_in_mediaBody1109 = new BitSet(new long[]{0xF028CC80E08C7CC2L,0xEEF9B9C0C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_SEMI_in_mediaBody1136 = new BitSet(new long[]{0xF028CC80E0AC7CC2L,0xEEF9B9C0C8060E04L,0x0000000001A07D57L});
	public static final BitSet FOLLOW_ws_in_mediaBody1138 = new BitSet(new long[]{0xF028CC80E08C7CC2L,0xEEF9B9C0C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_sass_extend_in_mediaBody1157 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000004L});
	public static final BitSet FOLLOW_ws_in_mediaBody1160 = new BitSet(new long[]{0xF028CC80E08C7CC2L,0xEEF9B9C0C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_SEMI_in_mediaBody1165 = new BitSet(new long[]{0xF028CC80E08C7CC2L,0xEEF9B9C0C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_cp_mixin_declaration_in_mediaBodyItem1239 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_mediaBodyItem1272 = new BitSet(new long[]{0x0010000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_mediaBodyItem1275 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_mediaBodyItem1278 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_mediaBodyItem1295 = new BitSet(new long[]{0x0010000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_mediaBodyItem1298 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_mediaBodyItem1301 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rule_in_mediaBodyItem1366 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_mediaBodyItem1378 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_debug_in_mediaBodyItem1388 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_control_in_mediaBodyItem1398 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_content_in_mediaBodyItem1408 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importItem_in_mediaBodyItem1418 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rule_in_mediaBodyItem1426 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_page_in_mediaBodyItem1434 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fontFace_in_mediaBodyItem1442 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_vendorAtRule_in_mediaBodyItem1450 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_media_in_mediaBodyItem1463 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsAtRule_in_mediaBodyItem1471 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList1485 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_mediaQueryList1497 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_mediaQueryList1500 = new BitSet(new long[]{0xE028848000A47C40L,0xEEE9B9C008460A80L,0x0000000001807C03L});
	public static final BitSet FOLLOW_ws_in_mediaQueryList1502 = new BitSet(new long[]{0xE028848000847C40L,0xEEE9B9C008420A80L,0x0000000000807C03L});
	public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList1505 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_mediaQueryOperator_in_mediaQuery1524 = new BitSet(new long[]{0x0008840000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1526 = new BitSet(new long[]{0x0008840000000000L});
	public static final BitSet FOLLOW_mediaType_in_mediaQuery1533 = new BitSet(new long[]{0x0008000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1544 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_key_and_in_mediaQuery1547 = new BitSet(new long[]{0x0000800000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1549 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1552 = new BitSet(new long[]{0x0008000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1563 = new BitSet(new long[]{0x0008000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1574 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_key_and_in_mediaQuery1577 = new BitSet(new long[]{0x0000800000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1579 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1582 = new BitSet(new long[]{0x0008000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_cp_variable_in_mediaQuery1595 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_key_only_in_mediaQueryOperator1607 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_mediaQueryOperator1611 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_mediaType1623 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_mediaType1627 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaType1633 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_mediaExpression1658 = new BitSet(new long[]{0xE028848000A47C40L,0xEEE9B9C008060A00L,0x0000000001807C03L});
	public static final BitSet FOLLOW_ws_in_mediaExpression1660 = new BitSet(new long[]{0xE028848000847C40L,0xEEE9B9C008020A00L,0x0000000000807C03L});
	public static final BitSet FOLLOW_mediaFeature_in_mediaExpression1663 = new BitSet(new long[]{0x0000000000280000L,0x0000020000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_mediaFeatureValue_in_mediaExpression1665 = new BitSet(new long[]{0x0000000000200000L,0x0000020000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_mediaExpression1668 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_mediaExpression1671 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaExpression1688 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_mediaFeatureValue1709 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_mediaFeatureValue1712 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9B9F0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_mediaFeatureValue1714 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_expression_in_mediaFeatureValue1733 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_mediaFeatureValue1753 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_mediaFeature1773 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_mediaFeature1777 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_mediaFeature1785 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaFeature1789 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bodyItem_in_body1823 = new BitSet(new long[]{0xF028CC80E0AC7CC2L,0xEEF9B9C0C8060E04L,0x0000000001807D57L});
	public static final BitSet FOLLOW_ws_in_body1833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SEMI_in_body1836 = new BitSet(new long[]{0xF028CC80E0AC7CC2L,0xEEF9B9C0C8060E04L,0x0000000001807D57L});
	public static final BitSet FOLLOW_ws_in_body1840 = new BitSet(new long[]{0xF028CC80E08C7CC2L,0xEEF9B9C0C8020E04L,0x0000000000807D57L});
	public static final BitSet FOLLOW_SEMI_in_body1867 = new BitSet(new long[]{0xF028CC80E0AC7CC2L,0xEEF9B9C0C8060E04L,0x0000000001807D57L});
	public static final BitSet FOLLOW_ws_in_body1869 = new BitSet(new long[]{0xF028CC80E08C7CC2L,0xEEF9B9C0C8020E04L,0x0000000000807D57L});
	public static final BitSet FOLLOW_cp_mixin_declaration_in_bodyItem1949 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem1982 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem2001 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rule_in_bodyItem2010 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_declaration_in_bodyItem2032 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_in_bodyItem2049 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_at_rule_in_bodyItem2061 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importItem_in_bodyItem2084 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_debug_in_bodyItem2098 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_control_in_bodyItem2112 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_function_declaration_in_bodyItem2126 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SUPPORTS_SYM_in_supportsAtRule2146 = new BitSet(new long[]{0x0000000000200000L,0x0000000000440080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_supportsAtRule2148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400080L});
	public static final BitSet FOLLOW_supportsCondition_in_supportsAtRule2151 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_supportsAtRule2153 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_supportsAtRule2156 = new BitSet(new long[]{0xF028CC80E0AC7CC0L,0xEEF9B9C4C8060E04L,0x0000000001A07D57L});
	public static final BitSet FOLLOW_ws_in_supportsAtRule2158 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEF9B9C4C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_syncToFollow_in_supportsAtRule2161 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEF9B9C4C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_mediaBody_in_supportsAtRule2163 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_RBRACE_in_supportsAtRule2166 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_supportsCondition2179 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_supportsCondition2181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_supportsInParens_in_supportsCondition2183 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsInParens_in_supportsCondition2188 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_supportsCondition2191 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_supportsWithOperator_in_supportsCondition2193 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsConjunction_in_supportsWithOperator2221 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_supportsWithOperator2224 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_supportsConjunction_in_supportsWithOperator2226 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_supportsDisjunction_in_supportsWithOperator2240 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_supportsWithOperator2243 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_supportsDisjunction_in_supportsWithOperator2245 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_key_and_in_supportsConjunction2273 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_supportsConjunction2275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_supportsInParens_in_supportsConjunction2277 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_key_or_in_supportsDisjunction2304 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_supportsDisjunction2306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_supportsInParens_in_supportsDisjunction2308 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_supportsInParens2328 = new BitSet(new long[]{0xF028CC80E0AC7CC0L,0xEEFDB9C0C8460E84L,0x0000000001A07D53L});
	public static final BitSet FOLLOW_ws_in_supportsInParens2330 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C0C8420E84L,0x0000000000A07D53L});
	public static final BitSet FOLLOW_supportsCondition_in_supportsInParens2334 = new BitSet(new long[]{0x0000000000200000L,0x0000020000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_supportsFeature_in_supportsInParens2338 = new BitSet(new long[]{0x0000000000200000L,0x0000020000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_supportsInParens2341 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_supportsInParens2344 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsDecl_in_supportsFeature2357 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_declaration_in_supportsDecl2370 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_media_in_at_rule2388 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_page_in_at_rule2396 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_counterStyle_in_at_rule2404 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fontFace_in_at_rule2412 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsAtRule_in_at_rule2420 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_vendorAtRule_in_at_rule2428 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_moz_document_in_vendorAtRule2441 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_webkitKeyframes_in_vendorAtRule2445 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_generic_at_rule_in_vendorAtRule2449 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_atRuleId2459 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_atRuleId2463 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_atRuleId2471 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_atRuleId2475 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_IDENT_in_generic_at_rule2491 = new BitSet(new long[]{0xE828808000A47C40L,0xEEE9B9C008060A00L,0x0000000001807C23L});
	public static final BitSet FOLLOW_ws_in_generic_at_rule2493 = new BitSet(new long[]{0xE828808000847C40L,0xEEE9B9C008020A00L,0x0000000000807C23L});
	public static final BitSet FOLLOW_atRuleId_in_generic_at_rule2498 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_generic_at_rule2500 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_generic_at_rule2514 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_syncTo_RBRACE_in_generic_at_rule2525 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_RBRACE_in_generic_at_rule2535 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document2546 = new BitSet(new long[]{0x0000000000200000L,0x0000000000047000L,0x0000000001040000L});
	public static final BitSet FOLLOW_ws_in_moz_document2548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000007000L,0x0000000000040000L});
	public static final BitSet FOLLOW_moz_document_function_in_moz_document2553 = new BitSet(new long[]{0x0800000000300000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_moz_document2555 = new BitSet(new long[]{0x0800000000100000L});
	public static final BitSet FOLLOW_COMMA_in_moz_document2561 = new BitSet(new long[]{0x0000000000200000L,0x0000000000047000L,0x0000000001040000L});
	public static final BitSet FOLLOW_ws_in_moz_document2563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000007000L,0x0000000000040000L});
	public static final BitSet FOLLOW_moz_document_function_in_moz_document2566 = new BitSet(new long[]{0x0800000000300000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_moz_document2568 = new BitSet(new long[]{0x0800000000100000L});
	public static final BitSet FOLLOW_LBRACE_in_moz_document2575 = new BitSet(new long[]{0xF028CC80E0AC7CC0L,0xEEF9B9C4C8060E04L,0x0000000001807D57L});
	public static final BitSet FOLLOW_ws_in_moz_document2577 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEF9B9C4C8020E04L,0x0000000000807D57L});
	public static final BitSet FOLLOW_body_in_moz_document2582 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_RBRACE_in_moz_document2587 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes2624 = new BitSet(new long[]{0xE028808000A47C40L,0xEEE9B9C008060A00L,0x0000000001807C23L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframes2626 = new BitSet(new long[]{0xE028808000847C40L,0xEEE9B9C008020A00L,0x0000000000807C23L});
	public static final BitSet FOLLOW_atRuleId_in_webkitKeyframes2629 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframes2631 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_webkitKeyframes2635 = new BitSet(new long[]{0x0008000000200000L,0x0000100410040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframes2637 = new BitSet(new long[]{0x0008000000000000L,0x0000100410000000L});
	public static final BitSet FOLLOW_webkitKeyframesBlock_in_webkitKeyframes2644 = new BitSet(new long[]{0x0008000000200000L,0x0000100410040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframes2646 = new BitSet(new long[]{0x0008000000000000L,0x0000100410000000L});
	public static final BitSet FOLLOW_RBRACE_in_webkitKeyframes2653 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock2665 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock2667 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_webkitKeyframesBlock2671 = new BitSet(new long[]{0xF028CC80E0AC7CC0L,0xEEFDB9C4C8060E04L,0x0000000001A07D57L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock2674 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C4C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_syncToFollow_in_webkitKeyframesBlock2677 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C4C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_declarations_in_webkitKeyframesBlock2681 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_RBRACE_in_webkitKeyframesBlock2685 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_content_in_webkitKeyframesBlock2702 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SEMI_in_webkitKeyframesBlock2704 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_webkitKeyframeSelectors2721 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_IDENT_in_webkitKeyframeSelectors2727 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_PERCENTAGE_in_webkitKeyframeSelectors2731 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors2737 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_webkitKeyframeSelectors2740 = new BitSet(new long[]{0x0008000000200000L,0x0000000010040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors2742 = new BitSet(new long[]{0x0008000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_IDENT_in_webkitKeyframeSelectors2749 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_IDENT_in_webkitKeyframeSelectors2755 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_PERCENTAGE_in_webkitKeyframeSelectors2759 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_PAGE_SYM_in_page2783 = new BitSet(new long[]{0x0808000000280000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_page2785 = new BitSet(new long[]{0x0808000000080000L});
	public static final BitSet FOLLOW_IDENT_in_page2790 = new BitSet(new long[]{0x0800000000280000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_page2792 = new BitSet(new long[]{0x0800000000080000L});
	public static final BitSet FOLLOW_pseudoPage_in_page2799 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_page2801 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_page2814 = new BitSet(new long[]{0xE028848000A47CC0L,0xEEE9B9C408060E00L,0x0000000001A07C17L});
	public static final BitSet FOLLOW_ws_in_page2856 = new BitSet(new long[]{0xE028848000847CC0L,0xEEE9B9C008020E00L,0x0000000000A07C17L});
	public static final BitSet FOLLOW_SEMI_in_page2863 = new BitSet(new long[]{0xE028848000A47CC0L,0xEEE9B9C008060E00L,0x0000000001A07C13L});
	public static final BitSet FOLLOW_ws_in_page2865 = new BitSet(new long[]{0xE028848000847CC0L,0xEEE9B9C008020E00L,0x0000000000A07C13L});
	public static final BitSet FOLLOW_SEMI_in_page2872 = new BitSet(new long[]{0xE028848000A47CC0L,0xEEE9B9C008060E00L,0x0000000001A07C13L});
	public static final BitSet FOLLOW_ws_in_page2874 = new BitSet(new long[]{0xE028848000847CC0L,0xEEE9B9C008020E00L,0x0000000000A07C13L});
	public static final BitSet FOLLOW_propertyDeclaration_in_page2881 = new BitSet(new long[]{0xE028848000A47CC0L,0xEEE9B9C408060E00L,0x0000000001A07C17L});
	public static final BitSet FOLLOW_margin_in_page2884 = new BitSet(new long[]{0xE028848000A47CC0L,0xEEE9B9C408060E00L,0x0000000001A07C17L});
	public static final BitSet FOLLOW_SEMI_in_page2902 = new BitSet(new long[]{0x0000000000200000L,0x0000000400040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_page2917 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_RBRACE_in_page2928 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COUNTER_STYLE_SYM_in_counterStyle2945 = new BitSet(new long[]{0x0008000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_counterStyle2947 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_counterStyle2950 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_counterStyle2952 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_counterStyle2963 = new BitSet(new long[]{0xF028CC80E0AC7CC0L,0xEEFDB9C4C8060E04L,0x0000000001A07D57L});
	public static final BitSet FOLLOW_ws_in_counterStyle2965 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C4C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_syncToDeclarationsRule_in_counterStyle2968 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C4C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_declarations_in_counterStyle2972 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_RBRACE_in_counterStyle2983 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FONT_FACE_SYM_in_fontFace3000 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_fontFace3002 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_fontFace3013 = new BitSet(new long[]{0xF028CC80E0AC7CC0L,0xEEFDB9C4C8060E04L,0x0000000001A07D57L});
	public static final BitSet FOLLOW_ws_in_fontFace3015 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C4C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_syncToDeclarationsRule_in_fontFace3018 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C4C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_declarations_in_fontFace3022 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_RBRACE_in_fontFace3033 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_margin_sym_in_margin3047 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_margin3049 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_margin3052 = new BitSet(new long[]{0xF028CC80E0AC7CC0L,0xEEFDB9C4C8060E04L,0x0000000001A07D57L});
	public static final BitSet FOLLOW_ws_in_margin3054 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C4C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_syncToDeclarationsRule_in_margin3057 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C4C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_declarations_in_margin3059 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_RBRACE_in_margin3062 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COLON_in_pseudoPage3271 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_pseudoPage3273 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_property3357 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_property3367 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARIABLE_in_property3375 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_property3383 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_property3391 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_property3401 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_name_in_sass_map3428 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_sass_map3430 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_map3432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_sass_map3435 = new BitSet(new long[]{0xE028848000B47CC0L,0xEEE9BBC008860E00L,0x0000000001A07C23L});
	public static final BitSet FOLLOW_ws_in_sass_map3437 = new BitSet(new long[]{0xE028848000947CC0L,0xEEE9BBC008820E00L,0x0000000000A07C23L});
	public static final BitSet FOLLOW_syncToFollow_in_sass_map3440 = new BitSet(new long[]{0xE028848000947CC0L,0xEEE9BBC008820E00L,0x0000000000A07C23L});
	public static final BitSet FOLLOW_sass_map_pairs_in_sass_map3459 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_sass_map3466 = new BitSet(new long[]{0x0000000000200002L,0x0100400000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_map3470 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_SASS_DEFAULT_in_sass_map3473 = new BitSet(new long[]{0x0000000000200002L,0x0100400000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_map3479 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_SASS_GLOBAL_in_sass_map3482 = new BitSet(new long[]{0x0000000000200002L,0x0100400000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_cp_variable_in_sass_map_name3506 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_pair_in_sass_map_pairs3540 = new BitSet(new long[]{0xE028848000B47CC2L,0xEEE9B9C008860E00L,0x0000000001A07C23L});
	public static final BitSet FOLLOW_ws_in_sass_map_pairs3550 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_map_pairs3553 = new BitSet(new long[]{0xE028848000B47CC2L,0xEEE9B9C008860E00L,0x0000000001A07C23L});
	public static final BitSet FOLLOW_ws_in_sass_map_pairs3557 = new BitSet(new long[]{0xE028848000947CC2L,0xEEE9B9C008820E00L,0x0000000000A07C23L});
	public static final BitSet FOLLOW_COMMA_in_sass_map_pairs3584 = new BitSet(new long[]{0xE028848000B47CC2L,0xEEE9B9C008860E00L,0x0000000001A07C23L});
	public static final BitSet FOLLOW_ws_in_sass_map_pairs3586 = new BitSet(new long[]{0xE028848000947CC2L,0xEEE9B9C008820E00L,0x0000000000A07C23L});
	public static final BitSet FOLLOW_NUMBER_in_sass_map_pair3622 = new BitSet(new long[]{0x0000000000280000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_STRING_in_sass_map_pair3625 = new BitSet(new long[]{0x0000000000280000L,0x0000000000040000L,0x0000000001000020L});
	public static final BitSet FOLLOW_ws_in_sass_map_pair3628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_STRING_in_sass_map_pair3631 = new BitSet(new long[]{0x0000000000280000L,0x0000000000040000L,0x0000000001000020L});
	public static final BitSet FOLLOW_function_in_sass_map_pair3641 = new BitSet(new long[]{0x0000000000280000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_property_in_sass_map_pair3644 = new BitSet(new long[]{0x0000000000280000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_sass_map_in_sass_map_pair3646 = new BitSet(new long[]{0x0000000000280000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_map_pair3649 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_sass_map_pair3652 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9B9F0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_sass_map_pair3654 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_expression_in_sass_map_pair3657 = new BitSet(new long[]{0x0010000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_map_pair3660 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_prio_in_sass_map_pair3663 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_rule3705 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_rule3708 = new BitSet(new long[]{0x1008CC00E0080080L,0x00100000C0000404L,0x0000000000000110L});
	public static final BitSet FOLLOW_selectorsGroup_in_rule3710 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_rule3731 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_rule3733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_rule3735 = new BitSet(new long[]{0x0008000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_rule3737 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_rule3742 = new BitSet(new long[]{0x0000000000280000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_rule3746 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_rule3749 = new BitSet(new long[]{0x0008000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_rule3751 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_rule3754 = new BitSet(new long[]{0x0000000000200000L,0x0000020000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_rule3756 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_rule3759 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_selectorsGroup_in_rule3777 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_rule3789 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_rule3796 = new BitSet(new long[]{0xF028CC80E0AC7CC0L,0xEEFDB9C4C8060E04L,0x0000000001A07D57L});
	public static final BitSet FOLLOW_ws_in_rule3798 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C4C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_syncToFollow_in_rule3801 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C4C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_declarations_in_rule3811 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_RBRACE_in_rule3818 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_declarations3852 = new BitSet(new long[]{0xF028CC80E0AC7CC0L,0xEEFDB9C0C8060E04L,0x0000000001A07D57L});
	public static final BitSet FOLLOW_ws_in_declarations3854 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C0C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_declaration_in_declarations3860 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000004L});
	public static final BitSet FOLLOW_ws_in_declarations3865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SEMI_in_declarations3869 = new BitSet(new long[]{0xF028CC80E0AC7CC0L,0xEEFDB9C0C8060E04L,0x0000000001A07D57L});
	public static final BitSet FOLLOW_ws_in_declarations3871 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C0C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_ws_in_declarations3877 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C0C8020E04L,0x0000000000A07D53L});
	public static final BitSet FOLLOW_declaration_in_declarations3880 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000004L});
	public static final BitSet FOLLOW_ws_in_declarations3886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SEMI_in_declarations3890 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000004L});
	public static final BitSet FOLLOW_ws_in_declarations3892 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_ws_in_declarations3898 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_declarations3910 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000004L});
	public static final BitSet FOLLOW_ws_in_declarations3912 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_cp_variable_declaration_in_declaration3941 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_in_declaration3954 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_nested_properties_in_declaration3966 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rule_in_declaration4029 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_declaration4041 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_declaration4080 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_declaration_in_declaration4092 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_declaration4105 = new BitSet(new long[]{0x0010000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_declaration4108 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_declaration4111 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_declaration4128 = new BitSet(new long[]{0x0010000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_declaration4131 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_declaration4134 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_at_rule_in_declaration4150 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_control_in_declaration4160 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_extend_in_declaration4170 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_debug_in_declaration4180 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_content_in_declaration4190 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_function_return_in_declaration4200 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_error_in_declaration4210 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importItem_in_declaration4220 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_declaration4228 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selector_in_selectorsGroup4262 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_selectorsGroup4265 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_selectorsGroup4268 = new BitSet(new long[]{0x1008CC00E0280080L,0x00100000C0040404L,0x0000000001000110L});
	public static final BitSet FOLLOW_ws_in_selectorsGroup4270 = new BitSet(new long[]{0x1008CC00E0080080L,0x00100000C0000404L,0x0000000000000110L});
	public static final BitSet FOLLOW_selector_in_selectorsGroup4273 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_COMMA_in_selectorsGroup4280 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_combinator_in_selector4301 = new BitSet(new long[]{0x1008C400E0280080L,0x0010000040040404L,0x0000000001000010L});
	public static final BitSet FOLLOW_ws_in_selector4303 = new BitSet(new long[]{0x1008C400E0080080L,0x0010000040000404L,0x0000000000000010L});
	public static final BitSet FOLLOW_simpleSelectorSequence_in_selector4308 = new BitSet(new long[]{0x0000080000200002L,0x0000000080040000L,0x0000000001000100L});
	public static final BitSet FOLLOW_ws_in_selector4314 = new BitSet(new long[]{0x0000080000000000L,0x0000000080000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_combinator_in_selector4317 = new BitSet(new long[]{0x1008C400E0280080L,0x0010000040040404L,0x0000000001000010L});
	public static final BitSet FOLLOW_ws_in_selector4319 = new BitSet(new long[]{0x1008C400E0080080L,0x0010000040000404L,0x0000000000000010L});
	public static final BitSet FOLLOW_ws_in_selector4323 = new BitSet(new long[]{0x1008C400E0080080L,0x0010000040000404L,0x0000000000000010L});
	public static final BitSet FOLLOW_simpleSelectorSequence_in_selector4326 = new BitSet(new long[]{0x0000080000200002L,0x0000000080040000L,0x0000000001000100L});
	public static final BitSet FOLLOW_combinator_in_selector4341 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence4393 = new BitSet(new long[]{0x1000C000E0280002L,0x0010000000040004L,0x0000000001000000L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence4399 = new BitSet(new long[]{0x1000C000E0280002L,0x0010000000040004L,0x0000000001000000L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_simpleSelectorSequence4413 = new BitSet(new long[]{0x1000C000E0280002L,0x0010000000040004L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_simpleSelectorSequence4428 = new BitSet(new long[]{0x1000C000E0080000L,0x0010000000000004L});
	public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence4431 = new BitSet(new long[]{0x1000C000E0280002L,0x0010000000040004L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_simpleSelectorSequence4436 = new BitSet(new long[]{0x0008800000000080L,0x0000000000000400L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence4441 = new BitSet(new long[]{0x1000C000E0280002L,0x0010000000040004L,0x0000000001000000L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_simpleSelectorSequence4447 = new BitSet(new long[]{0x1000C000E0280002L,0x0010000000040004L,0x0000000001000000L});
	public static final BitSet FOLLOW_typeSelector_in_simpleSelectorSequence4461 = new BitSet(new long[]{0x1000C000E0280002L,0x0010000000040004L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_simpleSelectorSequence4473 = new BitSet(new long[]{0x1000C000E0080000L,0x0010000000000004L});
	public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence4476 = new BitSet(new long[]{0x1000C000E0280002L,0x0010000000040004L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_simpleSelectorSequence4483 = new BitSet(new long[]{0x0008800000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence4485 = new BitSet(new long[]{0x1000C000E0280002L,0x0010000000040004L,0x0000000001000000L});
	public static final BitSet FOLLOW_HASH_SYMBOL_in_esPred4510 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_in_esPred4514 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_esPred4518 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACKET_in_esPred4522 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COLON_in_esPred4526 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DCOLON_in_esPred4530 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_esPred4534 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_AND_in_esPred4540 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespacePrefix_in_typeSelector4582 = new BitSet(new long[]{0x0008040000000000L,0x0000000000000004L,0x0000000000000010L});
	public static final BitSet FOLLOW_elementName_in_typeSelector4586 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespacePrefixName_in_namespacePrefix4601 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_STAR_in_namespacePrefix4605 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_PIPE_in_namespacePrefix4609 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_extend_only_selector_in_elementSubsequent4641 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_AND_in_elementSubsequent4655 = new BitSet(new long[]{0x0008800000000002L,0x0000000000800000L});
	public static final BitSet FOLLOW_IDENT_in_elementSubsequent4658 = new BitSet(new long[]{0x0008800000000002L,0x0000000000800000L});
	public static final BitSet FOLLOW_NUMBER_in_elementSubsequent4662 = new BitSet(new long[]{0x0008800000000002L,0x0000000000800000L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_elementSubsequent4668 = new BitSet(new long[]{0x0008800000000002L,0x0000000000800000L});
	public static final BitSet FOLLOW_LESS_AND_in_elementSubsequent4684 = new BitSet(new long[]{0x0008000000000080L,0x0000000000000400L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_elementSubsequent4686 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cssId_in_elementSubsequent4695 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cssClass_in_elementSubsequent4704 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_slAttribute_in_elementSubsequent4716 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pseudo_in_elementSubsequent4728 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_in_cssId4752 = new BitSet(new long[]{0x0008800000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_cssId4757 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_SYMBOL_in_cssId4779 = new BitSet(new long[]{0x0008000000000080L,0x0000000000010400L});
	public static final BitSet FOLLOW_NAME_in_cssId4795 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_cssId4815 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_cssClass4867 = new BitSet(new long[]{0x0008840000000080L,0x0000000000400400L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_cssClass4895 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_cssClass4913 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_cssClass4929 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_cssClass4945 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_cssClass4961 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DIMENSION_in_cssClass4985 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACKET_in_slAttribute5041 = new BitSet(new long[]{0x0008000000200000L,0x0000000040040000L,0x0000000001000010L});
	public static final BitSet FOLLOW_namespacePrefix_in_slAttribute5048 = new BitSet(new long[]{0x0008000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_slAttribute5051 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_slAttributeName_in_slAttribute5062 = new BitSet(new long[]{0x0040000410600200L,0x0000000802040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_slAttribute5064 = new BitSet(new long[]{0x0040000410400200L,0x0000000802000000L});
	public static final BitSet FOLLOW_set_in_slAttribute5098 = new BitSet(new long[]{0x0008000000200000L,0x0000000000040000L,0x0000000001000020L});
	public static final BitSet FOLLOW_ws_in_slAttribute5278 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_slAttributeValue_in_slAttribute5297 = new BitSet(new long[]{0x0000000000200000L,0x0000000800040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_slAttribute5315 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACKET_in_slAttribute5340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_slAttributeName5356 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_pseudo5428 = new BitSet(new long[]{0x0008840000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_set_in_pseudo5491 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_pseudo5548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_pseudo5551 = new BitSet(new long[]{0xF028C5A240A47CE0L,0xEEE9BBF0B8860E0DL,0x0000000001A67F33L});
	public static final BitSet FOLLOW_ws_in_pseudo5553 = new BitSet(new long[]{0xF028C5A240847CE0L,0xEEE9BBF0B8820E0DL,0x0000000000A67F33L});
	public static final BitSet FOLLOW_expression_in_pseudo5559 = new BitSet(new long[]{0x0000000000200000L,0x0000020000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_pseudo5561 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_STAR_in_pseudo5567 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_pseudo5572 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_pseudo5635 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_pseudo5657 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_pseudo5659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_pseudo5662 = new BitSet(new long[]{0x1008CC00E0280080L,0x00100200C0040404L,0x0000000001000110L});
	public static final BitSet FOLLOW_ws_in_pseudo5664 = new BitSet(new long[]{0x1008CC00E0080080L,0x00100200C0000404L,0x0000000000000110L});
	public static final BitSet FOLLOW_selectorsGroup_in_pseudo5669 = new BitSet(new long[]{0x0000000000200000L,0x0000020000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_pseudo5671 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_pseudo5676 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_pseudo5702 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_pseudo5704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_pseudo5707 = new BitSet(new long[]{0x1008CC00E0280080L,0x00100200C0040404L,0x0000000001000110L});
	public static final BitSet FOLLOW_ws_in_pseudo5709 = new BitSet(new long[]{0x1008CC00E0080080L,0x00100200C0000404L,0x0000000000000110L});
	public static final BitSet FOLLOW_selectorsGroup_in_pseudo5714 = new BitSet(new long[]{0x0000000000200000L,0x0000020000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_pseudo5716 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_pseudo5721 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_pseudo5748 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_pseudo5750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_pseudo5753 = new BitSet(new long[]{0x1008CC00E0280080L,0x00100200C0040404L,0x0000000001000110L});
	public static final BitSet FOLLOW_ws_in_pseudo5755 = new BitSet(new long[]{0x1008CC00E0080080L,0x00100200C0000404L,0x0000000000000110L});
	public static final BitSet FOLLOW_selectorsGroup_in_pseudo5758 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_pseudo5761 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STAR_in_propertyDeclaration5803 = new BitSet(new long[]{0xE028848000847CC0L,0xEEE9B9C008020E00L,0x0000000000A07C03L});
	public static final BitSet FOLLOW_property_in_propertyDeclaration5806 = new BitSet(new long[]{0x0000000000280000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration5808 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_propertyDeclaration5811 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9B9F0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration5813 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_propertyValue_in_propertyDeclaration5816 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_property_in_propertyDeclaration5827 = new BitSet(new long[]{0x0000000000280000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration5829 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_propertyDeclaration5832 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFDF3FFFFFFFFL,0x000000000FFFFFFBL});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration5834 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFDF3FFFFFFFFL,0x000000000FFFFFFBL});
	public static final BitSet FOLLOW_componentValueOuter_in_propertyDeclaration5837 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STAR_in_propertyDeclaration5846 = new BitSet(new long[]{0xE028848000847CC0L,0xEEE9B9C008020E00L,0x0000000000A07C03L});
	public static final BitSet FOLLOW_property_in_propertyDeclaration5849 = new BitSet(new long[]{0x0000000000280000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration5851 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_propertyDeclaration5854 = new BitSet(new long[]{0xF028C5A240A47CE0L,0xEEE9B9F0B8860E0DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration5856 = new BitSet(new long[]{0xF028C5A240847CE0L,0xEEE9B9F0B8820E0DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_propertyValue_in_propertyDeclaration5859 = new BitSet(new long[]{0x0010000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration5862 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_prio_in_propertyDeclaration5865 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_list_in_cp_propertyValue5905 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyValue_in_cp_propertyValue5913 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_propertyValue5935 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_expressionPredicate6004 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACE_in_braceBlock6091 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFDF3FFFFFFFFL,0x000000000FFFFFFFL});
	public static final BitSet FOLLOW_componentValue_in_braceBlock6093 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFDF7FFFFFFFFL,0x000000000FFFFFFFL});
	public static final BitSet FOLLOW_RBRACE_in_braceBlock6096 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACKET_in_bracketBlock6103 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFDF3FFFFFFFFL,0x000000000FFFFFFFL});
	public static final BitSet FOLLOW_componentValue_in_bracketBlock6105 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFDFBFFFFFFFFL,0x000000000FFFFFFFL});
	public static final BitSet FOLLOW_RBRACKET_in_bracketBlock6108 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_parenBlock6115 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFDF3FFFFFFFFL,0x000000000FFFFFFFL});
	public static final BitSet FOLLOW_componentValue_in_parenBlock6117 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFF3FFFFFFFFL,0x000000000FFFFFFFL});
	public static final BitSet FOLLOW_RPAREN_in_parenBlock6120 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_parenBlock_in_componentValue6127 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_braceBlock_in_componentValue6131 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bracketBlock_in_componentValue6135 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_in_componentValue6150 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_preservedToken_in_componentValue6154 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_parenBlock_in_componentValueOuter6162 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFDF3FFFFFFFFL,0x000000000FFFFFFBL});
	public static final BitSet FOLLOW_braceBlock_in_componentValueOuter6166 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFDF3FFFFFFFFL,0x000000000FFFFFFBL});
	public static final BitSet FOLLOW_bracketBlock_in_componentValueOuter6170 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFDF3FFFFFFFFL,0x000000000FFFFFFBL});
	public static final BitSet FOLLOW_function_in_componentValueOuter6185 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFDF3FFFFFFFFL,0x000000000FFFFFFBL});
	public static final BitSet FOLLOW_preservedTokenTopLevel_in_componentValueOuter6189 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFDF3FFFFFFFFL,0x000000000FFFFFFBL});
	public static final BitSet FOLLOW_componentValueOuter_in_componentValueOuter6192 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFDF3FFFFFFFFL,0x000000000FFFFFFBL});
	public static final BitSet FOLLOW_SEMI_in_syncTo_SEMI6281 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_prio6326 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_term_in_expression6343 = new BitSet(new long[]{0xF028C5A240B47CE2L,0xEEE9B9F0B8860E0DL,0x0000000001A67F2BL});
	public static final BitSet FOLLOW_ws_in_expression6375 = new BitSet(new long[]{0xF028C5A240847CE0L,0xEEE9B9F0B8820E0DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_ws_in_expression6380 = new BitSet(new long[]{0x0000000000100000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_operator_in_expression6383 = new BitSet(new long[]{0xF028C5A240A47CE0L,0xEEE9B9F0B8860E0DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_expression6385 = new BitSet(new long[]{0xF028C5A240847CE0L,0xEEE9B9F0B8820E0DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_term_in_expression6394 = new BitSet(new long[]{0xF028C5A240B47CE2L,0xEEE9B9F0B8860E0DL,0x0000000001A67F2BL});
	public static final BitSet FOLLOW_unaryOperator_in_term6419 = new BitSet(new long[]{0xF028C5A240A47CE0L,0xEEE9B9F038860A0DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_term6421 = new BitSet(new long[]{0xF028C5A240847CE0L,0xEEE9B9F038820A0DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_function_in_term6450 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARIABLE_in_term6463 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_term6477 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACKET_in_term6490 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_WS_in_term6492 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_term6495 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_WS_in_term6498 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_term6500 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_WS_in_term6504 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACKET_in_term6507 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NUMBER_in_term6520 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_URANGE_in_term6532 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PERCENTAGE_in_term6544 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LENGTH_in_term6556 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EMS_in_term6568 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REM_in_term6580 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXS_in_term6592 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ANGLE_in_term6604 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIME_in_term6616 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FREQ_in_term6628 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RESOLUTION_in_term6640 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DIMENSION_in_term6652 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_term6669 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TILDE_in_term6681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000000020L});
	public static final BitSet FOLLOW_set_in_term6683 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_JS_STRING_in_term6704 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_term6719 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_URI_in_term6731 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hexColor_in_term6743 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_term6757 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_AND_in_term6771 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_term6785 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_in_term6799 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_term_symbol_in_term6813 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PERCENTAGE_SYMBOL_in_cp_term_symbol6840 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionName_in_function6856 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_function6858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_function6863 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9BBF0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_function6865 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9BBF0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_fnAttributes_in_function6892 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_function6923 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_functionName6975 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_functionName6977 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_functionName6981 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_DOT_in_functionName6984 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_functionName6986 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_fnAttribute_in_fnAttributes7010 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000004L});
	public static final BitSet FOLLOW_ws_in_fnAttributes7013 = new BitSet(new long[]{0x0000000000100000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_COMMA_in_fnAttributes7017 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9B9F0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_SEMI_in_fnAttributes7023 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9B9F0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_fnAttributes7026 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_fnAttribute_in_fnAttributes7029 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000004L});
	public static final BitSet FOLLOW_ws_in_fnAttributes7033 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fnAttributeName_in_fnAttribute7070 = new BitSet(new long[]{0x0000000000280000L,0x0000000002040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_fnAttribute7072 = new BitSet(new long[]{0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_set_in_fnAttribute7075 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xEEE9B9F0B8860E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_fnAttribute7081 = new BitSet(new long[]{0xF038C5A240847CE0L,0xEEE9B9F0B8820E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_fnAttributeValue_in_fnAttribute7084 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_in_fnAttribute7101 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_fnAttribute7113 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_fnAttributeName7136 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_DOT_in_fnAttributeName7139 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_fnAttributeName7141 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_cp_variable_in_fnAttributeName7161 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_term_in_fnAttributeValue7184 = new BitSet(new long[]{0xF028C5A240A47CE2L,0xEEE9B9F0B8860E0DL,0x0000000001A67F2BL});
	public static final BitSet FOLLOW_ws_in_fnAttributeValue7216 = new BitSet(new long[]{0xF028C5A240847CE0L,0xEEE9B9F0B8820E0DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_ws_in_fnAttributeValue7221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SOLIDUS_in_fnAttributeValue7224 = new BitSet(new long[]{0xF028C5A240A47CE0L,0xEEE9B9F0B8860E0DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_fnAttributeValue7226 = new BitSet(new long[]{0xF028C5A240847CE0L,0xEEE9B9F0B8820E0DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_term_in_fnAttributeValue7235 = new BitSet(new long[]{0xF028C5A240A47CE2L,0xEEE9B9F0B8860E0DL,0x0000000001A67F2BL});
	public static final BitSet FOLLOW_cp_math_expression_in_fnAttributeValue7256 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_in_hexColor7270 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration7330 = new BitSet(new long[]{0x0000000000280000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration7332 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_cp_variable_declaration7335 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9B9F0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration7337 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration7340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration7362 = new BitSet(new long[]{0x0000000000280000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration7364 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_cp_variable_declaration7367 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9B9F0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration7369 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration7372 = new BitSet(new long[]{0x0000000000200002L,0x0100400000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration7376 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_SASS_DEFAULT_in_cp_variable_declaration7379 = new BitSet(new long[]{0x0000000000200002L,0x0100400000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration7385 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_SASS_GLOBAL_in_cp_variable_declaration7388 = new BitSet(new long[]{0x0000000000200002L,0x0100400000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_set_in_cp_variable7428 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_VAR_in_cp_variable7620 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_cp_variable7624 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_DOT_in_cp_variable7626 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_SASS_VAR_in_cp_variable7628 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_in_cp_expression_list7658 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_expression_list7677 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_cp_expression_list7680 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9B9F0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_cp_expression_list7682 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_expression_in_cp_expression_list7685 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_LBRACE_in_cp_expression7721 = new BitSet(new long[]{0xF028CC80E0AC7CC0L,0xEEFDB9C4C8060E04L,0x0000000001A07D57L});
	public static final BitSet FOLLOW_ws_in_cp_expression7723 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C4C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_syncToFollow_in_cp_expression7726 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C4C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_declarations_in_cp_expression7728 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_RBRACE_in_cp_expression7731 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression7747 = new BitSet(new long[]{0xF038DDA246A47CE2L,0xEEE9B9F0B8C60E9FL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_cp_expression7771 = new BitSet(new long[]{0x0008180006000000L,0x0000000000000012L});
	public static final BitSet FOLLOW_cp_expression_operator_in_cp_expression7774 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xEEE9B9F0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_cp_expression7776 = new BitSet(new long[]{0xF038C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression7780 = new BitSet(new long[]{0xF038DDA246A47CE2L,0xEEE9B9F0B8C60E9FL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_cp_expression7799 = new BitSet(new long[]{0xF038C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression7802 = new BitSet(new long[]{0xF038DDA246A47CE2L,0xEEE9B9F0B8C60E9FL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_LPAREN_in_cp_expression7820 = new BitSet(new long[]{0xE028848000B47CC0L,0xEEE9BBC008860E00L,0x0000000001A07C23L});
	public static final BitSet FOLLOW_ws_in_cp_expression7822 = new BitSet(new long[]{0xE028848000947CC0L,0xEEE9BBC008820E00L,0x0000000000A07C23L});
	public static final BitSet FOLLOW_syncToFollow_in_cp_expression7825 = new BitSet(new long[]{0xE028848000947CC0L,0xEEE9BBC008820E00L,0x0000000000A07C23L});
	public static final BitSet FOLLOW_sass_map_pairs_in_cp_expression7827 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_expression7830 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_key_or_in_cp_expression_operator7851 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_key_and_in_cp_expression_operator7855 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CP_EQ_in_cp_expression_operator7860 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CP_NOT_EQ_in_cp_expression_operator7864 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_in_cp_expression_operator7868 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_OR_EQ_in_cp_expression_operator7872 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GREATER_in_cp_expression_operator7876 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GREATER_OR_EQ_in_cp_expression_operator7880 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_cp_expression_atom7906 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xEEE9B9F0B8860E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_cp_expression_atom7908 = new BitSet(new long[]{0xF038C5A240847CE0L,0xEEE9B9F0B8820E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_math_expression_in_cp_expression_atom7939 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_cp_expression_atom7955 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9BBF0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_cp_expression_atom7957 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9BBF0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_expression_list_in_cp_expression_atom7961 = new BitSet(new long[]{0x0000000000200000L,0x0000020000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_expression_atom7963 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_expression_atom7968 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions8000 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_math_expressions8007 = new BitSet(new long[]{0xF038C5A240847CE0L,0xEEE9B9F0B8820E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions8009 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression8043 = new BitSet(new long[]{0x0000000000200002L,0x0000000080040400L,0x0000000001000018L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression8085 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000400L,0x0000000000000018L});
	public static final BitSet FOLLOW_set_in_cp_math_expression8088 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xEEE9B9F0B8860E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression8098 = new BitSet(new long[]{0xF038C5A240847CE0L,0xEEE9B9F0B8820E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression8101 = new BitSet(new long[]{0x0000000000200002L,0x0000000080040400L,0x0000000001000018L});
	public static final BitSet FOLLOW_term_in_cp_math_expression_atom8134 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom8142 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unaryOperator_in_cp_math_expression_atom8153 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression_atom8155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_cp_math_expression_atom8161 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xEEE9B9F0B8860E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression_atom8163 = new BitSet(new long[]{0xF038C5A240847CE0L,0xEEE9B9F0B8820E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expression_atom8166 = new BitSet(new long[]{0x0000000000200000L,0x0000020000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression_atom8168 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_math_expression_atom8171 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_AND_in_cp_mixin_declaration8211 = new BitSet(new long[]{0x0808000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_DOT_in_cp_mixin_declaration8218 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration8220 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_HASH_in_cp_mixin_declaration8225 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration8228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration8231 = new BitSet(new long[]{0xE028008001A47C40L,0xEEE9BBC008060A20L,0x0000000001807C03L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration8233 = new BitSet(new long[]{0xE028008001847C40L,0xEEE9BBC008020A20L,0x0000000000807C03L});
	public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration8236 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration8239 = new BitSet(new long[]{0x0808000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration8244 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_less_mixin_guarded_in_cp_mixin_declaration8247 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_SASS_MIXIN_in_cp_mixin_declaration8271 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration8273 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration8275 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration8278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration8281 = new BitSet(new long[]{0xE028008001A47C40L,0xEEE9BBC008060A20L,0x0000000001807C03L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration8283 = new BitSet(new long[]{0xE028008001847C40L,0xEEE9BBC008020A20L,0x0000000000807C03L});
	public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration8286 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration8289 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration8303 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_declaration8306 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_cp_mixin_call8342 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call8344 = new BitSet(new long[]{0x0000080020280002L,0x0000000080040080L,0x0000000001000100L});
	public static final BitSet FOLLOW_HASH_in_cp_mixin_call8348 = new BitSet(new long[]{0x0000080020280002L,0x0000000080040080L,0x0000000001000100L});
	public static final BitSet FOLLOW_AT_IDENT_in_cp_mixin_call8352 = new BitSet(new long[]{0x0000080020280002L,0x0000000080040080L,0x0000000001000100L});
	public static final BitSet FOLLOW_LESS_AND_in_cp_mixin_call8356 = new BitSet(new long[]{0x0000080020280002L,0x0000000080040080L,0x0000000001000100L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8372 = new BitSet(new long[]{0x0000080000000000L,0x0000000080000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_combinator_in_cp_mixin_call8375 = new BitSet(new long[]{0x0000400080200040L,0x0000000000040004L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8377 = new BitSet(new long[]{0x0000400080000040L,0x0000000000000004L});
	public static final BitSet FOLLOW_DOT_in_cp_mixin_call8381 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call8383 = new BitSet(new long[]{0x0000080020280002L,0x0000000080040080L,0x0000000001000100L});
	public static final BitSet FOLLOW_HASH_in_cp_mixin_call8387 = new BitSet(new long[]{0x0000080020280002L,0x0000000080040080L,0x0000000001000100L});
	public static final BitSet FOLLOW_AT_IDENT_in_cp_mixin_call8391 = new BitSet(new long[]{0x0000080020280002L,0x0000000080040080L,0x0000000001000100L});
	public static final BitSet FOLLOW_LESS_AND_in_cp_mixin_call8395 = new BitSet(new long[]{0x0000080020280002L,0x0000000080040080L,0x0000000001000100L});
	public static final BitSet FOLLOW_pseudo_in_cp_mixin_call8405 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call8420 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9BBF0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8422 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9BBF0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call8425 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call8428 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_INCLUDE_in_cp_mixin_call8453 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8455 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call8457 = new BitSet(new long[]{0x0800000000200002L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call8463 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9BBF0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8465 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9BBF0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call8468 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call8471 = new BitSet(new long[]{0x0800000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8476 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_call8479 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACE_in_cp_mixin_block8508 = new BitSet(new long[]{0xF028CC80E0AC7CC0L,0xEEFDB9C4D8060E04L,0x0000000001A07D57L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_block8510 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C4D8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_syncToFollow_in_cp_mixin_block8513 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C4D8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_declarations_in_cp_mixin_block8524 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_webkitKeyframesBlock_in_cp_mixin_block8539 = new BitSet(new long[]{0x0008000000200000L,0x0000100410040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_block8541 = new BitSet(new long[]{0x0008000000000000L,0x0000100410000000L});
	public static final BitSet FOLLOW_RBRACE_in_cp_mixin_block8553 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_cp_mixin_name8574 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args8605 = new BitSet(new long[]{0x0000000001100002L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_cp_mixin_call_args8609 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9B9F0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_args8617 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args8620 = new BitSet(new long[]{0x0000000001100002L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_CP_DOTS_in_cp_mixin_call_args8626 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000004L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_args8628 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SEMI_in_cp_mixin_call_args8633 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_cp_mixin_call_arg8665 = new BitSet(new long[]{0x0000000000280000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg8667 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_cp_mixin_call_arg8670 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9B9F0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg8672 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg8675 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg8687 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg8695 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_arg_in_cp_args_list8742 = new BitSet(new long[]{0x0000000001100002L,0x0000000000000020L,0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_cp_args_list8746 = new BitSet(new long[]{0xE028008000A47C40L,0xEEE9B9C008060A00L,0x0000000001807C03L});
	public static final BitSet FOLLOW_ws_in_cp_args_list8756 = new BitSet(new long[]{0xE028008000847C40L,0xEEE9B9C008020A00L,0x0000000000807C03L});
	public static final BitSet FOLLOW_cp_arg_in_cp_args_list8759 = new BitSet(new long[]{0x0000000001100002L,0x0000000000000020L,0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_cp_args_list8766 = new BitSet(new long[]{0x0000000001200002L,0x0000000000040020L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_args_list8774 = new BitSet(new long[]{0x0000000001000002L,0x0000000000000020L});
	public static final BitSet FOLLOW_set_in_cp_args_list8782 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_args_list8790 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_cp_args_list8807 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_args_list8815 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_cp_arg8838 = new BitSet(new long[]{0x0000000000280002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_arg8840 = new BitSet(new long[]{0x0000000000080002L});
	public static final BitSet FOLLOW_COLON_in_cp_arg8845 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9B9F0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_cp_arg8847 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_expression_in_cp_arg8850 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_cp_arg8852 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_cp_arg8865 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_when_in_less_mixin_guarded8888 = new BitSet(new long[]{0x0000000000200000L,0x0000000000440080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_less_mixin_guarded8890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400080L});
	public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded8893 = new BitSet(new long[]{0x0008000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_less_mixin_guarded8896 = new BitSet(new long[]{0x0008000000100000L});
	public static final BitSet FOLLOW_COMMA_in_less_mixin_guarded8900 = new BitSet(new long[]{0x0000000000200000L,0x0000000000440080L,0x0000000001000000L});
	public static final BitSet FOLLOW_key_and_in_less_mixin_guarded8904 = new BitSet(new long[]{0x0000000000200000L,0x0000000000440080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_less_mixin_guarded8907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400080L});
	public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded8910 = new BitSet(new long[]{0x0008000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_NOT_in_less_condition8936 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_less_condition8938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_less_condition8947 = new BitSet(new long[]{0xE028008000A47C40L,0xEEE9B9C008060A00L,0x0000000001807C03L});
	public static final BitSet FOLLOW_ws_in_less_condition8949 = new BitSet(new long[]{0xE028008000847C40L,0xEEE9B9C008020A00L,0x0000000000807C03L});
	public static final BitSet FOLLOW_cp_variable_in_less_condition8976 = new BitSet(new long[]{0x0000180000200000L,0x0000020002040012L,0x0000000001000000L});
	public static final BitSet FOLLOW_less_function_in_condition_in_less_condition8980 = new BitSet(new long[]{0x0000180000200000L,0x0000020002040012L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_less_condition8983 = new BitSet(new long[]{0x0000180000000000L,0x0000020002000012L});
	public static final BitSet FOLLOW_less_condition_operator_in_less_condition8987 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xEEE9B9F0B8860E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_less_condition8989 = new BitSet(new long[]{0xF038C5A240847CE0L,0xEEE9B9F0B8820E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_math_expression_in_less_condition8992 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_less_condition9010 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_fn_name_in_less_function_in_condition9032 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_less_function_in_condition9034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_less_function_in_condition9037 = new BitSet(new long[]{0xE028008000A47C40L,0xEEE9B9C008060A00L,0x0000000001807C03L});
	public static final BitSet FOLLOW_ws_in_less_function_in_condition9039 = new BitSet(new long[]{0xE028008000847C40L,0xEEE9B9C008020A00L,0x0000000000807C03L});
	public static final BitSet FOLLOW_cp_variable_in_less_function_in_condition9042 = new BitSet(new long[]{0x0000000000200000L,0x0000020000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_less_function_in_condition9044 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_less_function_in_condition9047 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_less_fn_name9069 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_in_less_selector_interpolation_exp9132 = new BitSet(new long[]{0x0008000040000082L,0x0000000000000401L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_less_selector_interpolation_exp9135 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_SIGN_in_less_selector_interpolation9178 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_less_selector_interpolation9180 = new BitSet(new long[]{0x0008000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_less_selector_interpolation9182 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_less_selector_interpolation9185 = new BitSet(new long[]{0x0000000000200000L,0x0000000400040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_less_selector_interpolation9187 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_RBRACE_in_less_selector_interpolation9190 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_exp9217 = new BitSet(new long[]{0x0008800040000002L,0x0000000000000401L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_sass_selector_interpolation_exp9220 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var9267 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_sass_interpolation_expression_var9269 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_WS_in_sass_interpolation_expression_var9271 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_expression_in_sass_interpolation_expression_var9274 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_WS_in_sass_interpolation_expression_var9276 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_RBRACE_in_sass_interpolation_expression_var9279 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_property_in_sass_nested_properties9319 = new BitSet(new long[]{0x0000000000280000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_nested_properties9321 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_sass_nested_properties9324 = new BitSet(new long[]{0xF828C5A240A47CE0L,0xEEE9B9F0B8860E0DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_sass_nested_properties9326 = new BitSet(new long[]{0xF828C5A240847CE0L,0xEEE9B9F0B8820E0DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_propertyValue_in_sass_nested_properties9330 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_nested_properties9332 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_sass_nested_properties9337 = new BitSet(new long[]{0xF028CC80E0AC7CC0L,0xEEFDB9C4C8060E04L,0x0000000001A07D57L});
	public static final BitSet FOLLOW_ws_in_sass_nested_properties9339 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C4C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_syncToFollow_in_sass_nested_properties9342 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C4C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_declarations_in_sass_nested_properties9344 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_RBRACE_in_sass_nested_properties9347 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_EXTEND_in_sass_extend9368 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_extend9370 = new BitSet(new long[]{0x1008C400E0080080L,0x0010000040000404L,0x0000000000000010L});
	public static final BitSet FOLLOW_simpleSelectorSequence_in_sass_extend9372 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_extend9375 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_extend9378 = new BitSet(new long[]{0x1008C400E0280080L,0x0010000040040404L,0x0000000001000010L});
	public static final BitSet FOLLOW_ws_in_sass_extend9380 = new BitSet(new long[]{0x1008C400E0080080L,0x0010000040000404L,0x0000000000000010L});
	public static final BitSet FOLLOW_simpleSelectorSequence_in_sass_extend9383 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_extend9388 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_SASS_OPTIONAL_in_sass_extend9390 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector9413 = new BitSet(new long[]{0x0008800000000002L,0x0000000000000400L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_sass_extend_only_selector9415 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_sass_debug9437 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_debug9447 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_expression_in_sass_debug9449 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_ERROR_in_sass_error9470 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_error9472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_STRING_in_sass_error9474 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_if_in_sass_control9495 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_for_in_sass_control9499 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_each_in_sass_control9503 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_while_in_sass_control9507 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_IF_in_sass_if9528 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9B9F0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_sass_if9530 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_sass_control_expression_in_sass_if9533 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_if9535 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_if9538 = new BitSet(new long[]{0x0000000000200002L,0x0003000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_if9541 = new BitSet(new long[]{0x0000000000000000L,0x0003000000000000L});
	public static final BitSet FOLLOW_sass_else_in_sass_if9544 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_ELSE_in_sass_else9567 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_else9569 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_else9572 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_ELSE_in_sass_else9586 = new BitSet(new long[]{0x0008000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_else9588 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_else9593 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9B9F0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_SASS_ELSEIF_in_sass_else9600 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9B9F0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_sass_else9603 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_sass_control_expression_in_sass_else9606 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_else9608 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_else9611 = new BitSet(new long[]{0x0000000000200002L,0x0003000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_else9614 = new BitSet(new long[]{0x0000000000000000L,0x0003000000000000L});
	public static final BitSet FOLLOW_sass_else_in_sass_else9617 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_in_sass_control_expression9640 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_FOR_in_sass_for9661 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_for9663 = new BitSet(new long[]{0xE028008000847C40L,0xEEE9B9C008020A00L,0x0000000000807C03L});
	public static final BitSet FOLLOW_cp_variable_in_sass_for9665 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_for9667 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_for9671 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_for9675 = new BitSet(new long[]{0xF038C5A240847CE0L,0xEEE9B9F0B8820E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_math_expression_in_sass_for9677 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_for9679 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_for9683 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_for9687 = new BitSet(new long[]{0xF038C5A240847CE0L,0xEEE9B9F0B8820E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_math_expression_in_sass_for9689 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_for9691 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_for9694 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_EACH_in_sass_each9715 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_each9717 = new BitSet(new long[]{0xE028008000847C40L,0xEEE9B9C008020A00L,0x0000000000807C03L});
	public static final BitSet FOLLOW_sass_each_variables_in_sass_each9719 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_each9721 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_each9725 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_each9729 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_expression_list_in_sass_each9732 = new BitSet(new long[]{0xF838C5A240B47CE0L,0xEEE9B9F0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_sass_each9735 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_each9738 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9B9F0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_sass_each9742 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_each9748 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_sass_each_variables9769 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_each_variables9781 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_each_variables9784 = new BitSet(new long[]{0xE028008000A47C40L,0xEEE9B9C008060A00L,0x0000000001807C03L});
	public static final BitSet FOLLOW_ws_in_sass_each_variables9786 = new BitSet(new long[]{0xE028008000847C40L,0xEEE9B9C008020A00L,0x0000000000807C03L});
	public static final BitSet FOLLOW_cp_variable_in_sass_each_variables9789 = new BitSet(new long[]{0x0000000000300002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_SASS_WHILE_in_sass_while9814 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_while9816 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_sass_control_expression_in_sass_while9818 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_while9820 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_while9823 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACE_in_sass_control_block9844 = new BitSet(new long[]{0xF028CC80E0AC7CC0L,0xEEFDB9C4C8060E04L,0x0000000001A07D57L});
	public static final BitSet FOLLOW_ws_in_sass_control_block9846 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C4C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_declarations_in_sass_control_block9849 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_RBRACE_in_sass_control_block9852 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_FUNCTION_in_sass_function_declaration9894 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration9896 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_sass_function_name_in_sass_function_declaration9898 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration9900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_sass_function_declaration9903 = new BitSet(new long[]{0xE028008001A47C40L,0xEEE9BBC008060A20L,0x0000000001807C03L});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration9905 = new BitSet(new long[]{0xE028008001847C40L,0xEEE9BBC008020A20L,0x0000000000807C03L});
	public static final BitSet FOLLOW_cp_args_list_in_sass_function_declaration9908 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_sass_function_declaration9911 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration9913 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_sass_function_declaration9916 = new BitSet(new long[]{0xF028CC80E0AC7CC0L,0xEEFDB9C4C8060E04L,0x0000000001A07D57L});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration9918 = new BitSet(new long[]{0xF028CC80E08C7CC0L,0xEEFDB9C4C8020E04L,0x0000000000A07D57L});
	public static final BitSet FOLLOW_declarations_in_sass_function_declaration9921 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_RBRACE_in_sass_function_declaration9924 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_sass_function_name9945 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_RETURN_in_sass_function_return9966 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_sass_function_return9968 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_expression_in_sass_function_return9970 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_CONTENT_in_sass_content9991 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_less_import_types10010 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_less_when10033 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_key_and10052 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_key_or10070 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_key_only10088 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred1_Css3446 = new BitSet(new long[]{0xE028848000847C40L,0xEEE9B9C008420A80L,0x0000000000807C03L});
	public static final BitSet FOLLOW_mediaQueryList_in_synpred1_Css3449 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred2_Css3510 = new BitSet(new long[]{0xE028848000847C40L,0xEEE9B9C008420A80L,0x0000000000807C03L});
	public static final BitSet FOLLOW_mediaQueryList_in_synpred2_Css3513 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred3_Css3564 = new BitSet(new long[]{0xE028848000847C40L,0xEEE9B9C008420A80L,0x0000000000807C03L});
	public static final BitSet FOLLOW_mediaQueryList_in_synpred3_Css3567 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred4_Css31096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SEMI_in_synpred4_Css31099 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_MIXIN_in_synpred5_Css31197 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred5_Css31204 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred5_Css31206 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_HASH_in_synpred5_Css31211 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred5_Css31214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_synpred5_Css31217 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000FFFFFFFL});
	public static final BitSet FOLLOW_RPAREN_in_synpred5_Css31225 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000FFFFFFBL});
	public static final BitSet FOLLOW_LBRACE_in_synpred5_Css31235 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred6_Css31253 = new BitSet(new long[]{0x0010000000200000L,0x0000000000040000L,0x0000000001000004L});
	public static final BitSet FOLLOW_ws_in_synpred6_Css31256 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_synpred6_Css31259 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000004L});
	public static final BitSet FOLLOW_ws_in_synpred6_Css31263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SEMI_in_synpred6_Css31266 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred7_Css31289 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_synpred8_Css31314 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css31317 = new BitSet(new long[]{0x1008CC00E0080080L,0x00100000C0000404L,0x0000000000000110L});
	public static final BitSet FOLLOW_selectorsGroup_in_synpred8_Css31319 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_synpred8_Css31328 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css31330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_synpred8_Css31332 = new BitSet(new long[]{0x0008000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css31334 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred8_Css31337 = new BitSet(new long[]{0x0000000000280000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css31339 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_synpred8_Css31342 = new BitSet(new long[]{0x0008000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css31344 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred8_Css31347 = new BitSet(new long[]{0x0000000000200000L,0x0000020000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css31349 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_synpred8_Css31352 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_selectorsGroup_in_synpred8_Css31357 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css31360 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_synpred8_Css31363 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_synpred9_Css31375 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred10_Css31490 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_synpred10_Css31493 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred11_Css31537 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_key_and_in_synpred11_Css31540 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred12_Css31567 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_key_and_in_synpred12_Css31570 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred13_Css31652 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_in_synpred14_Css31681 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred15_Css31827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SEMI_in_synpred15_Css31830 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_MIXIN_in_synpred16_Css31905 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred16_Css31912 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred16_Css31914 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_HASH_in_synpred16_Css31919 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred16_Css31922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_synpred16_Css31925 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000FFFFFFFL});
	public static final BitSet FOLLOW_RPAREN_in_synpred16_Css31933 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFBFFFFFFFFL,0x000000000FFFFFFBL});
	public static final BitSet FOLLOW_LBRACE_in_synpred16_Css31945 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred17_Css31971 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000004L});
	public static final BitSet FOLLOW_ws_in_synpred17_Css31973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_SEMI_in_synpred17_Css31976 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred18_Css31995 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_synpred19_Css32023 = new BitSet(new long[]{0x0000000000280000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred19_Css32025 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_synpred19_Css32028 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_in_synpred20_Css32045 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred21_Css33544 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_synpred21_Css33547 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_in_synpred22_Css33638 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_declaration_in_synpred23_Css33938 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_in_synpred24_Css33950 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_nested_properties_in_synpred25_Css33963 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_synpred26_Css33977 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css33980 = new BitSet(new long[]{0x1008CC00E0080080L,0x00100000C0000404L,0x0000000000000110L});
	public static final BitSet FOLLOW_selectorsGroup_in_synpred26_Css33982 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_synpred26_Css33991 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css33993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_synpred26_Css33995 = new BitSet(new long[]{0x0008000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css33997 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred26_Css34000 = new BitSet(new long[]{0x0000000000280000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css34002 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_synpred26_Css34005 = new BitSet(new long[]{0x0008000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css34007 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred26_Css34010 = new BitSet(new long[]{0x0000000000200000L,0x0000020000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css34012 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_RPAREN_in_synpred26_Css34015 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_selectorsGroup_in_synpred26_Css34020 = new BitSet(new long[]{0x0800000000200000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css34023 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_synpred26_Css34026 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_synpred27_Css34038 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_property_in_synpred28_Css34055 = new BitSet(new long[]{0x0000000000280000L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred28_Css34057 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_synpred28_Css34060 = new BitSet(new long[]{0xF7FFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000FFFFFFFL});
	public static final BitSet FOLLOW_set_in_synpred28_Css34072 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_declaration_in_synpred29_Css34089 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred30_Css34101 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred31_Css34122 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred32_Css34420 = new BitSet(new long[]{0x1000C000A0080000L,0x0010000000000004L});
	public static final BitSet FOLLOW_esPred_in_synpred32_Css34423 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSelector_in_synpred33_Css34458 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred34_Css34465 = new BitSet(new long[]{0x1000C000A0080000L,0x0010000000000004L});
	public static final BitSet FOLLOW_esPred_in_synpred34_Css34468 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PIPE_in_synpred35_Css34579 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionName_in_synpred36_Css36140 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred36_Css36142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_synpred36_Css36145 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionName_in_synpred37_Css36175 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred37_Css36177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_synpred37_Css36180 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred38_Css36350 = new BitSet(new long[]{0xF028C5A240847CE0L,0xEEE9B9F0B8820E0DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_ws_in_synpred38_Css36355 = new BitSet(new long[]{0x0000000000100000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_operator_in_synpred38_Css36358 = new BitSet(new long[]{0xF028C5A240A47CE0L,0xEEE9B9F0B8860E0DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_synpred38_Css36360 = new BitSet(new long[]{0xF028C5A240847CE0L,0xEEE9B9F0B8820E0DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_term_in_synpred38_Css36369 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionName_in_synpred39_Css36442 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040080L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred39_Css36444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_synpred39_Css36447 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fnAttributeName_in_synpred40_Css37057 = new BitSet(new long[]{0x0000000000280000L,0x0000000002040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred40_Css37059 = new BitSet(new long[]{0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_set_in_synpred40_Css37062 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_in_synpred41_Css37097 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred42_Css37191 = new BitSet(new long[]{0xF028C5A240847CE0L,0xEEE9B9F0B8820E0DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_ws_in_synpred42_Css37196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SOLIDUS_in_synpred42_Css37199 = new BitSet(new long[]{0xF028C5A240A47CE0L,0xEEE9B9F0B8860E0DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_synpred42_Css37201 = new BitSet(new long[]{0xF028C5A240847CE0L,0xEEE9B9F0B8820E0DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_term_in_synpred42_Css37210 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred44_Css37666 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_synpred44_Css37669 = new BitSet(new long[]{0xF838C5A240A47CE0L,0xEEE9B9F0B8C60E8DL,0x0000000001A67F23L});
	public static final BitSet FOLLOW_ws_in_synpred44_Css37671 = new BitSet(new long[]{0xF838C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_expression_in_synpred44_Css37674 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_atom_in_synpred45_Css37741 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred46_Css37764 = new BitSet(new long[]{0x0008180006000000L,0x0000000000000012L});
	public static final BitSet FOLLOW_cp_expression_operator_in_synpred46_Css37767 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred47_Css37793 = new BitSet(new long[]{0xF038C5A240847CE0L,0xEEE9B9F0B8C20E8DL,0x0000000000A67F23L});
	public static final BitSet FOLLOW_cp_expression_atom_in_synpred47_Css37796 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_math_expression_in_synpred48_Css37936 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred49_Css38069 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000400L,0x0000000000000018L});
	public static final BitSet FOLLOW_set_in_synpred49_Css38072 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred50_Css38361 = new BitSet(new long[]{0x0000080000000000L,0x0000000080000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_combinator_in_synpred50_Css38364 = new BitSet(new long[]{0x0000000000200002L,0x0000000000040000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ws_in_synpred50_Css38366 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pseudo_in_synpred51_Css38402 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred52_Css38410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LPAREN_in_synpred52_Css38413 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_webkitKeyframeSelectors_in_synpred53_Css38529 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred54_Css39774 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_synpred54_Css39777 = new BitSet(new long[]{0x0000000000000002L});
}
