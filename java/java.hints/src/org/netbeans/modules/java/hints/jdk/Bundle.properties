# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
DN_org.netbeans.modules.java.hints.jdk.ThrowableInitCause=Unnecessary Throwable.initCause
DESC_org.netbeans.modules.java.hints.jdk.ThrowableInitCause=Finds invocations of Throwable.initCause which can be replaced with simple constructor invocation. \
When the "Never alter result of getMessage()" checkbox is unchecked, <code>(IllegalStateException) new IllegalStateException().initCause(ex)</code> will be \
rewritten to <code>new IllegalStateException(ex)</code>, which will alter the value of getMessage(). When the checkbox is checked, the \
code will become <code>new IllegalStateException(null, ex)</code>. Similar rule holds for creating the exception from <code>getMessage()</code> \
or <code>getLocalizedMessage()</code> of the cause.
FIX_ThrowableInitCause=Use exception constructor
ERR_ThrowableInitCause=Unnecessary use of Throwable.initCause
LBL_org.netbeans.modules.java.hints.jdk.ThrowableInitCause.STRICT_KEY=Always keep result of getMessage()
TP_org.netbeans.modules.java.hints.jdk.ThrowableInitCause.STRICT_KEY=Always keep result of getMessage()

DN_org.netbeans.modules.java.hints.jdk.ConvertToStringSwitch=Use switch over Strings where possible.
DESC_org.netbeans.modules.java.hints.jdk.ConvertToStringSwitch=Marks cascades of ifs which can be converted to switch over Strings .
ERR_ConvertToStringSwitch=Convert to switch over Strings
FIX_ConvertToStringSwitch=Convert to switch over Strings
LBL_org.netbeans.modules.java.hints.jdk.ConvertToStringSwitch.KEY_ALSO_EQ=Also consider String comparison by the == operator
TP_org.netbeans.modules.java.hints.jdk.ConvertToStringSwitch.KEY_ALSO_EQ=Whether String comparison by the == operator should be considered to be a string comparison.

DN_org.netbeans.modules.java.hints.jdk.JoinCatches=Join catch sections using multicatch
DESC_org.netbeans.modules.java.hints.jdk.JoinCatches=Join catch sections using multicatch
ERR_JoinCatches=Can be replaced with multicatch
FIX_JoinCatches=Replace with multicatch

DN_org.netbeans.modules.java.hints.jdk.UseSpecificCatch=Use specific catch
DESC_org.netbeans.modules.java.hints.jdk.UseSpecificCatch=Converts catch (Throwable) or catch (Exception) to multicatch \
    (when java source level is 7 and above) \
    or to several catch clauses (for earlier Java platforms) catching the exceptions thrown by the try body. \
    The watched exception types can be configured; fully qualified names must be used.
ERR_UseSpecificCatch=Can be replaced with multicatch or several catch clauses catching specific exceptions
FIX_UseSpecificCatch=Replace with multicatch catching specific exceptions
FIX_UseSpecificCatchSplit=Generate catch handlers for specific exceptions
FIX_UseSpecificCatchSingle=Replace with catch({0})

DN_org.netbeans.modules.java.hints.jdk.ConvertToARM=Convert to try-with-resources
DESC_org.netbeans.modules.java.hints.jdk.ConvertToARM=Converts try finally block to try-with-resources
TXT_ConvertToARM=Convert to try-with-resources

DN_Javac_canUseDiamond=Can Use Diamond
DESC_Javac_canUseDiamond=Warns about places where the diamond operator in JDK 7 can be used instead of explicit type parameters
FIX_ConvertToDiamond=Use diamond inference
ConvertToDiamondBulkHintPanel.jLabel1.text=Use diamond operator for new-instance expressions inside:
ConvertToDiamondBulkHintPanel.initializer.text=Variable Initializer
ConvertToDiamondBulkHintPanel.assignment.text=Assignment
ConvertToDiamondBulkHintPanel.returnStatement.text=Return Statement
ConvertToDiamondBulkHintPanel.other.text=Other
ConvertToDiamondBulkHintPanel.argument.text=Method Argument

DN_org.netbeans.modules.java.hints.jdk.AddUnderscores=Add Underscores
DESC_org.netbeans.modules.java.hints.jdk.AddUnderscores=Proposed to add underscores to integer literals to improve their readability
ERR_org.netbeans.modules.java.hints.jdk.AddUnderscores=Underscores could be used to improve readability
FIX_org.netbeans.modules.java.hints.jdk.AddUnderscores=Change the literal to: {0}
AddUnderscoresPanel.jLabel1.text=&Binary:
AddUnderscoresPanel.jLabel3.text=&Hexadecimal:
AddUnderscoresPanel.jLabel2.text=&Decimal:
AddUnderscoresPanel.replaceExisting.text=&Also transform literals with underscores

DN_AnnotationProcessors.overridingGetSupportedAnnotations=AbstractProcessor.getSupportedAnnotationTypes() is overridden
DESC_AnnotationProcessors.overridingGetSupportedAnnotations=Overriding Processor.getSupportedAnnotationTypes() may lead to \
unnecessary classloading during development, and may prevent important optimalizations. \
consider using @javax.annotation.processing.SupportedAnnotationTypes

DN_Javac_canUseLambda=Convert to Lambda or Member Reference
DESC_Javac_canUseLambda=Converts anonymous inner classes to lambda expressions or member references
LBL_Javac_canUseLambda_preferMemberReferences=Use Member References When Possible
TP_Javac_canUseLambda_preferMemberReferences=Prefer using of member references over lambda expressions when possible
UseSpecificCatchCustomizer.btnRemoveGeneric.text=Remove
UseSpecificCatchCustomizer.lblGenericList.text=Generic Exception Types:
UseSpecificCatchCustomizer.btnAddGeneric.text=Add
UseSpecificCatchCustomizer.tfNewType.text=

DN_UnnecessaryBoxing=Unnecessary boxing
DESC_UnnecessaryBoxing=Explicit boxing using e.g. <b>new Integer(x)</b> or <b>Integer.valueOf(x)</b> is not necessary in JDK 5+. \
    This hint detects such situations, and suggest to remove the boxing call.
DN_UnnecessaryUnboxing=Unnecessary unboxing
DESC_UnnecessaryUnboxing=Explicit unboxing using e.g. <b>x.intValue()</b> is not necessary under JDK 5+. \
    The hint finds such calls and suggests the removal.


OPTNAME_PreferCastsToBoxing=Prefer type casts to boxing
OPTDESC_PreferCastsToBoxing=When explicit change of the value type is necessary, prefer type cast (with an implicit \
    boxing done by the compiler) to manual boxing.
LBL_org.netbeans.modules.java.hints.jdk.ConvertToStringSwitch.KEY_THRESHOLD=Minimum branch count
TP_org.netbeans.modules.java.hints.jdk.ConvertToStringSwitch.KEY_THRESHOLD=The hint will appear only when if-statement chain contains at least this number of branches
OPT_ConvertIfToSwitch_EmptyDefault=Generate empty default
DESC_ConvertIfToSwitch_EmptyDefault=If checked, the hint will generate an empty default even if no final `else'' was present

DN_CanUseVarForExplicitType=Convert Explicit Type to Var
DESC_CanUseVarForExplicitType=Converts explicit type of local variable to var.
DN_ConvertVarToExplicitType=Convert Var to Explicit Type
DESC_ConvertVarToExplicitType=Converts var type local variable to explicit type.

DESC_AnnoProcessor_ObsoleteSupportedSource=If the project's source level is greater than the maximum supported by the Annotation Processor, compilation that uses the \
    Processor always generates an useless compiler warning. If the processor does not declare <b>any @SupportedSourceVersion at all</b>. \
    derives from <b>javax.annotation.processing.AbstractProcessor</b>,  the maximum supported version will <b>default to 1.6</b>, which will produce \
    another useless warning during compilation. <p/>\
    It is recommended to return at least the current project's source level. \
    For future compatibility, consider to return <b>SourceVersion.latest()</b>; most Processors are not affected by future language changes.
CheckRegexTopComponent.regexLabel.text=Re&gular Expression:
CheckRegexTopComponent.exampleLabel.text=E&xample:
CheckRegexTopComponent.strictCheckBox.text=Str&ict Check

#{0}: PatternSyntaxException.getDescription()
#{1}: PatternSyntaxException.getMessage()
#{2}: PatternSyntaxException.getPattern()
#{3}: PatternSyntaxException.getIndex()
DN_RegExp=Invalid regular expression: {0}
