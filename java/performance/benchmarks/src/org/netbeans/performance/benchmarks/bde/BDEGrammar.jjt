/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

options {
    MULTI=true;
    VISITOR=true;
    NODE_DEFAULT_VOID=true;
    VISITOR_EXCEPTION="Exception";
}

PARSER_BEGIN(BDEParser)
package org.netbeans.performance.benchmarks.bde.generated;
import org.netbeans.performance.benchmarks.bde.TestSpecBuilder;

public class BDEParser {

    public static TestSpecBuilder parseTestSpec(String spec) throws Exception {
        BDEParser t = new BDEParser(new java.io.StringReader(spec));
        return new TestSpecBuilder(t.Start());
    }
}

PARSER_END(BDEParser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

void Letter() : {}
{
  < ["_","a"-"z","A"-"Z"] >
}

void Digit() : {}
{
  < ["0"-"9"] >
}

void String() #String : {}
{
  < ["_","0"-"9","a"-"z","A"-"Z"] > (< ["_","0"-"9","a"-"z","A"-"Z"] >)*
}

ASTStart Start() #Start : {}
{
  [ LoadDefinition() ";" ] TestDefinitionList() [ ";" StoreDefinition() ]
  { return jjtThis; }
}

void LoadDefinition() #LoadDefinition : {}
{
// ClassName() is a little bit tricky
  "load" [ ClassName() ]
}

void StoreDefinition() #StoreDefinition : {}
{
// ClassName() is a little bit tricky
  "store" [ ClassName() ]
}

void Identifier() #Identifier : {}
{
  < ["_","a"-"z","A"-"Z"] ( ["_","a"-"z","A"-"Z"] | ["0"-"9"] )* >
}

void TestDefinitionList() #TestDefinitionList : {}
{
  TestDefinition() ( ":" TestDefinition())*
}

void TestDefinition() #TestDefinition : {}
{
    ClassName() [ "[" MethodFilterList() "]" ] [ "@" ArgDataList()]
}

void ClassName() #ClassName : {}
{
    < ["_","a"-"z","A"-"Z"] (["_","a"-"z","A"-"Z"] | ["0"-"9"])* ("." (["_","a"-"z","A"-"Z"] | ["0"-"9"])+)* >
}

void MethodFilterList() #MethodFilterList : {}
{
    MethodFilter() ( "," MethodFilter())*
}

void MethodFilter() #MethodFilter : {}
{
    < (["_","a"-"z","A"-"Z"] | ["0"-"9"] | "*")+ >
}

void ArgDataList() #ArgDataList: {}
{
    "[" ArgDataSeries() "]" ("," "[" ArgDataSeries() "]")*
}

void ArgDataSeries() #ArgDataSeries : {}
{
    ArgData() (";" ArgData())*
}

void ArgData() #ArgData : {}
{
    Id() "=" ValSpecList()
}

void Id() #Id : {}
{
    Identifier()
}

void ValSpecList() #ValSpecList : {}
{
    ValSpec() ("," ValSpec())*
}

void ValSpec() #ValSpec : {}
{
   String() | IntegerDef()
}

void IntegerDef() #IntegerDef : {}
{
    Integer() [".." Integer() [":" Integer()]]
}

void Integer() #Integer : {}
{
    <INTEGER_LITERAL>
}