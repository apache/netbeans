# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

AssertTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@assert</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>You can use the <code>@assert</code> annotation in the documentation block of a method to automatically generate simple, \
yet meaningful tests instead of incomplete test cases when using the Skeleton Generator.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @assert (0, 0) == 0\n\
\ */\n\
public function add($a, $b) {\n\
\    return $a + $b;\n}\n\
</code></pre>\n\
<p>These annotations are transformed into test code such as</p>\n\
<pre><code>\n\
/**\n\
\ * Generated from @assert (0, 0) == 0.\n\
\ */\n\
public function testAdd() {\n\
\    $o = new Calculator;\n\
\    $this->assertEquals(0, $o->add(0, 0));\n\
}\n\
</code></pre>
BackupGlobalsTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@backupGlobals</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The backup and restore operations for global variables can be completely disabled for all tests of a test case class.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @backupGlobals disabled\n\
\ */\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\    // ...\n\
}\n\
</code></pre>\n\
<p>The <code>@backupGlobals</code> annotation can also be used on the test method level. This allows for a fine-grained configuration of the backup and restore operations.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre></code>\n\
/**\n\
\ * @backupGlobals disabled\n\
\ */\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\    /**\n\
\     * @backupGlobals enabled\n\
\     */\n\
\    public function testThatInteractsWithGlobalVariables() {\n\
\        // ...\n\
\    }\n\
}\n\
</code></pre>
BackupStaticAttributesTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@backupStaticAttributes</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The backup and restore operations for static attributes of classes can be completely disabled for all tests of a test case class.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @backupStaticAttributes disabled\n\
\ */\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\    // ...\n\
}\n\
</code></pre>\n\
<p>The <code>@backupStaticAttributes</code> annotation can also be used on the test method level. This allows for a fine-grained configuration of the backup and restore operations.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @backupStaticAttributes disabled\n\
\ */\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\    /**\n\
\     * @backupStaticAttributes enabled\n\
\     */\n\
\    public function testThatInteractsWithStaticAttributes() {\n\
\        // ...\n\
\    }\n\
}\n\
</code></pre>
CodeCoverageIgnoreTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@codeCoverageIgnore*</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@codeCoverageIgnore*</code> annotations can be used to exclude lines of code from the coverage analysis.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @codeCoverageIgnore\n\
\ */\n\
class Foo {\n\
\    public function bar() {\n\
\    }\n\
}\n\
\n\
class Bar {\n\
\    /**\n\
\     * @codeCoverageIgnore\n\
\     */\n\
\    public function foo() {\n\
\    }\n\
}\n\
if (FALSE) {\n\
\    // @codeCoverageIgnoreStart\n\
\    print '*';\n\
\    // @codeCoverageIgnoreEnd\n\
}\n\
exit; // @codeCoverageIgnore\n\
</code></pre>
CoversTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@covers</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@covers</code> annotation can be used in the test code to specify which method(s) a test method wants to test.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @covers BankAccount::getBalance\n\
\ */\n\
public function testBalanceIsInitiallyZero() {\n\
\    $this->assertEquals(0, $this->ba->getBalance());\n\
}\n\
</code></pre>\n\
<p>If provided, only the code coverage information for the specified method(s) will be considered.</p>\n\
<table border="0">\
<tr>\
<th align="left">\
    Annotation\
</th>\
<th align="left">\
    Description\
</th>\
</tr>\
<tr>\
<td align="left" valign="top">\
    <code>@covers&nbsp;ClassName::methodName</code>\
</td>\
<td align="left">\
    Specifies that the annotated test method covers the specified method.\
</td>\
</tr>\
<tr>\
<td align="left" valign="top">\
    <code>@covers&nbsp;ClassName</code>\
</td>\
<td align="left">\
    Specifies that the annotated test method covers all methods of a given class.\
</td>\
</tr>\
<tr>\
<td align="left" valign="top">\
    <code>@covers&nbsp;ClassName&lt;extended&gt;</code>\
</td>\
<td align="left" valign="top">\
    Specifies that the annotated test method covers all methods of a given class and its parent class(es) and interface(s).\
</td>\
</tr>\
<tr>\
<td align="left" valign="top">\
    <code>@covers&nbsp;ClassName::&lt;public&gt;</code>\
</td>\
<td align="left">\
    Specifies that the annotated test method covers all public methods of a given class.\
</td>\
</tr>\
<tr>\
<td align="left" valign="top">\
    <code>@covers&nbsp;ClassName::&lt;protected&gt;</code>\
</td>\
<td align="left">\
    Specifies that the annotated test method covers all protected methods of a given class.\
</td>\
</tr>\
<tr>\
<td align="left" valign="top">\
    <code>@covers&nbsp;ClassName::&lt;private&gt;</code>\
</td>\
<td align="left">\
    Specifies that the annotated test method covers all private methods of a given class.\
</td>\
</tr>\
<tr>\
<td align="left" valign="top">\
    <code>@covers&nbsp;ClassName::&lt;!public&gt;</code>\
</td>\
<td align="left">\
    Specifies that the annotated test method covers all methods of a given class that are not public.\
</td>\
</tr>\
<tr>\
<td align="left" valign="top">\
    <code>@covers&nbsp;ClassName::&lt;!protected&gt;</code>\
</td>\
<td align="left">\
    Specifies that the annotated test method covers all methods of a given class that are not protected.\
</td>\
</tr>\
<tr>\
<td align="left" valign="top">\
    <code>@covers&nbsp;ClassName::&lt;!private&gt;</code>\
</td>\
<td align="left">\
    Specifies that the annotated test method covers all methods of a given class that are not private.\
</td>\
</tr>\
</table>
DataProviderTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@dataProvider</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>A test method can accept arbitrary arguments. These arguments are to be provided by a data provider method. \
The data provider method to be used is specified using the <code>@dataProvider</code> annotation.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
class DataTest extends PHPUnit_Framework_TestCase {\n\
\    /**\n\
\     * @dataProvider provider\n\
\     */\n\
\    public function testAdd($a, $b, $c) {\n\
\        $this->assertEquals($c, $a + $b);\n\
\    }\n\
\n\
\    public function provider() {\n\
\        return array(\n\
\          array(0, 0, 0),\n\
\          array(0, 1, 1),\n\
\          array(1, 0, 1),\n\
\          array(1, 1, 3)\n\
\        );\n\
\    }\n\
}\n\
</code></pre>
DependsTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@depends</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>PHPUnit supports the declaration of explicit dependencies between test methods. Such dependencies do not define the order in which the test methods \
are to be executed but they allow the returning of an instance of the test fixture by a producer and passing it to the dependent consumers.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
class DependencyFailureTest extends PHPUnit_Framework_TestCase {\n\
\    public function testOne() {\n\
\        $this->assertTrue(FALSE);\n\
\    }\n\
\n\
\    /**\n\
\     * @depends testOne\n\
\     */\n\
\    public function testTwo() {\n\
\    }\n\
}\n\
</code></pre>
ExpectedExceptionTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@expectedException</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>Use the <code>@expectedException</code> annotation to test whether an exception is thrown inside the tested code.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
class ExceptionTest extends PHPUnit_Framework_TestCase {\n\
\    /**\n\
\     * @expectedException InvalidArgumentException\n\
\     */\n\
\    public function testException() {\n\
\    }\n\
}\n\
</code></pre>
ExpectedExceptionCodeTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@expectedExceptionCode</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@expectedExceptionCode</code> annotation, in conjunction with the <code>@expectedException</code> allows making assertions on the error code \
of a thrown exception thus being able to narrow down a specific exception.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\    /**\n\
\     * @expectedException     MyException\n\
\     * @expectedExceptionCode 20\n\
\     */\n\
\    public function testExceptionHasErrorcode20() {\n\
\        throw new MyException('Some Message', 20);\n\
\    }\n\
}\n\
</code></pre>
ExpectedExceptionMessageTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@expectedExceptionMessage</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@expectedExceptionMessage</code> annotation works similar to <code>@expectedExceptionCode</code> as it lets you make an assertion \
on the error message of an exception.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\    /**\n\
\     * @expectedException        MyException\n\
\     * @expectedExceptionMessage Some Message\n\
\     */\n\
\    public function testExceptionHasRightMessage() {\n\
\        throw new MyException('Some Message', 20);\n\
\    }\n\
}\n\
</code></pre>\n\
<p>The expected message can be a substring of the exception Message. This can be useful to only assert that a certain name or parameter that was passed in shows up \
in the exception and not fixate the whole exception message in the test.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\     /**\n\
\      * @expectedException        MyException\n\
\      * @expectedExceptionMessage broken\n\
\      */\n\
\     public function testExceptionHasRightMessage() {\n\
\         $param = "broken";\n\
\         throw new MyException('Invalid parameter "'.$param.'".', 20);\n\
\     }\n\
}\n\
</code></pre>
GroupTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@group</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>A test can be tagged as belonging to one or more groups using the <code>@group</code> annotation.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\    /**\n\
\     * @group specification\n\
\     */\n\
\    public function testSomething() {\n\
\    }\n\
\n\
\    /**\n\
\     * @group regression\n\
\     * @group bug2204\n\
\     */\n\
\    public function testSomethingElse() {\n\
\    }\n\
}\n\
</code></pre>\n\
<p>Tests can be selected for execution based on groups using the <code>--group</code> and <code>--exclude-group</code> switches of the command-line test runner or using the respective directives \
of the XML configuration file.</p>
OutputBufferingTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@outputBuffering</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@outputBuffering</code> annotation can be used to control PHP's output buffering.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @outputBuffering enabled\n\
\ */\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\    // ...\n\
}\n\
</code></pre>\n\
<p>The <code>@outputBuffering</code> annotation can also be used on the test method level. This allows for fine-grained control over the output buffering.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @outputBuffering disabled\n\
\ */\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\    /**\n\
\     * @outputBuffering enabled\n\
\     */\n\
\    public function testThatPrintsSomething() {\n\
\        // ...\n\
\    }\n\
}\n\
</code></pre>
TestTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@test</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>As an alternative to prefixing your test method names with test, you can use the <code>@test</code> annotation in a method's docblock to mark it as a test method.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\ * @test\n\
\ */\n\
public function initialBalanceShouldBe0() {\n\
\    $this->assertEquals(0, $this->ba->getBalance());\n\
}\n\
</code></pre>
AuthorTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@author</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@author</code> annotation is an alias for the <code>@group</code> annotation and allows to filter tests based on their authors.</p>
AfterTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@after</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@after</code> annotation can be used to specify methods that should be called after each test method in a test case class.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\   /**\n\
\    * @after\n\
\    */\n\
\   public function tearDownSomeFixtures() {\n\
\       // ...\n\
\   }\n\
\n\
\   /**\n\
\    * @after\n\
\    */\n\
\   public function tearDownSomeOtherFixtures() {\n\
\       // ...\n\
\   }\n\
}\n\
</code></pre>
AfterClassTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@afterClass</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@afterClass</code> annotation can be used to specify static methods that should be called after all test methods in a test class have been run to clean up shared fixtures.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\   /**\n\
\    * @afterClass\n\
\    */\n\
\   public static function tearDownSomeSharedFixtures() {\n\
\       // ...\n\
\   }\n\
\n\
\   /**\n\
\    * @afterClass\n\
\    */\n\
\   public static function tearDownSomeOtherSharedFixtures() {\n\
\       // ...\n\
\   }\n\
}\n\
</code></pre>
BeforeTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@before</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@before</code> annotation can be used to specify methods that should be called before each test method in a test case class.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\   /**\n\
\    * @before\n\
\    */\n\
\   public function setUpDownSomeFixtures() {\n\
\       // ...\n\
\   }\n\
\n\
\   /**\n\
\    * @before\n\
\    */\n\
\   public function setUpDownSomeOtherFixtures() {\n\
\       // ...\n\
\   }\n\
}\n\
</code></pre>
BeforeClassTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@beforeClass</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@beforeClass</code> annotation can be used to specify static methods that should be called before any test methods in a test class are run to set up shared fixtures.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\   /**\n\
\    * @beforeClass\n\
\    */\n\
\   public static function setUpDownSomeSharedFixtures() {\n\
\       // ...\n\
\   }\n\
\n\
\   /**\n\
\    * @beforeClass\n\
\    */\n\
\   public static function setUpDownSomeOtherSharedFixtures() {\n\
\       // ...\n\
\   }\n\
}\n\
</code></pre>
CoversDefaultClassTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@coversDefaultClass</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@coversDefaultClass</code> annotation can be used to specify a default namespace or class name. That way long names don't need to be repeated for every @covers annotation.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\* @coversDefaultClass \Foo\CoveredClass\n\
\*/\n\
class CoversDefaultClassTest extends PHPUnit_Framework_TestCase {\n\
\   /**\n\
\    * @covers ::publicMethod\n\
\    */\n\
\   public function testSomething() {\n\
\       $o = new Foo\CoveredClass;\n\
\       $o->publicMethod();\n\
\   }\n\
}</code></pre>
CoversNothingTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@coversNothing</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@coversNothing</code> annotation can be used in the test code to specify that no code coverage information will be recorded for the annotated test case.</p>\n\
<p>The annotation can be used on the class and the method level and will override any <code>@covers</code> tags.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
class GuestbookIntegrationTest extends PHPUnit_Extensions_Database_TestCase {\n\
\   /**\n\
\    * @coversNothing\n\
\    */\n\
\   public function testAddEntry() {\n\
\       $guestbook = new Guestbook();\n\
\       $guestbook->addEntry("suzy", "Hello world!");\n\
\n\
\       $queryTable = $this->getConnection()->createQueryTable(\n\
\           'guestbook', 'SELECT * FROM guestbook'\n\
\       );\n\
\n\
\       $expectedTable = $this->createFlatXmlDataSet("expectedBook.xml")\n\
\                             ->getTable("guestbook");\n\
\n\
\       $this->assertTablesEqual($expectedTable, $queryTable);\n\
\   }\n\
}</code></pre>
ExpectedExceptionMessageRegExpTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@expectedExceptionMessageRegExpTag</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The expected message can also be specified as a regular expression using the <code>@expectedExceptionMessageRegExp</code> annotation. This is helpful for situations where a substring is not adequate for matching a given message.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\    /**\n\
\     * @expectedException              MyException\n\
\     * @expectedExceptionMessageRegExp /Argument \d+ can not be an? \w+/\n\
\     */\n\
\    public function testExceptionHasRightMessage() {\n\
\        throw new MyException('Argument 2 can not be an integer');\n\
\    }\n\
}</code></pre>
LargeTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@large</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@large</code> annotation is an alias for <code>@group large</code>.</p>\n\
<p>If the <code>PHP_Invoker</code> package is installed and strict mode is enabled, a large test will fail if it takes longer than 60 seconds to execute. This timeout is configurable via the <code>timeoutForLargeTests</code> attribute in the XML configuration file.</p>
MediumTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@medium</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@medium</code> annotation is an alias for <code>@group medium</code>. A medium test must not depend on a test marked as <code>@large</code>.</p>\n\
<p>If the <code>PHP_Invoker</code> package is installed and strict mode is enabled, a medium test will fail if it takes longer than 10 seconds to execute. This timeout is configurable via the <code>timeoutForMediumTests</code> attribute in the XML configuration file.</p>
PreserveGlobalStateTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@preserveGlobalState</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>When a test is run in a separate process, PHPUnit will attempt to preserve the global state from the parent process by serializing all globals in the parent process and unserializing them in the child process. \
This can cause problems if the parent process contains globals that are not serializable. To fix this, you can prevent PHPUnit from preserving global state with the <code>@preserveGlobalState</code> annotation.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\   /**\n\
\    * @runInSeparateProcess\n\
\    * @preserveGlobalState disabled\n\
\    */\n\
\   public function testInSeparateProcess() {\n\
\       // ...\n\
\   }\n\
}</code></pre>
RequiresTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@requires</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@requires</code> annotation can be used skip tests when common preconditions, like the PHP Version or installed extensions, are not met.</p>\n\
<table border="0">\
<tr>\
<th align="left">\
    Type\
</th>\
<th align="left">\
    Possible Values\
</th>\
<th align="left">\
    Examples\
</th>\
</tr>\
<tr>\
<td align="left" valign="top">\
    <code>PHP</code>\
</td>\
<td align="left">\
    Any PHP version identifier\
</td>\
<td align="left" valign="top">\
    <code>@requires PHP 5.3.3</code><br><code>@requires PHP 5.4-dev</code>\
</td>\
</tr>\
<tr>\
<td align="left" valign="top">\
    <code>PHPUnit</code>\
</td>\
<td align="left">\
    Any PHPUnit version identifier\
</td>\
<td align="left" valign="top">\
    <code>@requires PHPUnit 3.6.3</code><br><code>@requires PHPUnit 4.6</code>\
</td>\
</tr>\
<tr>\
<td align="left" valign="top">\
    <code>OS</code>\
</td>\
<td align="left">\
    A regexp matching <code>PHP_OS</code>\
</td>\
<td align="left" valign="top">\
    <code>@requires OS Linux</code><br><code>@requires OS WIN32|WINNT</code>\
</td>\
</tr>\
<tr>\
<td align="left" valign="top">\
    <code>function</code>\
</td>\
<td align="left">\
    Any valid parameter to <code>function_exists</code>\
</td>\
<td align="left" valign="top">\
    <code>@requires function imap_open</code><br><code>@requires function ReflectionMethod::setAccessible</code>\
</td>\
</tr>\
<tr>\
<td align="left" valign="top">\
    <code>extension</code>\
</td>\
<td align="left">\
    Any extension name along with an optional version identifier\
</td>\
<td align="left" valign="top">\
    <code>@requires extension mysqli</code><br><code>@requires extension redis 2.2.0</code>\
</td>\
</tr>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
 * @requires extension mysqli\n\
 */\n\
class DatabaseTest extends PHPUnit_Framework_TestCase {\n\
\   /**\n\
\    * @requires PHP 5.3\n\
\    */\n\
\   public function testConnection() {\n\
\       // Test requires the mysqli extension and PHP >= 5.3\n\
\   }\n\
\n\
\   // ... All other tests require the mysqli extension\n\
}</code></pre>
SmallTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@small</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@small</code> annotation is an alias for <code>@group small</code>. A small test must not depend on a test marked as <code>@medium</code> or <code>@large</code>.</p>\n\
<p>If the <code>PHP_Invoker</code> package is installed and strict mode is enabled, a small test will fail if it takes longer than 1 second to execute. This timeout is configurable via the <code>timeoutForSmallTests</code> attribute in the XML configuration file.</p>
UsesTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@uses</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>The <code>@uses</code> annotation specifies code which will be executed by a test, but is not intended to be covered by the test. A good example is a value object which is necessary for testing a unit of code.</p>\n\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
/**\n\
\* @covers BankAccount::deposit\n\
\* @uses   Money\n\
\*/\n\
public function testMoneyCanBeDepositedInAccount() {\n\
\   // ...\n\
}</code></pre>\n\
<p>This annotation is especially useful in strict coverage mode where unintentionally covered code will cause a test to fail.</p>
