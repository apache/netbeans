<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<!DOCTYPE api-answers PUBLIC "-//NetBeans//DTD Arch Answers//EN" "../nbbuild/antsrc/org/netbeans/nbbuild/Arch.dtd" [
  <!ENTITY api-questions SYSTEM "../nbbuild/antsrc/org/netbeans/nbbuild/Arch-api-questions.xml">
]>


<api-answers
  question-version="1.29"
  author="mroskanin@netbeans.org"
>

  &api-questions;


<!--
        <question id="arch-what" when="init">
            What is this project good for?
            <hint>
            Please provide here a few lines describing the project,
            what problem it should solve, provide links to documentation,
            specifications, etc.
            </hint>
        </question>
-->
<answer id="arch-what">
    The module is an implementation of the
    <api name="org.netbeans.modules.editor.settings" type="import" group="java" category="private">Editor Settings API</api>
    providing a settings storage on the default filesystem.
</answer>


<!--
        <question id="arch-overall" when="init">
            Describe the overall architecture. 
            <hint>
            What will be API for 
            <a href="http://openide.netbeans.org/tutorial/api-design.html#design.apiandspi">
                clients and what support API</a>? 
            What parts will be pluggable?
            How will plug-ins be registered? Please use <code>&lt;api type="export"/&gt;</code>
            to describe your general APIs.
            If possible please provide 
            simple diagrams. 
            </hint>
        </question>
-->
<answer id="arch-overall">

<p>
The <code>editor/settings/storage</code> module provides friend
<api name="EditorSettingsStorageAPI" group="java" type="export" category="friend" />
comprising classes in the <code>org.netbeans.modules.editor.settings.storage.api</code>
package. It also defines the structure of the settings storage and the structure
of XML files with settings. The following XML files are supported.
</p>

<ul>
    <li>Fonts &amp; Colors - contains colorings that define various attributes
        for rendering text tokens in the editor.<br/>
        <api name="EditorFontsColors-1_1.dtd" group="dtd" type="export" category="official" url="http://www.netbeans.org/dtds/EditorFontsColors-1_1.dtd"><code>-//NetBeans//DTD Editor Fonts and Colors settings 1.1//EN</code></api>
    </li>
    <li>Key Bindings - contains definitions of keyboard shortcust and their
        associated editor actions.<br/>
        <api name="EditorKeyBindings-1_1.dtd" group="dtd" type="export" category="official" url="http://www.netbeans.org/dtds/EditorKeyBindings-1_1.dtd"><code>-//NetBeans//DTD Editor KeyBindings settings 1.1//EN</code></api>
    </li>
</ul>

<h3>Profiles and setting folders</h3>
<p>
The setting files are stored in <code>MimeLookup</code> in the folders hierarchy
under the <code>Editors/</code> folder on the default filesystem. The storage follows
the main principle of <code>MimeLookup</code> and allows to define mime type
specific settings as well as settings that apply for all editors. This is achieved
by placing the setting files in the appropriate folder (i.e. in the mime type
folder such as <code>Editors/&lt;mime-type&gt;</code> or in the <code>Editors/</code>
folder itself for the global settings).
</p>

<p>
No matter whether the files are stored in <code>Editors/</code> or in a mime type
specific folder their further position relative to that folder and their meaning
is the same. 
</p>

<p>
Both font &amp; colors and key bindings are grouped in so called profiles that
allow user switching quickly between predefined sets of colorings or key bindings. An
example of profiles can be key bindings for NetBeans, Eclipse and Emacs. Each of those
profiles defines keyboard shortcuts for IDE actions that are known from other products.
Another example is the profiles defining normal and inverse color schemes.
In Netbeans they are called NetBeans and CityLights.
</p>

<p>
The <code>editor/settings/storage</code> module dedicates a special folder for
each profile and stores all the profile related files in that folder.
</p>

<h4>Special profiles and mime types</h4>
<p>
The module provides a special treatment for profiles with names starting with
the <code>"test"</code> string. These profiles are handled as a temporary in-memory
profiles, which are not persisted to the disk. They are mainly used for 'preview'
purposes in the Options dialog.
</p>

<p>
The module also recognizes special mime paths, which <code>String</code> representation
starts with the <code>"test*_"</code> string (e.g. <code>"test123ed_text/x-java"</code>)
and provides MimeLookup for those mime paths. The contents of MimeLookup for those
special mime paths is basically the same as MimeLookup for the mime path without the
leading <code>test*_</code> string, but it contains <code>FontColorsSettings</code>
and <code>KeyBindingSettings</code> instances specially constructed for the 'test'
mime type. Again this is mainly used for 'preview' purposes by the Options dialog.
</p>

<p>
Since this functionality is defacto an API it is being tracked as 
<api name="SpecialProfilesAndMimeTypesAPI" category="friend" group="java" type="export" />.
</p>

<h3>User changes and defaults</h3>

<p>
The editor settings storage is organized in the way that allows storing user
changes separately from the default values provided by modules. This is useful
when a users wants to reset their profiles back to the original values shipped
with the product. This is achieved by defining a special subfolder called
<code>Defaults</code> for every profile. The default colorings and key bindings
provided by modules are then registered in this <code>Defaults</code> subfolder
while user changes are stored directly in the profile's folder. When restoring the
original values the files with user changes are simply deleted and the profile
is reloaded from the default files.
</p>

<h4>Font &amp; color files</h4>

<p><b>Since version 1.10</b> the storage module does not require coloring files to be
called any special name. The coloring profiles and files are expected to be
registered by modules under a special folder called <code>FontsColors</code>. The
structure below shows an example of registering several different coloring files
for all editors and the text/x-java mime type.
</p>

<pre>
    Editors
     |- FontsColors
     |   |- NetBeans
     |       |- Defaults
     |           |- foo.xml
     |           |- bar.xml
     |- text
         |- x-java
             |- FontsColors
                 |- NetBeans
                     |- Defaults
                         |- xyz.xml
                         |- abc.xml
</pre>

<p>
In order to distinguish files containing token-related colorings from those
with highlight-related colorings the storage module recognizes a special file
attribute called <code>nbeditor-settings-ColoringType</code>, which value can
either be <code>token</code> or <code>highlight</code>. If a coloring file does
not specify this attribute it is automatically expected to contain token-related
colorings.
</p>

<p>
Generally, the files with default values are stored in <code>Defaults</code>
subfolders while the files with user changes are stored directly in the
profile's folder.
</p>

<p>
The default profile for font &amp; colors is called 'NetBeans'.
</p>

<p><b>Prior to version 1.10</b> the storage module expected colorings in the
three different types of files. They are still recognized to support
backwards compatibility, but modules are suggusted to use the new registration
scheme. All of those three files had the same structure, but different purpose.
</p>

<ul>
<li>
    <code>coloring.xml</code> - defines colorings used for rendering tokens from
    a particular language (i.e. mime type). 
</li>
<li>
    <code>defaultColoring.xml</code> - defines language neutral colorings, which
    can be used as fallback for language specific colorings. This file can only
    be specified in the <code>Editors/&lt;profile-name&gt;/Defaults</code> folders.
    If specified in a mime type subfolder it will be ignored.
</li>
<li>
    <code>editorColoring.xml</code> - defines colorings that do not apply for
    tokens. These colorings define for example the color for highlighting the row
    with a caret, etc. They are not mime type specific and can only be specified
    in the <code>Editors/&lt;profile-name&gt;/Defaults</code> folders.
    If specified in a mime type subfolder it will be ignored.
</li>
</ul>


<h4>Key bindings files</h4>
<p>
<b>Since version 1.10</b> modules can provide their keybindings in multiple files
placed under the special folder called <code>Keybindings</code> and its profiles'
subfolders. Similarily as for colorings the files with default key bindings are stored in <code>Defaults</code>
subfolder and user changes are stored in files directly in the profile's folder.
The example below shows registration of several keybinding files for all editors
and the text/x-java mime type.
</p>

<pre>
    Editors
     |- Keybindings
     |   |- NetBeans
     |       |- Defaults
     |           |- foo.xml
     |           |- bar.xml
     |- text
         |- x-java
             |- Keybindings
                 |- NetBeans
                     |- Defaults
                         |- xyz.xml
                         |- abc.xml
</pre>

<p>
<b>Prior to version 1.10</b> the default profile for key bindings, called NetBeans,
had not been stored in its own folder. Therefore the default key bindings for
the NetBeans profile used to be stored directly in
<code>Editors/&lt;mime-type&gt;/Defaults/keybindings.xml</code> and similarily
user changes used to be stored in <code>Editors/&lt;mime-type&gt;/keybindings.xml</code>.
This has been deprecated, but is still supported for backwards compatibility reasons.
</p>

<p>
Also the special mime type called <code>text/base</code>, has been deprecated
and should not be used anymore. It is however still supported to preserve
backwards compatibility.
</p>

<h3>Platform specific settings</h3>

<p>
<b>Since 1.10</b> it is possible to mark setting files as applicable only on a certain
platform (a.k.a. operating system). This was mainly introduced for keybindings,
which are generally platform sensitive settings, but can be used for any other
setting type supported by the storage module.
</p>

<p class="nonnormative">
Some platforms (eg. Mac) define their own special rules for the use of some
combinations of keystrokes (eg. ctrl+Q closes the app) that applications on that
platform have to obey. NetBeans mitigates this problem by introducing a special
module ide/applemenu, which is only loaded on Mac and which overrides
<code>keybindings.xml</code> files provided by some Netbeans modules (eg. editor and java).
This approach works albeit some severe limitations. However with introducing 
multiple setting files this would no longer be practical, which is why platform 
specific settings have been introduced.
</p>

<p>
The storage module recognizes a special file attribute for marking
platform specific setting files called <code>nbeditor-settings-targetOS</code>.
The rules for its use follow.
</p>

<ul>
<li>
    Any file that does not define <code>nbeditor-settings-targetOS</code> is loaded
    on all platforms. All such files will be loaded exactly in the same order as
    they appear on the system filesystem.
</li>
<li>
    If a file defines <code>nbeditor-settings-targetOS</code> attribute, but its
    value does not correspond to the current Operating System, the file is ignored.
</li>
<li>
    If a file defines <code>nbeditor-settings-targetOS</code> attribute and its
    value designates the current Operating System, the file will be loaded.
    Furthermore, any such a file will be loaded <b>after</b> other files in the
    same folder that do not define this attribute and therefore its settings will
    <b>override</b> settings from those other files.
</li>
<li>
    If there is more files that define <code>nbeditor-settings-targetOS</code>
    attribute and are eligible for loading on the current Operating System, 
    they will be loaded in the same order as they appear on the system filesystem.
</li>
</ul>

<p>
The available values that can be used for the <code>nbeditor-settings-targetOS</code>
attribute are the string names of the <code>OS_*</code> constants in <code>org.openide.util.Utilities</code>
class. So, for example the following file will only be loaded on MacOS and its settings
will override settings from all other files that do not specify the target OS attribute.
</p>

<pre>
&lt;folder name="Editors"&gt;
  &lt;folder name="Keybindings"&gt;
    &lt;folder name="NetBeans"&gt;
      &lt;folder name="Defaults"&gt;
        &lt;file name="keybindings-for-mac.xml" url="..."&gt;
          &lt;attr name="nbeditor-settings-targetOS" stringvalue="OS_MAC"/&gt;
        &lt;/file&gt;
      &lt;/folder&gt;
    &lt;/folder&gt;
  &lt;/folder&gt;
&lt;/folder&gt;
</pre>

</answer>



<!--
        <question id="arch-quality" when="init">
            How will the <a href="http://www.netbeans.org/community/guidelines/q-evangelism.html">quality</a>
            of your code be tested and 
            how are future regressions going to be prevented?
            <hint>
            What kind of testing do
            you want to use? How much functionality, in which areas,
            should be covered by the tests? 
            </hint>
        </question>
-->
<answer id="arch-quality">
    There are unit tests available covering the module's functionality.
</answer>



<!--
        <question id="arch-time" when="init">
            What are the time estimates of the work?
            <hint>
            Please express your estimates of how long the design, implementation,
            stabilization are likely to last. How many people will be needed to
            implement this and what is the expected milestone by which the work should be 
            ready?
            </hint>
        </question>
-->
<answer id="arch-time">
    The modules is available in CVS trunk.
</answer>



<!--
        <question id="arch-usecases" when="init">
            Describe the main <a href="http://openide.netbeans.org/tutorial/api-design.html#usecase">
            use cases</a> of the new API. Who will use it under
            what circumstances? What kind of code would typically need to be written
            to use the module?
        </question>
-->
<answer id="arch-usecases">

<usecase id="new-options-dialog" name="New Options Dialog">
<p>
The friend API provided by this module is used only by the new options dialog. It
is not expected to have any other clients or users. The API gives the options
dialog a read/write access to the editor settings storage allowing it to implement
UI for maintaining the settings.
</p>
</usecase>

<usecase id="defining-a-coloring" name="Defining a coloring">
<p>
Various modules need to provide predefined font a colors for text tokens from
languages they support. An example of such a module is <code>java/editor</code>
which defines colorings for tokens in java files. Defining colorings is as simple
as writing an XML file with the appropriate information. The example below shows
how to do that.
</p>

<pre>
&lt;?xml version="1.0"  encoding="UTF-8"?&gt;
&lt;!DOCTYPE fontscolors PUBLIC "-//NetBeans//DTD Editor Fonts and Colors settings 1.2//EN" "https://netbeans.apache.org/dtds/EditorFontsColors-1_2.dtd"&gt;

&lt;fontscolors&gt;
    &lt;colordef name="bg0" color="202020"/&gt;
    &lt;fontcolor name="mylang-keyword" foreColor="0000CC" bgColor="bg0" default="keyword"&gt;
        &lt;font style="bold" /&gt;
    &lt;/fontcolor&gt;
&lt;/fontscolors&gt;
</pre>

<p>
Please see the
<a href="https://netbeans.apache.org/dtds/EditorFontsColors-1_2.dtd">http://www.netbeans.org/dtds/EditorFontsColors-1_2.dtd</a>
for more details.
</p>
</usecase>

<usecase id="defining-a-key-binding" name="Defining a key binding">
<p>
As well as providing predefined colorings modules need to provide predefined
key bindings. This can be accomplished by writing another simple XML file.
</p>

<pre>
&lt;?xml version="1.0"  encoding="UTF-8"?&gt;
&lt;!DOCTYPE bindings PUBLIC "-//NetBeans//DTD Editor KeyBindings settings 1.1//EN" "http://www.netbeans.org/dtds/EditorKeyBindings-1_1.dtd"&gt;

&lt;bindings&gt;
    &lt;bind actionName="goto-source" key="O-O"/&gt;
&lt;/bindings&gt;
</pre>

<p>
Please see the
<a href="http://www.netbeans.org/dtds/EditorKeyBindings-1_1.dtd">http://www.netbeans.org/dtds/EditorKeyBindings-1_1.dtd</a>
for more details.
</p>
</usecase>

</answer>

<!--
        <question id="compat-i18n" when="impl">
            Is your module correctly internationalized?
            <hint>
            Correct internationalization means that it obeys instructions 
            at <a href="http://www.netbeans.org/download/dev/javadoc/OpenAPIs/org/openide/doc-files/i18n-branding.html">
            NetBeans I18N pages</a>.
            </hint>
        </question>
-->
<answer id="compat-i18n">
Yes.
</answer>



<!--
        <question id="compat-standards" when="init">
            Does the module implement or define any standards? Is the 
            implementation exact or does it deviate somehow?
        </question>
-->
<answer id="compat-standards">
Compatible with standards.
</answer>



<!--
        <question id="compat-version" when="impl">
            Can your module coexist with earlier and future
            versions of itself? Can you correctly read all old settings? Will future
            versions be able to read your current settings? Can you read
            or politely ignore settings stored by a future version?
            
            <hint>
            Very helpful for reading settings is to store version number
            there, so future versions can decide whether how to read/convert
            the settings and older versions can ignore the new ones.
            </hint>
        </question>
-->
<answer id="compat-version">
<p>
The module stores settings in its own XML files in the folders hierarchy under
the <code>Editors</code> folder on the default file system. Changes in
settings are stored as differences from the default values.
</p>
<p>
The legacy settings are not handled by this module. The editor module itself
supports the legacy settings and combines them with the new ones.
</p>
</answer>



<!--
        <question id="dep-jre" when="final">
            Which version of JRE do you need (1.2, 1.3, 1.4, etc.)?
            <hint>
            It is expected that if your module runs on 1.x that it will run 
            on 1.x+1 if no, state that please. Also describe here cases where
            you run different code on different versions of JRE and why.
            </hint>
        </question>
-->
<answer id="dep-jre">
JDK1.4 and higher can be used.
</answer>



<!--
        <question id="dep-jrejdk" when="final">
            Do you require the JDK or is the JRE enough?
        </question>
-->
<answer id="dep-jrejdk">
JRE is sufficient.
</answer>



<!--
        <question id="dep-nb" when="init">
            What other NetBeans projects and modules does this one depend on?
            <hint>
            If you want, describe such projects as imported APIs using
            the <code>&lt;api name="identification" type="import or export" category="stable" url="where is the description" /&gt;</code>
            </hint>
        </question>
-->
<answer id="dep-nb">
  <defaultanswer generate='here'/>
</answer>



<!--
        <question id="dep-non-nb" when="init">
            What other projects outside NetBeans does this one depend on?
            
            <hint>
            Some non-NetBeans projects are packaged as NetBeans modules
            (see <a href="http://libs.netbeans.org/">libraries</a>) and
            it is preferred to use this approach when more modules may
            depend on such third-party library.
            </hint>
        </question>
-->
<answer id="dep-non-nb">
No other projects.
</answer>



<!--
        <question id="dep-platform" when="init">
            On which platforms does your module run? Does it run in the same
            way on each?
            <hint>
            If your module is using JNI or deals with special differences of
            OSes like filesystems, etc. please describe here what they are.
            </hint>
        </question>
-->
<answer id="dep-platform">
All platforms.
</answer>



<answer id="deploy-dependencies">
Nothing.
</answer>



<!--
        <question id="deploy-jar" when="impl">
            Do you deploy just module JAR file(s) or other files as well?
            <hint>
            If your module consists of just one module JAR file, just confirm that.
            If it uses more than one JAR, describe where they are located, how
            they refer to each other. 
            If it consist of module JAR(s) and other files, please describe
            what is their purpose, why other files are necessary. Please 
            make sure that installation/uninstallation leaves the system 
            in state as it was before installation.
            </hint>
        </question>
-->
<answer id="deploy-jar">
No additional files.
</answer>



<!--
        <question id="deploy-nbm" when="impl">
            Can you deploy an NBM via the Update Center?
            <hint>
            If not why?
            </hint>
        </question>
-->
<answer id="deploy-nbm">
Yes.
</answer>



<!--
        <question id="deploy-packages" when="init">
            Are packages of your module made inaccessible by not declaring them
            public?
            
            <hint>
            NetBeans module system allows restriction of access rights to
            public classes of your module from other modules. This prevents
            unwanted dependencies of others on your code and should be used
            whenever possible (<a href="http://www.netbeans.org/download/javadoc/OpenAPIs/org/openide/doc-files/upgrade.html#3.4-public-packages">
            public packages
            </a>). If you do not restrict access to your classes you are
            making it too easy for other people to misuse your implementation
            details, that is why you should have good reason for not 
            restricting package access.
            </hint>
        </question>
-->
<answer id="deploy-packages">
Yes, only the package with the friend API is public.
</answer>



<!--
        <question id="deploy-shared" when="final">
            Do you need to be installed in the shared location only, or in the user directory only,
            or can your module be installed anywhere?
            <hint>
            Installation location shall not matter, if it does explain why.
            Consider also whether <code>InstalledFileLocator</code> can help.
            </hint>
        </question>
-->
<answer id="deploy-shared">
Anywhere.
</answer>



<!--
        <question id="exec-classloader" when="impl">
            Does your code create its own class loader(s)?
            <hint>
            A bit unusual. Please explain why and what for.
            </hint>
        </question>
-->
<answer id="exec-classloader">
No.
</answer>



<!--
        <question id="exec-component" when="impl">
            Is execution of your code influenced by any (string) property
            of any of your components?
            
            <hint>
            Often <code>JComponent.getClientProperty</code>, <code>Action.getValue</code>
            or <code>PropertyDescriptor.getValue</code>, etc. are used to influence
            a behavior of some code. This of course forms an interface that should
            be documented. Also if one depends on some interface that an object
            implements (<code>component instanceof Runnable</code>) that forms an
            API as well.
            </hint>
        </question>
-->
<answer id="exec-component">
No.
</answer>



<!--
        <question id="exec-introspection" when="impl">
            Does your module use any kind of runtime type information (<code>instanceof</code>,
            work with <code>java.lang.Class</code>, etc.)?
            <hint>
            Check for cases when you have an object of type A and you also
            expect it to (possibly) be of type B and do some special action. That
            should be documented. The same applies on operations in meta-level
            (Class.isInstance(...), Class.isAssignableFrom(...), etc.).
            </hint>
        </question>
-->
<answer id="exec-introspection">
No.
</answer>



<!--
        <question id="exec-privateaccess" when="final">
            Are you aware of any other parts of the system calling some of 
            your methods by reflection?
            <hint>
            If so, describe the "contract" as an API. Likely private or friend one, but
            still API and consider rewrite of it.
            </hint>
        </question>
-->
<answer id="exec-privateaccess">
No.
</answer>



<!--
        <question id="exec-process" when="impl">
            Do you execute an external process from your module? How do you ensure
            that the result is the same on different platforms? Do you parse output?
            Do you depend on result code?
            <hint>
            If you feed an input, parse the output please declare that as an API.
            </hint>
        </question>
-->
<answer id="exec-process">
No.
</answer>



<!--
        <question id="exec-property" when="impl">
            Is execution of your code influenced by any environment or
            Java system (<code>System.getProperty</code>) property?
            
            <hint>
            If there is a property that can change the behavior of your 
            code, somebody will likely use it. You should describe what it does 
            and the <a href="http://openide.netbeans.org/tutorial/api-design.html#life">stability category</a>
            of this API. You may use
            <pre>
                &lt;api type="export" group="property" name="id" category="private" url="http://..."&gt;
                    description of the property, where it is used, what it influence, etc.
                &lt;/api&gt;            
            </pre>
            </hint>
        </question>
-->
<answer id="exec-property">
No.
</answer>



<!--
        <question id="exec-reflection" when="impl">
            Does your code use Java Reflection to execute other code?
            <hint>
            This usually indicates a missing or insufficient API in the other
            part of the system. If the other side is not aware of your dependency
            this contract can be easily broken.
            </hint>
        </question>
-->
<answer id="exec-reflection">
No.
</answer>



<!--
        <question id="exec-threading" when="impl">
            What threading models, if any, does your module adhere to?
            <hint>
                If your module calls foreign APIs which have a specific threading model,
                indicate how you comply with the requirements for multithreaded access
                (synchronization, mutexes, etc.) applicable to those APIs.
                If your module defines any APIs, or has complex internal structures
                that might be used from multiple threads, declare how you protect
                data against concurrent access, race conditions, deadlocks, etc.,
                and whether such rules are enforced by runtime warnings, errors, assertions, etc.
                Examples: a class might be non-thread-safe (like Java Collections); might
                be fully thread-safe (internal locking); might require access through a mutex
                (and may or may not automatically acquire that mutex on behalf of a client method);
                might be able to run only in the event queue; etc.
                Also describe when any events are fired: synchronously, asynchronously, etc.
                Ideas: <a href="http://core.netbeans.org/proposals/threading/index.html#recommendations">Threading Recommendations</a> (in progress)
            </hint>
        </question>
-->
<answer id="exec-threading">
No special threading model is used.
</answer>



<!--
        <question id="format-clipboard" when="impl">
            Which data flavors (if any) does your code read from or insert to
            the clipboard (by access to clipboard on means calling methods on <code>java.awt.datatransfer.Transferable</code>?
            
            <hint>
            Often Node's deal with clipboard by usage of <code>Node.clipboardCopy, Node.clipboardCut and Node.pasteTypes</code>.
            Check your code for overriding these methods.
            </hint>
        </question>
-->
<answer id="format-clipboard">
No clipboard support.
</answer>



<!--
        <question id="format-dnd" when="impl">
            Which protocols (if any) does your code understand during Drag &amp; Drop?
            <hint>
            Often Node's deal with clipboard by usage of <code>Node.drag, Node.getDropType</code>. 
            Check your code for overriding these methods. Btw. if they are not overridden, they
            by default delegate to <code>Node.clipboardCopy, Node.clipboardCut and Node.pasteTypes</code>.
            </hint>
        </question>
-->
<answer id="format-dnd">
No D&amp;D.
</answer>



<!--
        <question id="format-types" when="impl">
            Which protocols and file formats (if any) does your module read or write on disk,
            or transmit or receive over the network?
        </question>
-->
<answer id="format-types">
<p>
The module reads and writes XML files in the folders hierarchy under the
<code>Editors</code> folder on the default filesystem. The structure of the files
is governed by the following DTDs.
</p>
<ul>
    <li><a href="http://www.netbeans.org/dtds/EditorFontsColors-1_1.dtd">-//NetBeans//DTD Editor Fonts and Colors settings 1.1//EN</a></li>
    <li><a href="http://www.netbeans.org/dtds/EditorKeyBindings-1_1.dtd">-//NetBeans//DTD Editor KeyBindings settings 1.1//EN</a></li>
</ul>
</answer>



<!--
        <question id="lookup-lookup" when="init">
            Does your module use <code>org.openide.util.Lookup</code>
            or any similar technology to find any components to communicate with? Which ones?
            
            <hint>
            Please describe the interfaces you are searching for, where 
            are defined, whether you are searching for just one or more of them,
            if the order is important, etc. Also classify the stability of such
            API contract.
            </hint>
        </question>
-->
<answer id="lookup-lookup">
Yes. module creates a new MimeDataProvider and plug it into the MimeLookup. Also EditorSettings
implementation is registered into default lookup.
</answer>



<!--
        <question id="lookup-register" when="final">
            Do you register anything into lookup for other code to find?
            <hint>
            Do you register using layer file or using <code>META-INF/services</code>?
            Who is supposed to find your component?
            </hint>
        </question>
-->
<answer id="lookup-register">
Yes. The implementation of <code>MimeDataProvider</code> is
registered via <code>META-INF/services</code>.
</answer>



<!--
        <question id="lookup-remove" when="final">
            Do you remove entries of other modules from lookup?
            <hint>
            Why? Of course, that is possible, but it can be dangerous. Is the module
            your are masking resource from aware of what you are doing?
            </hint>
        </question>
-->
<answer id="lookup-remove">
No.
</answer>



<!--
        <question id="perf-exit" when="final">
            Does your module run any code on exit?
        </question>
-->
<answer id="perf-exit">
No.
</answer>



<!--
        <question id="perf-huge_dialogs" when="final">
            Does your module contain any dialogs or wizards with a large number of
            GUI controls such as combo boxes, lists, trees, or text areas?
        </question>
-->
<answer id="perf-huge_dialogs">
No.
</answer>



<!--
        <question id="perf-limit" when="init">
            Are there any hard-coded or practical limits in the number or size of
            elements your code can handle?
        </question>
-->
<answer id="perf-limit">
No limits.
</answer>



<!--
        <question id="perf-mem" when="final">
            How much memory does your component consume? Estimate
            with a relation to the number of windows, etc.
        </question>
-->
<answer id="perf-mem">
No specific memory usage.
</answer>



<!--
        <question id="perf-menus" when="final">
            Does your module use dynamically updated context menus, or
            context-sensitive actions with complicated enablement logic?
        </question>
-->
<answer id="perf-menus">
No.
</answer>



<!--
        <question id="perf-progress" when="final">
            Does your module execute any long-running tasks?
            
            <hint>Long running tasks should never block 
            AWT thread as it badly hurts the UI
            <a href="http://performance.netbeans.org/responsiveness/issues.html">
            responsiveness</a>.
            Tasks like connecting over
            network, computing huge amount of data, compilation
            be done asynchronously (for example
            using <code>RequestProcessor</code>), definitively it should 
            not block AWT thread.
            </hint>
        </question>
-->
<answer id="perf-progress">
No.
</answer>



<!--
        <question id="perf-scale" when="init">
            Which external criteria influence the performance of your
            program (size of file in editor, number of files in menu, 
            in source directory, etc.) and how well your code scales?
            <hint>
            Please include some estimates, there are other more detailed 
            questions to answer in later phases of implementation. 
            </hint>
        </question>
-->
<answer id="perf-scale">
There is no performance sensitive code in the module.
</answer>



<!--
        <question id="perf-spi" when="init">
            How the performance of the plugged in code will be enforced?
            <hint>
            If you allow foreign code to be plugged into your own module, how
            do you enforce that it will behave correctly and quickly and will not
            negatively influence the performance of your own module?
            </hint>
        </question>
-->
<answer id="perf-spi">
No pluggins allowad.
</answer>



<!--
        <question id="perf-startup" when="final">
            Does your module run any code on startup?
        </question>
-->
<answer id="perf-startup">
No.
</answer>



<!--
        <question id="perf-wakeup" when="final">
            Does any piece of your code wake up periodically and do something
            even when the system is otherwise idle (no user interaction)?
        </question>
-->
<answer id="perf-wakeup">
No.
</answer>



<!--
        <question id="resources-file" when="final">
            Does your module use <code>java.io.File</code> directly?
            
            <hint>
            NetBeans provide a logical wrapper over plain files called 
            <code>org.openide.filesystems.FileObject</code> that
            provides uniform access to such resources and is the preferred
            way that should be used. But of course there can be situations when
            this is not suitable.
            </hint>
        </question>
-->
<answer id="resources-file">
No.
</answer>



<!--
        <question id="resources-layer" when="final">
            Does your module provide own layer? Does it create any files or
            folders in it? What it is trying to communicate by that and with which 
            components?
            
            <hint>
            NetBeans allows automatic and declarative installation of resources 
            by module layers. Module register files into appropriate places
            and other components use that information to perform their task
            (build menu, toolbar, window layout, list of templates, set of
            options, etc.). 
            </hint>
        </question>
-->
<answer id="resources-layer">
Yes. The layer is used for registering DTDs in the Netbeans catalog and MIME type
resolvers for editor settings files.
</answer>



<!--
        <question id="resources-mask" when="final">
            Does your module mask/hide/override any resources provided by other modules in
            their layers?
            
            <hint>
            If you mask a file provided by another module, you probably depend
            on that and do not want the other module to (for example) change
            the file's name. That module shall thus make that file available as an API
            of some stability category.
            </hint>
        </question>
-->
<answer id="resources-mask">
No.
</answer>



<!--
        <question id="resources-read" when="final">
            Does your module read any resources from layers? For what purpose?
            
            <hint>
            As this is some kind of intermodule dependency, it is a kind of API.
            Please describe it and classify according to 
            <a href="http://openide.netbeans.org/tutorial/api-design.html#categories">
            common stability categories</a>.
            </hint>
        </question>
-->
<answer id="resources-read">
Yes. It reads settings files. Please see the format types descriptions
<a href="#answer-format-types">here</a>.
</answer>



<!--
        <question id="security-grant" when="final">
            Does your code grant addition rights to some code?
            <hint>Avoid using a classloder that adds some extra
            permissions to loaded code unless realy necessary.
            Also note that your API implementation
            can also expose unneeded permissions to enemy code by
            AccessController.doPrilileged() calls.</hint>
        </question>
-->
<answer id="security-grant">
No.
</answer>



<!--
        <question id="security-policy" when="final">
            Does your functionality require standard policy file modification?
            <hint>Your code may pass control to third party code not
            coming from trusted domain. It covers code downloaded over
            network or code coming from libraries that are not bundled
            with NetBeans. Which permissions it needs to grant to which domain?</hint>
        </question>
-->
<answer id="security-policy">
No.
</answer>


<!--
        <question id="exec-ant-tasks" when="impl">
            Do you define or register any ant tasks that other can use?
            
            <hint>
            If you provide an ant task that users can use, you need to be very
            careful about its syntax and behaviour, as it most likely forms an
	          API for end users and as there is a lot of end users, their reaction
            when such API gets broken can be pretty strong.
            </hint>
        </question>
-->
<answer id="exec-ant-tasks">
No.
</answer>








<!--
        <question id="arch-where" when="impl">
            Where one can find sources for your module?
            <hint>
                Please provide link to the CVS web client at
                http://www.netbeans.org/download/source_browse.html
                or just use tag defaultanswer generate='here'
            </hint>
        </question>
-->
 <answer id="arch-where">
  <defaultanswer generate='here' />
 </answer>



<!--
        <question id="compat-deprecation" when="init">
            How the introduction of your project influences functionality
            provided by previous version of the product?
            <hint>
            If you are planning to deprecate/remove/change any existing APIs,
            list them here accompanied with the reason explaining why you
            are doing so.
            </hint>
        </question>
-->
 <answer id="compat-deprecation">
     No changes.
 </answer>



<!--
        <question id="resources-preferences" when="final">
            Does your module uses preferences via Preferences API? Does your module use NbPreferences or
            or regular JDK Preferences ? Does it read, write or both ? 
            Does it share preferences with other modules ? If so, then why ?
            <hint>
                You may use
                <pre xml:space="preserve">
                    &lt;api type="export" group="preferences"
                    name="preference node's absolute path name" category="private" url="http://..."&gt;
                    description of individual keys, where it is used, what it
                    influence, whether the module reads/write it, etc.
                    &lt;/api&gt;            
                </pre>
            </hint>
        </question>
-->
 <answer id="resources-preferences">
     No.
 </answer>

</api-answers>
