<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<!DOCTYPE api-answers PUBLIC "-//NetBeans//DTD Arch Answers//EN" "../nbbuild/antsrc/org/netbeans/nbbuild/Arch.dtd" [
  <!ENTITY api-questions SYSTEM "../nbbuild/antsrc/org/netbeans/nbbuild/Arch-api-questions.xml">
]>

<api-answers
question-version="1.25"
  author="saubrecht@netbeans.org"
>

  &api-questions;


<!--
        <question id="arch-overall" when="init">
            Describe the overall architecture.
            <hint>
            What will be API for
            <a href="http://openide.netbeans.org/tutorial/api-design.html#design.apiandspi">
                clients and what support API</a>? 
            What parts will be pluggable?
            How will plug-ins be registered? Please use <code>&lt;api type="export"/&gt;</code>
            to describe your general APIs.
            If possible please provide 
            simple diagrams. 
            </hint>
        </question>
-->
 <answer id="arch-overall">
  <p>
    The API provides access to the Common Component Palette. The palette clients
    can use this API to define content to be displayed in the common palette 
    TopComponent when their editors are active.
    The module will autoload.
<api name="Palette" group="java" type="export" category="stable" url="@TOP@/overview-summary.html"/>   
  </p>
  <p>
      The API includes support for the clients writing palette content insertable into the text editor.<br/>
      This support covers the DTD definition of the palette item definition file format and the content
      of the Lookup holding object(s) representing the selected item.
<api name="editor-palette-item-1_0.dtd" group="dtd" type="export" category="stable" url="http://www.netbeans.org/dtds/editor-palette-item-1_0.dtd" />
  </p>
 </answer>



<!--
        <question id="arch-quality" when="init">
            How will the <a href="http://www.netbeans.org/community/guidelines/q-evangelism.html">quality</a>
            of your code be tested and 
            how are future regressions going to be prevented?
            <hint>
            What kind of testing do
            you want to use? How much functionality, in which areas,
            should be covered by the tests? 
            </hint>
        </question>
-->
 <answer id="arch-quality">
  <p>
   There are unit tests for Palette's model implementation and assertions are used where appropriate.
  </p>
 </answer>



<!--
        <question id="arch-time" when="init">
            What are the time estimates of the work?
            <hint>
            Please express your estimates of how long the design, implementation,
            stabilization are likely to last. How many people will be needed to
            implement this and what is the expected milestone by which the work should be 
            ready?
            </hint>
        </question>
-->
 <answer id="arch-time">
  <p>
   The remaining work is about 1 man/weeks (July 20th 2005).
  </p>
 </answer>



<!--
        <question id="arch-usecases" when="init">
            <hint>
                Content of this answer will be displayed as part of page at
                http://www.netbeans.org/download/dev/javadoc/usecases.html 
                You can use tags &lt;usecase name="name&gt; regular html description &lt;/usecase&gt;
                and if you want to use an URL you can prefix if with @TOP@ to begin
                at the root of your javadoc
            </hint>
        
            Describe the main <a href="http://openide.netbeans.org/tutorial/api-design.html#usecase">
            use cases</a> of the new API. Who will use it under
            what circumstances? What kind of code would typically need to be written
            to use the module?
        </question>
-->
 <answer id="arch-usecases">
    <usecase id="content" name="Palette Content" >
        <p>The Common Palette content is a two-level hierarchy. The top-most level
        are <b>Categories</b>, the Category children are <b>Items</b>. It's 
        possible to select (highlight) items in the palette panel using a mouse
        or keyboard and then inserted/dropped into an editor that supports the palette.</p>
        <p>The palette content can come from two different sources:</p>
        <ul>
            <li><b>Folders and files hierarchy defined in XML layer:</b> folders under
            palette's root folder represent categories, files in category folders are palette
            item. This way of creating of palette content is more convenient for module
            developers as very little extra coding is required to setup a palette.</li>
            <li><b>An arbitraty hierarchy of generic Nodes:</b> the children of palette's
            root Node are categories and the children of a category Node are palette items.
            This approach is more flexible when the palette content must change dynamically
            (e.g. according to cursor position in editor window) however more coding
            may be needed to setup the Node hierarchy. Please see Nodes API for more
            details on Node management.</li>
        </ul>
    </usecase>
    
      <usecase id="basic_xml" name="Basic usage" >
          <p>The following steps must be taken if a module wants to define its own palette
          content as a hierarchy of folders and files in its XML layer:</p>
          <ul>
              <li>Define palette's root folder in module's layer and also define subfolders for 
              categories and file objects for palette items.<br/>Example:<br/>
              <pre>
      &lt;filesystem&gt;
          &lt;folder name="MyModulePalette"&gt;
              &lt;folder name="Category1"&gt;
                  &lt;file name="PaletteItem_1.myitem" url="palette/PaletteItem_1.xml" /&gt;
                  &lt;file name="PaletteItem_2.myitem" url="palette/PaletteItem_2.xml" /&gt;
                  &lt;file name="PaletteItem_3.myitem" url="palette/PaletteItem_3.xml" /&gt;
              &lt;/folder&gt;
              &lt;folder name="Category2"&gt;
                  &lt;file name="PaletteItem_4.myitem" url="palette/PaletteItem_4.xml" /&gt;
                  &lt;file name="PaletteItem_5.myitem" url="palette/PaletteItem_5.xml" /&gt;
                  &lt;file name="PaletteItem_6.myitem" url="palette/PaletteItem_6.xml" /&gt;
              &lt;/folder&gt;
          &lt;/folder&gt;
      &lt;/filesystem&gt;
              </pre>
              <br/>Note: it's necessary to define some way of loading of the palette item
              from e.g. XML files. There are several possible ways to achieve that, 
              please refer to DataLoaders API for more details.
              </li>
              <li>Extend <a href="@TOP@/org/netbeans/spi/palette/PaletteActions.html">PaletteActions</a> 
                class that provides custom Actions for palette's popup menus.
                <br/>Example:<br/>
                <pre>
        class MyPaletteActions extends PaletteActions {

            public Action getPreferredAction(Lookup lookup) {
                Node itemNode = (Node)lookup.lookup( Node.class );
                if( null != itemNode ) {
                    return new InsertItemAtDefaultLocationAction( itemNode );
                }
                return null;
            }

            public Action[] getCustomItemActions(Lookup lookup) {
                Node itemNode = (Node)lookup.lookup( Node.class );
                if( null != itemNode ) {
                    return new Action[] { new CustomizeItemAction( itemNode ) };
                }
                return null;
            }

            public Action[] getCustomCategoryActions(Lookup lookup) {
                Node categoryNode = (Node)lookup.lookup( Node.class );
                if( null != categoryNode ) {
                    return new Action[] { new CustomizeCategoryAction( categoryNode ) };
                }
                return null;
            }

            public Action[] getImportActions() {
                return new Action[] { new ImportItemsFromWebAction() };
            }

            public Action[] getCustomPaletteActions() {
                return null; //no custom actions for palette's root
            }
        }
                </pre>
              
              </li>
              <li>Use <a href="@TOP@/org/netbeans/spi/palette/PaletteFactory.html">PaletteFactory</a>
               to create an instance of PaletteController. The editor module keeps
              a reference to this object and registers a PropertyChangeListner to it to be notified
              of palette's selection changes.<br/>Example:<br/>
              <pre>
        class MyClass {
            PaletteController controller;

            PaletteController initializePalette() {
                try {
                    controller = PaletteFactory.createPalette( "MyPalette", new MyPaletteActions() );
                } catch (IOException ex) {
                    ex.printStackTrace();
                    return;
                }

                controller.addPropertyChangeListener( new PropertyChangeListener() {
                    public void propertyChange(PropertyChangeEvent evt) {
                        if( PaletteController.PROP_SELECTED_ITEM.equals( evt.getPropertyName() ) ) {
                            Lookup selItem = controller.getSelectedItem();
                            if( null == selItem ) {
                                //nothing is selected in palette
                            } else {
                                Node selNode = (Node)selItem.lookup( Node.class );
                                if( null != selNode ) {
                                    //change mouse cursor for editor window to indicate 
                                    //the type of palette item that can be dropped
                                    changeCursorInEditorWindow( selNode );
                                }
                            }
                        }
                    }
                });
                return controller;
            }
        }
              </pre>
              
              </li>
              <li>Add the instance of 
                <a href="@TOP@/org/netbeans/spi/palette/PaletteController.html">PaletteController</a> 
                to the lookup of editor's TopComponent.<br/>
              <pre>
        class MyEditorTopComponent extends TopComponent {

            private MyEditorTopComponent() {
                this( new InstanceContent() );
            }

            private MyEditorTopComponent( InstanceContent content ) {
                super( new AbstractLookup( content ) );
                content.add( initializePalette() );

                initEditorComponents();
            }

            PaletteController controller;
            private PaletteController initializePalette() {
                if( null == controller ) {
                    controller = PaletteFactory.createPalette( "MyPalette", new MyPaletteActions() );
                }
                return controller;
            }
        }
              </pre>
              </li>
          </ul>
          <p>
              When an item is selected in the palette and user clicks into the editor window
              then the module can ask for selected item by calling 
              <a href="@TOP@/org/netbeans/spi/palette/PaletteController.html#getSelectedItem--">PaletteController.getSelectedItem()</a>.
              This method returns a Lookup that holds object(s) representing the selected item.
              After the item is inserted into the editor window the module may clear palette's selection
              (<a href="@TOP@/org/netbeans/spi/palette/PaletteController.html#clearSelection--">PaletteController.clearSelection()</a>)
              or leave the item selected to implement 'multi drop' insertion scenario.
          </p>
      </usecase>
    <usecase id="filter" name="Filtering" >
        <p>It is possible to filter palette content and hide some categories and/or
           items from the user by extending <a href="@TOP@/org/netbeans/spi/palette/PaletteFilter.html">PaletteFilter</a> class.
           </p>
           <pre>
       class MyPaletteFilter extends PaletteFilter {

            public boolean isValidItem(Lookup lookup) {
                Node itemNode = (Node)lookup.lookup( Node.class );
                return isItemVisibleInCurrentEditorContext( itemNode );
            }

            public boolean isValidCategory(Lookup lookup) {
                Node categoryNode = (Node)lookup.lookup( Node.class );
                return isCategoryVisibleInCurrentEditorContext( categoryNode );
            }

            private boolean isItemVisibleInCurrentEditorContext( Node item ) {
                boolean res = true;
                //check current cursor positions and/or item type and decide whether
                //the item is valid, i.e. can be selected and dropped into editor
                return res;
            }

            private boolean isCategoryVisibleInCurrentEditorContext( Node item ) {
                boolean res = true;
                //check current cursor positions and/or category type and decide whether
                //the category is valid, i.e. its items can be selected and dropped into editor
                return res;
            }
          </pre>
          <p>Then initialize the palette using the following method:</p>
          <pre>
                MyPaletteFilter filter = new MyPaletteFilter();
                PaletteController controller = PaletteFactory.createPalette( "MyPalette", new MyPaletteActions(), filter, null );
          </pre>
          <p>It is necessary to call 
          <a href="@TOP@/org/netbeans/spi/palette/PaletteController.html#refresh--">PaletteController.refresh()</a>
          to refresh and repaint the palette window whenever the filtering condition has changed:</p>
          <pre>
              myPaletteFilter.setShowSomeSpecialCategories( false );
              paletteController.refresh();
          </pre>
    </usecase>
    <usecase id="settings" name="Default Settings" >
        <p>The initial state of the palette can be overridden by setting appropriate
           attributes to palette model. The list of supported attributes is defined
           in PaletteController class. If the palette model is create from Nodes then
           the attributes are extracted by calling Node.getValue() method on the root
           Node and category and item nodes. If the palette model is defined as folders
           and files in the layer then the attributes are extracted by calling 
           FileObject.getAttribute().</p>
           <p>In the example below the palette will not show item names initially 
            (only icons are visible), the user can change this in palette's context menu.
            Category1 is read-only therefore the user cannot remove it.
            Category2 is not initially visible, the user can change this in
            palette's customizer.
            <br/></p>
            <pre>
      &lt;filesystem&gt;
          &lt;folder name="MyModulePalette"&gt;
              &lt;attr name="showItemNames" stringvalue="false"/&gt;

              &lt;folder name="Category1"&gt;
                  &lt;attr name="isReadonly" stringvalue="true"/&gt;

                  &lt;file name="PaletteItem_1.myitem" url="palette/PaletteItem_1.myitem" /&gt;
                  &lt;file name="PaletteItem_2.myitem" url="palette/PaletteItem_2.myitem" /&gt;
                  &lt;file name="PaletteItem_3.myitem" url="palette/PaletteItem_3.myitem" /&gt;
              &lt;/folder&gt;

              &lt;folder name="Category2"&gt;
                  &lt;attr name="isVisible" stringvalue="false"/&gt;

                  &lt;file name="PaletteItem_4.myitem" url="palette/PaletteItem_4.myitem" /&gt;
                  &lt;file name="PaletteItem_5.myitem" url="palette/PaletteItem_5.myitem" /&gt;
                  &lt;file name="PaletteItem_6.myitem" url="palette/PaletteItem_6.myitem" /&gt;
              &lt;/folder&gt;
          &lt;/folder&gt;
      &lt;/filesystem&gt;
            </pre>
    </usecase>
    <usecase id="newcontentatruntime" name="Adding categories and items at runtime" >
        <p>It is possible to add new palette categories and/or palette item at runtime
        when the palette window is already visible.</p>
        <p>Adding a <strong>new category</strong> is very straight-forward, it basically means creating
        a new folder under palette's root folder in XML layer:</p>
        <pre>
        FileObject paletteRoot = FileUtil.getConfigFile( "MyModulePalette" );
        paletteRoot.createFolder( "NewCategory" );
        </pre>
        <p>Adding a <strong>new item</strong> is a similar task:</p>
        <pre>
        FileObject paletteRoot = FileUtil.getConfigFile( "MyPalette" );
        FileObject targetCategoryFO = paletteRoot.getFileObject( "CategoryName" );
        DataFolder targetCategoryDF = DataFolder.findFolder( targetCategoryFO );
        DataObject dobj = (DataObject)itemNode.getLookup().lookup( DataObject.class );
        dobj.copy( targetCategoryFolder );
        </pre>
        
        <p>Please refer to Nodes API in case the palette content is defined as a 
        hierarchy of arbitrary Nodes.</p>
    </usecase>
    <usecase id="items" name="Palette content for text-based editors" >
        <p>The following steps must be taken when writing the item using the support provided by this module:</p>
            <ol>
                <li>
                    Create XML file with item definition according to 
                    the <a href="@TOP@architecture-summary.html#dtd-editor-palette-item-1_0.dtd">editor-palette-item-1_0.dtd</a>.
                </li>
                <li>
                    Register it in the editor's layer file (see Basic usage).
                </li>
                <li>
                    Provide custom item implementation of the ActiveEditorDrop interface if needed. I must be
                    referenced from the definition file.
                </li>
            </ol>
    </usecase>
 </answer>



<!--
        <question id="arch-what" when="init">
            What is this project good for?
            <hint>
            Please provide here a few lines describing the project, 
            what problem it should solve, provide links to documentation, 
            specifications, etc.
            </hint>
        </question>
-->
 <answer id="arch-what">
  <p>
  The project implements a new component palette that will be reused by other
  projects. The new palette should provide a common look and feel for Form editor,
  Mobility, J2EE and possible other modules as well.
  UI draft specification is available at http://ui.netbeans.org/docs/ui/palette/index.html
  </p>
 </answer>



<!--
        <question id="compat-i18n" when="impl">
            Is your module correctly internationalized?
            <hint>
            Correct internationalization means that it obeys instructions 
            at <a href="http://www.netbeans.org/download/dev/javadoc/OpenAPIs/org/openide/doc-files/i18n-branding.html">
            NetBeans I18N pages</a>.
            </hint>
        </question>
-->
 <answer id="compat-i18n">
  <p>
   Yes (any uninternationalized text will be fixed during implementation).
  </p>
 </answer>



<!--
        <question id="compat-standards" when="init">
            Does the module implement or define any standards? Is the 
            implementation exact or does it deviate somehow?
        </question>
-->
 <answer id="compat-standards">
  <p>
   The palette's user inteface should match the look and feel of comparable components
   in competitive IDEs as defined in the UI specification document.
  </p>
 </answer>



<!--
        <question id="compat-version" when="impl">
            Can your module coexist with earlier and future
            versions of itself? Can you correctly read all old settings? Will future
            versions be able to read your current settings? Can you read
            or politely ignore settings stored by a future version?
            
            <hint>
            Very helpful for reading settings is to store version number
            there, so future versions can decide whether how to read/convert
            the settings and older versions can ignore the new ones.
            </hint>
        </question>
-->
 <answer id="compat-version">
  <p>
   API should be backwards compatible, old settings can be ignored if needed. 
    All user settings are stored in an XML file that can be easily extended.
  </p>
 </answer>



<!--
        <question id="dep-jre" when="final">
            Which version of JRE do you need (1.2, 1.3, 1.4, etc.)?
            <hint>
            It is expected that if your module runs on 1.x that it will run 
            on 1.x+1 if no, state that please. Also describe here cases where
            you run different code on different versions of JRE and why.
            </hint>
        </question>
-->
 <answer id="dep-jre">
  <p>
   1.4 or greater
  </p>
 </answer>



<!--
        <question id="dep-jrejdk" when="final">
            Do you require the JDK or is the JRE enough?
        </question>
-->
 <answer id="dep-jrejdk">
  <p>
   JRE should be enough.
  </p>
 </answer>



<!--
        <question id="dep-nb" when="init">
            What other NetBeans projects and modules does this one depend on?
            <hint>
            If you want, describe such projects as imported APIs using
            the <code>&lt;api name="identification" type="import or export" category="stable" url="where is the description" /&gt;</code>
            </hint>
        </question>
-->
 <answer id="dep-nb">
  <p>
    <api group="java" name="OpenAPIs" type="import" category="official">
     <p>
      For acces to Nodes, winsys TopComponent, ActiveEditorDrop, lookups, resource bundles etc.
     </p>
    </api>
  </p>
 </answer>



<!--
        <question id="dep-non-nb" when="init">
            What other projects outside NetBeans does this one depend on?
            
            <hint>
            Some non-NetBeans projects are packaged as NetBeans modules
            (see <a href="http://libs.netbeans.org/">libraries</a>) and
            it is preferred to use this approach when more modules may
            depend on such third-party library.
            </hint>
        </question>
-->
 <answer id="dep-non-nb">
  <p>
   None
  </p>
 </answer>



<!--
        <question id="dep-platform" when="init">
            On which platforms does your module run? Does it run in the same
            way on each?
            <hint>
            If your module is using JNI or deals with special differences of
            OSes like filesystems, etc. please describe here what they are.
            </hint>
        </question>
-->
 <answer id="dep-platform">
  <p>
   No platform dependencies.
  </p>
 </answer>



 <answer id="deploy-dependencies">
  <p>
   Nothing.
  </p>
 </answer>



<!--
        <question id="deploy-jar" when="impl">
            Do you deploy just module JAR file(s) or other files as well?
            <hint>
            Usually a module consist of one JAR file (perhaps with Class-Path
            extensions) and also a configuration file that enables it. If you
            have any other files, use
            &lt;api group="java.io.File" name="yourname" type="export" category="friend"&gt;...&lt;/api&gt;
            to define the location, name and stability of your files (of course
            changing "yourname" and "friend" to suit your needs).
            
            If it uses more than one JAR, describe where they are located, how
            they refer to each other. 
            If it consist of module JAR(s) and other files, please describe
            what is their purpose, why other files are necessary. Please 
            make sure that installation/uninstallation leaves the system 
            in state as it was before installation.
            </hint>
        </question>
-->
 <answer id="deploy-jar">
  <p>
    Just the module jar file:
    <api group="java.io.File" name="org-netbeans-modules-palette.jar" category="stable" type="export" />
  </p>
 </answer>



<!--
        <question id="deploy-nbm" when="impl">
            Can you deploy an NBM via the Update Center?
            <hint>
            If not why?
            </hint>
        </question>
-->
 <answer id="deploy-nbm">
  <p>
   Yes
  </p>
 </answer>



<!--
        <question id="deploy-packages" when="init">
            Are packages of your module made inaccessible by not declaring them
            public?
            
            <hint>
            NetBeans module system allows restriction of access rights to
            public classes of your module from other modules. This prevents
            unwanted dependencies of others on your code and should be used
            whenever possible (<a href="http://www.netbeans.org/download/javadoc/OpenAPIs/org/openide/doc-files/upgrade.html#3.4-public-packages">
            public packages
            </a>). If you do not restrict access to your classes you are
            making it too easy for other people to misuse your implementation
            details, that is why you should have good reason for not 
            restricting package access.
            </hint>
        </question>
-->
 <answer id="deploy-packages">
  <p>
   Yes, non-API packages are not declared public.
  </p>
 </answer>



<!--
        <question id="deploy-shared" when="final">
            Do you need to be installed in the shared location only, or in the user directory only,
            or can your module be installed anywhere?
            <hint>
            Installation location shall not matter, if it does explain why.
            Consider also whether <code>InstalledFileLocator</code> can help.
            </hint>
        </question>
-->
 <answer id="deploy-shared">
  <p>
   Install location should not matter.
  </p>
 </answer>



<!--
        <question id="exec-ant-tasks" when="impl">
            Do you define or register any ant tasks that other can use?
            
            <hint>
            If you provide an ant task that users can use, you need to be very
            careful about its syntax and behaviour, as it most likely forms an
	          API for end users and as there is a lot of end users, their reaction
            when such API gets broken can be pretty strong.
            </hint>
        </question>
-->
 <answer id="exec-ant-tasks">
  <p>
   No
  </p>
 </answer>



<!--
        <question id="exec-classloader" when="impl">
            Does your code create its own class loader(s)?
            <hint>
            A bit unusual. Please explain why and what for.
            </hint>
        </question>
-->
 <answer id="exec-classloader">
  <p>
   No
  </p>
 </answer>



<!--
        <question id="exec-component" when="impl">
            Is execution of your code influenced by any (string) property
            of any of your components?
            
            <hint>
            Often <code>JComponent.getClientProperty</code>, <code>Action.getValue</code>
            or <code>PropertyDescriptor.getValue</code>, etc. are used to influence
            a behavior of some code. This of course forms an interface that should
            be documented. Also if one depends on some interface that an object
            implements (<code>component instanceof Runnable</code>) that forms an
            API as well.
            </hint>
        </question>
-->
 <answer id="exec-component">
  <p>
   No
  </p>
 </answer>



<!--
        <question id="exec-introspection" when="impl">
            Does your module use any kind of runtime type information (<code>instanceof</code>,
            work with <code>java.lang.Class</code>, etc.)?
            <hint>
            Check for cases when you have an object of type A and you also
            expect it to (possibly) be of type B and do some special action. That
            should be documented. The same applies on operations in meta-level
            (Class.isInstance(...), Class.isAssignableFrom(...), etc.).
            </hint>
        </question>
-->
 <answer id="exec-introspection">
  <p>
   No
  </p>
 </answer>



<!--
        <question id="exec-privateaccess" when="final">
            Are you aware of any other parts of the system calling some of 
            your methods by reflection?
            <hint>
            If so, describe the "contract" as an API. Likely private or friend one, but
            still API and consider rewrite of it.
            </hint>
        </question>
-->
 <answer id="exec-privateaccess">
  <p>
   No
  </p>
 </answer>



<!--
        <question id="exec-process" when="impl">
            Do you execute an external process from your module? How do you ensure
            that the result is the same on different platforms? Do you parse output?
            Do you depend on result code?
            <hint>
            If you feed an input, parse the output please declare that as an API.
            </hint>
        </question>
-->
 <answer id="exec-process">
  <p>
   No external processes.
  </p>
 </answer>



<!--
        <question id="exec-property" when="impl">
            Is execution of your code influenced by any environment or
            Java system (<code>System.getProperty</code>) property?
            
            <hint>
            If there is a property that can change the behavior of your 
            code, somebody will likely use it. You should describe what it does 
            and the <a href="http://openide.netbeans.org/tutorial/api-design.html#life">stability category</a>
            of this API. You may use
            <pre>
                &lt;api type="export" group="property" name="id" category="private" url="http://..."&gt;
                    description of the property, where it is used, what it influence, etc.
                &lt;/api&gt;            
            </pre>
            </hint>
        </question>
-->
 <answer id="exec-property">
  <p>
   No
  </p>
 </answer>



<!--
        <question id="exec-reflection" when="impl">
            Does your code use Java Reflection to execute other code?
            <hint>
            This usually indicates a missing or insufficient API in the other
            part of the system. If the other side is not aware of your dependency
            this contract can be easily broken.
            </hint>
        </question>
-->
 <answer id="exec-reflection">
  <p>
   No
  </p>
 </answer>



<!--
        <question id="exec-threading" when="impl">
            What threading models, if any, does your module adhere to?
            <hint>
                If your module calls foreign APIs which have a specific threading model,
                indicate how you comply with the requirements for multithreaded access
                (synchronization, mutexes, etc.) applicable to those APIs.
                If your module defines any APIs, or has complex internal structures
                that might be used from multiple threads, declare how you protect
                data against concurrent access, race conditions, deadlocks, etc.,
                and whether such rules are enforced by runtime warnings, errors, assertions, etc.
                Examples: a class might be non-thread-safe (like Java Collections); might
                be fully thread-safe (internal locking); might require access through a mutex
                (and may or may not automatically acquire that mutex on behalf of a client method);
                might be able to run only in the event queue; etc.
                Also describe when any events are fired: synchronously, asynchronously, etc.
                Ideas: <a href="http://core.netbeans.org/proposals/threading/index.html#recommendations">Threading Recommendations</a> (in progress)
            </hint>
        </question>
-->
 <answer id="exec-threading">
  <p>
   All API classes are thread safe.
  </p>
 </answer>



<!--
        <question id="format-clipboard" when="impl">
            Which data flavors (if any) does your code read from or insert to
            the clipboard (by access to clipboard on means calling methods on <code>java.awt.datatransfer.Transferable</code>?
            
            <hint>
            Often Node's deal with clipboard by usage of <code>Node.clipboardCopy, Node.clipboardCut and Node.pasteTypes</code>.
            Check your code for overriding these methods.
            </hint>
        </question>
-->
 <answer id="format-clipboard">
  <p>
   Palette extends the default clipboard implementation from Nodes. When a palette
   item (Node) is copied/cut to clipboard it adds another data flavor to Transferable
   created by the default Node implementation, see PaletteController.ITEM_DATA_FLAVOR.
   The transfer data for this flavor is the Lookup of item's Node.
  </p>
 </answer>



<!--
        <question id="format-dnd" when="impl">
            Which protocols (if any) does your code understand during Drag &amp; Drop?
            <hint>
            Often Node's deal with clipboard by usage of <code>Node.drag, Node.getDropType</code>. 
            Check your code for overriding these methods. Btw. if they are not overridden, they
            by default delegate to <code>Node.clipboardCopy, Node.clipboardCut and Node.pasteTypes</code>.
            </hint>
        </question>
-->
 <answer id="format-dnd">
  <p>
   Palette extends the default drag'n'drop implementation from Nodes. When an item
   is being dragged from the palette to editor window the Transferable is provided
   by the default Node.drag() method and a another data flavor is added 
   (see PaletteController.ITEM_DATA_FLAVOR) which contains the Lookup of dragged
   item's Node.
   <br/>
   Palette clients can provide their own data flavors to items being dragged by
   subclassing the DragAndDropHandler class. This class also provides methods
   to implement the drop of new items from e.g. editor area to the palette window.
  </p>
 </answer>



<!--
        <question id="format-types" when="impl">
            Which protocols and file formats (if any) does your module read or write on disk,
            or transmit or receive over the network? Do you generate an ant build script?
            Can it be edited and modified? 
            
            <hint>
            <p>
            Files can be read and written by other programs, modules and users. If they influence
            your behaviour, make sure you either document the format or claim that it is a private
            api (using the &lt;api&gt; tag). 
            </p>
            
            <p>
            If you generate an ant build file, this is very likely going to be seen by end users and
            they will be attempted to edit it. You should be ready for that and provide here a link
            to documentation that you have for such purposes and also describe how you are going to
            understand such files during next release, when you (very likely) slightly change the 
            format.
            </p>
            </hint>
        </question>
-->
 <answer id="format-types">
  <p>
    <api group="layer" name="user_settings" type="export" category="private">
        <p>
            There's a private XML file for user settings for each palette model.
        </p>
    </api>
  </p>
 </answer>



<!--
        <question id="lookup-lookup" when="init">
            Does your module use <code>org.openide.util.Lookup</code>
            or any similar technology to find any components to communicate with? Which ones?
            
            <hint>
            Please describe the interfaces you are searching for, where 
            are defined, whether you are searching for just one or more of them,
            if the order is important, etc. Also classify the stability of such
            API contract. For that use &lt;api group=&amp;lookup&amp; /&gt; tag.
            </hint>
        </question>
-->
 <answer id="lookup-lookup">
  <p>
    <api group="lookup" name="activated_node" type="export" category="stable">
     <p>
        Palette listens to system activated node changes. The palette TopComponent
        opens when an editor TopComponent with a PaletteController instance in its Lookup
        is opened or activated. Palette window closes when the editor window is closed
        or deactivated and no other visible editor window supports the palette.<br/>
        The palette window always shows the content from the last active editor 
        window regardless where the input focus is. The palette content is updated
        when user activates a different editor window that supports the palette.
     </p>
    </api>
  </p>
 </answer>



<!--
        <question id="lookup-register" when="final">
            Do you register anything into lookup for other code to find?
            <hint>
            Do you register using layer file or using <code>META-INF/services</code>?
            Who is supposed to find your component?
            </hint>
        </question>
-->
 <answer id="lookup-register">
  <p>
    <api name="node_represention" group="lookup" type="export" category="stable">
        The palette item implementor can either directly provide the item body 
        or her own item class implementing <code>org.openide.text.ActiveEditorDrop</code> interface.
        <br/>
        Lookup that holds object(s) representing the selected item then associates 
        custom item class instance with the <code>org.openide.text.ActiveEditorDrop.class</code> key and 
        the body with <code>java.lang.String</code> key.
        <br/>
        Editor side implementor can use the Lookup content whenever the Lookup is given, 
        namely in the editor-provided implementations of the <code>PaletteActions</code>,
        <code>DragAndDropHandler</code> and <code>PropertyChangeListener</code> (registered 
        on the <code>PaletteController</code>) interfaces.
    </api>
  </p>
 </answer>



<!--
        <question id="lookup-remove" when="final">
            Do you remove entries of other modules from lookup?
            <hint>
            Why? Of course, that is possible, but it can be dangerous. Is the module
            your are masking resource from aware of what you are doing?
            </hint>
        </question>
-->
 <answer id="lookup-remove">
  <p>
   No
  </p>
 </answer>



<!--
        <question id="perf-exit" when="final">
            Does your module run any code on exit?
        </question>
-->
 <answer id="perf-exit">
  <p>
   No
  </p>
 </answer>



<!--
        <question id="perf-huge_dialogs" when="final">
            Does your module contain any dialogs or wizards with a large number of
            GUI controls such as combo boxes, lists, trees, or text areas?
        </question>
-->
 <answer id="perf-huge_dialogs">
  <p>
   There's a 'Palette Customizer' dialog window that displays hierarchy of palette contents 
   (categories and their items) and contains some buttons to customize the palette contents.
   The Palette Customizer window design depends on the final version of the UI specification.
  </p>
 </answer>



<!--
        <question id="perf-limit" when="init">
            Are there any hard-coded or practical limits in the number or size of
            elements your code can handle?
        </question>
-->
 <answer id="perf-limit">
  <p>
   No
  </p>
 </answer>



<!--
        <question id="perf-mem" when="final">
            How much memory does your component consume? Estimate
            with a relation to the number of windows, etc.
        </question>
-->
 <answer id="perf-mem">
  <p>
   Depends on the palette contents provided by palette clients. The Palette module
   provides only user interface for the palette contents.
  </p>
 </answer>



<!--
        <question id="perf-menus" when="final">
            Does your module use dynamically updated context menus, or
            context-sensitive actions with complicated and slow enablement logic?
            <hint>
                If you do a lot of tricks when adding actions to regular or context menus, you can significantly
                slow down display of the menu, even when the user is not using your action. Pay attention to
                actions you add to the main menu bar, and to context menus of foreign nodes or components. If
                the action is conditionally enabled, or changes its display dynamically, you need to check the
                impact on performance. In some cases it may be more appropriate to make a simple action that is
                always enabled but does more detailed checks in a dialog if it is actually run.
            </hint>
        </question>
-->
 <answer id="perf-menus">
  <p>
   No
  </p>
 </answer>



<!--
        <question id="perf-progress" when="final">
            Does your module execute any long-running tasks?
            
            <hint>Long running tasks should never block 
            AWT thread as it badly hurts the UI
            <a href="http://performance.netbeans.org/responsiveness/issues.html">
            responsiveness</a>.
            Tasks like connecting over
            network, computing huge amount of data, compilation
            be done asynchronously (for example
            using <code>RequestProcessor</code>), definitively it should 
            not block AWT thread.
            </hint>
        </question>
-->
 <answer id="perf-progress">
  <p>
   Depends on the palette contents provided by palette clients. When the palette 
   contents is being switched (i.e. user activates a different editor) the palette UI
   must display icons and/or names for items in expanded categories. This is being
   done in AWT thread.
   On the other hand the palette can show only a limited number of items according to screen
   resolution so there will be only a limited number of of requests for item's name and icon
   during this switch.
  </p>
 </answer>



<!--
        <question id="perf-scale" when="init">
            Which external criteria influence the performance of your
            program (size of file in editor, number of files in menu, 
            in source directory, etc.) and how well your code scales?
            <hint>
            Please include some estimates, there are other more detailed 
            questions to answer in later phases of implementation. 
            </hint>
        </question>
-->
 <answer id="perf-scale">
  <p>
   The default palette model implementation is based on Nodes, therefore 
   the performance criteria are the same as those for Nodes.
  </p>
 </answer>



<!--
        <question id="perf-spi" when="init">
            How the performance of the plugged in code will be enforced?
            <hint>
            If you allow foreign code to be plugged into your own module, how
            do you enforce that it will behave correctly and quickly and will not
            negatively influence the performance of your own module?
            </hint>
        </question>
-->
 <answer id="perf-spi">
  <p>
    Just javadoc recommendations.
  </p>
 </answer>



<!--
        <question id="perf-startup" when="final">
            Does your module run any code on startup?
        </question>
-->
 <answer id="perf-startup">
  <p>
   No
  </p>
 </answer>



<!--
        <question id="perf-wakeup" when="final">
            Does any piece of your code wake up periodically and do something
            even when the system is otherwise idle (no user interaction)?
        </question>
-->
 <answer id="perf-wakeup">
  <p>
   No
  </p>
 </answer>



<!--
        <question id="resources-file" when="final">
            Does your module use <code>java.io.File</code> directly?
            
            <hint>
            NetBeans provide a logical wrapper over plain files called 
            <code>org.openide.filesystems.FileObject</code> that
            provides uniform access to such resources and is the preferred
            way that should be used. But of course there can be situations when
            this is not suitable.
            </hint>
        </question>
-->
 <answer id="resources-file">
  <p>
   No
  </p>
 </answer>



<!--
        <question id="resources-layer" when="final">
            Does your module provide own layer? Does it create any files or
            folders in it? What it is trying to communicate by that and with which 
            components?
            
            <hint>
            NetBeans allows automatic and declarative installation of resources 
            by module layers. Module register files into appropriate places
            and other components use that information to perform their task
            (build menu, toolbar, window layout, list of templates, set of
            options, etc.). 
            </hint>
        </question>
-->
 <answer id="resources-layer">
  <p>
   Yes, it creates folder PaletteSettings where a file is created for user settings 
   for each palette model.<br/>
   There's also Window System definition of palette's TopComponent group and mode.
   <br/>
   Palette clients (editor modules) may define palette contents in their layers.
  </p>
 </answer>



<!--
        <question id="resources-mask" when="final">
            Does your module mask/hide/override any resources provided by other modules in
            their layers?
            
            <hint>
            If you mask a file provided by another module, you probably depend
            on that and do not want the other module to (for example) change
            the file's name. That module shall thus make that file available as an API
            of some stability category.
            </hint>
        </question>
-->
 <answer id="resources-mask">
  <p>
   No
  </p>
 </answer>



<!--
        <question id="resources-read" when="final">
            Does your module read any resources from layers? For what purpose?
            
            <hint>
            As this is some kind of intermodule dependency, it is a kind of API.
            Please describe it and classify according to 
            <a href="http://openide.netbeans.org/tutorial/api-design.html#categories">
            common stability categories</a>.
            </hint>
        </question>
-->
 <answer id="resources-read">
  <p>
   The default palette model is based on Nodes that may be defined in layer hierarchy.
  </p>
 </answer>



<!--
        <question id="security-grant" when="final">
            Does your code grant additional rights to some other code?
            <hint>Avoid using a class loader that adds extra
            permissions to loaded code unless really necessary.
            Also note that your API implementation
            can also expose unneeded permissions to enemy code by
            calling AccessController.doPrivileged().</hint>
        </question>
-->
 <answer id="security-grant">
  <p>
   No
  </p>
 </answer>



<!--
        <question id="security-policy" when="final">
            Does your functionality require modifications to the standard policy file?
            <hint>Your code might pass control to third-party code not
            coming from trusted domains. This could be code downloaded over the
            network or code coming from libraries that are not bundled
            with NetBeans. Which permissions need to be granted to which domains?</hint>
        </question>
-->
 <answer id="security-policy">
  <p>
   No
  </p>
 </answer>




<!--
        <question id="arch-where" when="init">
            Where one can find sources for your module?
            <hint>
                Please provide link to the CVS web client at
                http://www.netbeans.org/download/source_browse.html
                or just use tag defaultanswer generate='here'
            </hint>
        </question>
-->
 <answer id="arch-where">
  <defaultanswer generate='here' />
 </answer>

</api-answers>
