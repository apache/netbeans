# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# {0} - the name of the annotation
DN_AnnotationsNotRuntime_isAnnotation={0} does not have runtime Retention, the result will always be false
# {0} - the name of the annotation
DN_AnnotationsNotRuntime_getAnnotation={0} does not have runtime Retention, the result will always be null
# {0} - the name of the annotation
DN_AnnotationsNotRuntime_instanceof={0} does not have runtime Retention, the condition will always be false

DN_org.netbeans.modules.java.hints.bugs.AnnotationsNotRuntime=Annotations without runtime Retention
DESC_org.netbeans.modules.java.hints.bugs.AnnotationsNotRuntime=Warns about reflective access to annotations with CLASS or SOURCE retentions

DN_org.netbeans.modules.java.hints.bugs.Tiny.stringReplaceAllDot=String.replaceAll(".", )
DESC_org.netbeans.modules.java.hints.bugs.Tiny.stringReplaceAllDot=Finds occurrences of calls to String.replaceAll(".", $target), which would replace all characters of the source string with $target.
ERR_string-replace-all-dot=Call to String.replaceAll(".", $target) is probably undesired
FIX_string-replace-all-dot=Replace with call to String.replaceAll("\\.", $target)

DN_org.netbeans.modules.java.hints.bugs.CastVSInstanceOf=Incompatible cast/instanceof
DESC_org.netbeans.modules.java.hints.bugs.CastVSInstanceOf=Incompatible cast surrounded with incompatible instanceof
ERR_CastVSInstanceOf=Cast is incompatible with given instanceof

DN_org.netbeans.modules.java.hints.bugs.Tiny.newObject=Result of new Object ignored
DESC_org.netbeans.modules.java.hints.bugs.Tiny.newObject=Result of new Object ignored.
ERR_newObject=New instance ignored

DN_org.netbeans.modules.java.hints.bugs.Tiny.systemArrayCopy=Suspicious invocation of System.arraycopy
DESC_org.netbeans.modules.java.hints.bugs.Tiny.systemArrayCopy=Finds invocations of System.arraycopy with negative offsets, length or used on non-array objects.
ERR_system_arraycopy_notarray={0} not an instance of an array type
ERR_system_arraycopy_negative={0} is negative

DN_org.netbeans.modules.java.hints.bugs.Tiny.equalsNull=.equals(null)
DESC_org.netbeans.modules.java.hints.bugs.Tiny.equalsNull=Finds invocations of the Object.equals method with literal parameter 'null'.
ERR_equalsNull=Object equals "null" is never true
FIX_equalsNull=Use == instead of equals method

DN_org.netbeans.modules.java.hints.bugs.Tiny.resultSet=Incorrect column index in ResultSet
DESC_org.netbeans.modules.java.hints.bugs.Tiny.resultSet=Reports Iincorrect column indices passed to various methods of java.sql.ResultSet
ERR_ResultSetZero=Column index is zero, but ResultSet columns are counted from 1
ERR_ResultSetNegative=Column index is negative, but ResultSet columns are counted from 1


DN_org.netbeans.modules.java.hints.bugs.EqualsHint.arrayEquals=.equals on Array
DESC_org.netbeans.modules.java.hints.bugs.EqualsHint.arrayEquals=.equals on array
DN_org.netbeans.modules.java.hints.EqualsHint=.equals on Incompatible Types
DESC_org.netbeans.modules.java.hints.EqualsHint=.equals on incompatible types
FIX_ReplaceWithArraysEquals=Replace with Arrays.equals
FIX_ReplaceWithInstanceEquals=Replace with ==

ERR_ARRAY_EQUALS=.equals() called on array
ERR_INCOMPATIBLE_EQUALS=.equals() on incompatible types

LBL_org.netbeans.modules.java.hints.bugs.EqualsHint.ERASURE_PREFS_KEY=<html>Make Equals Hint consider &Erasures<br>of Compared Types
TP_org.netbeans.modules.java.hints.bugs.EqualsHint.ERASURE_PREFS_KEY=Equals hint decisions are based on erasures of compared types

HINT_SuspiciousCall=Suspicious call to {0}:\nExpected type {2}, actual type {1}
HINT_SuspiciousCallIncompatibleTypes=Suspicious call to {0}:\nGiven object cannot contain instances of {1} (expected {2})
DN_org.netbeans.modules.java.hints.bugs.CollectionRemove=Suspicious method call
DESC_org.netbeans.modules.java.hints.bugs.CollectionRemove=Warns about suspicious calls to Collection.remove/contains and Map.containsKey/containsValue/remove
LBL_org.netbeans.modules.java.hints.bugs.CollectionRemove.WARN_FOR_CASTABLE_KEY=Warn Also for Castable Types
TP_org.netbeans.modules.java.hints.bugs.CollectionRemove.WARN_FOR_CASTABLE_KEY=Warn Also for Castable Types

DN_org.netbeans.modules.java.hints.bugs.UnusedAssignmentOrBranch.unusedAssignment=Unused Assignment
DESC_org.netbeans.modules.java.hints.bugs.UnusedAssignmentOrBranch.unusedAssignment=Unused Assignment
DN_org.netbeans.modules.java.hints.bugs.UnusedAssignmentOrBranch.deadBranch=Dead Branch
DESC_org.netbeans.modules.java.hints.bugs.UnusedAssignmentOrBranch.deadBranch=Dead Branch
LBL_UNUSED_ASSIGNMENT_LABEL=The assigned value is never used
LBL_DEAD_BRANCH=The branch is never used

DN_org.netbeans.modules.java.hints.bugs.UnusedAssignmentOrBranch.unusedCompoundAssignment=Unused Compound Assignment
DESC_org.netbeans.modules.java.hints.bugs.UnusedAssignmentOrBranch.unusedCompoundAssignment=The value assigned to the target variable \
    in a compound assignment is not used or is always replaced by a different value. The result value of the compound assignment \
    expression itself <b>may be still used</b> in the enclosing expression, but it is unnecessary to \
    assign the value to the target. A fix is offered to remove the assignment and retain just the \
    expression.<p/>\
    Note that boolean compound operator <b>always</b> evaluates the expression. The fix may flip \
    expression with the variable so the expression is always processed.
    

DN_org.netbeans.modules.java.hints.bugs.Unbalanced.Array=Unbalanced read/write with arrays
DESC_org.netbeans.modules.java.hints.bugs.Unbalanced.Array=Unbalanced read/write with arrays
ERR_UnbalancedArrayREAD=The array is only read from, never written to
ERR_UnbalancedArrayWRITE=The array is only written to, never read from

DN_org.netbeans.modules.java.hints.bugs.Unbalanced.Collection=Unbalanced read/write with collections
DESC_org.netbeans.modules.java.hints.bugs.Unbalanced.Collection=Unbalanced read/write with collections
ERR_UnbalancedCollectionREAD=The collection is never added to
ERR_UnbalancedCollectionWRITE=The collection is only added to, never read

DN_org.netbeans.modules.java.hints.bugs.CheckReturnValueHint=@CheckReturnValue
DESC_org.netbeans.modules.java.hints.bugs.CheckReturnValueHint=Verifies that a result of method marked with @CheckReturnValue is really checked.
ERR_org.netbeans.modules.java.hints.bugs.CheckReturnValueHint=Should check the method return value

DN_NPECheck=Null Pointer Dereference
DESC_NPECheck=Checks various problems related to dereferencing nulls. <br><ul>\
    <li><b>Enhanced for:</b> checks that the control variable (a collection or an array) is not null.\
    <li><b>Switch:</b> control variable must not be null.\
    <li><b>Unboxing:</b> checks that parameter to (implicit) unboxing is not null.\
    <li><b>Method invocation:</b> checks that values passed to parameters, which are declared as non-null \
        are not null or possibly null values.\
    <li><b>Assignment, variable initializer:</b> checks that possibly null value is not assigned to a \
        variable constrained to hold only non-nulls.\
    </ul>\
    The hint does not report values whose status is undecided (but can be null eventually), unless \
    the value is checked to be null or non-null (which indicates author's intention that the value may \
    become null). \
    <b>As a special case</b>, since the construction is very counterintuitive, unknown values (possibly null) are \
    reported if they appear in 2nd and 3rd operands of a numeric or boolean ternary operator, since the operator \
    implicitly unboxes them. This special case is controlled by the <i>"Report unboxing of unknown values"</i> checkbox.
    
ERR_DereferencingNull=Dereferencing null pointer
ERR_PossiblyDereferencingNull=Dereferencing possible null pointer
ERR_AssigningNullToNotNull=Assigning null to not-null variable
ERR_PossibleAssigingNullToNotNull=Assigning possible null to not-null variable
ERR_NULL_TO_NON_NULL_ARG=Passing null to not-null argument
ERR_POSSIBLENULL_TO_NON_NULL_ARG=Passing possible null to not-null argument
ERR_NotNullWouldBeNPE=Unnecessary test for null - a NullPointerException would already be thrown
ERR_NotNull=Unnecessary test for null - the expression is never null
ERR_ReturningNullFromNonNull=Returning null value from a method whose return type is not-null
ERR_ReturningPossibleNullFromNonNull=Returning possibly null value from a method whose return type is not-null
ERR_UnboxingPotentialNullValue=Unboxing possibly null value
ERR_UnboxingNullValue=Unboxing a null value

LBL_NPECheck.ENABLE_FOR_FIELDS=Also warn for &fields
TP_NPECheck.ENABLE_FOR_FIELDS=Also provide warnings for fields - experimental
LBL_NPECheck.UNBOXING_UNKNOWN_VALUES=Report unboxing of unknown values
TP_NPECheck.UNBOXING_UNKNOWN_VALUES=Unboxing a value which are not definitely known to be non-null may cause a NPE.\
    This option will report automatic unboxing of such values as potential NPEs.

DN_TryCatchFinally_finallyDiscardsException='finally' block suppresses exceptions
DESC_TryCatchFinally_finallyDiscardsException=Reports usage of <b>return</b> statements in <b>finally</b> block. Such <b>return</b> \
    discards the exception being thrown and causes the whole method to complete normally, which is usually not the desired outcome. \
    <b>Break</b> and <b>continue</b> statements, which break out of the <b>finally</b> block are also reported.

DN_TryCatchFinally_finallyThrowsException='throw' inside 'finally' block
DESC_TryCatchFinally_finallyThrowsException=Throwing an exception inside <b>finally</b> block will hide the original exception thrown from \
    the associated <b>try</b> or <b>catch</b> blocks from enclosing exception handlers. Note that the exception can be still inspected \
    using <b>Throwable.getSuppressedException()</b>, although it cannot be directly caught by a <b>catch</b> block.<p/>\
    If "<i>Report rethrow of caught exceptions</i>" is disabled, the hint will not report statements, which just rethrow the very exception \
    instances received by an enclosing catch handler.

DN_CloneAndCloneable_cloneWithoutSuperClone=clone() does not call super.clone()
DESC_CloneAndCloneable_cloneWithoutSuperClone=Cloned instances should be allocated using <b>super.clone()</b> so fields are \
    initialized properly.

DN_CloneAndCloneable_cloneWithoutThrows=clone() does not throw CloneNotSupportedException
DESC_CloneAndCloneable_cloneWithoutThrows=If clone() is not declared to throw <b>CloneNotSupportedException</b> \
    subclasses cannot prohibit cloning using standard <b>Cloneable</b> contract.

DN_CloneAndCloneable_cloneInNonCloneableClass=clone() in a non-Cloneable class
DESC_CloneAndCloneable_cloneInNonCloneableClass=The contract for <b>Object.clone()</b> requires, that a class \
    must implement <b>Cloneable</b> marker interface. If not, the clone() method will raise <b>CloneNotSupportedException</b>. \
    Declaring <b>Cloneable</b> interface is often overlooked.

DN_CloneAndCloneable_cloneableWithoutClone=Cloneable class does not implement clone().
DESC_CloneAndCloneable_cloneableWithoutClone=<html><b>Cloneable</b> class should override clone(). If it does not, the clone operation \
    uses the default <b>java.lang.Object.clone()</b>, which is usually not suitable. Lack of overridden <b>clone</b> indicate a possible \
    error.</html>
BroadCatchCustomizer.cbCommonTypes.text=&Report common supertypes

DN_BroadCatch=Too broad 'catch' clause
DESC_BroadCatch=Reports <b>catch</b> clauses, which catch a supertype rather than the actually thrown exception type. Such \
    broad catches may provide inappropriate reports or overly general exception handling. \
    <p/>Sometimes the method produces <b>more than one</b> exception type which can be handled by catching their common supertype. \
    "<i>Report common supertypes</i>" \
    option controls whether such situations will be reported. The <i>generic exceptions</i> \
    configured for the <b>Use Specific Catch</b> hint are always reported. 
BroadCatchCustomizer.cbSuppressUmbrellas.text=Ignore &umbrella exceptions


DN_MathRandomCastInt=Math.random() casted to int
DESC_MathRandomCastInt=Math.random produces a double in range 0..1. If the value is immediately cast to int, it is always \
    rounded down to 0, which is probably not intended. The fix will move the cast so the enclosing arithmetic expression is \
    casted and possibly rounded.

DN_AssertWithSideEffects=Assert with side effects
DESC_AssertWithSideEffects=Identifies assert statements whose condition reportedly causes some side effects. The hint checks \
    assignments to local variables and fields made from within the condition expression. If the expression calls a method, the hint \
    checks whether the method assigns to some fields. Only the <b>directly called</b> methods are checked. For performance reasons, although \
    the called method may resolve to some overrides in subclasses at runtime, only the base class method body is inspected. Calls to \
    interface type methods are ingored completely. Inspection of all possible overrides of a method would greatly hurt performance.

DN_ComparatorParameterNotUsed=Comparator.compare() does not use its parameter {0}
DESC_ComparatorParameterNotUsed=The Comparator is expected to compare the arguments to its compare method. If one of the parameters \
    is not used for comparison, it indicates that the other argument might be compared to self or some other error in the implementation.

DN_HashCodeOnArray=hashCode() used on array instance
DESC_HashCodeOnArray=hashCode for array instances is inherited from java.lang.Object, and it is based on the array's reference \
    rather than on array's contents.\
    <p>In order to obtain a more reasonable hashCode, which reflects contained objects or values, use <b>Arrays.hashCode</b>\
    or <b>Arrays.deepHashCode()</b>

DN_ToStringOnArray=toString() used on array instance
DESC_ToStringOnArray=toString() implementation for arrays does not convert array contents to String, rather it will print \
    array's type and hash code (defined as identity hash code). To get string representation of contents of the array, \
    the array could be for example wrapped into Arrays.asList(), as Collections produce content representation in their toString().

DN_ArrayConversionToString=Array converted to String
DESC_ArrayConversionToString=When array instance is passed to certain library methods, e.g. PrintStream, formatting methods, \
    or concatenated with String, a call to <b>toString</b> method on the array instance will be made. The resulting representation \
    will not contain array content, but rather array type and hash code.

DN_ConfusingVarargsNull=Confusing null passed to varargs method
DESCR_ConfusingVarargsNull=If <b>null</b> is passed at the place of variable-length (ellipsis) parameter to a method, it will \
    not be received as <b>null</b> item in the variable-length parameter's array, but the entire variable-length parameter will be null. \
    <p/>Passing null explicitly is unnecessary.

DN_ConfusingVarargsArray=Confusing primitive array passed to varargs method
DESCR_ConfusingVarargsArray=A primitive array passed to variable-argument method will not be unwrapped and its items will not \
    be seen as items of the variable-length argument in the called method. Instead, the array will be passed as a single item.

DN_InfiniteRecursion=Infinite recursion
DESCR_InfiniteRecursion=Detects methods which must recurse infinitely and could only terminate by throwing an exception. Only definitively \
    recursions are reported, not possibilities. The recursion \
    only inspected across the single method (so recursion like a -> b -> a is not reported). Recursion through several instances of the class \
    is also not reported. The hint can be disabled for the case the recursing method could be overriden in subclasses, since subclass implementations \
    could avoid the recursion. However if some subclass does not override and fix the method, recursion may still happen. By default \
    the inspection warns even for the overridable case.

OPTNAME_InfiniteRecursionNoOverridables=Exclude methods that could be overriden
OPTDESC_InfiniteRecursionNoOverridables=Does not report recursion for methods, which could be overriden in subclasses and the override could \
    cleverly avoid the definite recursion.

DN_MalformedXPathExpression=Malformed XPath expression
DESC_MalformedXPathExpression=The hint check syntax of the XPath expression passed to JAXP XPath evaluator. The calls checked are:<ul>\
    <li>JAXP XPath compile and evaluate calls,\
    <li>Xalan-J XPath creation and XPathAPI usage,\
    <li>Apache Common's JXPath calls\
    </ul>

DN_MalformedFormatString=Malformed format string
DESC_MalformedFormatString=Reports format strings passed to String.format, printf-style methods. Checks that the number of arguments \
    correspond to the number of % specifiers, and the arguments have the correct type. 

DN_WrapperIdentityComparison=Boxed value identity comparison
DESC_WrapperIdentityComparison=If two boxed values are compared using <i>==</i> or <i>!=</i>, identity of the boxed object's \
    identity is compared instead of the boxed value. The inspection suggests a fix, which performs a null-safe comparison \
    using <b>java.util.Objects.equals()</b>.<p/>\
    The fix is only available for source level >= 7, \
    since a conditional expression would require multiple evaluation of one of the operands, which may \
    not be possible because of potential expression's side effects.

DN_StringBufferCharConstructor=StringBuffer constructor called with `char'' argument
DESC_StringBufferCharConstructor=<b>StringBuffer</b> and <b>StringBuilder</b> constructors accept <i>int</i> as a parameter. If a <i>char</i> \
    is passed, it is silently promoted to int, and the call creates a <b>StringBuffer</b> instance with a defined initial capacity, rather than \
    a StringBuffer that initially contains a single (the passed one) character.<p/>\
    The offered fix will add an <i>append</i> that actually adds the character.

DN_SuspiciousToArray=Suspicious Collections.toArray() call
DESC_SuspiciousToArrayCall=Detects such calls, whose array type parameter does not match the Collection's \
    type parameter. The collection's type parameter should be assignable to the array type.  For raw Collections, the hint checks \
    that the array type is actually assignable to the casted-to array type.<p/>\
    The hint offers to change the newly created array type, or to change the <b>toArray</b> parameter to <i>new Type[]</i>,\
    but the fix is not available if the collection expression may have some side effects.

DN_CreatedThrowableNotThrown=Created Throwable not thrown
DESC_DN_CreatedThrowableNotThrown=The hint detects creation of a Throwable, which is then discarded. Throwable creation is rather expensive, \
    and not using a created Throwable may indicate an unfinished error handling code. The Throwable is considered <i>used</i>, if it is thrown, \
    passed to a method as a parameter, returned as a method's result or assigned to a field. Possible assignments through local variables are \
    also inspected to determine whether the value will be finally <i>used</i>.

DN_ThrowableMethodResultIgnored=Throwable method result is ignored
DESC_ThrowableMethodResultIgnored=If a Throwable is returned from a method call as a <i>return value</i> (as an oppposite to be \
    thrown), it is usually somehow recorded (assigned), further processed (passed to another method call), or thrown. Ignoring \
    such Throwable or using in some simple comparison indicates either a defect in error handling, or that the method should return \
    a different value to save time for Throwable's stacktrace creation.

DN_MissingSwitchcase=Possibly missing switch "case" statement
DESC_MissingSwitchcase=The hint detects a typo made in a <b>switch statement</b> a label without a <b>case</b> statement.<p/>\
    While it may be a intended label for the following statement, it could be also an intended <b>case</b> branch with the \
    keyword forgotten.
