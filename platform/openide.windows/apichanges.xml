<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<!DOCTYPE apichanges PUBLIC "-//NetBeans//DTD API changes list 1.0//EN" "../../nbbuild/javadoctools/apichanges.dtd">

<apichanges>
<apidefs>
<apidef name="winsys">Window System API</apidef>
</apidefs>
<changes>
    <change id="ModeCreation">
        <api name="winsys"/>
        <summary>Allow Modes to be created directly from ModeConfig XML</summary>
        <version major="6" minor="6.81"/>
        <date day="18" month="3" year="2019"/>
        <author login="phipma"/>
        <compatibility addition="yes" modification="yes"/>
        <description>
            <p>
                Plugin implementors can save and restore individual Modes providing
                scope for custom TopComponent layouts.
            </p>
        </description>
        <class package="org.openide.windows" name="Mode"/>
        <class package="org.openide.windows" name="ModeUtilities"/>
        <class package="org.openide.windows" name="WindowManager"/>
    </change>
    <change id="ModeSelector">
        <api name="winsys"/>
        <summary>Allow to select Mode for opening a TopComponent instance</summary>
        <version major="6" minor="6.77"/>
        <date day="2" month="5" year="2017"/>
        <author login="sdedic"/>
        <compatibility addition="yes" semantic="compatible"/>
        <description>
            <p>
                Plugin implementors can direct to-be-opened TopComponents to appropriate Modes or
                prevent them to open in inappropriate Modes.
            </p>
        </description>
        <class package="org.openide.windows" name="ModeSelector"/>
    </change>
<change id="COS_afterRedirect">
    <api name="winsys"/>
    <summary>Added method afterRedirect(CloneableOpenSupport) to CloneableOpenSupport</summary>
    <version major="6" minor="70"/>
    <date day="20" month="2" year="2014"/>
    <author login="vv159170"/>
    <compatibility addition="yes" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        <p>The method is called when CloneableOpenSupportRedirector found another instance of CloneableOpenSupport to open instead the current. 
        It is possible to override afterRedirect in derived classes and handle this situation.
        </p>
    </description>
    <class package="org.openide.windows" name="CloneableOpenSupport"/>
    <issue number="241991"/>
</change>    
<change id="WinSysBrandingOverride">
    <api name="winsys"/>
    <summary>Override window system branding properties</summary>
    <version major="6" minor="69"/>
    <date day="3" month="2" year="2014"/>
    <author login="saubrecht"/>
    <compatibility addition="yes" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        <p>It is possible to override boolean window system properties defined in resource bundle <code>org/netbeans/core/windows/Bundle.properties</code>
        with system properties prefixed with "<i>NB.WinSys.</i>". For example property
            <code>Mix.Editors.And.Views.Enabled</code> can be overriden with a command-line switch
            <code>-J-DNB.WinSys.Mix.Editors.And.Views.Enabled=false</code>.
        </p>
    </description>
</change>
<change id="COS_redirector">
    <api name="winsys"/>
    <summary>Abstract class CloneableOpenSupportRedirector added</summary>
    <version major="6" minor="65"/>
    <date day="13" month="8" year="2013"/>
    <author login="igor_nikiforov"/>
    <compatibility addition="yes" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        <p>Version of CloneableEditorSupportRedirector which will be called only during opening of document 
           when algorith tries to understand if file is in list of already opened TCs or not.
           SPI implementers to setup filter on specific requests only... This could minimize number of redirect() calls.</p>
    </description>
    <class package="org.openide.windows" name="CloneableOpenSupportRedirector"/>
    <issue number="230126"/>
</change>
<change id="topcomponent.SubComponent_lookup_and_showing">
    <api name="winsys"/>
    <summary>Added methods getLookup() and isShowing() in TopComponent.SubComponent.</summary>
    <version major="6" minor="63"/>
    <date day="17" month="4" year="2013"/>
    <author login="theofanis"/>
    <compatibility addition="yes" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        <p>The new methods can be used in conjunction with split multiview window, where e.g. the pallette
	    needs to know which two of the available subcomponents are showing and query their lookup.</p>
    </description>
    <class package="org.openide.windows" name="TopComponent"/>
    <issue number="228448"/>
</change>
<change id="stop_request_attention">
    <api name="winsys"/>
    <summary>Allow TopComponent's header to be permanently highlighted to draw user's attention.
    </summary>
    <version major="6" minor="58"/>
    <date day="31" month="8" year="2012"/>
    <author login="saubrecht"/>
    <compatibility addition="yes" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        <p>New method setAttentionHighlight(boolean) in TopComponent class
            can be used to permanently highlight TopComponent's tab until user
            activates it.
        </p>
    </description>
    <class package="org.openide.windows" name="TopComponent"/>
    <class package="org.openide.windows" name="WindowManager"/>
    <issue number="217509"/>
</change>
<change id="minimize_and_float">
    <api name="winsys"/>
    <summary>New API to check/modify the floating and minimize state of a TopComponent.</summary>
    <version major="6" minor="57"/>
    <date day="4" month="7" year="2012"/>
    <author login="saubrecht"/>
    <compatibility addition="yes" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        <p>New methods in WindowManager class:
        <br/>
            isTopComponentMinimized()<br/>
            setTopComponentMinimized()<br/>
            isTopComponentFloating()<br/>
            setTopComponentFloating()<br/>
        </p>
    </description>
    <class package="org.openide.windows" name="WindowManager"/>
    <issue number="214854"/>
</change>
<change id="onshowing">
    <api name="winsys"/>
    <summary>Easy to use replacement for <code>invokeWhenUIReady</code></summary>
    <version major="6" minor="54"/>
    <date day="31" month="3" year="2012"/>
    <author login="jtulach"/>
    <compatibility addition="yes" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        <p>In case you want to execute a code as soon as main window is
        visible, consider using <a href="@TOP@org/openide/windows/OnShowing.html">
        OnShowing</a> annotation.
        </p>
    </description>
    <class package="org.openide.windows" name="OnShowing"/>
    <issue number="200636"/>
</change>
<change id="ctrltab.switching.disable">
    <api name="winsys"/>
    <summary>New branding property to disable Ctrl+Tab window switching.</summary>
    <version major="6" minor="53"/>
    <date day="21" month="3" year="2012"/>
    <author login="saubrecht"/>
    <compatibility addition="yes" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        <p>There's a new branding property <code>WinSys.CtrlTabSwitching.In.JTable.Enabled</code> 
        to disable Ctrl+Tab window switching when JTable or JTabbedPane has input focus.</p>
    </description>
</change>
<change id="topcomponent.subcomponents">
    <api name="winsys"/>
    <summary>Added method TopComponent.getSubComponents.</summary>
    <version major="6" minor="52"/>
    <date day="7" month="3" year="2012"/>
    <author login="saubrecht"/>
    <compatibility addition="yes" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        <p>The new method can be used to access for example inner tabs in a
        multiview window.</p>
    </description>
    <class package="org.openide.windows" name="TopComponent"/>
    <issue number="209051"/>
</change>
<change id="topcomponent.shortname">
    <api name="winsys"/>
    <summary>Added method TopComponent.getShortName()</summary>
    <version major="6" minor="52"/>
    <date day="7" month="3" year="2012"/>
    <author login="saubrecht"/>
    <compatibility addition="yes" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        <p>The new method can be used to retrieve a short version of TopComponent's
        display name, i.e. display name that does no include the name of activated
        Node.</p>
    </description>
    <class package="org.openide.windows" name="TopComponent"/>
    <issue number="209059"/>
</change>
<change id="topcomponent.busy">
    <api name="winsys"/>
    <summary>Added method TopComponent.makeBusy(boolean).</summary>
    <version major="6" minor="51"/>
    <date day="14" month="2" year="2012"/>
    <author login="saubrecht"/>
    <compatibility addition="yes" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        <p>The new method can be used to inform user that some (possibly lengthy)
        process is being run in given <code>TopComponent.</code></p>
    </description>
    <class package="org.openide.windows" name="WindowManager"/>
    <class package="org.openide.windows" name="TopComponent"/>
    <issue number="208026"/>
</change>
<change id="jtabbedpane.replacement.for.tabbedcontainer">
    <api name="winsys"/>
    <summary>Added branding options to replace the custom TabbedContainer with
    plain Swing JTabbedPane.</summary>
    <version major="6" minor="50"/>
    <date day="25" month="1" year="2012"/>
    <author login="saubrecht"/>
    <compatibility addition="yes" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        <p>By branding of core.windows module it is possible to use plain JTabbedPane
        component to display window tabs instead of the custom TabbedContainer.
        The property name is <code>WinSys.TabControl.SimpleTabs.Enabled</code></p>
    </description>
    <issue number="150393"/>
</change>
<change id="turn.copy.dnd.cloneable.TC.off">
    <api name="winsys"/>
    <summary>Added a client property to turn copy drag and drop of clonable TopComponents off.</summary>
    <version major="6" minor="48"/>
    <date day="12" month="11" year="2011"/>
    <author login="saubrecht"/>
    <compatibility addition="yes" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        Added a new boolean client property <code>PROP_DND_COPY_DISABLED</code>. 
        When set to <code>Boolean.TRUE</code> on a <code>CloneableTopComponent</code> then
        it is not possible to perform copy drag and drop operation with it.
    </description>
    <class package="org.openide.windows" name="TopComponent"/>
</change>
<change id="role.in.TC.registration.annotation">
    <api name="winsys"/>
    <summary>Added optional <code>role</code> parameter to <code>TopComponent</code> <code>Registration</code> annotation.</summary>
    <version major="6" minor="45"/>
    <date day="19" month="10" year="2011"/>
    <author login="saubrecht"/>
    <compatibility addition="yes" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        Since the window system now supports multiple window layouts - roles -
        the annotation for TopComponent registration needs an optional parameter
        to specify one or more roles the window should belong to. If no roles
        are specified, the TopComponent is registered in the default layout.
    </description>
    <class package="org.openide.windows" name="TopComponent"/>
    <issue number="199452"/>
</change>
<change id="mode.enhancements">
    <api name="winsys"/>
    <summary>Added more attributes to Mode DTD to support new winsys features.</summary>
    <version major="6" minor="44"/>
    <date day="7" month="6" year="2011"/>
    <author login="saubrecht"/>
    <compatibility addition="yes" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        New window system features - sliding bar for minimized windows at the top
        of the main window, drag and drop of the whole window group and minimization
        of the whole window group - require small additions to Mode DTD.
    </description>
    <issue number="199074"/>
</change>
<change id="roles">
    <api name="winsys"/>
    <summary>Support multiple window system layouts.</summary>
    <version major="6" minor="43"/>
    <date day="6" month="6" year="2011"/>
    <author login="saubrecht"/>
    <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        It is possible to define multiple window system layouts and switch between
        them either at startup or at runtime.
    </description>
    <class package="org.openide.windows" name="WindowManager"/>
    <class package="org.openide.windows" name="WindowSystemListener"/>
    <class package="org.openide.windows" name="WindowSystemEvent"/>
    <issue number="198859"/>
</change>
<change id="mainwindow.custom.background">
    <api name="winsys"/>
    <summary>Allow custom painted background in the main IDE window.</summary>
    <version major="6" minor="38"/>
    <date day="15" month="2" year="2011"/>
    <author login="saubrecht"/>
    <compatibility addition="no" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        There's a new Boolean property <code>NbMainWindow.showCustomBackground</code>
        in <code>javax.swing.UIManager</code>. When the property value is <code>TRUE</code>
        then the window system will turn off opacity for most of the main window
        components - menu bar, toolbars, status bar, sliding bars and the main
        desktop area component. That means that the main window background will
        be showing through these components. It can be used to paint some watermark
        or logo or gradient on the main window background, especially when using
        custom main window implementation, see change id reuse.existing.frame.as.the.main.window
    </description>
</change>
<change id="topcomponent.registration">
    <api name="winsys"/>
    <summary>Register default TopComponent location via annotations</summary>
    <version major="6" minor="37"/>
    <date day="30" month="11" year="2010"/>
    <author login="jtulach"/>
    <compatibility addition="no" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        Use <a href="@TOP@/org/openide/windows/TopComponent.Registration.html">TopComponent.Registration</a>,
        <a href="@TOP@/org/openide/windows/TopComponent.Description.html">TopComponent.Description</a> and
        <a href="@TOP@/org/openide/windows/TopComponent.OpenActionRegistration.html">TopComponent.OpenActionRegistration</a>
        to register default location of a 
        <a href="@TOP@/org/openide/windows/TopComponent.html">TopComponent</a>,
        some of its properties and action to open it.
    </description>
    <class package="org.openide.windows" name="TopComponent"/>
    <issue number="191407"/>
</change>
<change id="reuse.existing.frame.as.the.main.window">
    <api name="winsys"/>
    <summary>Reuse existing JFrame instance (if any) as IDE's main window.</summary>
    <version major="6" minor="36"/>
    <date day="23" month="11" year="2010"/>
    <author login="saubrecht"/>
    <compatibility addition="no" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        When window system loads it checks for existing Frames (java.awt.Frame.getFrames()) and
        if there is a JFrame whose name is "NbMainWindow" then it is reused as the main window.
        Main menu, toolbars and content pane will be put into this existing JFrame.
        If there isn't such a JFrame instance then a new empty JFrame is created
        and used for the main window - the same way as before this change.
    </description>
</change>

<change id="retain.non.persistent.topcomponent.locations">
    <api name="winsys"/>
    <summary>Annotation to retain the location of non-persistent TopComponents
    if the user drags them to another location on the screen.
    </summary>
    <version major="6" minor="32"/>
    <date day="14" month="1" year="2010"/>
    <author login="tboudreau"/>
    <compatibility addition="yes" binary="compatible" source="compatible"
    semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        Added an annotation, <code>org.openide.windows.RetainLocation</code>
        which can be applied to TopComponents whose
        persistence type is PERSISTENCE_NEVER.  There has been a long-term
        problem that such components can be defined as singleton components,
        and the first time they are opened, they appear in the correct place.
        However, on restart or after the first time they are closed, their
        persistence information, including the containing Mode, is lost, and
        thereafter they open in the editor area.
        <p/>
        This patch does not affect the current behavior of such components.
        However, if you add this annotation to the component, it will remember
        (storage in NbPreferences) the ID of its last known parent mode.  A
        minor patch to the window system's code for deciding if a Mode should
        be persistent causes it to now interpret any Mode containing a
        TopComponent annotated with <code>RetainLocation</code> as being one
        it should persist, so that if the user creates a transient Mode by
        dragging the window to a new location on screen, the data about that
        location is not lost on shutdown.
    </description>
    <class package="org.openide.windows" name="RetainLocation"/>
    <issue number="168060"/>
</change>
<change id="wm_openedtcs">
    <api name="winsys"/>
    <summary>New method to retrieve the list of TopComponents opened in a Mode.</summary>
    <version major="6" minor="28"/>
    <date day="15" month="7" year="2009"/>
    <author login="saubrecht"/>
    <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        Added new a method to WindowManager to retrieve the list of TopComponents
        opened in a given Mode. This method does not iterate through all the TopComponents
        in the Mode so it prevents already closed TopComponents from being deserialized
        from disk.
    </description>
    <class package="org.openide.windows" name="WindowManager"/>
    <issue number="168060"/>
</change>
<change id="tc_customization">
    <api name="winsys"/>
    <summary>Window system customizations on TopComponent level</summary>
    <version major="6" minor="26"/>
    <date day="29" month="1" year="2009"/>
    <author login="saubrecht"/>
    <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        Added a group of client properties that modify TopComponent's behavior in window system.
        E.g. disable closing, sliding, undocking etc.
    </description>
    <issue number="156693"/>
</change>
<change id="tc.open">
    <api name="winsys"/>
    <summary>TopComponent.openAction</summary>
    <version major="6" minor="24"/>
    <date day="8" month="7" year="2008"/>
    <author login="jtulach"/>
    <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        Adding new factory method that creates an action to open a <code>TopComponent</code>.
    </description>
    <issue number="136636"/>
</change>
<change id="winsys_customizations">
    <api name="winsys"/>
    <summary>Added a group of resource bundle properties for customization
    of window system behavior.</summary>
    <version major="6" minor="23"/>
    <date day="6" month="6" year="2008"/>
    <author login="saubrecht"/>
    <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
	<p>There is a set of new properties defined in resource bundle which platform 
        developers can use to customize the behavior of NetBeans' window system:</p>
        <ul>
            <li>Disable window drag and drop</li>
            <li>Disable window undocking (floating windows)</li>
            <li>Disable window sliding</li>
            <li>Disable window resizing</li>
            <li>Disable window maximization</li>
            <li>Disable closing of non-editor windows (views)</li>
            <li>Disable closing of editor windows</li>
            <li>Force window system into respecting window minimum sizes when resizing windows using splitter bars</li>
        </ul>
        <p>The features above can be turned on/off simply by branding of core.windows module.</p>
    </description>
    <issue number="136636"/>
</change>

<change id="keep_preferred_size_when_slided_in">
    <api name="winsys"/>
    <summary>Changed behavior of TopComponent.close() and TopComponentGroup.close() for non persistent TopComponent</summary>
    <version major="6" minor="22"/>
    <date day="27" month="5" year="2008"/>
    <author login="saubrecht"/>
    <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
	Added TopComponent client property netbeans.winsys.tc.keep_preferred_size_when_slided_in which forces the window system
        to respect TopComponent's preferred size when it is slided-in from left/right/bottom 
        sliding bar when set to Boolean.TRUE. Otherwise the slided-in TopComponent
        will fill the entire width/length of the IDE window (the default behavior).
        This switch is intended for tools/palette windows like e.g. color chooser, 
        tool picker etc.
    </description>
    <issue number="135318"/>
</change>

<change id="KeepNonPersistentTCInModelWhenClosed">
    <api name="winsys"/>
    <summary>Changed behavior of TopComponent.close() and TopComponentGroup.close() for non persistent TopComponent</summary>
    <version major="6" minor="20"/>
    <date day="27" month="3" year="2008"/>
    <author login="mslama"/>
    <compatibility addition="no" binary="compatible" source="compatible" semantic="incompatible" deprecation="no" deletion="no" modification="no"/>
    <description>
	Add client property KeepNonPersistentTCInModelWhenClosed to TopComponent to control behavior of winsys
        when nonpersistent TopComponent is closed. As some TopComponent wants to keep their position in winsys
	ie. be able to reopen at the same place and some TopComponent wants to be removed from winsys model.
	We added client boolean property KeepNonPersistentTCInModelWhenClosed. When this property is not set
	nn persistent TopComponent is removed from model when closed - it is original behavior before fix of
	issue #101700. If client property is set (to Boolean.TRUE) then TopComponent is kept in model. It means that
	client must explicitly set this client property to get behavior requested by issue #101700.
    </description>
    <issue number="121218"/>
</change>

<change id="close_component_group">
    <api name="winsys"/>
    <summary>Changed behavior of TopComponent.close() and TopComponentGroup.close() for non persistent TopComponent</summary>
    <version major="6" minor="18"/>
    <date day="23" month="10" year="2007"/>
    <author login="mslama"/>
    <compatibility addition="no" binary="compatible" source="compatible" semantic="incompatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        Change behavior of winsys implementation when TopComponent.close() and TopComponentGroup.close()
        is called for non persistent TopComponent. So far if non persistent TopComponent was closed it was
        removed from Mode. It causes window system to forget TopComponent location so if TopComponent
        is reopened it is opened in default location. It is now changed so that window system keeps location
        of non persistent TopComponent during session. Of course this information is not stored between sessions
        as TopComponent is NOT persistent. So this change applies only to TopComponent with peristence type
        PERSISTENCE_NEVER.
    </description>
    <issue number="101700"/>
</change>

<change id="auto_iconify">
    <api name="winsys"/>
    <summary>Added command line boolean option 'netbeans.winsys.auto_iconify'.</summary>
    <version major="6" minor="17"/>
    <date day="9" month="10" year="2007"/>
    <author login="dsimonek"/>
    <compatibility addition="yes" binary="compatible" source="compatible" semantic="incompatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        Added command line boolean option 'netbeans.winsys.auto_iconify'. When system is run
        with option netbeans.winsys.auto_iconify=true, all separate frames will follow 
        iconified state of main window automatically. So when main window is iconified,
        they all get iconified too and vice versa. Such behavior was default
        prior to this change, but now automatic iconification is disabled by default,
        to respect independency of separate frames and behave well with GNOME window
        managers such as default Metacity WM.
    </description>
    <issue number="109427"/>
</change>    
    
    
<change id="isOpenedEditorTopComponent">
    <api name="winsys"/>
    <summary>Added a method to check the TopComponent type - editor/view</summary>
    <version major="6" minor="16"/>
    <date day="3" month="5" year="2007"/>
    <author login="saubrecht"/>
    <compatibility addition="yes" binary="incompatible" source="incompatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        Added method <a href="@TOP@org/openide/windows/WindowManager.html#isOpenedEditorTopComponent-org.openide.windows.TopComponent-">WindowManager.isOpenedEditorTopComponent(TopComponent)</a>
        for checking of the TopComponent type - editor or view. The method returns true if the given TopComponent is opened and is docked into an editor-type Mode.
        It is safe to call this method outside the event dispatch thread.
     </description>
    <class package="org.openide.windows" name="WindowManager"/>
    <issue number="102174"/>
</change>    

<change id="openAtTabPosition">
    <api name="winsys"/>
    <summary>Added methods for opening TopComponent at specified position</summary>
    <version major="6" minor="15"/>
    <date day="6" month="4" year="2007"/>
    <author login="dsimonek"/>
    <compatibility addition="yes" binary="incompatible" source="incompatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        Added method <a href="@TOP@org/openide/windows/TopComponent.html#openAtTabPosition-int-">TopComponent.openAtTabPosition(int)</a>
        for opening and inserting top component at specified position. For retrieving current position, 
        method <a href="@TOP@org/openide/windows/TopComponent.html#getTabPosition--">TopComponent.getTabPosition()</a>
        was added.
     </description>
    <class package="org.openide.windows" name="TopComponent"/>
    <class package="org.openide.windows" name="WindowManager"/>
    <issue number="94604"/>
</change>    

<change id="netbeans.windows">
    <api name="winsys"/>
    <summary>Removal of netbeans.windows=sdi and netbeans.windows=mdi cmnd line option.</summary>
    <version major="6" minor="14"/>
    <date day="6" month="3" year="2007"/>
    <author login="dsimonek"/>
    <compatibility addition="no" binary="compatible" source="compatible" semantic="incompatible" deprecation="no" deletion="yes" modification="no"/>
    <description>
        Command line option netbeans.windows=(mdi,sdi) used for starting the system
        either in sdi or mdi mode, was deleted. Support for sdi was dropped and
        replaced by floating windows support. System will now always start in mdi mode.
    </description>
    <issue number="81330"/>
    <issue number="50352"/>
</change>    

<change id="isEditorTopComponent">
    <api name="winsys"/>
    <summary>Added a method to check the type of a TopComponent - 'editor' or 'view'</summary>
    <version major="6" minor="13"/>
    <date day="22" month="2" year="2007"/>
    <author login="saubrecht"/>
    <compatibility addition="yes" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        Added method isEditorTopComponent( TopComponent tc) to WindowManager that returns true if there is a Mode that 
        the TopComponent will be/is docked to and the Mode is of 'editor' kind (i.e. holds editor windows).
    </description>
    <class package="org.openide.windows" name="WindowManager"/>
    <issue number="96338"/>
</change>

<change id="generics">
    <api name="winsys"/>
    <summary>Generics</summary>
    <version major="6" minor="12"/>
    <date day="23" month="11" year="2006"/>
    <author login="saubrecht"/>
    <compatibility addition="no" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        Source level has been upgraded to 1.5 and all API use generics now.
    </description>
</change>
    
<change id="maximizedMode">
    <api name="winsys"/>
    <summary>Enhanced logic for maximized mode</summary>
    <version major="6" minor="11"/>
    <date day="10" month="11" year="2006"/>
    <author login="saubrecht"/>
    <compatibility addition="yes" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        When switching an editor TopComponent to maximized mode other components slide out while
        some components (e.g. palette) stay docked. It's also possible to maximize
        slided-in windows. Full description in http://ui.netbeans.org/docs/ui/fullscreen/fullscreen.html
    </description>
    <issue number="73766"/>
</change>

<change id="slideInSize">
    <api name="winsys"/>
    <summary>Slided-in windows remember their size</summary>
    <version major="6" minor="10"/>
    <date day="17" month="10" year="2006"/>
    <author login="saubrecht"/>
    <compatibility addition="yes" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        Each TopComponent in a sliding mode (left/right/bottom) can now have a different width/height when slided-in. These user defined sizes are
        stored in sliding mode's properties.
    </description>
    <issue number="87143"/>
</change>
     

<change id="tcOpenedClosed">
    <api name="winsys"/>
    <summary>New constants PROP_TC_OPENED and PROP_TC_CLOSED in TopComponent.Registry</summary>
    <version major="6" minor="9"/>
    <date day="12" month="10" year="2006"/>
    <author login="dsimonek"/>
    <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        New constants PROP_TC_OPENED and PROP_TC_CLOSED was added to the 
        <a href="@TOP@org/openide/windows/TopComponent.Registry.html#PROP_TC_OPENED">TopComponent.Registry</a>.
        When any instance of TopComponent is opened through its open() method, 
        either by user or programmatically, property change event PROP_TC_OPENED
        is fired. Similarly, when TopComponent is closed by close() method, 
        PROP_TC_CLOSED is fired. So clients listening to property changes of
        TopComponent.Registry can track opened and closed TopComponents easily.
    </description>
    <class package="org.openide.windows" name="WindowManager"/>
    <issue number="87009"/>
</change>
    
<change id="invokeWhenUIReady">
    <api name="winsys"/>
    <summary>New method to invoke code after main window is shown</summary>
    <version major="6" minor="8"/>
    <date day="23" month="8" year="2006"/>
    <author login="dsimonek"/>
    <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        New method <a href="@TOP@org/openide/windows/WindowManager.html#invokeWhenUIReady-java.lang.Runnable-">WindowManager.invokeWhenUIReady</a>
        has been added that can be used to execute a code
        that is supposed to run after main window is shown.
    </description>
    <class package="org.openide.windows" name="WindowManager"/>
    <issue number="65431"/>
</change>
    
<change id="ExternalDragAndDrop.windows">
    <api name="winsys"/>
    <summary>Added <code>ExternalDropHandler</code> abstract class.</summary>
    <version major="6" minor="7"/>
    <date day="30" month="5" year="2006"/>
    <author login="saubrecht"/>
    <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        When a file(s) or other objects are dragged over the editor aread of the IDE,
        the window system will use the global <code>Lookup</code> to get an
        instance of <code>ExternalDropHandler</code> class. If such an instance
        is available then it will be used to check whether the drop can be accepted
        (methods <code>canDrop</code>) and eventually to handle the dropped
        object(s) as well - method <code>handleDrop</code> - for example open
        dropped files in editor.
        <br/>
        Note that some IDE components may have their own <code>DropTargetListener</code>s
        (for example Projects view or Files view) therefore the <code>ExternalDropHandler</code>
        will not be used when dragging over these components.
    </description>
    <class package="org.openide.windows" name="ExternalDropHandler"/>
    <issue number="50129"/>
</change>

<change id="TopComponent-getHtmlDisplayName">
    <api name="winsys"/>
    <summary>Added the <code>TopComponent.getHtmlDisplayName</code>, 
            <code>TopComponent.setHtmlDisplayName</code> and 
            <code>WindowManager.topComponentHtmlDisplayNameChanged</code> methods.</summary>
    <version major="6" minor="4"/>
    <date day="31" month="10" year="2005"/>
    <author login="dsimonek"/>
    <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
    <description>
        The <code>TopComponent.getHtmlDisplayName</code> and <code>TopComponent.setHtmlDisplayName</code>
        methods was added to allow <code>TopComponent</code>s to have display
        name that contains html tags differentiated from regular display name.
        Regular display name should be used for tasks like alphabetical sorting
        while html display name is used for labels and titles that support html,
        like editor tabs. <code>WindowManager.topComponentHtmlDisplayNameChanged</code>
        was also added to let window system implementation know about html 
        display name change.
    </description>
    <class package="org.openide.windows" name="TopComponent"/>
    <class package="org.openide.windows" name="WindowManager"/>
    <issue number="66777"/>
</change>

<change id="TopComponent.toFront">
        <api name="winsys"/>
        <summary>Added the <code>TopComponent</code> ability to bring their parent 
        <code>Window</code> to front of other windows.</summary>
        <version major="5" minor="8"/>
        <date day="21" month="3" year="2005"/>
        <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
        <description>
            The <code>TopComponent</code> class has a new method <code>toFront()</code>
            that attempts to bring the parent <code>Window</code> of the TopComponent to
            front of other top-level windows.
            The method is implemented in the <code>WindowManager</code> class
            using AWT's <code>java.awt.Window#toFront()</code>.
        </description>
        <class package="org.openide.windows" name="TopComponent"/>
        <class package="org.openide.windows" name="WindowManager"/>
        <issue number="56277"/>
    </change>
<change id="TC-requestAttention">
      <api name="winsys"/>
      <summary>TopComponent can request attention</summary>
      <version major="5" minor="1"/>
      <date day="17" month="11" year="2004"/>
      <author login="mkleint"/>
      <compatibility addition="yes" binary="compatible" semantic="compatible" source="compatible" deprecation="no" deletion="no" modification="no"/>
      <description>
        <p>
<code>TopComponent.requestAttention(boolean)</code> and <code>TopComponent.cancelRequestAttention</code>
        added to allow components to signal that they require user's attention or the attention is no longer required.
        It's up to the current TopComponent container to decide how to attract user's attention.
        If the user activates the attention-requiring component, the container assumes the goal was achieved and the action is cancelled.
        The methods are thread-safe.
        </p>
        <p>
        For those implementing WindowManager class, there is an incompatible change where 
        abstract methods <code>topComponentCancelRequestAttention(TopComponent)</code> and 
        <code>topComponentRequestAttention(TopComponent)</code> were added.
        </p>
      </description>
      <class package="org.openide.windows" name="WindowManager"/>
      <class package="org.openide.windows" name="TopComponent"/>
      <issue number="48811"/>
    </change>
<change>
        <api name="winsys"/>
        <summary>Allow association of Lookup with TopComponent later than 
          in constructor.
        </summary>
        <version major="4" minor="23"/> 
        <date day="20" month="1" year="2004"/>
        <author login="jtulach"/>
        <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
        <description>
                Adding <code>TopComponent.associateLookup</code> to allow
                late (in middle of constructor) association of Lookup with
                component. This is especially useful in 
                <code>org.openide.explorer.ExplorerUtils</code>.
        </description>
        <class package="org.openide.windows" name="TopComponent"/>
        <issue number="38475"/>
    </change>
<change>
        <api name="winsys"/>
        <summary>Method TopComponent.getPersistenceType() is added to replace usage of client property
                 PersistenceType.
        </summary>
        <version major="4" minor="20"/> 
        <date day="7" month="1" year="2004"/>
        <author login="mslama"/>
        <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
        <description>
                Method to get TopComponent persistence type is added to API.
        </description>
        <class package="org.openide.windows" name="TopComponent"/>
        <issue number="36916"/>
    </change>
<change>
        <api name="winsys"/>
        <summary>New constructor for better delegation</summary>
        <version major="4" minor="19"/>
        <date day="27" month="12" year="2003"/>
        <author login="jtulach"/>
        <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
        <description>
        	Easier way for <code>TopComponent</code>s to provide
          their own Lookup and still maintain their contract with
          <code>getActivatedNodes</code>.
        </description>
        <class package="org.openide.windows" name="TopComponent"/>
        <issue number="38185"/>
    </change>
<change>
     <api name="winsys"/>
     <summary>Added method findTopComponent(String tcID) to WindowManager</summary>
     <version major="4" minor="15"/>
     <date day="25" month="11" year="2003"/>
     <author login="mslama"/>
     <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
     <description>
     This method is necessary to be able to retrieve TopComponent instance using unique TopComponent ID.
     Important mainly to access persistent singleton TopComponent instances.
     </description>
     <class package="org.openide.windows" name="WindowManager"/>
     <issue number="37199"/>
    </change>
<change>
     <api name="winsys"/>
     <summary>New Window System implementation</summary>
     <version major="4" minor="13"/>
     <date day="12" month="11" year="2003"/>
     <author login="pzavadsky"/>
     <compatibility semantic="incompatible" source="compatible" addition="yes" deprecation="yes" modification="yes" binary="compatible" deletion="no"/>
     <description>
     Provided implementation of new window system. It is a new major version of module core/windows.
     There also open API affected. There were added some new APIs, some older were deprecated
     and also some older APIs have adjusted their semantics. Look at the 
     <a href="https://netbeans.apache.org/projects/platform/core/windowsystem/changes.html" shape="rect">changes document</a>
     which has the detailed information.
     </description>
     <class package="org.openide.windows" name="CloneableTopComponent"/>
     <class package="org.openide.windows" name="TopComponent"/>
     <class package="org.openide.windows" name="TopComponentGroup"/>
     <class package="org.openide.windows" name="WindowManager"/>
     <class package="org.openide.windows" name="Workspace"/>
     <issue number="29836"/>
    </change>
<change id="TopComponent-DataObject">
     <api name="winsys"/>
     <summary>Removal of TopComponent(DataObject) constructor</summary>
     <version major="4" minor="3"/>
     <date day="2" month="4" year="2003"/>
     <author login="jtulach"/>
     <compatibility addition="yes" deletion="yes" deprecation="yes" source="incompatible" binary="incompatible" semantic="compatible" modification="no"/>
     <description>
        Due to separation of openide-loaders.jar the <code>TopComponent (DataObject)</code>
        and <code>CloneableTopComponent (DataObject)</code>
        constructors have been removed. Instead of using the old behavior
        <pre xml:space="preserve">
        new TopComponent (dataObject);
        </pre>
        please change the code to use <code>TopComponent.NodeName</code>:
        <pre xml:space="preserve">
        tc = new TopComponent ();
        NodeName.connect (tc, dataObject.getNodeDelegate ());
        </pre>
     </description>
     <class package="org.openide.windows" name="TopComponent"/>
     <class package="org.openide.windows" name="CloneableTopComponent"/>
     <issue number="32143"/>
    </change>
<change>
        <api name="winsys"/>
        <summary>CloneableTopComponent.Ref.getArbitraryComponent method added</summary>
        <version major="3" minor="41"/>
        <date day="27" month="2" year="2003"/>
        <author login="pzavadsky"/>
        <compatibility deprecation="yes" addition="yes" binary="compatible" source="compatible" semantic="compatible" deletion="no" modification="no"/>
        <description>
            The  method <code>getAnyComponent</code> in <code>CloneableTopComponent.Ref</code>
            class uses <code>NoSuchElementException</code> as a mean indicating there is no
            component. Moreover the exception is runtime one (unchecked). 
            It forces clients to use try-catch blocks, which doesn't follow
            rule, which says there shouldn't be used exception for controlling program flow.
            It is replaced by method <code>getArbitraryComponent</code> which returns
            <code>null</code> instead of throwing an exception.
        </description>
        <class package="org.openide.windows" name="CloneableTopComponent"/>
        <issue number="25824"/>
    </change>
<change>
     <api name="winsys"/>
     <summary>New property "WizardPanel_errorMessage" for WizardDescriptor has been added</summary>
     <version major="3" minor="39"/>
     <date day="20" month="2" year="2003"/>
     <author login="dkonecny"/>
     <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
     <description>
        New property with name "WizardPanel_errorMessage" was added to WizardDescriptor class.
        It is String property and can contain description why the wizard panel is invalid. Non-null
        value of this property is automatically displayed at the bottom of the wizard panel.
     </description>
     <class link="no" package="org.openide" name="WizardDescriptor"/>
     <issue number="28466"/>
    </change>
<change>
        <api name="winsys"/>
        <summary>Add new DTD 1.2 for wsmode configuration file</summary>
        <date day="1" month="7" year="2002"/>
        <author login="mslama"/>
        <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
        <description> Current frame state is now stored. Added attribute for restored frame state,
            valid only when frame state is maximized. (Restored frame state is state of frame when
            frame is not maximized, it can be normal or iconified.)
        </description>
        <issue number="25268"/>
    </change>
<change>
        <api name="winsys"/>
        <summary>Add new DTD 1.1 for window manager configuration file</summary>
        <date day="14" month="6" year="2002"/>
        <author login="mslama"/>
        <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
        <description> Support for positioning main windom in MDI mode during first
            user start.
        </description>
        <issue number="24451"/>
    </change>
<change>
        <api name="winsys"/>
        <summary>Add new DTD 1.1 for workspace configuration file</summary>
        <date day="6" month="1" year="2002"/>
        <author login="dsimonek"/>
        <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
        <description> Added element for maximized desktop in MDI mode.
        </description>
        <issue number="19072"/>
    </change>
<change>
        <api name="winsys"/>
        <summary>Add List TopComponent.availableModes(List modes) method</summary>
        <version major="2" minor="14"/>
        <date day="23" month="4" year="2002"/>
        <author login="dsimonek"/>
        <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
        <description> Method availableModes(...) added to TopComponent to allow
            TopComponent to specify where can be docked.
        </description>
        <class package="org.openide.windows" name="TopComponent"/>
        <issue number="20153"/>
    </change>
<change>
        <api name="winsys"/>
        <summary>TopComponent shown state notification methods added to Winsys API</summary>
        <version major="2" minor="18"/>
        <date day="10" month="5" year="2002"/>
        <author login="pzavadsky"/>
        <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
        <description>
	    Four new methods has been added to Winsys API, i.e. <code>TopComponent</code>:
	    protected void componentShowing(), protected void componentHidded(),
            protected void componentOpened(), protected void componentClose().
            The last two replaces deprecated protected void openNotify()
            and protected void closeNotify() methods. 
            Two methods were added also to <code>WindowManager</code> to handle the
            notifiction via its subclasses:
            protected void componentShowing(TopComponent)
            and protected void componentHidden(TopComponent).
        </description>
        <class package="org.openide.windows" name="TopComponent"/>
        <class package="org.openide.windows" name="WindowManager"/>
        <issue number="21618"/>
    </change>
<change id="issue-19443-1">
      <summary>API separation, phase I</summary>
      <version major="3" minor="14"/>
      <date day="15" month="10" year="2002"/>
      <author login="jglick"/>
      <compatibility binary="compatible" source="incompatible" deprecation="yes" semantic="compatible" addition="no" deletion="no" modification="no">
        <p>
          The deprecated classes continue to be available in the module
          <code>org.openide.deprecated</code> which you may depend on it you
          cannot remove uses of the deprecated APIs. In order for
          <code>TopManager.getDefault()</code> to work, you must also require the
          token <code>org.openide.TopManager</code>, which is provided by an
          unspecified module. The deprecated API module and its implementation
          module are autoloads, meaning they will not be loaded unless some
          module still requires them.
        </p>
        <p>
          Similarly, the Java Hierarchy API was moved to the module
          <code>org.openide.src</code> which you should depend on in order to use
          this API.
        </p>
        <p>
          For compatibility, the above three dependencies are added to your module
          <em>automatically</em> in case it either requests no specific API
          version at all, or requests an API version prior to 3.14. Modules
          requesting APIs 3.14 or higher must declare these dependencies
          explicitly if they in fact need them.
        </p>
      </compatibility>
      <description>
        <p>
          Many classes were moved to a separate module,
          <samp>openide-deprecated.jar</samp>, not available to modules by
          default. Uses of these classes in modules should be cleaned up whenever
          possible.
        </p>
        <p>
          Additionally, the entire contents of <code>org.openide.src.*</code> and
          <code>org.openide.src.nodes.*</code>, as well as
          <code>org.openide.cookies.SourceCookie</code> and some associated
          property editors, were moved to a separate module.
        </p>
        <p>
          The most common apparent symptom for module authors will be the absence
          of <code>TopManager</code>. Most methods in this class have been
          replaced by newer utility classes in a straightforward manner. See the
          Upgrade Guide.
        </p>
      </description>
      <class link="no" package="org.openide" name="DialogDisplayer"/>
      <class link="no" package="org.openide" name="LifecycleManager"/>
      <class link="no" package="org.openide" name="Places"/>
      <class link="no" package="org.openide" name="TopManager"/>
      <class link="no" package="org.openide.actions" name="AddWatchAction"/>
      <class link="no" package="org.openide.actions" name="BuildProjectAction"/>
      <class link="no" package="org.openide.actions" name="CompileProjectAction"/>
      <class link="no" package="org.openide.actions" name="DebugProjectAction"/>
      <class link="no" package="org.openide.actions" name="ExecuteProjectAction"/>
      <class link="no" package="org.openide.actions" name="FinishDebuggerAction"/>
      <class link="no" package="org.openide.actions" name="GoAction"/>
      <class link="no" package="org.openide.actions" name="GoToCursorAction"/>
      <class link="no" package="org.openide.actions" name="HelpAction"/>
      <class link="no" package="org.openide.actions" name="OpenProjectAction"/>
      <class link="no" package="org.openide.actions" name="SaveProjectAction"/>
      <class link="no" package="org.openide.actions" name="StartDebuggerAction"/>
      <class link="no" package="org.openide.actions" name="StepOutAction"/>
      <class link="no" package="org.openide.actions" name="ToggleBreakpointAction"/>
      <class link="no" package="org.openide.actions" name="TraceIntoAction"/>
      <class link="no" package="org.openide.actions" name="TraceOverAction"/>
      <class link="no" package="org.openide.awt" name="HtmlBrowser"/>
      <class link="no" package="org.openide.awt" name="StatusDisplayer"/>
      <class link="no" package="org.openide.cookies" name="DebuggerCookie"/>
      <class link="no" package="org.openide.cookies" name="ElementCookie"/>
      <class link="no" package="org.openide.cookies" name="ProjectCookie"/>
      <class link="no" package="org.openide.cookies" name="SourceCookie"/>
      <class link="no" package="org.openide.explorer.propertysheet.editors" name="ChoicePropertyEditor"/>
      <class link="no" package="org.openide.explorer.propertysheet.editors" name="DirectoryOnlyEditor"/>
      <class link="no" package="org.openide.explorer.propertysheet.editors" name="ElementFormatEditor"/>
      <class link="no" package="org.openide.explorer.propertysheet.editors" name="ExternalCompiler"/>
      <class link="no" package="org.openide.explorer.propertysheet.editors" name="FileEditor"/>
      <class link="no" package="org.openide.explorer.propertysheet.editors" name="FileOnlyEditor"/>
      <class link="no" package="org.openide.explorer.propertysheet.editors" name="IconEditor"/>
      <class link="no" package="org.openide.explorer.propertysheet.editors" name="IdentifierArrayEditor"/>
      <class link="no" package="org.openide.explorer.propertysheet.editors" name="MethodParameterArrayEditor"/>
      <class link="no" package="org.openide.explorer.propertysheet.editors" name="ModifierEditor"/>
      <class link="no" package="org.openide.explorer.propertysheet.editors" name="StringArrayCustomEditor"/>
      <class link="no" package="org.openide.explorer.propertysheet.editors" name="StringArrayCustomizable"/>
      <class link="no" package="org.openide.explorer.propertysheet.editors" name="StringArrayEditor"/>
      <class link="no" package="org.openide.explorer.propertysheet.editors" name="TypeEditor"/>
      <class link="no" package="org.openide.loaders" name="DataObjectFilter"/>
      <class link="no" package="org.openide.loaders" name="ExecSupport"/>
      <class link="no" package="org.openide.loaders" name="ExecutionSupport"/>
      <class link="no" package="org.openide.loaders" name="ExtensionListEditor"/>
      <class link="no" package="org.openide.loaders" name="RepositoryNodeFactory"/>
      <class link="no" package="org.openide.modules" name="IllegalModuleException"/>
      <class link="no" package="org.openide.modules" name="ManifestSection"/>
      <class link="no" package="org.openide.modules" name="ModuleDescription"/>
      <class link="no" package="org.openide.nodes" name="NodeOperation"/>
      <class link="no" package="org.openide.options" name="ControlPanel"/>
      <class link="no" package="org.openide.util.actions" name="ProjectSensitiveAction"/>
      <class link="no" package="org.openide.windows" name="IOProvider"/>
      <package link="no" name="org.openide.debugger"/>
      <package link="no" name="org.openide.src"/>
      <package link="no" name="org.openide.src.nodes"/>
      <issue number="19443"/>
      <issue number="20898"/>
    </change>
<change id="issue-19443-2">
      <summary>API separation, phase II</summary>
      <version major="3" minor="17"/>
      <date day="1" month="11" year="2002"/>
      <author login="jglick"/>
      <compatibility binary="compatible" source="incompatible" modification="yes" semantic="compatible" deprecation="no" addition="no" deletion="no">
        <p>
          Module authors using the now-separated APIs will need to adjust their
          compilation classpaths to include the new JAR files. Modules wishing to
          use recent APIs and declaring a current openide specification version
          dependency will need to explicitly declare dependencies on these new
          APIs if there are any.
        </p>
        <p>
          For compatibility, modules with no declared Open APIs dependency, or
          declared on a version prior to 3.17, will have their dependencies
          automatically refined as if to include the declarations:
        </p>
        <pre xml:space="preserve">
OpenIDE-Module-Module-Dependencies: org.openide.compiler &gt; 1.0,
  org.openide.execution &gt; 1.0, org.openide.io &gt; 1.0
OpenIDE-Module-Requires: org.openide.compiler.CompilationEngine,
  org.openide.execution.ExecutionEngine, org.openide.windows.IOProvider
        </pre>
        <p>
          And any package dependencies from old modules on
          <code>org.netbeans.lib.terminalemulator</code> will be converted to
          module dependencies.
        </p>
      </compatibility>
      <description>
        <p>
          Three sections of the Open APIs were split into new autoload modules.
        </p>
        <ul>
          <li>
            <p>
              The module <code>org.openide.compiler</code> (version 1.0) contains
              the Compiler API and some other classes directly related to it.
            </p>
          </li>
          <li>
            <p>
              The module <code>org.openide.execution</code> (version 1.0) contains
              the Execution API and some other classes directly related to it.
            </p>
          </li>
          <li>
            <p>
              The module <code>org.openide.io</code> (version 1.0) contains
              <code>InputOutput</code> and related classes (formerly part of the
              Window System API, and still physically in the
              <code>org.openide.windows</code> package).
            </p>
          </li>
        </ul>
        <p>
          New modules wishing to use these APIs must declare regular module
          dependencies on them. Future changes in these APIs will be documented
          separately.
        </p>
        <p>
          Furthermore, modules wishing to use certain services must
          <code>OpenIDE-Module-Require</code> them if appropriate:
        </p>
        <ul>
          <li>
            <p>
              <code>org.openide.compiler.CompilationEngine</code>, in order to
              call <code>CompilationEngine.getDefault()</code>, or safely use
              <code>AbstractCompileAction</code> or one of its subclasses, or
              call <code>CompilerJob.start()</code>, or use
              <code>BeanInfo</code>s for Compiler API classes, etc.
            </p>
          </li>
          <li>
            <p>
              <code>org.openide.execution.ExecutionEngine</code>, in order to
              call <code>ExecutionEngine.getDefault()</code>, or safely use
              <code>ExecuteAction</code>, or call
              <code>Executor.execute(...)</code>, or use <code>BeanInfo</code>s
              for Execution API classes, etc.
            </p>
          </li>
          <li>
            <p>
              <code>org.openide.windows.IOProvider</code>, in order to call
              <code>IOProvider.getDefault()</code>.
            </p>
          </li>
        </ul>
        <p>
          Other minor changes:
        </p>
        <ul>
          <li>
            <p>
              Registration of URL stream handler factories using
              <code>NbfsStreamHandlerFactory.register(...)</code> is deprecated.
              Simply create an instance of <code>URLStreamHandlerFactory</code>
              and add it to Lookup instead.
            </p>
          </li>
          <li>
            <p>
              The method <code>FileUtil.nbfsURLStreamHandler</code> was added,
              but is not intended for use by modules.
            </p>
          </li>
          <li>
            <p>
              All uses of <code>ExecInfo</code> are deprecated as they abuse the
              distinction between Filesystems and the user classpath. Use and
              override only <code>Executor.execute(DataObject)</code>. Similarly,
              <code>ThreadExecutor</code> is deprecated for the time being
              because it suffers from similar problems.
            </p>
          </li>
          <li>
            <p>
              Direct use of <code>NbfsURLConnection</code> is deprecated in favor
              of the more general <code>URLMapper</code> from the Filesystems
              API.
            </p>
          </li>
          <li>
            <p>
              Package dependencies on
              <code>org.netbeans.lib.terminalemulator</code> must be replaced
              with module dependencies on a new autoload module
              <code>org.netbeans.lib.terminalemulator</code> (version 1.0).
            </p>
          </li>
          <li>
            <p>
              Several static convenience methods have been added to
              <code>AbstractCompileAction</code>. Of most interest is
              <code>prepareJobFor</code>. Module code should no longer assume
              that <code>DataFolder</code> has a <code>CompilerCookie</code>
              which recursively compiles the folder and subfolders (according to
              depth); while it is still true, for reasons of compatibility, new
              code should use <code>prepareJobFor</code> to create a compiler job
              from a folder.
            </p>
          </li>
        </ul>
      </description>
      <class link="no" package="org.openide.actions" name="AbstractCompileAction"/>
      <class link="no" package="org.openide.actions" name="BuildAction"/>
      <class link="no" package="org.openide.actions" name="BuildAllAction"/>
      <class link="no" package="org.openide.actions" name="CleanAction"/>
      <class link="no" package="org.openide.actions" name="CleanAllAction"/>
      <class link="no" package="org.openide.actions" name="CompileAction"/>
      <class link="no" package="org.openide.actions" name="CompileAllAction"/>
      <class link="no" package="org.openide.actions" name="ExecuteAction"/>
      <class link="no" package="org.openide.cookies" name="ArgumentsCookie"/>
      <class link="no" package="org.openide.cookies" name="CompilerCookie"/>
      <class link="no" package="org.openide.cookies" name="ExecCookie"/>
      <class link="no" package="org.openide.filesystems" name="FileUtil"/>
      <class link="no" package="org.openide.loaders" name="CompilerSupport"/>
      <class link="no" package="org.openide.loaders" name="ExecutionSupport"/>
      <class link="no" package="org.openide.windows" name="IOProvider"/>
      <class link="no" package="org.openide.windows" name="InputOutput"/>
      <class link="no" package="org.openide.windows" name="OutputEvent"/>
      <class link="no" package="org.openide.windows" name="OutputListener"/>
      <class link="no" package="org.openide.windows" name="OutputWriter"/>
      <package link="no" name="org.openide.compiler"/>
      <package link="no" name="org.openide.execution"/>
      <issue number="19443"/>
    </change>
<change>
        <api name="winsys"/>
        <summary>Add WindowManager.getDefault() method</summary>
        <version major="2" minor="10"/>
        <date day="21" month="3" year="2002"/>
        <author login="dsimonek"/>
        <compatibility addition="yes" deprecation="yes" binary="compatible" source="compatible" semantic="compatible" deletion="no" modification="no"/>
        <description> Method WindowManager.getDefault() added to loose coupling between Topmanager and winsys.
        Old method TopManager.getWindowManager() was deprecated.
        </description>
        <class package="org.openide.windows" name="WindowManager"/>
        <issue number="20942"/>
    </change>
<change>
      <api name="winsys"/>
      <summary>Wizard panels can refuse to go forward</summary>
      <date day="15" month="1" year="2001"/>
      <compatibility modification="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" addition="no" deletion="no"/>
      <description>
        <code>WizardDescriptor.Panel.readSettings</code> can throw
        <code>IllegalStateException</code>. This can be used to indicate that data
        provided by the previous panels are not OK and that the panel wants the
        wizard to go back one panel.
      </description>
      <class link="no" package="org.openide" name="WizardDescriptor"/>
    </change>
<change>
      <api name="winsys"/>
      <summary>Both Swing client properties and descriptor properties checked for wizard steps/image/help</summary>
      <date day="9" month="1" year="2001"/>
      <compatibility modification="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" addition="no" deletion="no"/>
      <description>
        Added new functionality without API change. Wizard descriptor creates
        wizard panel with list of steps/image/help on the left depending on the
        properties supplied by
        <code>((JComponent)WizardDescriptor.current().getComponent()).putClientProperty()</code>
        or <code>WizardDescriptor.putProperty()</code>.
      </description>
      <class link="no" package="org.openide" name="WizardDescriptor"/>
    </change>
<change>
      <api name="winsys"/>
      <summary>OK button in notify dialog can be turned off</summary>
      <date day="11" month="4" year="2001"/>
      <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
      <description>
        Added methods <code>isValid</code> and <code>setValid</code>, added
        property name String constant <code>PROP_VALID</code>. It can be used to
        change validity (enable/disable) of standard OK button in dialog.
      </description>
      <class link="no" package="org.openide" name="NotifyDescriptor"/>
    </change>
<change>
      <api name="winsys"/>
      <summary>Make a top component visible without focus change</summary>
      <date day="27" month="7" year="2001"/>
      <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
      <description>
        Added method to make component visible without change of focus or frames
        z-order. If it is not possible to make component visible without change of
        focus it works in the same way as requestFocus(). New methods:
        <ul>
          <li>
<code>public void TopComponent.requestVisible()</code>
</li>
          <li>
<code>public void WindowManager.Component.requestVisible()</code>
</li>
        </ul>
      </description>
      <class package="org.openide.windows" name="TopComponent"/>
      <class package="org.openide.windows" name="WindowManager"/>
    </change>
<change>
      <api name="winsys"/>
      <summary>Open and close notification for top components</summary>
      <date day="7" month="3" year="2001"/>
      <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
      <description>
        Added open and close notification for top components. New methods:
        <ul>
          <li>
<code>protected void TopComponent.openNotify()</code>
</li>
          <li>
<code>protected void TopComponent.closeNotify()</code>
</li>
          <li>
<code>protected void WindowManager.componentOpenNotify(TopComponent tc)</code>
</li>
          <li>
<code>protected void WindowManager.componentCloseNotify(TopComponent tc)</code>
</li>
        </ul>
      </description>
      <class package="org.openide.windows" name="TopComponent"/>
      <class package="org.openide.windows" name="WindowManager"/>
    </change>
<change>
      <api name="winsys"/>
      <summary>Several members of <code>InputOutput</code> removed</summary>
      <date day="16" month="6" year="2000"/>
      <compatibility deletion="yes" deprecation="yes" binary="compatible" source="compatible" semantic="compatible" addition="no" modification="no">
        First broken, later re-added but deprecated in trunk and
        <code>boston</code>. Any code referring to these members is erroneous and
        must be rewritten. The only useful related member, the
        <code>InputOutput.NULL</code> constant, is still public and accessible.
      </compatibility>
      <description>
        Several members of this interface were technically public before and are
        now deprecated:
        <ul>
          <li>
<code>InputOutput.Null</code>
</li>
          <li>
<code>InputOutput.NullOutputWriter</code>
</li>
          <li>
<code>InputOutput.nullReader</code>
</li>
          <li>
<code>InputOutput.nullWriter</code>
</li>
        </ul>
        In fact they were meant to be package-private and were only public due to
        a quirk of Java's syntax (default modifier inside interfaces is public).
      </description>
      <class link="no" package="org.openide.windows" name="InputOutput"/>
    </change>
</changes>
<htmlcontents>
<head>
<title>Change History for the Window Systems API</title>
<link rel="stylesheet" href="prose.css" type="text/css"/>
</head>
<body>
<p class="overviewlink">
<a href="overview-summary.html">Overview</a>
</p>
<h1>Introduction</h1>
<h2>What do the Dates Mean?</h2>
<p>The supplied dates indicate when the API change was made, on the CVS
trunk. From this you can generally tell whether the change should be
present in a given build or not; for trunk builds, simply whether it
was made before or after the change; for builds on a stabilization
branch, whether the branch was made before or after the given date. In
some cases corresponding API changes have been made both in the trunk
and in an in-progress stabilization branch, if they were needed for a
bug fix; this ought to be marked in this list.</p>
<ul>
<li>The <code>release41</code> branch was made on Apr 03 '05 for use in the NetBeans 4.1 release.
Specification versions: 6.0 begins after this point.</li>
<li>The <code>release40</code> branch was made on Nov 01 '04 for use in the NetBeans 4.0 release.
Specification versions: 5.0 begins after this point.</li>
</ul>
<hr/>
<standard-changelists module-code-name="org.openide.windows"/>
<hr/>
<p>@FOOTER@</p>
</body>
</htmlcontents>
</apichanges>
