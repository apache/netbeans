/* The following code was generated by JFlex 1.4.3 on 8/16/16 3:36 PM */

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.netbeans.modules.javascript2.jade.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/16/16 3:36 PM from the specification file
 * <tt>/home/petr/mercurial/web-main/javascript2.jade/tools/JadeColoringScanner.flex</tt>
 */
public final class JadeColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int AFTER_CODE_DELIMITER = 14;
  public static final int AFTER_ATTRIBUTES = 78;
  public static final int IN_PLAIN_TEXT_BLOCK_AFTER_EOL = 32;
  public static final int JS_STRING = 52;
  public static final int JAVASCRIPT_WITH_BLOCK_EXPANSION = 48;
  public static final int IN_PLAIN_TEXT_LINE = 28;
  public static final int AFTER_CODE_DELIMITER_WITH_BLOCK_EXPANSION = 16;
  public static final int FILEPATH = 54;
  public static final int JAVASCRIPT_AFTER_EACH = 68;
  public static final int JS_SSTRING = 50;
  public static final int AFTER_INCLUDE = 60;
  public static final int MIXIN_ARGUMENTS = 72;
  public static final int IN_COMMENT_AFTER_EOL = 20;
  public static final int IN_FILTER_BLOCK = 56;
  public static final int MIXIN_CALL_ARGUMENT = 76;
  public static final int TEXT_LINE = 26;
  public static final int YYINITIAL = 0;
  public static final int AFTER_MIXIN = 70;
  public static final int AFTER_PLAIN_TEXT_BLOCK_DELIMITER = 34;
  public static final int IN_UNBUFFERED_COMMENT = 22;
  public static final int AFTER_PLUS_MIXIN = 74;
  public static final int AFTER_EACH = 66;
  public static final int AFTER_DOCTYPE = 6;
  public static final int IN_UNBUFFERED_COMMENT_AFTER_EOL = 24;
  public static final int JAVASCRIPT_VALUE = 40;
  public static final int JAVASCRIPT = 42;
  public static final int AFTER_BLOCK = 62;
  public static final int HTML_ATTRIBUTE = 36;
  public static final int DOCTYPE_STRING_END = 10;
  public static final int DOCTYPE_STRING = 8;
  public static final int IN_FILTER_BLOCK_AFTER_EOL = 58;
  public static final int JAVASCRIPT_EXPRESSION = 46;
  public static final int AFTER_TAG = 12;
  public static final int JAVASCRIPT_LINE = 44;
  public static final int IN_PLAIN_TEXT_BLOCK = 30;
  public static final int HTML_ATTRIBUTE_VALUE = 38;
  public static final int DOCTYPE = 4;
  public static final int AFTER_EOL = 2;
  public static final int IN_COMMENT = 18;
  public static final int AFTER_COLON_IN_TAG = 64;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 
    32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\23\1\6\1\1\1\21\1\6\1\5\16\23\4\0\1\10\1\65"+
    "\1\20\1\72\1\25\1\15\1\71\1\77\1\73\1\76\1\15\1\63"+
    "\1\75\1\13\1\66\1\30\12\2\1\70\1\7\1\14\1\64\1\7"+
    "\2\7\1\53\1\57\1\35\1\32\1\42\1\45\1\17\1\54\1\43"+
    "\1\17\1\60\1\46\1\62\1\51\1\33\1\40\1\17\1\55\1\47"+
    "\1\36\1\50\1\17\1\56\1\61\1\37\1\17\1\100\1\4\1\101"+
    "\1\7\1\12\1\7\1\52\1\11\1\34\1\31\1\41\1\44\1\17"+
    "\1\54\1\43\1\17\1\60\1\46\1\62\1\51\1\33\1\40\1\17"+
    "\1\55\1\47\1\36\1\50\1\17\1\56\1\61\1\37\1\17\1\74"+
    "\1\67\1\102\1\7\1\23\40\24\1\22\1\3\4\12\4\3\1\17"+
    "\2\3\1\24\7\3\1\17\4\3\1\17\5\3\27\17\1\3\37\17"+
    "\1\3\10\17\u01c2\26\4\0\14\26\16\0\5\26\7\0\1\26\1\0"+
    "\1\26\21\0\160\23\5\26\1\0\2\26\2\0\4\26\10\0\1\26"+
    "\1\0\3\26\1\0\1\26\1\0\24\26\1\0\123\26\1\0\213\26"+
    "\1\0\5\23\2\0\236\26\11\0\46\26\2\0\1\26\7\0\47\26"+
    "\7\0\1\27\1\0\55\23\1\0\1\23\1\0\2\23\1\0\2\23"+
    "\1\0\1\23\10\0\33\26\5\0\3\26\15\0\5\23\6\0\1\27"+
    "\4\0\13\23\5\0\53\26\25\23\12\16\4\0\2\26\1\23\143\26"+
    "\1\0\1\26\10\23\1\0\6\23\2\26\2\23\1\0\4\23\2\26"+
    "\12\16\3\26\2\0\1\26\17\0\1\23\1\26\1\23\36\26\33\23"+
    "\2\0\131\26\13\23\1\26\16\0\12\16\41\26\11\23\2\26\4\0"+
    "\1\26\5\0\26\26\4\23\1\26\11\23\1\26\3\23\1\26\5\23"+
    "\22\0\31\26\3\23\104\0\1\26\1\0\13\26\67\0\33\23\1\0"+
    "\4\23\66\26\3\23\1\26\22\23\1\26\7\23\12\26\2\23\2\0"+
    "\12\16\1\0\7\26\1\0\7\26\1\0\3\23\1\0\10\26\2\0"+
    "\2\26\2\0\26\26\1\0\7\26\1\0\1\26\3\0\4\26\2\0"+
    "\1\23\1\26\7\23\2\0\2\23\2\0\3\23\1\26\10\0\1\23"+
    "\4\0\2\26\1\0\3\26\2\23\2\0\12\16\2\26\2\27\7\0"+
    "\1\27\5\0\3\23\1\0\6\26\4\0\2\26\2\0\26\26\1\0"+
    "\7\26\1\0\2\26\1\0\2\26\1\0\2\26\2\0\1\23\1\0"+
    "\5\23\4\0\2\23\2\0\3\23\3\0\1\23\7\0\4\26\1\0"+
    "\1\26\7\0\12\16\2\23\3\26\1\23\13\0\3\23\1\0\11\26"+
    "\1\0\3\26\1\0\26\26\1\0\7\26\1\0\2\26\1\0\5\26"+
    "\2\0\1\23\1\26\10\23\1\0\3\23\1\0\3\23\2\0\1\26"+
    "\17\0\2\26\2\23\2\0\12\16\1\0\1\27\17\0\3\23\1\0"+
    "\10\26\2\0\2\26\2\0\26\26\1\0\7\26\1\0\2\26\1\0"+
    "\5\26\2\0\1\23\1\26\7\23\2\0\2\23\2\0\3\23\10\0"+
    "\2\23\4\0\2\26\1\0\3\26\2\23\2\0\12\16\1\0\1\26"+
    "\20\0\1\23\1\26\1\0\6\26\3\0\3\26\1\0\4\26\3\0"+
    "\2\26\1\0\1\26\1\0\2\26\3\0\2\26\3\0\3\26\3\0"+
    "\14\26\4\0\5\23\3\0\3\23\1\0\4\23\2\0\1\26\6\0"+
    "\1\23\16\0\12\16\11\0\1\27\7\0\3\23\1\0\10\26\1\0"+
    "\3\26\1\0\27\26\1\0\12\26\1\0\5\26\3\0\1\26\7\23"+
    "\1\0\3\23\1\0\4\23\7\0\2\23\1\0\2\26\6\0\2\26"+
    "\2\23\2\0\12\16\22\0\2\23\1\0\10\26\1\0\3\26\1\0"+
    "\27\26\1\0\12\26\1\0\5\26\2\0\1\23\1\26\7\23\1\0"+
    "\3\23\1\0\4\23\7\0\2\23\7\0\1\26\1\0\2\26\2\23"+
    "\2\0\12\16\1\0\2\26\17\0\2\23\1\0\10\26\1\0\3\26"+
    "\1\0\51\26\2\0\1\26\7\23\1\0\3\23\1\0\4\23\1\26"+
    "\10\0\1\23\10\0\2\26\2\23\2\0\12\16\12\0\6\26\2\0"+
    "\2\23\1\0\22\26\3\0\30\26\1\0\11\26\1\0\1\26\2\0"+
    "\7\26\3\0\1\23\4\0\6\23\1\0\1\23\1\0\10\23\22\0"+
    "\2\23\15\0\60\26\1\23\2\26\7\23\4\0\1\27\7\26\10\23"+
    "\1\0\12\16\47\0\2\26\1\0\1\26\2\0\2\26\1\0\1\26"+
    "\2\0\1\26\6\0\4\26\1\0\7\26\1\0\3\26\1\0\1\26"+
    "\1\0\1\26\2\0\2\26\1\0\4\26\1\23\2\26\6\23\1\0"+
    "\2\23\1\26\2\0\5\26\1\0\1\26\1\0\6\23\2\0\12\16"+
    "\2\0\4\26\40\0\1\26\27\0\2\23\6\0\12\16\13\0\1\23"+
    "\1\0\1\23\1\0\1\23\4\0\2\23\10\26\1\0\44\26\4\0"+
    "\24\23\1\0\2\23\5\26\13\23\1\0\44\23\11\0\1\23\71\0"+
    "\53\26\24\23\1\26\12\16\6\0\6\26\4\23\4\26\3\23\1\26"+
    "\3\23\2\26\7\23\3\26\4\23\15\26\14\23\1\26\1\23\12\16"+
    "\4\23\2\0\46\26\1\0\1\26\5\0\1\26\2\0\53\26\1\0"+
    "\u014d\26\1\0\4\26\2\0\7\26\1\0\1\26\1\0\4\26\2\0"+
    "\51\26\1\0\4\26\2\0\41\26\1\0\4\26\2\0\7\26\1\0"+
    "\1\26\1\0\4\26\2\0\17\26\1\0\71\26\1\0\4\26\2\0"+
    "\103\26\2\0\3\23\40\0\20\26\20\0\125\26\14\0\u026c\26\2\0"+
    "\21\26\1\0\32\26\5\0\113\26\3\0\3\27\17\0\15\26\1\0"+
    "\4\26\3\23\13\0\22\26\3\23\13\0\22\26\2\23\14\0\15\26"+
    "\1\0\3\26\1\0\2\23\14\0\64\26\40\23\3\0\1\26\3\0"+
    "\1\27\1\26\1\23\2\0\12\16\41\0\3\23\2\0\12\16\6\0"+
    "\130\26\10\0\51\26\1\23\1\26\5\0\106\26\12\0\35\26\3\0"+
    "\14\23\4\0\14\23\12\0\12\16\36\26\2\0\5\26\13\0\54\26"+
    "\4\0\21\23\7\26\2\23\6\0\12\16\46\0\27\26\5\23\4\0"+
    "\65\26\12\23\1\0\35\23\2\0\1\23\12\16\6\0\12\16\15\0"+
    "\1\26\130\0\5\23\57\26\21\23\7\26\4\0\12\16\21\0\11\23"+
    "\14\0\3\23\36\26\15\23\2\26\12\16\54\26\16\23\14\0\44\26"+
    "\24\23\10\0\12\16\3\0\3\26\12\16\44\26\122\0\3\23\1\0"+
    "\25\23\4\26\1\23\4\26\3\23\2\26\11\0\300\26\47\23\25\0"+
    "\4\23\u0116\26\2\0\6\26\2\0\46\26\2\0\6\26\2\0\10\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\37\26\2\0\65\26"+
    "\1\0\7\26\1\0\1\26\3\0\3\26\1\0\7\26\3\0\4\26"+
    "\2\0\6\26\4\0\15\26\5\0\3\26\1\0\7\26\16\0\5\23"+
    "\32\0\5\23\20\0\2\27\23\0\1\27\13\0\5\23\5\0\6\23"+
    "\1\0\1\26\15\0\1\26\20\0\15\26\3\0\33\27\25\0\15\23"+
    "\4\0\1\23\3\0\14\23\21\0\1\26\4\0\1\26\2\0\12\26"+
    "\1\0\1\26\3\0\5\26\6\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\1\0\13\26\2\0\4\26\5\0\5\26\4\0\1\26"+
    "\21\0\43\27\2\26\4\27\u0a77\0\57\26\1\0\57\26\1\0\205\26"+
    "\6\0\4\26\3\23\2\26\14\0\46\26\1\0\1\26\5\0\1\26"+
    "\2\0\70\26\7\0\1\26\17\0\1\23\27\26\11\0\7\26\1\0"+
    "\7\26\1\0\7\26\1\0\7\26\1\0\7\26\1\0\7\26\1\0"+
    "\7\26\1\0\7\26\1\0\40\23\57\0\1\26\u01d5\0\2\26\1\27"+
    "\31\0\11\27\6\23\1\0\5\26\2\0\3\27\2\26\4\0\126\26"+
    "\2\0\2\23\2\0\3\26\1\0\132\26\1\0\4\26\5\0\51\26"+
    "\3\0\136\26\21\0\33\26\65\0\20\26\u0200\0\u19b6\26\112\0\u51cd\26"+
    "\63\0\u048d\26\103\0\56\26\2\0\u010d\26\3\0\20\26\12\16\2\26"+
    "\24\0\57\26\1\23\4\0\12\23\1\0\31\26\7\0\1\23\106\26"+
    "\12\27\2\23\45\0\11\26\2\0\147\26\2\0\4\26\1\0\4\26"+
    "\14\0\13\26\115\0\12\26\1\23\3\26\1\23\4\26\1\23\27\26"+
    "\5\23\20\0\1\27\7\0\64\26\14\0\2\23\62\26\21\23\13\0"+
    "\12\16\6\0\22\23\6\26\3\0\1\26\4\0\12\16\34\26\10\23"+
    "\2\0\27\26\15\23\14\0\35\26\3\0\4\23\57\26\16\23\16\0"+
    "\1\26\12\16\46\0\51\26\16\23\11\0\3\26\1\23\10\26\2\23"+
    "\2\0\12\16\6\0\27\26\3\0\1\26\1\23\4\0\60\26\1\23"+
    "\1\26\3\23\2\26\2\23\5\26\2\23\1\26\1\23\1\26\30\0"+
    "\3\26\2\0\13\26\5\23\2\0\3\26\2\23\12\0\6\26\2\0"+
    "\6\26\2\0\6\26\11\0\7\26\1\0\7\26\221\0\43\26\10\23"+
    "\1\0\2\23\2\0\12\16\6\0\u2ba4\26\14\0\27\26\4\0\61\26"+
    "\u2104\0\u016e\26\2\0\152\26\46\0\7\26\14\0\5\26\5\0\1\26"+
    "\1\23\12\26\1\0\15\26\1\0\5\26\1\0\1\26\1\0\2\26"+
    "\1\0\2\26\1\0\154\26\41\0\u016b\26\22\0\100\26\2\0\66\26"+
    "\50\0\14\26\1\27\3\0\20\23\20\0\7\23\14\0\2\27\30\0"+
    "\3\27\31\0\1\27\6\0\5\26\1\0\207\26\2\0\1\23\4\0"+
    "\1\27\13\0\12\16\7\0\32\26\4\0\1\27\1\0\32\26\13\0"+
    "\131\26\3\0\6\26\2\0\6\26\2\0\6\26\2\0\3\26\3\0"+
    "\2\27\3\0\2\27\22\0\3\23\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\0\1\1\5\0\1\2\26\0\1\3"+
    "\1\4\1\5\1\6\1\5\1\7\1\6\1\10\1\11"+
    "\1\4\11\6\1\12\2\13\1\14\1\4\1\15\2\16"+
    "\1\17\1\20\1\21\1\1\2\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\25\1\30\1\31\2\25\1\32\1\33"+
    "\1\34\1\1\1\35\1\1\1\36\2\1\1\37\1\40"+
    "\1\1\1\41\1\42\2\43\1\1\2\44\1\1\2\45"+
    "\1\1\1\46\1\47\1\2\1\50\1\2\1\17\1\51"+
    "\1\52\1\51\1\53\1\4\1\54\1\55\1\56\1\57"+
    "\1\60\1\1\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\74"+
    "\2\76\1\1\1\77\1\100\1\74\1\75\1\101\1\102"+
    "\1\1\1\102\1\103\1\1\2\104\2\105\1\1\1\106"+
    "\1\107\2\110\1\111\2\112\1\113\1\114\3\115\1\116"+
    "\2\4\1\17\1\117\1\120\1\121\1\120\1\122\1\123"+
    "\1\124\1\125\1\126\1\127\1\130\1\6\1\131\6\6"+
    "\1\132\1\133\6\6\1\134\1\135\1\136\3\0\1\137"+
    "\2\0\1\140\1\141\1\142\1\143\1\61\1\144\1\145"+
    "\1\146\4\0\1\116\1\0\1\6\1\147\7\6\1\150"+
    "\6\6\1\136\1\0\1\137\3\151\2\116\1\152\3\6"+
    "\1\153\1\154\1\155\5\6\1\156\2\6\2\136\1\0"+
    "\2\137\1\116\1\157\5\6\1\160\1\6\1\161\1\162"+
    "\1\136\1\0\1\137\1\116\4\6\1\163\1\164\1\136"+
    "\1\0\1\137\1\116\1\165\1\166\1\167\1\170\1\136"+
    "\1\0\1\137\1\116\1\136\1\0\1\137\2\0\1\171";

  private static int [] zzUnpackAction() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d"+
    "\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35"+
    "\0\u0a78\0\u0a78\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0a78"+
    "\0\u0a78\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59"+
    "\0\u0d9c\0\u0ddf\0\u0e22\0\u0a78\0\u0e65\0\u0a78\0\u0a78\0\u0ea8"+
    "\0\u0eeb\0\u0a78\0\u0f2e\0\u0f71\0\u0a78\0\u0fb4\0\u0ff7\0\u0a78"+
    "\0\u103a\0\u0a78\0\u0a78\0\u0a78\0\u107d\0\u0a78\0\u10c0\0\u1103"+
    "\0\u0a78\0\u1146\0\u1189\0\u0a78\0\u0a78\0\u0a78\0\u11cc\0\u0a78"+
    "\0\u120f\0\u0a78\0\u0a78\0\u1252\0\u1295\0\u0a78\0\u12d8\0\u0a78"+
    "\0\u131b\0\u0a78\0\u135e\0\u13a1\0\u0a78\0\u13e4\0\u1427\0\u0a78"+
    "\0\u146a\0\u14ad\0\u0a78\0\u14f0\0\u1533\0\u0a78\0\u1576\0\u15b9"+
    "\0\u0a78\0\u15fc\0\u163f\0\u0a78\0\u1682\0\u0a78\0\u0a78\0\u0a78"+
    "\0\u0a78\0\u16c5\0\u1708\0\u174b\0\u0a78\0\u0a78\0\u0a78\0\u0a78"+
    "\0\u0a78\0\u0a78\0\u0a78\0\u0a78\0\u0a78\0\u0a78\0\u178e\0\u0a78"+
    "\0\u17d1\0\u0a78\0\u1814\0\u1857\0\u0a78\0\u0a78\0\u189a\0\u18dd"+
    "\0\u0a78\0\u0a78\0\u1920\0\u1963\0\u0a78\0\u19a6\0\u0a78\0\u19e9"+
    "\0\u0a78\0\u1a2c\0\u1a6f\0\u0a78\0\u1ab2\0\u0a78\0\u1af5\0\u1b38"+
    "\0\u0a78\0\u1b7b\0\u1bbe\0\u0a78\0\u0a78\0\u1c01\0\u1c44\0\u1c87"+
    "\0\u1cca\0\u1d0d\0\u1d50\0\u0a78\0\u0a78\0\u1d93\0\u1dd6\0\u0a78"+
    "\0\u0a78\0\u0a78\0\u0a78\0\u0a78\0\u0a78\0\u0a78\0\u1e19\0\u1e5c"+
    "\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u0abb\0\u2031"+
    "\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u0ea8\0\u0a78"+
    "\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355\0\u2398\0\u0a78"+
    "\0\u0a78\0\u0a78\0\u0a78\0\u0a78\0\u0a78\0\u0a78\0\u1af5\0\u1c01"+
    "\0\u1c44\0\u23db\0\u1cca\0\u241e\0\u2461\0\u24a4\0\u0a78\0\u24e7"+
    "\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u0abb\0\u26bc"+
    "\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4"+
    "\0\u0a78\0\u2917\0\u295a\0\u299d\0\u29e0\0\u0a78\0\u2a23\0\u2a66"+
    "\0\u2aa9\0\u0abb\0\u0abb\0\u0abb\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5"+
    "\0\u2bf8\0\u0abb\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a"+
    "\0\u2dcd\0\u2e10\0\u0abb\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f"+
    "\0\u0abb\0\u2fa2\0\u0abb\0\u0abb\0\u2fe5\0\u3028\0\u306b\0\u30ae"+
    "\0\u30f1\0\u3134\0\u3177\0\u31ba\0\u0abb\0\u0abb\0\u31fd\0\u3240"+
    "\0\u3283\0\u32c6\0\u0abb\0\u0abb\0\u0abb\0\u0abb\0\u3309\0\u334c"+
    "\0\u338f\0\u33d2\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521\0\u0a78";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\103\51\1\52\1\53\1\54\2\52\1\55\1\56\1\52"+
    "\1\56\1\57\1\52\1\60\1\61\1\52\2\54\1\52"+
    "\2\56\3\52\1\54\1\52\1\62\2\63\1\54\2\64"+
    "\3\54\2\65\1\66\2\67\1\54\1\70\1\71\5\54"+
    "\1\72\1\57\2\54\1\73\1\74\1\60\1\75\1\76"+
    "\1\77\1\100\1\61\1\76\10\52\1\101\1\102\3\101"+
    "\1\103\1\104\1\101\1\104\7\101\1\105\2\104\54\101"+
    "\1\105\3\101\1\106\1\102\3\106\1\103\1\104\1\106"+
    "\1\104\10\106\2\104\60\106\1\107\1\110\3\107\1\111"+
    "\12\107\1\112\56\107\1\112\3\107\20\0\1\113\56\0"+
    "\1\113\3\0\1\114\1\102\3\114\1\103\1\115\1\114"+
    "\1\115\10\114\2\115\5\114\1\116\33\114\1\60\1\117"+
    "\1\120\1\114\1\121\1\122\1\123\1\124\7\114\6\125"+
    "\1\104\1\125\1\104\10\125\2\104\60\125\6\126\1\104"+
    "\1\126\1\104\10\126\2\104\60\126\1\127\1\130\3\127"+
    "\1\131\75\127\1\132\1\133\3\132\1\134\1\135\1\132"+
    "\1\135\10\132\2\135\60\132\1\127\1\136\3\127\1\137"+
    "\75\127\1\140\1\133\3\140\1\134\1\141\1\140\1\141"+
    "\10\140\2\141\60\140\1\133\1\142\3\133\1\143\57\133"+
    "\1\144\4\133\1\144\11\133\1\145\3\133\1\146\57\133"+
    "\1\147\4\133\1\147\11\133\1\150\3\133\1\151\57\133"+
    "\1\152\4\133\1\152\10\133\1\153\1\133\3\153\1\134"+
    "\1\154\1\153\1\154\10\153\2\154\60\153\1\155\1\156"+
    "\3\155\1\157\1\160\1\155\1\160\10\155\2\160\60\155"+
    "\1\52\1\161\1\162\2\52\1\163\1\104\1\52\1\104"+
    "\1\162\4\52\2\162\1\52\2\104\3\52\1\162\2\52"+
    "\32\162\1\52\1\164\1\165\7\52\1\166\1\167\4\52"+
    "\1\170\1\161\3\170\1\163\1\104\1\170\1\104\10\170"+
    "\2\104\60\170\2\171\1\172\3\171\1\173\1\171\1\173"+
    "\1\172\1\171\1\174\1\171\1\174\2\172\1\175\2\173"+
    "\3\171\1\172\1\171\1\174\32\172\5\174\1\171\1\174"+
    "\1\171\1\176\1\177\1\200\1\201\1\202\1\203\1\204"+
    "\1\205\1\133\1\206\3\133\1\206\12\133\1\206\52\133"+
    "\5\206\2\133\1\206\1\207\1\210\3\207\1\211\75\207"+
    "\1\133\1\212\3\133\1\213\57\133\1\214\4\133\1\214"+
    "\1\133\1\215\5\133\1\216\1\217\1\210\3\217\1\220"+
    "\62\217\1\221\12\217\1\133\1\222\2\133\1\223\1\224"+
    "\71\133\1\225\4\133\1\222\2\133\1\226\1\224\12\133"+
    "\1\225\63\133\1\227\3\133\1\230\76\133\1\231\3\133"+
    "\1\232\57\133\1\233\4\133\1\233\10\133\1\234\1\133"+
    "\3\234\1\134\1\235\1\234\1\235\10\234\2\235\60\234"+
    "\70\236\1\237\12\236\1\240\1\241\3\240\1\242\1\104"+
    "\1\240\1\104\10\240\2\104\60\240\1\52\1\210\1\243"+
    "\2\52\1\220\1\104\1\52\1\104\1\243\4\52\2\243"+
    "\1\52\2\104\3\52\1\243\2\52\32\243\20\52\1\244"+
    "\1\241\3\244\1\242\1\104\1\244\1\104\10\244\2\104"+
    "\60\244\1\245\1\241\3\245\1\242\1\246\1\245\1\246"+
    "\10\245\2\246\20\245\1\247\37\245\1\52\1\241\1\52"+
    "\1\250\1\251\1\242\1\104\1\52\1\104\2\250\1\252"+
    "\3\52\1\250\1\52\1\104\1\253\1\52\1\250\4\52"+
    "\32\250\10\52\1\254\7\52\1\255\1\241\3\255\1\242"+
    "\1\104\1\255\1\104\2\256\4\255\1\256\1\255\2\104"+
    "\2\255\3\256\1\255\32\256\3\255\1\257\6\255\1\166"+
    "\1\260\4\255\1\52\1\241\1\52\1\250\1\251\1\242"+
    "\1\104\1\52\1\104\2\250\1\252\3\52\1\250\1\52"+
    "\1\104\1\253\1\52\1\250\4\52\32\250\10\52\1\261"+
    "\1\52\1\262\1\263\4\52\73\133\4\264\3\133\1\264"+
    "\1\265\1\241\3\265\1\242\65\265\1\266\7\265\105\0"+
    "\1\54\6\0\1\54\1\0\1\54\2\0\2\54\6\0"+
    "\1\54\2\0\32\54\21\0\1\53\107\0\1\56\1\0"+
    "\1\56\10\0\2\56\62\0\1\54\6\0\1\54\1\0"+
    "\1\54\2\0\2\54\6\0\1\54\2\0\15\54\1\267"+
    "\14\54\50\0\1\270\54\0\1\54\6\0\1\54\1\0"+
    "\1\54\2\0\2\54\6\0\1\54\2\0\2\54\1\271"+
    "\5\54\2\272\20\54\22\0\1\54\6\0\1\54\1\0"+
    "\1\54\2\0\2\54\6\0\1\54\2\0\21\54\2\273"+
    "\7\54\22\0\1\54\6\0\1\54\1\0\1\54\2\0"+
    "\2\54\6\0\1\54\2\0\15\54\1\274\3\54\2\275"+
    "\5\54\1\276\1\54\22\0\1\54\6\0\1\54\1\0"+
    "\1\54\2\0\2\54\6\0\1\54\2\0\13\54\2\277"+
    "\3\54\1\300\11\54\22\0\1\54\6\0\1\54\1\0"+
    "\1\54\2\0\2\54\6\0\1\54\2\0\2\54\1\301"+
    "\27\54\22\0\1\54\6\0\1\54\1\0\1\54\2\0"+
    "\2\54\6\0\1\54\2\0\3\54\2\302\1\303\24\54"+
    "\22\0\1\54\6\0\1\54\1\0\1\54\2\0\2\54"+
    "\6\0\1\54\2\0\20\54\1\304\11\54\22\0\1\54"+
    "\6\0\1\54\1\0\1\54\2\0\2\54\6\0\1\54"+
    "\2\0\23\54\1\305\6\54\22\0\1\54\6\0\1\54"+
    "\1\0\1\54\2\0\2\54\6\0\1\54\2\0\12\54"+
    "\1\306\17\54\104\0\1\60\16\0\1\307\1\0\3\307"+
    "\2\0\1\307\1\0\10\307\2\0\60\307\1\101\1\0"+
    "\3\101\2\0\1\101\1\0\7\101\3\0\54\101\1\0"+
    "\3\101\1\0\1\102\107\0\1\104\1\0\1\104\10\0"+
    "\2\104\60\0\1\106\1\0\3\106\2\0\1\106\1\0"+
    "\10\106\2\0\60\106\1\107\1\0\3\107\1\0\12\107"+
    "\1\0\56\107\1\0\3\107\1\0\1\110\107\0\1\115"+
    "\1\0\1\115\10\0\2\115\144\0\1\60\7\0\1\310"+
    "\11\0\1\311\1\312\4\0\2\311\1\313\3\0\1\311"+
    "\2\0\1\311\1\0\1\311\4\0\32\311\72\0\2\314"+
    "\32\0\1\315\1\316\4\0\2\315\1\317\3\0\1\315"+
    "\2\0\1\315\1\0\1\315\4\0\32\315\11\0\1\310"+
    "\6\0\1\127\1\0\102\127\1\130\101\127\1\0\1\133"+
    "\107\0\1\135\1\0\1\135\10\0\2\135\60\0\1\127"+
    "\1\136\101\127\6\0\1\141\1\0\1\141\10\0\2\141"+
    "\61\0\1\142\175\0\1\320\7\0\1\145\175\0\1\321"+
    "\7\0\1\150\175\0\1\322\14\0\1\154\1\0\1\154"+
    "\10\0\2\154\60\0\1\155\1\0\102\155\1\156\102\155"+
    "\1\0\4\155\1\160\1\155\1\160\10\155\2\160\60\155"+
    "\2\0\1\162\6\0\1\162\1\0\1\162\2\0\2\162"+
    "\6\0\1\162\2\0\32\162\21\0\1\161\165\0\1\323"+
    "\20\0\1\172\6\0\1\172\1\0\1\172\2\0\2\172"+
    "\6\0\1\172\2\0\32\172\26\0\1\173\1\0\1\173"+
    "\10\0\2\173\144\0\1\324\16\0\1\207\1\0\102\207"+
    "\1\210\101\207\1\0\1\212\175\0\1\325\6\0\1\217"+
    "\1\0\3\217\1\0\62\217\1\0\12\217\1\0\1\210"+
    "\200\0\1\133\4\0\1\222\121\0\1\133\63\0\1\227"+
    "\102\0\1\231\175\0\1\326\14\0\1\235\1\0\1\235"+
    "\10\0\2\235\60\0\1\327\1\0\3\327\2\0\1\327"+
    "\1\0\10\327\2\0\60\327\1\240\1\0\3\240\2\0"+
    "\1\240\1\0\10\240\2\0\60\240\1\0\1\241\103\0"+
    "\1\243\6\0\1\243\1\0\1\243\2\0\2\243\6\0"+
    "\1\243\2\0\32\243\26\0\1\330\1\0\1\330\10\0"+
    "\2\330\20\0\1\331\110\0\1\332\33\0\2\250\1\333"+
    "\4\0\3\250\3\0\1\250\2\0\1\250\1\0\1\250"+
    "\4\0\32\250\22\0\1\334\2\250\2\0\2\250\1\334"+
    "\4\250\1\0\2\250\1\0\1\250\1\0\2\250\2\0"+
    "\1\250\1\334\2\250\1\334\4\250\1\334\2\250\1\334"+
    "\5\250\1\334\30\250\3\0\1\250\1\333\4\0\2\250"+
    "\4\0\1\250\2\0\1\250\1\0\1\250\4\0\32\250"+
    "\22\0\2\250\1\333\1\0\1\104\1\0\1\104\3\250"+
    "\3\0\1\250\1\0\1\104\1\253\1\0\1\250\4\0"+
    "\32\250\22\0\1\256\6\0\2\256\3\0\2\256\3\0"+
    "\5\256\1\0\32\256\106\0\1\335\16\0\1\54\6\0"+
    "\1\54\1\0\1\54\2\0\2\54\6\0\1\54\2\0"+
    "\2\54\1\336\27\54\33\0\1\337\71\0\1\54\6\0"+
    "\1\54\1\0\1\54\2\0\2\54\6\0\1\54\2\0"+
    "\3\54\2\340\25\54\22\0\1\54\6\0\1\54\1\0"+
    "\1\54\2\0\2\54\6\0\1\54\2\0\13\54\2\341"+
    "\15\54\22\0\1\54\6\0\1\54\1\0\1\54\2\0"+
    "\2\54\6\0\1\54\2\0\16\54\1\342\13\54\22\0"+
    "\1\54\6\0\1\54\1\0\1\54\2\0\2\54\6\0"+
    "\1\54\2\0\16\54\1\343\13\54\22\0\1\54\6\0"+
    "\1\54\1\0\1\54\2\0\2\54\6\0\1\54\2\0"+
    "\3\54\2\344\25\54\22\0\1\54\6\0\1\54\1\0"+
    "\1\54\2\0\2\54\6\0\1\54\2\0\5\54\1\345"+
    "\24\54\22\0\1\54\6\0\1\54\1\0\1\54\2\0"+
    "\2\54\6\0\1\54\2\0\3\54\2\346\25\54\22\0"+
    "\1\54\6\0\1\54\1\0\1\54\2\0\2\54\6\0"+
    "\1\54\2\0\24\54\1\347\5\54\22\0\1\54\6\0"+
    "\1\54\1\0\1\54\2\0\2\54\6\0\1\54\2\0"+
    "\24\54\1\350\5\54\22\0\1\54\6\0\1\54\1\0"+
    "\1\54\2\0\2\54\6\0\1\54\2\0\6\54\1\351"+
    "\23\54\22\0\1\54\6\0\1\54\1\0\1\54\2\0"+
    "\2\54\6\0\1\54\2\0\15\54\1\352\14\54\22\0"+
    "\1\54\6\0\1\54\1\0\1\54\2\0\2\54\6\0"+
    "\1\54\2\0\10\54\2\353\1\354\17\54\22\0\1\54"+
    "\6\0\1\54\1\0\1\54\2\0\2\54\6\0\1\54"+
    "\2\0\30\54\1\355\1\54\22\0\2\311\1\312\4\0"+
    "\3\311\3\0\1\311\2\0\1\311\1\0\1\311\4\0"+
    "\32\311\22\0\1\356\2\311\2\0\2\311\1\356\4\311"+
    "\1\0\2\311\1\0\1\311\1\0\2\311\2\0\1\311"+
    "\1\356\2\311\1\356\4\311\1\356\2\311\1\356\5\311"+
    "\1\356\30\311\3\0\1\311\1\312\4\0\2\311\4\0"+
    "\1\311\2\0\1\311\1\0\1\311\4\0\32\311\56\0"+
    "\1\357\46\0\2\315\1\316\4\0\3\315\3\0\1\315"+
    "\2\0\1\315\1\0\1\315\4\0\32\315\22\0\1\360"+
    "\2\315\2\0\2\315\1\360\4\315\1\0\2\315\1\0"+
    "\1\315\1\0\2\315\2\0\1\315\1\360\2\315\1\360"+
    "\4\315\1\360\2\315\1\360\5\315\1\360\30\315\3\0"+
    "\1\315\1\316\4\0\2\315\4\0\1\315\2\0\1\315"+
    "\1\0\1\315\4\0\32\315\21\0\1\361\3\0\1\362"+
    "\1\363\1\0\1\363\10\0\2\363\61\0\1\250\1\364"+
    "\1\250\1\333\1\365\1\250\1\0\1\250\1\364\2\250"+
    "\3\0\1\250\2\0\1\250\1\0\1\250\4\0\1\364"+
    "\2\250\1\364\4\250\1\364\2\250\1\364\5\250\1\364"+
    "\10\250\106\0\1\366\16\0\1\54\6\0\1\54\1\0"+
    "\1\54\2\0\2\54\6\0\1\54\2\0\3\54\2\367"+
    "\25\54\22\0\1\54\6\0\1\54\1\0\1\54\2\0"+
    "\2\54\6\0\1\54\2\0\5\54\1\370\24\54\22\0"+
    "\1\54\6\0\1\54\1\0\1\54\2\0\2\54\6\0"+
    "\1\54\2\0\21\54\2\371\7\54\22\0\1\54\6\0"+
    "\1\54\1\0\1\54\2\0\2\54\6\0\1\54\2\0"+
    "\10\54\2\372\20\54\22\0\1\54\6\0\1\54\1\0"+
    "\1\54\2\0\2\54\6\0\1\54\2\0\10\54\2\373"+
    "\20\54\22\0\1\54\6\0\1\54\1\0\1\54\2\0"+
    "\2\54\6\0\1\54\2\0\23\54\1\374\6\54\22\0"+
    "\1\54\6\0\1\54\1\0\1\54\2\0\2\54\6\0"+
    "\1\54\2\0\10\54\2\375\20\54\22\0\1\54\6\0"+
    "\1\54\1\0\1\54\2\0\2\54\6\0\1\54\2\0"+
    "\15\54\1\376\14\54\22\0\1\54\6\0\1\54\1\0"+
    "\1\54\2\0\2\54\6\0\1\54\2\0\12\54\1\377"+
    "\17\54\22\0\1\54\6\0\1\54\1\0\1\54\2\0"+
    "\2\54\6\0\1\54\2\0\15\54\1\u0100\14\54\22\0"+
    "\1\54\6\0\1\54\1\0\1\54\2\0\2\54\6\0"+
    "\1\54\2\0\10\54\2\u0101\20\54\22\0\1\54\6\0"+
    "\1\54\1\0\1\54\2\0\2\54\6\0\1\54\2\0"+
    "\20\54\1\u0102\11\54\22\0\1\54\6\0\1\54\1\0"+
    "\1\54\2\0\2\54\6\0\1\54\2\0\15\54\1\u0103"+
    "\14\54\22\0\1\54\6\0\1\54\1\0\1\54\2\0"+
    "\2\54\6\0\1\54\2\0\12\54\1\u0104\17\54\21\0"+
    "\1\311\1\u0105\1\311\1\312\1\u0106\1\311\1\0\1\311"+
    "\1\u0105\2\311\3\0\1\311\2\0\1\311\1\0\1\311"+
    "\4\0\1\u0105\2\311\1\u0105\4\311\1\u0105\2\311\1\u0105"+
    "\5\311\1\u0105\10\311\56\0\1\u0107\45\0\1\315\1\u0108"+
    "\1\315\1\316\1\u0109\1\315\1\0\1\315\1\u0108\2\315"+
    "\3\0\1\315\2\0\1\315\1\0\1\315\4\0\1\u0108"+
    "\2\315\1\u0108\4\315\1\u0108\2\315\1\u0108\5\315\1\u0108"+
    "\10\315\21\0\1\361\107\0\1\363\1\0\1\363\10\0"+
    "\2\363\61\0\1\250\1\u010a\1\250\1\333\1\365\1\250"+
    "\1\0\1\250\1\u010a\2\250\3\0\1\250\2\0\1\250"+
    "\1\0\1\250\4\0\1\u010a\2\250\1\u010a\4\250\1\u010a"+
    "\2\250\1\u010a\5\250\1\u010a\10\250\21\0\3\250\1\333"+
    "\4\0\3\250\3\0\1\250\2\0\1\250\1\0\1\250"+
    "\4\0\32\250\22\0\1\54\6\0\1\54\1\0\1\54"+
    "\2\0\2\54\6\0\1\54\2\0\27\54\1\u010b\2\54"+
    "\22\0\1\54\6\0\1\54\1\0\1\54\2\0\2\54"+
    "\6\0\1\54\2\0\6\54\1\u010c\23\54\22\0\1\54"+
    "\6\0\1\54\1\0\1\54\2\0\2\54\6\0\1\54"+
    "\2\0\17\54\1\u010d\12\54\22\0\1\54\6\0\1\54"+
    "\1\0\1\54\2\0\2\54\6\0\1\54\2\0\20\54"+
    "\1\u010e\11\54\22\0\1\54\6\0\1\54\1\0\1\54"+
    "\2\0\2\54\6\0\1\54\2\0\17\54\1\u010f\12\54"+
    "\22\0\1\54\6\0\1\54\1\0\1\54\2\0\2\54"+
    "\6\0\1\54\2\0\7\54\1\u0110\22\54\22\0\1\54"+
    "\6\0\1\54\1\0\1\54\2\0\2\54\6\0\1\54"+
    "\2\0\10\54\2\u0111\20\54\22\0\1\54\6\0\1\54"+
    "\1\0\1\54\2\0\2\54\6\0\1\54\2\0\16\54"+
    "\1\u0112\13\54\22\0\1\54\6\0\1\54\1\0\1\54"+
    "\2\0\2\54\6\0\1\54\2\0\10\54\2\u0113\20\54"+
    "\22\0\1\54\6\0\1\54\1\0\1\54\2\0\2\54"+
    "\6\0\1\54\2\0\20\54\1\u0114\11\54\21\0\1\311"+
    "\1\u0115\1\311\1\312\1\u0106\1\311\1\0\1\311\1\u0115"+
    "\2\311\3\0\1\311\2\0\1\311\1\0\1\311\4\0"+
    "\1\u0115\2\311\1\u0115\4\311\1\u0115\2\311\1\u0115\5\311"+
    "\1\u0115\10\311\21\0\3\311\1\312\4\0\3\311\3\0"+
    "\1\311\2\0\1\311\1\0\1\311\4\0\32\311\75\0"+
    "\1\u0116\26\0\1\315\1\u0117\1\315\1\316\1\u0109\1\315"+
    "\1\0\1\315\1\u0117\2\315\3\0\1\315\2\0\1\315"+
    "\1\0\1\315\4\0\1\u0117\2\315\1\u0117\4\315\1\u0117"+
    "\2\315\1\u0117\5\315\1\u0117\10\315\21\0\3\315\1\316"+
    "\4\0\3\315\3\0\1\315\2\0\1\315\1\0\1\315"+
    "\4\0\32\315\21\0\1\250\1\u0118\1\250\1\333\1\365"+
    "\1\250\1\0\1\250\1\u0118\2\250\3\0\1\250\2\0"+
    "\1\250\1\0\1\250\4\0\1\u0118\2\250\1\u0118\4\250"+
    "\1\u0118\2\250\1\u0118\5\250\1\u0118\10\250\22\0\1\54"+
    "\6\0\1\54\1\0\1\54\2\0\2\54\6\0\1\54"+
    "\2\0\7\54\1\u0119\22\54\22\0\1\54\6\0\1\54"+
    "\1\0\1\54\2\0\2\54\6\0\1\54\2\0\15\54"+
    "\1\u011a\14\54\22\0\1\54\6\0\1\54\1\0\1\54"+
    "\2\0\2\54\6\0\1\54\2\0\2\u011b\30\54\22\0"+
    "\1\54\6\0\1\54\1\0\1\54\2\0\2\54\6\0"+
    "\1\54\2\0\2\u011c\30\54\22\0\1\54\6\0\1\54"+
    "\1\0\1\54\2\0\2\54\6\0\1\54\2\0\5\54"+
    "\1\u011d\24\54\22\0\1\54\6\0\1\54\1\0\1\54"+
    "\2\0\2\54\6\0\1\54\2\0\16\54\1\u011e\13\54"+
    "\21\0\1\311\1\u011f\1\311\1\312\1\u0106\1\311\1\0"+
    "\1\311\1\u011f\2\311\3\0\1\311\2\0\1\311\1\0"+
    "\1\311\4\0\1\u011f\2\311\1\u011f\4\311\1\u011f\2\311"+
    "\1\u011f\5\311\1\u011f\10\311\63\0\1\u0120\40\0\1\315"+
    "\1\u0121\1\315\1\316\1\u0109\1\315\1\0\1\315\1\u0121"+
    "\2\315\3\0\1\315\2\0\1\315\1\0\1\315\4\0"+
    "\1\u0121\2\315\1\u0121\4\315\1\u0121\2\315\1\u0121\5\315"+
    "\1\u0121\10\315\21\0\1\250\1\u0122\1\250\1\333\1\365"+
    "\1\250\1\0\1\250\1\u0122\2\250\3\0\1\250\2\0"+
    "\1\250\1\0\1\250\4\0\1\u0122\2\250\1\u0122\4\250"+
    "\1\u0122\2\250\1\u0122\5\250\1\u0122\10\250\22\0\1\54"+
    "\6\0\1\54\1\0\1\54\2\0\2\54\6\0\1\54"+
    "\2\0\10\54\2\u0123\20\54\22\0\1\54\6\0\1\54"+
    "\1\0\1\54\2\0\2\54\6\0\1\54\2\0\5\54"+
    "\1\u0124\24\54\22\0\1\54\6\0\1\54\1\0\1\54"+
    "\2\0\2\54\6\0\1\54\2\0\16\54\1\u0125\13\54"+
    "\22\0\1\54\6\0\1\54\1\0\1\54\2\0\2\54"+
    "\6\0\1\54\2\0\10\54\2\u0126\20\54\21\0\1\311"+
    "\1\u0127\1\311\1\312\1\u0106\1\311\1\0\1\311\1\u0127"+
    "\2\311\3\0\1\311\2\0\1\311\1\0\1\311\4\0"+
    "\1\u0127\2\311\1\u0127\4\311\1\u0127\2\311\1\u0127\5\311"+
    "\1\u0127\10\311\31\0\1\u0128\45\0\1\u0128\24\0\1\315"+
    "\1\u0129\1\315\1\316\1\u0109\1\315\1\0\1\315\1\u0129"+
    "\2\315\3\0\1\315\2\0\1\315\1\0\1\315\4\0"+
    "\1\u0129\2\315\1\u0129\4\315\1\u0129\2\315\1\u0129\5\315"+
    "\1\u0129\10\315\21\0\1\250\1\u012a\1\250\1\333\1\365"+
    "\1\250\1\0\1\250\1\u012a\2\250\3\0\1\250\2\0"+
    "\1\250\1\0\1\250\4\0\1\u012a\2\250\1\u012a\4\250"+
    "\1\u012a\2\250\1\u012a\5\250\1\u012a\10\250\21\0\1\311"+
    "\1\u012b\1\311\1\312\1\u0106\1\311\1\0\1\311\1\u012b"+
    "\2\311\3\0\1\311\2\0\1\311\1\0\1\311\4\0"+
    "\1\u012b\2\311\1\u012b\4\311\1\u012b\2\311\1\u012b\5\311"+
    "\1\u012b\10\311\70\0\1\u012c\33\0\1\315\1\u012d\1\315"+
    "\1\316\1\u0109\1\315\1\0\1\315\1\u012d\2\315\3\0"+
    "\1\315\2\0\1\315\1\0\1\315\4\0\1\u012d\2\315"+
    "\1\u012d\4\315\1\u012d\2\315\1\u012d\5\315\1\u012d\10\315"+
    "\21\0\3\250\1\333\1\365\1\250\1\0\4\250\3\0"+
    "\1\250\2\0\1\250\1\0\1\250\4\0\32\250\21\0"+
    "\3\311\1\312\1\u0106\1\311\1\0\4\311\3\0\1\311"+
    "\2\0\1\311\1\0\1\311\4\0\32\311\56\0\1\u012e"+
    "\45\0\3\315\1\316\1\u0109\1\315\1\0\4\315\3\0"+
    "\1\315\2\0\1\315\1\0\1\315\4\0\32\315\61\0"+
    "\2\u012f\107\0\1\u0130\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13668];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\1\1\0\1\1\5\0\1\1\26\0\3\11"+
    "\4\1\2\11\12\1\1\11\1\1\2\11\2\1\1\11"+
    "\2\1\1\11\2\1\1\11\1\1\3\11\1\1\1\11"+
    "\2\1\1\11\2\1\3\11\1\1\1\11\1\1\2\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\2\1\1\11\2\1\1\11\2\1\1\11\2\1\1\11"+
    "\2\1\1\11\1\1\4\11\3\1\12\11\1\1\1\11"+
    "\1\1\1\11\2\1\2\11\2\1\2\11\2\1\1\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\2\1\1\11\2\1\2\11\6\1\2\11\2\1\7\11"+
    "\21\1\1\11\1\1\3\0\1\1\2\0\7\11\1\1"+
    "\4\0\1\1\1\0\1\1\1\11\17\1\1\0\1\1"+
    "\1\11\4\1\1\11\20\1\1\0\16\1\1\0\11\1"+
    "\1\0\7\1\1\0\3\1\1\0\1\1\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private LexerInput input;
    private boolean canFollowTag = false;
    int parenBalance = 1;
    int braceBalance = 0;
    int bracketBalance = 0;
    int indent = 0;
    int eolPosition = 0;
    boolean dotAfterTag = false;
    int blockIndent = -1;
    boolean hasCssId = false;
    int lastReaded = 0;
    boolean continueJS = false;
    boolean inString = false;
    int whereToGo = 0;

    private static enum TAG_TYPE  { OTHER, SCRIPT, STYLE};
    TAG_TYPE lastTag = TAG_TYPE.OTHER;
    

    public JadeColoringLexer(LexerRestartInfo info) {
        this.input = info.input();

        if(info.state() != null) {
            //reset state
            setState((LexerState)info.state());
        } else {
            //initial state
            zzState = zzLexicalState = YYINITIAL;
        }
    }


    public LexerState getState() {
        if (zzState == YYINITIAL && zzLexicalState == YYINITIAL) {
            return null;
        }
        return new LexerState(zzState, zzLexicalState, canFollowTag, indent, hasCssId, lastTag, braceBalance, parenBalance, bracketBalance);
    }

    public void setState(LexerState state) {
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.canFollowTag = state.canFollowTag;
        this.indent = state.indent;
        this.hasCssId = state.hasCssId;
        this.lastTag = state.lastTag;
        this.braceBalance = state.braceBalance;
        this.parenBalance = state.parenBalance;
        this.bracketBalance = state.bracketBalance;
    }

    public JadeTokenId nextToken() throws java.io.IOException {
        JadeTokenId token = yylex();
        return token;
    }

    public static final class LexerState  {
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;
        final boolean canFollowTag;
        /** indent of the new line */
        final int indent;
        final boolean hasCssId;
        /** last readed tag to switch embeding of js , css or html*/
        final TAG_TYPE lastTag;
        /** balance of brances */
        final int braceBalance;
        final int parenBalance;
        final int bracketBalance;

        LexerState (int zzState, int zzLexicalState, boolean canFollowTag, int indent, boolean hasCssId, TAG_TYPE lastTag, int braceBalance, int parenBalance, int bracketBalance) {
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.canFollowTag = canFollowTag;
            this.indent = indent;
            this.hasCssId = hasCssId;
            this.lastTag = lastTag;
            this.braceBalance = braceBalance;
            this.parenBalance = parenBalance;
            this.bracketBalance = bracketBalance;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final LexerState other = (LexerState) obj;
            if (this.zzState != other.zzState) {
                return false;
            }
            if (this.zzLexicalState != other.zzLexicalState) {
                return false;
            }
            if (this.canFollowTag != other.canFollowTag) {
                return false;
            }
            if (this.hasCssId != other.hasCssId) {
                return false;
            }
            if (this.indent != other.indent) {
                return false;
            }
            if (this.lastTag != other.lastTag) {
                return false;
            }
            if ((this.braceBalance != other.braceBalance) || (this.parenBalance != other.parenBalance) || (this.bracketBalance != other.bracketBalance)) {
                return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            int hash = 7;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            hash = 31 * hash + (this.canFollowTag ? 0 : 1);
            hash = 31 * hash + (this.hasCssId ? 0 : 1);
            hash = 31 * hash + this.indent;
            hash = 31 * hash + this.lastTag.hashCode();
            hash = 31 * hash + this.braceBalance;
            hash = 31 * hash + this.parenBalance;
            hash = 31 * hash + this.bracketBalance;
            return hash;
        }

        @Override
        public String toString() {
            return "LexerState{" + "zzState=" + zzState + ", zzLexicalState=" + zzLexicalState + '}';
        }
    }

    JadeTokenId getTokenIdFromTagType (TAG_TYPE tagType, JadeTokenId defaultId) {
        switch (tagType) {
            case SCRIPT: return JadeTokenId.JAVASCRIPT;
            case STYLE: return JadeTokenId.CSS;
            default: return defaultId;
        }
    }

 // End user code
    boolean checkEndJS(int tokenLength, char ch) {
        if (!continueJS 
                && ((ch == ')' && parenBalance == 0) 
                || (ch != ')' && parenBalance == 1))
                && braceBalance == 0 && bracketBalance == 0) {
            if (lastReaded > 0 && ((tokenLength - lastReaded) > 0)) {
                yypushback(tokenLength - lastReaded);
                yybegin(HTML_ATTRIBUTE);
                return true;
            }
        } 
        lastReaded = tokenLength;
        continueJS = false;
        
        return false;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JadeColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JadeColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2332) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  @SuppressWarnings("fallthrough")
  public JadeTokenId yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzMarkedPosL;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      int tokenLength = 0;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          zzInput = input.read();
         if(zzInput == LexerInput.EOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
          input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 46: 
          { parenBalance = 1;
                                        lastReaded = bracketBalance = braceBalance = 0;
                                        yypushback(1);
                                        yybegin(JAVASCRIPT_VALUE);
          }
        case 122: break;
        case 56: 
          { braceBalance++; lastReaded = tokenLength;
          }
        case 123: break;
        case 19: 
          { yypushback(1);
                                        yybegin(DOCTYPE_STRING_END);
                                        if (tokenLength > 1) {
                                            return JadeTokenId.DOCTYPE_STRING_END;
                                        }
          }
        case 124: break;
        case 95: 
          { if (!hasCssId) {
                                            hasCssId = true;
                                            return JadeTokenId.CSS_ID;
                                        } else {
                                            // only one css id is allowed in tag
                                            return JadeTokenId.UNKNOWN;
                                        }
          }
        case 125: break;
        case 18: 
          { yypushback(1);
                                        yybegin(DOCTYPE);
                                        if (tokenLength > 1) {
                                            return JadeTokenId.UNKNOWN;
                                        }
          }
        case 126: break;
        case 88: 
          { parenBalance = 1;
                                        lastReaded = bracketBalance = braceBalance = 0;
                                        yybegin(JAVASCRIPT_VALUE);
                                        return JadeTokenId.BRACKET_LEFT_PAREN;
          }
        case 127: break;
        case 105: 
          { int delta = tokenLength - lastReaded;
                                        if (delta > 0) {
                                            yypushback(delta);
                                            yybegin(AFTER_EOL);
                                            if (tokenLength > delta) {
                                                return JadeTokenId.JAVASCRIPT;
                                            }
                                        }
                                        yypushback(tokenLength);
                                        yybegin(AFTER_EOL);
          }
        case 128: break;
        case 67: 
          { continueJS = false;
                                        lastReaded = tokenLength;
                                        yybegin(JAVASCRIPT_VALUE);
          }
        case 129: break;
        case 76: 
          { yypushback(1);
                                        yybegin(JAVASCRIPT_AFTER_EACH);
          }
        case 130: break;
        case 98: 
          { yypushback(2);
                                        yybegin(JAVASCRIPT_EXPRESSION);
                                        whereToGo = IN_PLAIN_TEXT_BLOCK;
                                        if (tokenLength > 2) {
                                            return JadeTokenId.TEXT;
                                        }
          }
        case 131: break;
        case 102: 
          { return JadeTokenId.FILTER;
          }
        case 132: break;
        case 4: 
          { return JadeTokenId.UNKNOWN;
          }
        case 133: break;
        case 49: 
          { continueJS = true; lastReaded = tokenLength;
          }
        case 134: break;
        case 84: 
          { yybegin(MIXIN_CALL_ARGUMENT);
                                        parenBalance = 1; braceBalance = 0;
                                        return JadeTokenId.OPERATOR_COMMA;
          }
        case 135: break;
        case 75: 
          { yybegin(AFTER_TAG);
                                        dotAfterTag = true;
                                        hasCssId = false;
                                        return JadeTokenId.TAG ;
          }
        case 136: break;
        case 112: 
          { yybegin(AFTER_TAG);
                                        dotAfterTag = true;
                                        hasCssId = false;
                                        lastTag = TAG_TYPE.STYLE;
                                        return JadeTokenId.TAG ;
          }
        case 137: break;
        case 104: 
          { yybegin(AFTER_EACH);
                                        return JadeTokenId.KEYWORD_FOR;
          }
        case 138: break;
        case 43: 
          { yybegin(HTML_ATTRIBUTE_VALUE);
                                        return JadeTokenId.OPERATOR_ASSIGNMENT;
          }
        case 139: break;
        case 116: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.KEYWORD_UNLESS;
          }
        case 140: break;
        case 23: 
          { return JadeTokenId.OPERATOR_DIVISION;
          }
        case 141: break;
        case 7: 
          { indent = tokenLength;
                                        return JadeTokenId.WHITESPACE;
          }
        case 142: break;
        case 13: 
          { return JadeTokenId.DOCTYPE_ATTRIBUTE;
          }
        case 143: break;
        case 6: 
          { yybegin(AFTER_TAG);
                                        dotAfterTag = true;
                                        hasCssId = false;
                                        lastTag = TAG_TYPE.OTHER;
                                        return JadeTokenId.TAG ;
          }
        case 144: break;
        case 2: 
          { // the  text will not be renedered
                                        return JadeTokenId.UNKNOWN;
          }
        case 145: break;
        case 59: 
          { switch (zzInput) {
            case '(': parenBalance++; break;
            case '{': braceBalance++; break;
            case '}': braceBalance--; break; 
            case ')':
                parenBalance--;
                break;    
            case ',':
            case '\r':
            case '\n':
                if (parenBalance == 1 && braceBalance == 0) {
                    parenBalance = 0;
                }
                break;
        }
        if (parenBalance == 0 && braceBalance == 0) {
            yypushback(1);
            yybegin(HTML_ATTRIBUTE);
            parenBalance = 1;
            if (tokenLength > 1) {
                return JadeTokenId.JAVASCRIPT;
            }
        }
          }
        case 146: break;
        case 41: 
          { return JadeTokenId.EOL;
          }
        case 147: break;
        case 58: 
          { bracketBalance--; lastReaded = tokenLength;
          }
        case 148: break;
        case 92: 
          { yybegin (IN_FILTER_BLOCK);
                                        blockIndent = -1;
                                        return JadeTokenId.FILTER;
          }
        case 149: break;
        case 52: 
          { bracketBalance++; lastReaded = tokenLength;
          }
        case 150: break;
        case 22: 
          { yybegin(TEXT_LINE);
                                        return JadeTokenId.WHITESPACE;
          }
        case 151: break;
        case 48: 
          { if (zzInput == ')') parenBalance--;
                                        if (checkEndJS(tokenLength, (char)zzInput)) {
                                            return JadeTokenId.JAVASCRIPT; 
                                        }
                                        if (zzInput == ')') parenBalance++;  // ned to return back
          }
        case 152: break;
        case 74: 
          { yybegin(AFTER_EOL);
                                        return JadeTokenId.EOL;
          }
        case 153: break;
        case 25: 
          { yybegin(AFTER_COLON_IN_TAG);
                                        return JadeTokenId.OPERATOR_COLON;
          }
        case 154: break;
        case 24: 
          { yybegin(AFTER_PLAIN_TEXT_BLOCK_DELIMITER);
                                        return JadeTokenId.PLAIN_TEXT_DELIMITER;
          }
        case 155: break;
        case 83: 
          { yybegin(MIXIN_CALL_ARGUMENT);
                                        parenBalance = 1; braceBalance = 0;
                                        return JadeTokenId.BRACKET_LEFT_PAREN;
          }
        case 156: break;
        case 78: 
          { return JadeTokenId.MIXIN_NAME;
          }
        case 157: break;
        case 100: 
          { braceBalance = 1; return JadeTokenId.EXPRESSION_DELIMITER_OPEN;
          }
        case 158: break;
        case 33: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        if (tokenLength > 1) {
                                            return JadeTokenId.UNBUFFERED_COMMENT;
                                        }
          }
        case 159: break;
        case 111: 
          { yybegin(AFTER_BLOCK);
                                        return JadeTokenId.KEYWORD_BLOCK;
          }
        case 160: break;
        case 21: 
          { yybegin(TEXT_LINE);
          }
        case 161: break;
        case 115: 
          { yybegin(AFTER_TAG);
                                        dotAfterTag = true;
                                        hasCssId = false;
                                        lastTag = TAG_TYPE.SCRIPT;
                                        return JadeTokenId.TAG ;
          }
        case 162: break;
        case 30: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        if (tokenLength > 1) {
                                            return JadeTokenId.COMMENT;
                                        }
          }
        case 163: break;
        case 37: 
          { yybegin(IN_PLAIN_TEXT_BLOCK_AFTER_EOL);
                                        eolPosition = tokenLength;
          }
        case 164: break;
        case 82: 
          { return JadeTokenId.BRACKET_RIGHT_PAREN;
          }
        case 165: break;
        case 87: 
          { yybegin(AFTER_TAG);
                                        return JadeTokenId.UNKNOWN;
          }
        case 166: break;
        case 93: 
          { yypushback(2);
                                        yybegin(JAVASCRIPT_EXPRESSION);
                                        whereToGo = TEXT_LINE;
          }
        case 167: break;
        case 28: 
          { yypushback(1);
                                        yybegin(JAVASCRIPT_WITH_BLOCK_EXPANSION);
          }
        case 168: break;
        case 31: 
          { int indentInComment = tokenLength - eolPosition;
                                        if (indent >= indentInComment) {
                                            yypushback(indentInComment + 1);  // return back also the EOL
                                            yybegin(AFTER_EOL);
                                            if (tokenLength > (indentInComment + 1)) {
                                                return JadeTokenId.COMMENT;
                                            }
                                        } else {
                                            yybegin(IN_COMMENT);
                                        }
          }
        case 169: break;
        case 26: 
          { yybegin(HTML_ATTRIBUTE);
                                        return JadeTokenId.BRACKET_LEFT_PAREN;
          }
        case 170: break;
        case 9: 
          { yybegin(IN_PLAIN_TEXT_LINE);
          }
        case 171: break;
        case 50: 
          { yybegin(JS_STRING);
          }
        case 172: break;
        case 99: 
          { yybegin(HTML_ATTRIBUTE_VALUE);
                                        return JadeTokenId.OPERATOR_NOT_EQUALS;
          }
        case 173: break;
        case 8: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.CODE_DELIMITER;
          }
        case 174: break;
        case 120: 
          { yybegin(AFTER_INCLUDE);
                                        return JadeTokenId.KEYWORD_INCLUDE;
          }
        case 175: break;
        case 11: 
          { hasCssId = false;
                                        yypushback(1);
                                        yybegin(AFTER_TAG);
          }
        case 176: break;
        case 70: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        if (tokenLength - 1 > 0) { 
                                            return JadeTokenId.FILTER_TEXT;
                                        }
          }
        case 177: break;
        case 63: 
          { braceBalance++;
          }
        case 178: break;
        case 101: 
          { yypushback(2);
                                        yybegin(JAVASCRIPT_EXPRESSION);
                                        whereToGo = IN_FILTER_BLOCK;
                                        if (tokenLength > 2) {
                                            return JadeTokenId.FILTER_TEXT;
                                        }
          }
        case 179: break;
        case 80: 
          { // expect declaration of parameters
                                        return JadeTokenId.UNKNOWN;
          }
        case 180: break;
        case 16: 
          { yybegin(DOCTYPE_STRING);
                                        return JadeTokenId.DOCTYPE_STRING_START;
          }
        case 181: break;
        case 66: 
          { yypushback(1);
                                     yybegin(AFTER_EOL);
                                     if (tokenLength -1 > 0) {
                                         return JadeTokenId.UNKNOWN;
                                     }
          }
        case 182: break;
        case 55: 
          { yybegin(JS_SSTRING);
          }
        case 183: break;
        case 65: 
          { yypushback(1);
                                        yybegin(AFTER_TAG);
          }
        case 184: break;
        case 108: 
          { return JadeTokenId.KEYWORD_ELSE;
          }
        case 185: break;
        case 29: 
          { yybegin(IN_COMMENT_AFTER_EOL);
                                        eolPosition = tokenLength;
          }
        case 186: break;
        case 118: 
          { yybegin(AFTER_TAG); // handling : after the keyword
                                        return JadeTokenId.KEYWORD_DEFAULT;
          }
        case 187: break;
        case 77: 
          { lastReaded = tokenLength;
          }
        case 188: break;
        case 72: 
          { yypushback(1); yybegin(FILEPATH);
          }
        case 189: break;
        case 68: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        if (tokenLength - 1 > 0) {
                                            return JadeTokenId.FILE_PATH;
                                        }
          }
        case 190: break;
        case 53: 
          { if (checkEndJS(tokenLength, (char)zzInput)) {
                                            return JadeTokenId.JAVASCRIPT; 
                                        }
          }
        case 191: break;
        case 38: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        indent = 0;
                                        if (tokenLength > 1) {
                                            return getTokenIdFromTagType(lastTag, JadeTokenId.PLAIN_TEXT);
                                        }
          }
        case 192: break;
        case 20: 
          { yybegin(DOCTYPE);
                                        return JadeTokenId.DOCTYPE_STRING_END;
          }
        case 193: break;
        case 14: 
          { yybegin(AFTER_EOL);
                                        indent = 0;
                                        if (tokenLength > 0) {
                                            return JadeTokenId.EOL;
                                        }
          }
        case 194: break;
        case 15: 
          { return JadeTokenId.WHITESPACE;
          }
        case 195: break;
        case 12: 
          { yybegin(IN_PLAIN_TEXT_LINE);
                                        return JadeTokenId.PLAIN_TEXT_DELIMITER;
          }
        case 196: break;
        case 97: 
          { yypushback(2);
                                        yybegin(JAVASCRIPT_EXPRESSION);
                                        whereToGo = IN_PLAIN_TEXT_LINE;
                                        if (tokenLength > 2) {
                                            return getTokenIdFromTagType(lastTag, JadeTokenId.PLAIN_TEXT);
                                        }
          }
        case 197: break;
        case 109: 
          { yybegin(AFTER_EACH);
                                        return JadeTokenId.KEYWORD_EACH;
          }
        case 198: break;
        case 5: 
          { indent = 0; 
                                        return JadeTokenId.EOL;
          }
        case 199: break;
        case 71: 
          { int indentInBlock = tokenLength - eolPosition;
                                        if (blockIndent < 0) {
                                            blockIndent = indentInBlock;
                                        }
                                        if (blockIndent > indentInBlock) {
                                            yypushback(indentInBlock);
                                            yybegin(AFTER_EOL);
                                            if (tokenLength > indentInBlock) {
                                                return JadeTokenId.FILTER_TEXT;
                                            }
                                        }
                                        yybegin(IN_FILTER_BLOCK);
          }
        case 200: break;
        case 54: 
          { parenBalance--; 
                                        
                                        if (checkEndJS(tokenLength, (char)zzInput)) {
                                            return JadeTokenId.JAVASCRIPT; 
                                        }
          }
        case 201: break;
        case 79: 
          { yybegin(MIXIN_ARGUMENTS); 
                                        return JadeTokenId.BRACKET_LEFT_PAREN;
          }
        case 202: break;
        case 17: 
          { yybegin(DOCTYPE);
                                      return JadeTokenId.DOCTYPE_TEMPLATE;
          }
        case 203: break;
        case 36: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        if (tokenLength - 1 > 0 ) {
                                            return getTokenIdFromTagType(lastTag, JadeTokenId.PLAIN_TEXT);
                                        }
          }
        case 204: break;
        case 61: 
          { yybegin(AFTER_EOL);
                                        indent = 0;
                                        return JadeTokenId.EOL;
          }
        case 205: break;
        case 91: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.KEYWORD_IN;
          }
        case 206: break;
        case 34: 
          { int indentInComment = tokenLength - eolPosition;
                                        if (indent >= indentInComment) {
                                            yypushback(indentInComment);
                                            yybegin(AFTER_EOL);
                                            if (tokenLength > indentInComment) {
                                                return JadeTokenId.UNBUFFERED_COMMENT;
                                            }
                                        } else {
                                            yybegin(IN_UNBUFFERED_COMMENT);
                                        }
          }
        case 207: break;
        case 107: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.KEYWORD_CASE;
          }
        case 208: break;
        case 114: 
          { yybegin(AFTER_MIXIN);
                                        return JadeTokenId.KEYWORD_MIXIN;
          }
        case 209: break;
        case 103: 
          { yybegin(IN_UNBUFFERED_COMMENT);
                                        return JadeTokenId.UNBUFFERED_COMMENT_DELIMITER;
          }
        case 210: break;
        case 45: 
          { yybegin(AFTER_TAG);
                                        return JadeTokenId.BRACKET_RIGHT_PAREN;
          }
        case 211: break;
        case 64: 
          { braceBalance--;
                                        if (braceBalance == 0) {
                                            yypushback(1);
                                            if (tokenLength > 1) {
                                                return JadeTokenId.JAVASCRIPT;
                                            }
                                        } else if (braceBalance == -1) {
                                            yybegin(whereToGo);
                                            return JadeTokenId.EXPRESSION_DELIMITER_CLOSE; 
                                        }
          }
        case 212: break;
        case 69: 
          { yybegin(IN_FILTER_BLOCK_AFTER_EOL);
                                        eolPosition = tokenLength;
          }
        case 213: break;
        case 42: 
          { return JadeTokenId.ATTRIBUTE;
          }
        case 214: break;
        case 32: 
          { yybegin(IN_UNBUFFERED_COMMENT_AFTER_EOL);
                                        eolPosition = tokenLength;
          }
        case 215: break;
        case 35: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        indent = 0;
                                        
                                        if (tokenLength -1 > 0) {
                                            return JadeTokenId.TEXT;
                                        }
          }
        case 216: break;
        case 47: 
          { lastReaded = tokenLength; /*continueJS = false;*/
          }
        case 217: break;
        case 121: 
          { yybegin(AFTER_ATTRIBUTES);
                                        return JadeTokenId.ATTRIBUTE;
          }
        case 218: break;
        case 119: 
          { yybegin(FILEPATH);
                                        return JadeTokenId.KEYWORD_EXTENDS;
          }
        case 219: break;
        case 40: 
          { blockIndent = -1;
                                        eolPosition = 0;
                                        yybegin(IN_PLAIN_TEXT_BLOCK_AFTER_EOL);
                                        return JadeTokenId.EOL;
          }
        case 220: break;
        case 96: 
          { yypushback(2);
                                        yybegin(JAVASCRIPT_EXPRESSION);
                                        whereToGo = TEXT_LINE;
                                        if (tokenLength > 2) {
                                            return JadeTokenId.TEXT;
                                        }
          }
        case 221: break;
        case 89: 
          { yybegin(IN_COMMENT); 
                                        return JadeTokenId.COMMENT_DELIMITER;
          }
        case 222: break;
        case 27: 
          { yypushback(1);
                                        yybegin(JAVASCRIPT_LINE);
          }
        case 223: break;
        case 106: 
          { return JadeTokenId.OPERATOR_REST_ARGUMENTS;
          }
        case 224: break;
        case 117: 
          { yybegin(AFTER_DOCTYPE);
                                        return JadeTokenId.DOCTYPE;
          }
        case 225: break;
        case 86: 
          { switch (zzInput) {
            case '(': parenBalance++; break;
            case '{': braceBalance++; break;
            case '}': braceBalance--; break; 
            case ')':
                parenBalance--;
                break;    
            case ',':
                if (parenBalance == 1 && braceBalance == 0) {
                    parenBalance = 0;
                }
                break;
        }
        if (parenBalance == 0 && braceBalance == 0) {
            yypushback(1);
            yybegin(AFTER_PLUS_MIXIN);
            parenBalance = 1;
            if (tokenLength > 1) {
                return JadeTokenId.JAVASCRIPT;
            }
        }
          }
        case 226: break;
        case 73: 
          { yybegin(TEXT_LINE);
                                        return JadeTokenId.BLOCK_NAME;
          }
        case 227: break;
        case 62: 
          { yypushback(1);
                                        yybegin(AFTER_EOL);
                                        if (tokenLength - 1 > 0) {
                                            return JadeTokenId.JAVASCRIPT;
                                        }
          }
        case 228: break;
        case 57: 
          { braceBalance--; lastReaded = tokenLength;
          }
        case 229: break;
        case 3: 
          { yypushback(1);
            indent = 0;
            yybegin(AFTER_EOL);
          }
        case 230: break;
        case 10: 
          { yybegin(AFTER_PLUS_MIXIN);
                                        return JadeTokenId.OPERATOR_PLUS;
          }
        case 231: break;
        case 44: 
          { return JadeTokenId.OPERATOR_COMMA;
          }
        case 232: break;
        case 110: 
          { yybegin(AFTER_CODE_DELIMITER_WITH_BLOCK_EXPANSION);
                                        return JadeTokenId.KEYWORD_WHEN;
          }
        case 233: break;
        case 81: 
          { return JadeTokenId.IDENTIFIER;
          }
        case 234: break;
        case 85: 
          { yybegin(AFTER_TAG);
                                        return JadeTokenId.BRACKET_LEFT_PAREN;
          }
        case 235: break;
        case 113: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.KEYWORD_WHILE;
          }
        case 236: break;
        case 51: 
          { parenBalance++; lastReaded = tokenLength;
          }
        case 237: break;
        case 60: 
          { return JadeTokenId.JAVASCRIPT;
          }
        case 238: break;
        case 90: 
          { yybegin(AFTER_CODE_DELIMITER);
                                        return JadeTokenId.KEYWORD_IF;
          }
        case 239: break;
        case 39: 
          { int currentIndent = tokenLength - eolPosition;
                                        if (currentIndent <= indent) {
                                            // the block has to have one more space than the tag
                                            yybegin(AFTER_EOL);
                                            indent = currentIndent;
                                            if (tokenLength > currentIndent) {
                                                yypushback(currentIndent);
                                                return getTokenIdFromTagType(lastTag, JadeTokenId.PLAIN_TEXT);
                                            } else {
                                                return JadeTokenId.WHITESPACE;
                                            }
                                        }
                                        if (blockIndent < 0) {
                                            blockIndent = currentIndent;
                                        }
                                        if (blockIndent > currentIndent) {
                                            yypushback(currentIndent);
                                            yybegin(AFTER_EOL);
                                            if (tokenLength > currentIndent) {
                                                return getTokenIdFromTagType(lastTag, JadeTokenId.PLAIN_TEXT);
                                            }
                                        }
                                        yybegin(IN_PLAIN_TEXT_BLOCK);
          }
        case 240: break;
        case 94: 
          { return JadeTokenId.CSS_CLASS;
          }
        case 241: break;
        case 1: 
          { 
          }
        case 242: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case IN_PLAIN_TEXT_BLOCK_AFTER_EOL: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return getTokenIdFromTagType(lastTag, JadeTokenId.PLAIN_TEXT);
    } else {
        return null;
    }
            }
            case 305: break;
            case IN_PLAIN_TEXT_LINE: {
              if (input.readLength() > 0 ) {
                                                            input.backup(1);
                                                            return getTokenIdFromTagType(lastTag, JadeTokenId.PLAIN_TEXT);
                                                        } else {
                                                            return null;
                                                        }
            }
            case 306: break;
            case IN_COMMENT_AFTER_EOL: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.COMMENT;
    } else {
        return null;
    }
            }
            case 307: break;
            case IN_FILTER_BLOCK: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.FILTER_TEXT;
    } else {
        return null;
    }
            }
            case 308: break;
            case TEXT_LINE: {
              {   if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.TEXT;
    } else {
        return null;
    }}
            }
            case 309: break;
            case IN_UNBUFFERED_COMMENT: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.UNBUFFERED_COMMENT;
    } else {
        return null;
    }
            }
            case 310: break;
            case IN_UNBUFFERED_COMMENT_AFTER_EOL: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.UNBUFFERED_COMMENT;
    } else {
        return null;
    }
            }
            case 311: break;
            case IN_FILTER_BLOCK_AFTER_EOL: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.FILTER_TEXT;
    } else {
        return null;
    }
            }
            case 312: break;
            case IN_PLAIN_TEXT_BLOCK: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return getTokenIdFromTagType(lastTag, JadeTokenId.PLAIN_TEXT);
    } else {
        return null;
    }
            }
            case 313: break;
            case IN_COMMENT: {
              if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.COMMENT;
    } else {
        return null;
    }
            }
            case 314: break;
            default:
              {
                if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JadeTokenId.UNKNOWN;
    } else {
        return null;
    }
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
