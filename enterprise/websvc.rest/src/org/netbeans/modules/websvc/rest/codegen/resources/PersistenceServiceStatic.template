<#--

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
/*
 * PersistenceService.java
 *
 * Created on __DATE__, __TIME__
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package Templates.Classes;

import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.Query;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author __USER__
 */
public class PersistenceService {
    private static String DEFAULT_PU = "RESTDBApp5PU";
    private static PersistenceService defaultService = new PersistenceService(DEFAULT_PU);
    private EntityManagerFactory emf;
    private Map<Thread, EntityManager> emMap;
    
    public PersistenceService(String puName) {
        this.emf = Persistence.createEntityManagerFactory(puName);
        this.emMap = new HashMap<Thread, EntityManager>();
    }
    
    public static PersistenceService getDefault() {
        return defaultService;
    }
    
    public synchronized EntityManager getEntityManager() {
        Thread currentThread = Thread.currentThread();
        EntityManager em = emMap.get(currentThread);
        
        if (em == null) {
            em = emf.createEntityManager();
            emMap.put(currentThread, em);
        }
        
        return em;
    }
    
    public synchronized void releaseResources() {
        EntityManager em = emMap.remove(Thread.currentThread());
        
        if (em != null) {
            em.close();
        }
    }
    
    public void refreshEntity(Object entity) {
        EntityManager em = getEntityManager();
        
        em.flush();
        em.refresh(entity);
    }
    
    public void mergeEntity(Object entity) {
        getEntityManager().merge(entity);
    }
    
    public void persistEntity(Object entity) {
        getEntityManager().persist(entity);
    }
    
    public void removeEntity(Object entity) {
        getEntityManager().remove(entity);
    }
    
    public Query createNamedQuery(String query) {
        return getEntityManager().createNamedQuery(query);
    }
    
    public Query createQuery(String query) {
        return getEntityManager().createQuery(query);
    }
    
    public void beginTx() {
        EntityTransaction tx = getEntityManager().getTransaction();
        
        if (!tx.isActive()) {
            tx.begin();
        }
    }
    
    public void commitTx() {
        EntityTransaction tx = getEntityManager().getTransaction();
        
        if (tx.isActive()) {
            tx.commit();
        }
    }
    
    public void rollbackTx() {
        EntityTransaction tx = getEntityManager().getTransaction();
        
        if (tx.isActive()) {
            tx.rollback();
        }
    }
    
    protected void finalize() {
        emf.close();
    }
}