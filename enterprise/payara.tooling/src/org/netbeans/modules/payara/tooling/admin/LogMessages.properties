# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

################################################################################
# Log messages                                                                 #
# Use <class>.<method>.<name> notation for keys.                               #
################################################################################

# AdminFactory class
AdminFactory.newRunner.exception=Caught: {0}
AdminFactory.newRunner.cause=Caused by: {0}

# PasswordFile class
PasswordFile.createFilePosix.exists=File {0} already exists
PasswordFile.createFilePosix.ioException=IO exception caught when creating \
new file:
PasswordFile.createFilePosix.unsupported=Could not set file permissions. \
File system is not POSIX compliant.
PasswordFile.finishFilePosix.unsupported=Could not set file permissions. \
File system is not POSIX compliant.
PasswordFile.finishFilePosix.ioException=IO exception caught when updating \
file permissions:
PasswordFile.write.writeException=Caught IOException when writting {0}: {1}
PasswordFile.write.closeException=Cannot close {0} Writer

# Runner class
Runner.prepareHttpConnection.setting=Setting HTTP connection attributes: \
timeout = {0} user = {1} password = {2}
Runner.prepareHttpConnection.using=Using "Basic" authorization with user \
and password
Runner.handleSecureConnection.issue=Trust manager issue when processing {0}
Runner.handleSecureConnection.exception=Trust manager caught an exception: 
Runner.handleReceive.exception=Caught an exception when reading response: 
Runner.handleHTTPConnection.connect=Connecting to {0}:{1}
Runner.handleHTTPResponse.response=Receiving response, code: {0}
Runner.handleHTTPResponse.invalidRedirect=Invalid redirect for {0}
Runner.handleHTTPResponse.locationMoved=Location moved to {0}
Runner.call.thread=Runner call() method called on URL {0} thread {1}
Runner.call.connect=Connecting to {0}:{1}
Runner.call.response=Receiving response, code: {0}
Runner.call.failure={0} failure, ContentType: {1}, ContentEncoding: {2}
Runner.call.headerFields=Header Fields:
Runner.call.headerField= * {0} = {1}
Runner.call.unexpectedConnection=Unexpected connection type: {0}
Runner.call.sleepInterrupted=Thread sleep interrupted in call() method: 
Runner.call.malformedURLException=Caught MalformedURLException in call() method: 

# RunnerAsadminChangeAdminPassword class

# RunnerHttpCreateInstance class
RunnerHttpCreateInstance.processResponse.illegalArgument=Caught \
IllegalArgumentException when processing command execution response

# RunnerHttpDeploy class
RunnerHttpDeploy.handleSend.ioException=IO exception caught in handleSend() \
method:
RunnerHttpDeploy.handleSend.noData=HTTP POST request but no data stream provided
RunnerHttpDeploy.getInputStream.fileNotFound=File not found exception caught \
in getInputStream() method: 

# RunnerHttpGetProperty class
RunnerHttpGetProperty.processResponse.manifestNull=info is null \
for GetProperty command with {0}
RunnerHttpGetProperty.processResponse.unsupportedEncoding=Caught \
UnsupportedEncodingException exception in processResponse() method \
while processing {0}
RunnerHttpGetProperty.processResponse.exceptionDetails=\
UnsupportedEncodingException details: 
RunnerHttpGetProperty.processResponse.illegalArgument=Caught \
IllegalArgumentException in processResponse() method while processing {0}:{1}
RunnerHttpGetProperty.processResponse.emptyString=Inserting empty string \
as value for key {0}

# RunnerRestGetProperty class
RunnerRestGetProperty.processResponse.unsupportedEncoding=Caught \
UnsupportedEncodingException exception in processResponse() method \
while processing {0}
RunnerRestGetProperty.processResponse.illegalArgument=Caught \
IllegalArgumentException in processResponse() method while processing {0}:{1}
RunnerRestGetProperty.processResponse.emptyString=Inserting empty string \
as value for key {0}

# RunnerJava class
RunnerJava.getJavaVM.noJavaVMExe="Java VM {0} executable was not found"
RunnerJava.verifyJavaVM.unknown=Java VM {0} executable version is unknown
RunnerJava.verifyJavaVM.info=Java VM {0} executable version {1}
RunnerJava.verifyJavaVM.unsupported=Java VM {0} executable version is \
not supported by {1}
RunnerJava.setProcessCurrentDir.dir=Setting {0} process current directory to {1}

################################################################################
# Log messages for tests                                                       #
################################################################################

# CommandAsadminTest class
CommandAsadminTest.testCommandChangeAdminPasswordGFv3.output=StdOut: {0}
CommandAsadminTest.testCommandChangeAdminPasswordGFv4.output=StdOut: {0}

# CommandHttpTest class
CommandHttpTest.startPayara.startFrame=+------------------------------------------+
CommandHttpTest.startPayara.startText=| Starting Payara server for HTTP tests |
CommandHttpTest.startPayara.stdout=STDOUT: {0}
CommandHttpTest.startPayara.failed=Payara exited on error.
CommandHttpTest.stopPayara.stopFrame=+------------------------------------------+
CommandHttpTest.stopPayara.stopText=| Stopping Payara server for HTTP tests |

# CommandRestTest class
CommandRestTest.startPayara.startFrame=+------------------------------------------+
CommandRestTest.startPayara.startText=| Starting Payara server for REST tests |
CommandRestTest.startPayara.stdout=STDOUT: {0}
CommandRestTest.startPayara.failed=Payara exited on error.
CommandRestTest.stopPayara.stopFrame=+------------------------------------------+
CommandRestTest.stopPayara.stopText=| Stopping Payara server for REST tests |

# ProcessIOTest class
ProcessIOTest.threadClose.in=Could not close standard input Reader: {0}
ProcessIOTest.threadClose.out=Could not close standard output Writer: {0}
ProcessIOTest.threadClose.err=Could not close standard error output Writer: {0}
ProcessIOTest.run.io=Could not simulate process IO: {0}
ProcessIOTest.testProcessIOSuccess.thread=Could not initialize process IO simulation \
thread: {0}
ProcessIOTest.testProcessIOSuccess.output=StdOut: {0}
ProcessIOTest.testProcessIOFailure.thread=Could not initialize process IO simulation \
thread: {0}
ProcessIOTest.testProcessIOFailure.output=StdOut: {0}
ProcessIOTest.close.in=Could not close standard input stream: {0}
ProcessIOTest.close.out=Could not close standard output stream: {0}
ProcessIOTest.close.err=Could not close standard error output stream: {0}

