# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

################################################################################
# Log messages                                                                 #
# Use <class>.<method>.<name> notation for keys.                               #
################################################################################

# HttpListenerReader class
HttpListenerReader.readAttributes.port=HTTP listener port {0} enabled {1} \
secure-enabled {2}.
HttpListenerReader.readAttributes.add=Adding {0}.
HttpListenerReader.readAttributes.noName=HTTP listener found with no name.
HttpListenerReader.readAttributes.numberFormat=Error reading HTTP listener:

# JmxConnectorReader class
JmxConnectorReader.getServerConfig.port=JMX port {0}
JmxConnectorReader.getServerConfig.error=Error reading JMX port:

# NetworkListenerReader class
NetworkListenerReader.readAttributes.port=Network listener port {0} \
enabled {1} secure-enabled {2}.
NetworkListenerReader.readAttributes.add=Adding {0}.
NetworkListenerReader.readAttributes.noName=Network listener found with no name.
NetworkListenerReader.readAttributes..numberFormat=Error reading network \
listener: 

# TreeParser class
TreeParser.readXml.cantClose=Cannot close XML file input stream: 
TreeParser.startElement.skipReading=Skip reading {0}.
TreeParser.startElement.skipDescend=Skip descend, depth is {0}, qn is {1}.
TreeParser.startElement.roverDescend=Rover descend to {0}.
TreeParser.startElement.roverEnter=Rover enter and read node {0}.
TreeParser.startElement.skipStart=Skip start, depth is {0}, qn is {1}.
TreeParser.endElement.doesNotMatch=Skip {0} does not match {1} at depth {2}.
TreeParser.endElement.skipAscend=Skip ascend, depth is {0}.
TreeParser.endElement.roverEnter=Rover exit and read node {0}.
TreeParser.endElement.roverAscend=Rover ascend to {0}.
TreeParser.buildTree.invalidNoParts=Invalid entry, no parts, skipping {0}.
TreeParser.buildTree.invalidNullRoot=Invalid entry, null root, skipping {0}.
TreeParser.buildTree.createdRootNode=Created root node {0}.
TreeParser.buildTree.existing=Existing node {0} at level {1}.
TreeParser.buildTree.add=Adding node {0} at level {1}.
TreeParser.buildTree.broken=Broken parts found in {0} at level {1}.
