<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->

<!DOCTYPE codetemplates PUBLIC  "-//NetBeans//DTD Editor Code Templates settings 1.0//EN"
                                "http://www.netbeans.org/dtds/EditorCodeTemplates-1_0.dtd">

<codetemplates>
    <codetemplate abbreviation="ab"><code><![CDATA[${no-indent}abstract ]]></code></codetemplate> 
    <codetemplate abbreviation="bo"><code><![CDATA[${no-indent}boolean ]]></code></codetemplate> 
    <codetemplate abbreviation="br"><code><![CDATA[${no-indent}break;]]></code></codetemplate>
    <codetemplate abbreviation="ca"><code><![CDATA[catch (${EXC instanceof="java.lang.Throwable" default="Exception"} ${NAME newVarName default="ex"}) {
        ${cursor}
    }]]></code></codetemplate> 
    <codetemplate abbreviation="cl"><code><![CDATA[${no-indent}class ]]></code></codetemplate> 
    <codetemplate abbreviation="cn"><code><![CDATA[${no-indent}continue]]></code></codetemplate> 
    <codetemplate abbreviation="df"><code><![CDATA[${no-indent}default:]]></code></codetemplate> 
    <codetemplate abbreviation="eq"><code><![CDATA[${no-indent}equals]]></code></codetemplate> 
    <codetemplate abbreviation="ex"><code><![CDATA[${no-indent}extends ]]></code></codetemplate> 
    <codetemplate abbreviation="fa"><code><![CDATA[${no-indent}false]]></code></codetemplate> 
    <codetemplate abbreviation="fi"><code><![CDATA[${no-indent}final ]]></code></codetemplate> 
    <codetemplate abbreviation="fl"><code><![CDATA[${no-indent}float ]]></code></codetemplate> 
    <codetemplate abbreviation="fy"><code><![CDATA[finally {
        ${cursor}
    }]]></code></codetemplate>
    <codetemplate abbreviation="ie"><code><![CDATA[${no-indent}interface ]]></code></codetemplate> 
    <codetemplate abbreviation="im"><code><![CDATA[${no-indent}implements ]]></code></codetemplate> 
    <codetemplate abbreviation="iof"><code><![CDATA[${no-indent}instanceof ]]></code></codetemplate> 
    <codetemplate abbreviation="ir"><code><![CDATA[${no-indent}import ]]></code></codetemplate> 
    <codetemplate abbreviation="le"><code><![CDATA[${no-indent}length]]></code></codetemplate> 
    <codetemplate abbreviation="pe"><code><![CDATA[${no-indent}protected ]]></code></codetemplate> 
    <codetemplate abbreviation="pr"><code><![CDATA[${no-indent}private ]]></code></codetemplate> 
    <codetemplate abbreviation="psf"><code><![CDATA[${no-format}private static final ]]></code></codetemplate> 
    <codetemplate abbreviation="psfi"><code><![CDATA[${no-format}private static final int ]]></code></codetemplate> 
    <codetemplate abbreviation="psfs"><code><![CDATA[${no-format}private static final String ]]></code></codetemplate> 
    <codetemplate abbreviation="psfb"><code><![CDATA[${no-format}private static final boolean ]]></code></codetemplate> 
    <codetemplate abbreviation="pst" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION"><code><![CDATA[printStackTrace();]]></code></codetemplate> 
    <codetemplate abbreviation="pu"><code><![CDATA[${no-indent}public ]]></code></codetemplate> 
    <codetemplate abbreviation="re"><code><![CDATA[${no-indent}return ]]></code></codetemplate>
    <codetemplate abbreviation="serr" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION"><code><![CDATA[System.err.println("${cursor}");]]></code></codetemplate> 
    <codetemplate abbreviation="sout" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION"><code><![CDATA[System.out.println("${cursor}");]]></code></codetemplate> 
    <codetemplate abbreviation="st"><code><![CDATA[${no-indent}static ]]></code></codetemplate> 
    <codetemplate abbreviation="sw" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION" descriptionId="CT_sw">
        <code>
<![CDATA[switch (${var instanceof="java.lang.Enum"}) {
    case ${val completionInvoke}:
        ${selection}${cursor}
        break;
    default:
        throw new AssertionError();
}
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="cs" contexts="CASE,SWITCH">
        <code>
<![CDATA[case ${what completionInvoke}:
    ${selection}${cursor}
    break;
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="tw"><code><![CDATA[throw ${exc instanceof="java.lang.Throwable" default="new IllegalStateException()"};]]></code></codetemplate>
    <codetemplate abbreviation="ise"><code><![CDATA[throw new IllegalStateException("${arg}");]]></code></codetemplate>
    <codetemplate abbreviation="iae"><code><![CDATA[throw new IllegalArgumentException("${arg}");]]></code></codetemplate>
    <codetemplate abbreviation="npe"><code><![CDATA[throw new NullPointerException("${arg instanceof="java.lang.Object"}");]]></code></codetemplate>
    <codetemplate abbreviation="wh"><code><![CDATA[while (${expr instanceof="boolean" default="true"}) {
        ${cursor}
    }
]]></code></codetemplate>
    <codetemplate abbreviation="do"><code><![CDATA[do {
        ${cursor}
    } while (${expr instanceof="boolean" default="true"});
]]></code></codetemplate>

    <codetemplate abbreviation="sy" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION">
        <code>
<![CDATA[synchronized (${OBJ instanceof="java.lang.Object" default="this"}) {
    ${selection}${cursor}
}]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="tds"><code><![CDATA[Thread.dumpStack();]]></code></codetemplate> 
    <codetemplate abbreviation="th"><code><![CDATA[${no-indent}throws ]]></code></codetemplate> 
    <codetemplate abbreviation="En"><code><![CDATA[${no-indent}Enumeration]]></code></codetemplate> 
    <codetemplate abbreviation="Ex"><code><![CDATA[${no-indent}Exception]]></code></codetemplate> 
    <codetemplate abbreviation="Ob"><code><![CDATA[${no-indent}Object]]></code></codetemplate> 
    <codetemplate abbreviation="Psf"><code><![CDATA[${no-format}public static final ]]></code></codetemplate> 
    <codetemplate abbreviation="Psfi"><code><![CDATA[${no-format}public static final int ]]></code></codetemplate> 
    <codetemplate abbreviation="Psfs"><code><![CDATA[${no-format}public static final String ]]></code></codetemplate> 
    <codetemplate abbreviation="Psfb"><code><![CDATA[${no-format}public static final boolean ]]></code></codetemplate> 
    <codetemplate abbreviation="St"><code><![CDATA[${no-indent}String]]></code></codetemplate>
    <!-- #173655 partial fix -->
    <codetemplate abbreviation="as"><code><![CDATA[assert ${exp default="true" instanceof="boolean"};]]></code></codetemplate>
    <codetemplate abbreviation="na"><code><![CDATA[${no-indent}native ]]></code></codetemplate>
    <codetemplate abbreviation="tr"><code><![CDATA[${no-indent}transient ]]></code></codetemplate>
    <!-- Some bug in template processing always appends 4 spaces after volatile, if there is a single space in the template -->
    <codetemplate abbreviation="vo"><code><![CDATA[${no-indent}volatile]]></code></codetemplate>
    <codetemplate abbreviation="db"><code><![CDATA[${no-indent}double ]]></code></codetemplate>
    <codetemplate abbreviation="sh"><code><![CDATA[${no-indent}short ]]></code></codetemplate>
    <codetemplate abbreviation="su"><code><![CDATA[${no-indent}super]]></code></codetemplate>
    <codetemplate abbreviation="pvb"><code><![CDATA[${no-format}private volatile boolean ]]></code></codetemplate>
    <!-- #108167 -->
    <codetemplate abbreviation="for" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION">
        <code>
<![CDATA[for (int ${IDX newVarName default="i"} = 0; ${IDX} < ${MAX default="10"}; ${IDX}++) {
    ${selection}${cursor}
}
]]>
        </code>
    </codetemplate>

    <codetemplate abbreviation="fori" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION">
        <code>
<![CDATA[for (int ${IDX newVarName default="idx"} = 0; ${IDX} < ${ARR array default="arr"}.length; ${IDX}++) {
    ${TYPE rightSideType default="Object"} ${ELEM newVarName default="elem"} = ${TYPE_CAST cast default="" editable=false}${ARR}[${IDX}];
    ${selection}${cursor}
}
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="forc" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION">
        <code>
<![CDATA[for (${IT_TYPE rightSideType type="java.util.Iterator" default="Iterator" editable=false} ${IT newVarName default="it"} = ${COL instanceof="java.util.Collection" default="col"}.iterator(); ${IT}.hasNext();) {
    ${TYPE rightSideType default="Object"} ${ELEM newVarName default="elem"} = ${TYPE_CAST cast default="" editable=false}${IT}.next();
    ${selection}${cursor}
}
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="forl" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION">
        <code>
<![CDATA[for (int ${IDX newVarName default="idx"} = 0; ${IDX} < ${LIST instanceof="java.util.List" default="lst"}.size(); ${IDX}++) {
    ${TYPE rightSideType default="Object"} ${ELEM newVarName default="elem"} = ${TYPE_CAST cast default="" editable=false}${LIST}.get(${IDX});
    ${selection}${cursor}
}
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="forv" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION">
        <code>
<![CDATA[for (int ${IDX newVarName default="idx"} = 0; ${IDX} < ${VECTOR instanceof="java.util.Vector" default="vct"}.size(); ${IDX}++) {
    ${TYPE rightSideType default="Object"} ${ELEM newVarName default="elem"} = ${TYPE_CAST cast default="" editable=false}${VECTOR}.elementAt(${IDX});
    ${selection}${cursor}
}
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="fore" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION">
        <code>
<![CDATA[for (${TYPE iterableElementType default="Object" editable=false} ${ELEM newVarName default="elem" ordering=2} : ${ITER iterable default="col" ordering=1}) {
    ${selection}${cursor}
}
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="forst" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION">
        <code>
<![CDATA[for (${STR_TOK type="java.util.StringTokenizer" default="StringTokenizer" editable=false} ${TOKENIZER newVarName} = new ${STR_TOK}(${STRING instanceof="java.lang.String"}); ${TOKENIZER}.hasMoreTokens();) {
    String ${TOKEN default="token"} = ${TOKENIZER}.nextToken();
    ${selection}${cursor}
}
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="inst" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION">
        <code>
<![CDATA[if (${EXP instanceof="java.lang.Object" default="exp"} instanceof ${TYPE default="Object"}) {
    ${TYPE} ${VAR newVarName default="obj"} = (${TYPE})${EXP};
    ${cursor}
}
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="soutv">
        <code>
        <![CDATA[System.out.println("${EXP instanceof="<any>" default="exp"} = " + ${EXP});]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="whilen" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION">
        <code>
<![CDATA[while (${ENUM instanceof="java.util.Enumeration" default="en"}.hasMoreElements()) {
    ${TYPE rightSideType default="Object"} ${ELEM newVarName default="elem"} = ${TYPE_CAST cast default="" editable=false} ${ENUM}.nextElement();
    ${selection}${cursor}
}
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="whileit" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION">
        <code>
<![CDATA[while (${IT instanceof="java.util.Iterator" default="it"}.hasNext()) {
    ${TYPE rightSideType default="Object"} ${ELEM newVarName default="elem"} = ${TYPE_CAST cast default="" editable=false} ${IT}.next();
    ${selection}${cursor}
}
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="iff" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION" descriptionId="CT_iff">
        <code>
<![CDATA[if (${EXP instanceof="boolean" default="true"}) {
    ${selection}${cursor}
}
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="ifelse" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION" descriptionId="CT_ifelse">
        <code>
<![CDATA[if (${EXP instanceof="boolean" default="true"}) {
    ${selection}${cursor}
} else {
}
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="whilexp" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION">
        <code>
<![CDATA[while (${EXP instanceof="boolean" default="true"}) { 
    ${selection}${cursor}
}
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="dowhile" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION">
        <code>
<![CDATA[do { 
    ${selection}${cursor}
} while (${EXP instanceof="boolean" default="true"});
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="runn" contexts="BLOCK,CASE,LABELED_STATEMENT">
        <code>
<![CDATA[${RUNN_TYPE type="java.lang.Runnable" default="Runnable" editable=false} ${RUNN newVarName default="r"} = new ${RUNN_TYPE}() {
    public void run() {
        ${selection}${cursor}
    }
};
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="trycatch" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION" descriptionId="CT_trycatch">
        <code>
<![CDATA[try {
    ${selection}${cursor}
} ${CATCH_STMTS uncaughtExceptionCatchStatements default="catch (Exception e) {
}" editable=false}
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="trycatchfin" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION" descriptionId="CT_trycatchfin">
        <code>
<![CDATA[try {
    ${selection}${cursor}
} ${CATCH_STMTS uncaughtExceptionCatchStatements default="catch (Exception e) {
}" editable=false} finally {
}
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="tryfin" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION" descriptionId="CT_tryfin">
        <code>
<![CDATA[try {
    ${selection}${cursor}
} finally {
}
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="newo">
        <code>
        <![CDATA[${TYPE default="Object"} ${OBJ newVarName default="obj"} = new ${TYPE}(${cursor});]]>
        </code>
    </codetemplate>
        
    <codetemplate abbreviation="psvm" contexts="CLASS">
        <code>
<![CDATA[public static void main(String[] args) {
    ${cursor}
}
]]>
        </code>
    </codetemplate>

    <codetemplate abbreviation="main" contexts="CLASS">
        <code>
<![CDATA[public static void main(String[] args) {
    ${cursor}
}
]]>
        </code>
    </codetemplate>

    <codetemplate abbreviation="bcom" descriptionId="CT_bcom">
        <code>
<![CDATA[${no-format}/*${selection}${cursor}*/]]>
        </code>
    </codetemplate>

    <codetemplate abbreviation="fcom">
        <code>
<![CDATA[${no-format}//<editor-fold defaultstate="collapsed" desc="${comment}">
${selection}${cursor}
//</editor-fold>
]]>
        </code>
    </codetemplate>

    <codetemplate abbreviation="par" contexts="EXPRESSION">
        <code>
<![CDATA[${no-format}(${selection}${cursor})]]>
        </code>
    </codetemplate>

    <!-- Added in 6.9 -->

    <!-- Arrays and List conversion and sorting -->
    <codetemplate abbreviation="2ar">
         <code>
 <![CDATA[${clazz}[] ${var newVarName default="arr"} = ${typeCast cast default="" editable=false} ${coll instanceof="java.util.Collection"}.toArray(new ${clazz}[0]);
 ]]>
         </code>
     </codetemplate>

     <codetemplate abbreviation="2l"><code><![CDATA[${ltype type="java.util.List" default="List" editable="false"}<${arrType type="java.lang.String" default="String"}> ${var newVarName default="l"} = ${arrays type="java.util.Arrays" default="Arrays" editable="false"}.asList(${arr array});
${cursor}]]></code></codetemplate>
     <codetemplate abbreviation="2al"><code><![CDATA[${baseType type="java.util.List" default="List" editable="false"} <${type default="String"}> ${var newVarName default="l"} = new ${listType type="java.util.ArrayList" default="ArrayList" editable=false} <${type}>(
 ${arrays type="java.util.Arrays" default="Arrays" editable="false"}.asList(${arr array}));
         ${cursor}
 ]]></code></codetemplate>
     <codetemplate abbreviation="2s"><code><![CDATA[${baseType type="java.util.Set" default="Set" editable="false"} <${type default="String"}> ${var newVarName default="s"} = new ${listType type="java.util.HashSet" default="HashSet" editable=false} <${type}>(${arrays type="java.util.Arrays" default="Arrays" editable="false"}.asList(${arr array}));
         ${cursor}]]></code></codetemplate>
     <codetemplate abbreviation="asort"><code><![CDATA[${baseType type="java.util.Arrays" default="Arrays" editable="false"}.sort (${arr array type="java.lang.reflect.Array"});
     ${cursor}]]></code></codetemplate>
     <codetemplate abbreviation="csort"><code><![CDATA[${collsType type="java.util.Collections" default="Collections" editable="false"}.sort(${var instanceof="java.util.List"});
         ${cursor}]]></code></codetemplate>
     <codetemplate abbreviation="form" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION" descriptionId="CT_form">
         <code>
<![CDATA[for (${entryType iterableElementType default="Map.Entry<Object, Object>" editable=false} ${entry newVarName default="en"} : ${map instanceof="java.util.Map" default="m"}.entrySet()) {
    ${KeyType rightSideType default="Object"} ${key newVarName default="key"} = ${entry}.getKey();
    ${ValType rightSideType default="Object"} ${val newVarName default="val"} = ${entry}.getValue();
    ${selection}${cursor}
}]]>
         </code>
     </codetemplate>

     <!-- Instantiating common classes -->
     <codetemplate abbreviation="map"><code><![CDATA[${map type="java.util.Map" default="Map" editable="false"}<${keytype default="String"},${valtype default="String"}> ${var newVarName default="m"} = new ${mtype type="java.util.HashMap" editable="false"}<${keytype},${valtype}>(${cursor});
]]></code></codetemplate>

     <codetemplate abbreviation="set"><code><![CDATA[${stype type="java.util.Set" default="Set" editable="false"}<${paramType default="String"}> ${var newVarName default="s"} = new ${setType type="java.util.HashSet" editable="false"}<${paramType}>();
    ${cursor}]]></code></codetemplate>
     <codetemplate abbreviation="al"><code><![CDATA[${baseType type="java.util.List" default="List" editable="false"} <${type default="String"}> ${var newVarName default="l"} = new ${listType type="java.util.ArrayList" default="ArrayList" editable=false} <${type}>(${arg default="" instanceof="java.util.Collection"});
         ${cursor}
 ]]></code></codetemplate>
     <codetemplate abbreviation="ll"><code><![CDATA[${stype type="java.util.List" default="List" editable="false"}<${paramType default="String"}> ${var newVarName default="s"} = new ${listType type="java.util.LinkedList" editable="false"}<${paramType}>(${arg instanceof="java.util.Collection" default=""});
    ${cursor}]]></code></codetemplate>
     <codetemplate abbreviation="sb"><code><![CDATA[${stype type="java.util.StringBuilder" default="StringBuilder" editable="false"} ${var newVarName default="sb"} = new ${stype}(${str instanceof="java.lang.String" default=""});
    ${cursor}]]></code></codetemplate>

    <!-- #167824 -->
    <codetemplate abbreviation="in"><code><![CDATA[${no-indent}interface ]]></code></codetemplate>

     <!-- Miscellaneous common code patterns -->
     <codetemplate abbreviation="rn"><code><![CDATA[${no-indent}return null;]]></code></codetemplate>
     <codetemplate abbreviation="f"><code><![CDATA[${no-indent}final ]]></code></codetemplate>
     <codetemplate abbreviation="ps"><code><![CDATA[${no-format}private static ]]></code></codetemplate>
     <codetemplate abbreviation="Ps"><code><![CDATA[${no-format}public static ]]></code></codetemplate>
     <codetemplate abbreviation="pf"><code><![CDATA[${no-format}private final ]]></code></codetemplate>
     <codetemplate abbreviation="Pf"><code><![CDATA[${no-format}public final ]]></code></codetemplate>
     <codetemplate abbreviation="spl"><code><![CDATA[
        for (String ${str newVarName default="s"} : ${string instanceof="java.lang.String"}.split("${expr default=","}")) {
            ${cursor}
        }
     ]]></code></codetemplate>
    <codetemplate abbreviation="n">
        <!-- keep newo for people who are used to it, but this is easier -->
        <code>
        <![CDATA[${TYPE default="Object"} ${OBJ newVarName default="obj"} = new ${TYPE}(${cursor});]]>
        </code>
    </codetemplate>

     <!-- Public method generation -->

     <codetemplate abbreviation="Pm"><code><![CDATA[    public ${ret default="void"} ${mname default="method"}(${args default=""}) {
        ${cursor}
     }
     ]]></code></codetemplate>
     <codetemplate abbreviation="Pfm"><code><![CDATA[    public final ${ret default="void"} ${mname default="method"}(${args default=""}) {
        ${cursor}
     }
     ]]></code></codetemplate>
     <codetemplate abbreviation="Psfm"><code><![CDATA[    public static final ${ret default="void"} ${mname default="method"}(${args default=""}) {
        ${cursor}
     }
     ]]></code></codetemplate>

     <!-- Protected method generation -->

     <codetemplate abbreviation="prm"><code><![CDATA[    protected ${ret default="void"} ${mname default="method"}(${args default=""}) {
        ${cursor}
     }
     ]]></code></codetemplate>
     <codetemplate abbreviation="prfm"><code><![CDATA[    protected final ${ret default="void"} ${mname default="method"}(${args default=""}) {
        ${cursor}
     }
     ]]></code></codetemplate>
     <codetemplate abbreviation="prsfm"><code><![CDATA[    protected static final ${ret default="void"} ${mname default="method"}(${args default=""}) {
        ${cursor}
     }
     ]]></code></codetemplate>


     <!-- Private method generation -->

     <codetemplate abbreviation="pm"><code><![CDATA[    private ${ret default="void"} ${mname default="method"}(${args default=""}) {
        ${cursor}
     }
     ]]></code></codetemplate>
     <codetemplate abbreviation="pfm"><code><![CDATA[    private final ${ret default="void"} ${mname default="method"}(${args default=""}) {
        ${cursor}
     }
     ]]></code></codetemplate>
     <codetemplate abbreviation="psm"><code><![CDATA[    private static ${ret default="void"} ${mname default="method"}(${args default=""}) {
        ${cursor}
     }
     ]]></code></codetemplate>

     <codetemplate abbreviation="m"><code><![CDATA[    ${private} ${static} ${final} ${ret default="void"} ${mname default="method"}(${args default=""}) {
        ${cursor}
     }
     ]]></code></codetemplate>


     <!-- Inner class generation -->

     <codetemplate abbreviation="pfc"><code><![CDATA[private final class ${Type} {
        ${Type}() {
            ${cursor}
        }
     }
     ]]></code></codetemplate>
     <codetemplate abbreviation="psfc"><code><![CDATA[private static final class ${Type} {
        ${Type}() {
            ${cursor}
        }
     }
     ]]></code></codetemplate>
     <codetemplate abbreviation="sfc"><code><![CDATA[static final class ${Type} {
        ${Type}() {
            ${cursor}
        }
     }
     ]]></code></codetemplate>
     <codetemplate abbreviation="sc"><code><![CDATA[static class ${Type} {
        ${Type}() {
            ${cursor}
        }
     }
     ]]></code></codetemplate>
     <codetemplate abbreviation="fc"><code><![CDATA[final class ${Type} {
        ${Type}() {
            ${cursor}
        }
     }
     ]]></code></codetemplate>
     <codetemplate abbreviation="ic"><code><![CDATA[class ${Type} {
        ${Type}() {
            ${cursor}
        }
     }
     ]]></code></codetemplate>
    <codetemplate abbreviation="if" descriptionId="CT_iff">
        <code>
<![CDATA[if (${EXP instanceof="boolean" default="true"}) {
   ${cursor}
}
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="ife" descriptionId="CT_ifelse">
        <code>
<![CDATA[if (${EXP instanceof="boolean" default="true"}) {
   ${cursor}
} else {
}
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="pue">
        <code>
<![CDATA[public enum ${Type} {
   ${cursor}
}
]]>
        </code>
    </codetemplate>
     <codetemplate abbreviation="ap"><code><![CDATA[${sb instanceof="java.lang.StringBuilder" default="sb"}.append(${EXP instanceof="<any>" default=""exp""});
${cursor}]]></code></codetemplate>

     <codetemplate abbreviation="apo"><code><![CDATA[if (${sb instanceof="java.lang.StringBuilder" default="sb"}.length() > 0) {
     ${sb}.append (',');
 }
 ${sb}.append ("${EXP instanceof="<any>" default="exp"}=");
 ${sb}.append (${EXP});
${cursor}]]></code>
    </codetemplate>

    <!-- Added in 7.0 -->

    <!-- Logging contributed by krissco@netbeans.org -->
    
    <codetemplate abbreviation="logr">
        <code>
<![CDATA[private static final ${loggerType type="java.util.logging.Logger" default="Logger" editable="false"} logger = ${loggerType}.getLogger(${classVar editable="false" currClassName default="getClass()"}.class.getName());]]>
        </code>
    </codetemplate>
    
    <codetemplate abbreviation="logrb">
        <code>
<![CDATA[private static final ${loggerType type="java.util.logging.Logger" default="Logger" editable="false"} logger = ${loggerType}.getLogger(${classVar editable="false" currClassName default="getClass()"}.class.getName(), ${classVar}.class.getPackage().getName() + "${bundleName default=".Log" editable="true"}");]]>
        </code>
    </codetemplate>
    
    <codetemplate abbreviation="logb">
        <code>
<![CDATA[${loggerInst instanceof="java.util.logging.Logger" default="logger" editable="false"}.log(${levelType type="java.util.logging.Level" editable="false" default="Level"}.${logLevel default="INFO" completionInvoke}, "${bundle_key}");]]>
        </code>
    </codetemplate>
    
    <codetemplate abbreviation="logbp">
        <code>
<![CDATA[${loggerInst instanceof="java.util.logging.Logger" default="logger" editable="false"}.log(${levelType type="java.util.logging.Level" editable="false" default="Level"}.${logLevel default="INFO" completionInvoke}, "${bundle_key}", ${args instanceof="java.lang.Object" default="args"});]]>
        </code>
    </codetemplate>
    
    <codetemplate abbreviation="logbps">
        <code>
<![CDATA[${loggerInst instanceof="java.util.logging.Logger" default="logger" editable="false"}.log(${levelType type="java.util.logging.Level" editable="false" default="Level"}.${logLevel default="INFO" completionInvoke}, "${bundle_key}", new Object [] {${args default="null"}});]]>
        </code>
    </codetemplate>
    
    <!-- https://netbeans.org/bugzilla/show_bug.cgi?id=251158 -->
    <codetemplate abbreviation="junit" contexts="CLASS">
        <code><![CDATA[@${baseType type="org.junit.Test" default="Test" editable="false"}
public void test${Method}() {
    ${cursor}
}]]></code>
    </codetemplate>
    <codetemplate abbreviation="testng" contexts="CLASS">
        <code><![CDATA[@${baseType type="org.testng.annotations.Test" default="Test" editable="false"}
public void test${Method}() {
    ${cursor}
}]]></code>
    </codetemplate>    

    <!-- https://netbeans.org/bugzilla/show_bug.cgi?id=148947 -->
    <codetemplate abbreviation="systrace" contexts="BLOCK,CASE,LABELED_STATEMENT,DO_WHILE_LOOP,ENHANCED_FOR_LOOP,FOR_LOOP,IF,WHILE_LOOP,LAMBDA_EXPRESSION">
        <code><![CDATA[System.out.println("${className currClassFQName editable="false"}.${methodName currMethodName editable="false"}()");]]></code>
    </codetemplate>    

</codetemplates>
