public abstract E get(int)
public abstract E remove(int)
public abstract E set(int,E)
public abstract T[] <T>toArray(T[])
public abstract boolean add(E)
public abstract boolean addAll(int,java.util.Collection<? extends E>)
public abstract boolean addAll(java.util.Collection<? extends E>)
public abstract boolean contains(java.lang.Object)
public abstract boolean containsAll(java.util.Collection<?>)
public abstract boolean equals(java.lang.Object)
public abstract boolean isEmpty()
public abstract boolean remove(java.lang.Object)
public abstract boolean removeAll(java.util.Collection<?>)
public abstract boolean retainAll(java.util.Collection<?>)
public abstract int hashCode()
public abstract int indexOf(java.lang.Object)
public abstract int lastIndexOf(java.lang.Object)
public abstract int size()
public abstract java.lang.Object[] toArray()
public abstract java.util.Iterator<E> iterator()
public abstract java.util.List<E> subList(int,int)
public abstract java.util.ListIterator<E> listIterator()
public abstract java.util.ListIterator<E> listIterator(int)
public abstract void add(int,E)
public abstract void clear()
public default T[] <T>toArray(java.util.function.IntFunction<T[]>)
public default boolean removeIf(java.util.function.Predicate<? super E>)
public default java.util.Spliterator<E> spliterator()
public default java.util.stream.Stream<E> parallelStream()
public default java.util.stream.Stream<E> stream()
public default void forEach(java.util.function.Consumer<? super T>)
public default void replaceAll(java.util.function.UnaryOperator<E>)
public default void sort(java.util.Comparator<? super E>)
public static java.util.List<E> <E>copyOf(java.util.Collection<? extends E>)
public static java.util.List<E> <E>of()
public static java.util.List<E> <E>of(E)
public static java.util.List<E> <E>of(E,E)
public static java.util.List<E> <E>of(E,E,E)
public static java.util.List<E> <E>of(E,E,E,E)
public static java.util.List<E> <E>of(E,E,E,E,E)
public static java.util.List<E> <E>of(E,E,E,E,E,E)
public static java.util.List<E> <E>of(E,E,E,E,E,E,E)
public static java.util.List<E> <E>of(E,E,E,E,E,E,E,E)
public static java.util.List<E> <E>of(E,E,E,E,E,E,E,E,E)
public static java.util.List<E> <E>of(E,E,E,E,E,E,E,E,E,E)
public static java.util.List<E> <E>of(E...)
