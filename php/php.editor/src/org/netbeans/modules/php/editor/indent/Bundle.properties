# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Formating options

LBL_CodeGeneration=Code Generation
LBL_Wrapping=Wrapping
LBL_BlankLines=Blank Lines
LBL_Spaces=Spaces
LBL_Imports=Imports
    
LBL_bp_SAMELINE=Same Line
LBL_bp_NEWLINE=New Line
LBL_bp_NEWLINE_INDENTED= New Line Indented
LBL_bp_PRESERVE=Preserve Existing

LBL_bg_GENERATE=Generate
LBL_bg_LEAVE_ALONE=Leave Alone
LBL_bg_ELIMINATE=Eliminate
       
LBL_wrp_WRAP_ALWAYS=Always
LBL_wrp_WRAP_IF_LONG=If Long
LBL_wrp_WRAP_NEVER=Never

LBL_ExpandTabToSpaces=&Expand Tab to Spaces
LBL_TabSize=&Tab Size:
LBL_IndentSize=&Indentation Size:
LBL_ContinuationIndentSize=&Continuation Indentation Size:
LBL_LabelIndent=&Label Indentation\:
LBL_AbsoluteLabelIndent=&Absolute Label Indentation
LBL_IndentTopLevelClassMemberts=&Indent Top Level Class Members
LBL_AddLeadingStarInComment=Add Leading Star In Comment
LBL_RightMargin=&Right Margin:


LBL_BeforeKeywords=Before Keywords
LBL_spaceBeforeWhile="while"
LBL_spaceBeforeElse="else"
LBL_spaceBeforeCatch="catch"
LBL_spaceBeforeFinally="finally"

LBL_BeforeParentheses=Before Parentheses
LBL_spaceBeforeMethodDeclParen=Method Declaration
LBL_spaceBeforeMethodCallParen=Method Call
LBL_spaceBeforeIfParen="if"
LBL_spaceBeforeForParen="for"
LBL_spaceBeforeWhileParen="while"
LBL_spaceBeforeCatchParen="catch"
LBL_spaceBeforeSwitchParen="switch"
LBL_spaceBeforeSynchronizedParen="synchronized"
LBL_spaceBeforeAnnotationParen=Annotation Parameters

LBL_AroundOperators=Around Operators
LBL_spaceAroundUnaryOps=Unary Operators
LBL_spaceAroundBinaryOps=Binary Operators
LBL_spaceAroundTernaryOps=Ternary Operators
LBL_spaceAroundAssignOps=Assignment Operators
LBL_br_bracesPlacement=Braces Placement:
LBL_br_bracesGeneration=Braces Generation
LBL_al_newLines=New Lines
LBL_al_multilineAlignment=Multiline Alignment


SAMPLE_Default=public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {\
public int number = 1;\
private String text ="A";\
public ClassA() {\
}\
public void method(String text, int number) {\
} }

SAMPLE_TabsIndents=public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {\
public int number = 1;\
private String letters[] = new String[]{ "A", "B", "C", "D" };\
public int method(String text, int number) {\
if ( text == null ) {\
    text = "a";\
}\
else if (text.length() == 0) {\
    text = "empty";\
}\
else {\
    number++;\
}\
label:\
switch(number) {\
case 1\:\
    return method("text", 22);\
case 2\:\
    return 20;\
default\:\
    return -1;\
}\
} }

SAMPLE_AlignBraces=@Anno(paramA="a Value", paramB="bValue")\
public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {\
public int number = 1;\
private String letters[] = new String[]{ "A", "B", "C", "D" };\
public ClassA() {\
}\
public int method(String text, int number, Object object) throws ExceptionA, ExceptionB {\
assert nuber + text.length() < 20 : "message";\
if ( text == null ) {\
    text = "a";\
}\
else if (text.length() == 0) {\
text = number == 2 ? "empty" : "nonempty";\
number = ((op3() + 2) * op4);\
}\
else {\
    number++;\
}\
for( int i = 1; i < 100; i++ ) {\
}\
while ( this.number < 2 && number != 3 ) {\
method( "Some text", 12, new Object());\
}\
do {\
try {\
op1().op2.op3().op4();\
}\
catch ( Throwable t ) {\
log();\
}\
finally {\
close();\
}\
} while ( this.number < 2 && number != 3 );\
}\
public enum Where {\
NORTH, EAST, SOUTH, WEST;\
}\
}

SAMPLE_Wrapping=@Anno(paramA="a Value", paramB="bValue")\
@Deprecated \
public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {\
private static final String letters[] = new String[]{ "A", "B", "C", "D" };\
public int number = 1;\
public ClassA() {\
}\
public int method(String text, int number, Object object) throws ExceptionA, ExceptionB {\
assert nuber + text.length() < 20 : "message";\
if (number==13 && object instanceof Runnable )\
method( "Some text", 12, new Object());\
for( int i = 1; i < 100; i++ )\
System.out.println(i);\
while ( this.number < 2 && number != 3 )\
this.number++;\
do \
method1().method2().method3();\
while ( this.number < 2 && number != 3 );\
return number > 100 ? -1 : -2;\
}\
public enum Where {\
NORTH, EAST, SOUTH, WEST;\
}\
}


SAMPLE_BlankLines=package org.netbeans.samples;\
import java.util.List;\
import java.util.Map;\
\
public class ClassA {\
public int i;\
public int j;\
\
public ClassA() {\
}\
public void methodA() {\
}\
public void methodB() {\
}\
public class innerClass {\
}\
public static interface innerInterface {\
}\
}

SAMPLE_Spaces=@Anno(paramA="a Value", paramB="bValue")\
public class ClassA {\
public int number = 1;\
private String text ="A";\
static float[] floats = new float[3];\
protected double[] doubles = new double[]{3.67,40,2e-30};\
\
static {\
    floats[0]=12.6f;\
}\
\
public ClassA() {\
}\
public int method(String text, int number) {\
if (number==13) {\
return (int)System.currentTimeMillis();\
}else {\
{}\
}\
\
for( int i = 20; i < 100; i++) {\
    synchronized(this) {\
        while(i%13>5)\
            method( text + " ", number++);\
    }\
}\
\
for(float f : floats)\
    System.out.println(f);\
\
switch(number) {\
case 1\:\
    do { out( (2+3)*this.number--); } while(this.number > 6);\
    return 10;\
case 2\:\
    try {\
        toString();\
    }\
    catch ( IllegalStateException illegalStateException ) {\
        illegalStateException.printStackTrace();\
    }\
    finally {\
        return 20;\
    }\
default\:\
   return number > 100 ? -1 : -2;\
}\
} }



nlFinallyCheckBox1.text="finall&y"


AN_Preview=Preview
AD_Preview=Preview
LBL_bp_ClassDecl=
FmtTabsIndents.continuationIndentSizeField.AccessibleContext.accessibleDescription=Continuation indentation field
FmtTabsIndents.continuationIndentSizeField.AccessibleContext.accessibleName=Continuation indentation number
FmtTabsIndents.initialIndentSizeField.AccessibleContext.accessibleDescription=Initial indentation size field
