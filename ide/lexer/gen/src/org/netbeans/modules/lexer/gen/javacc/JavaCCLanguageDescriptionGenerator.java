/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.netbeans.modules.lexer.gen.javacc;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import org.netbeans.modules.lexer.gen.LanguageData;
import org.netbeans.modules.lexer.gen.TokenTypes;
import org.netbeans.spi.lexer.util.LexerUtilities;

/**
 * Generates initial skeleton of the xml file
 * (describing the particular language) from the class
 * (or interface) that contains integer constants.
 * Such file is typically generated by the lexer
 * generator tools.
 * <BR>This tool is useful when the grammar file
 * of the particular language already
 * exists because it creates the  initial version
 * of the language xml description that can be
 * further customized.
 *
 * @author Miloslav Metelka
 * @version 1.00
 */

public class JavaCCLanguageDescriptionGenerator {

    public String generate(String tokenTypesClassName) throws ClassNotFoundException {
        LanguageData data = new LanguageData();

        // Apply token types class info
        Class tokenTypesClass = Class.forName(tokenTypesClassName);
        TokenTypes tokenTypes = new TokenTypes(tokenTypesClass);
        data.registerTokenTypes(tokenTypes);

        return data.createDescription();
    }
    
}

