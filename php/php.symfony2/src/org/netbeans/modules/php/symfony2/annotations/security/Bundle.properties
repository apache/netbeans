# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

PreAuthorizeTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@PreAuthorize</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>This annotation lets you define an expression which is executed prior to invoking a method.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use JMS\SecurityExtraBundle\Annotation\PreAuthorize;\n\
\n\
class MyService {\n\
\    /**\n\
\     * @PreAuthorize("hasRole('A') or (hasRole('B') and hasRole('C'))")\n\
\     */\n\
\    public function secureMethod() {\n\
\        // ...\n\
\    }\n\
}\n\
</code></pre>
SecureTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@Secure</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>This annotation lets you define who is allowed to invoke a method.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use JMS\SecurityExtraBundle\Annotation\Secure;\n\
\n\
class MyService {\n\
\    /**\n\
\     * @Secure(roles="ROLE_USER, ROLE_FOO, ROLE_ADMIN")\n\
\     */\n\
\    public function secureMethod() {\n\
\        // ...\n\
\    }\n\
}\n\
</code></pre>
SecureParamTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@SecureParam</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>This annotation lets you define restrictions for parameters which are passed to the method. This is only useful if the parameters are domain objects.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use JMS\SecurityExtraBundle\Annotation\SecureParam;\n\
\n\
class MyService {\n\
\    /**\n\
\     * @SecureParam(name="comment", permissions="EDIT, DELETE")\n\
\     * @SecureParam(name="post", permissions="OWNER")\n\
\     */\n\
\    public function secureMethod($comment, $post) {\n\
\        // ...\n\
\    }\n\
}\n\
</code></pre>
SecureReturnTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@SecureReturn</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>This annotation lets you define restrictions for the value which is returned by the method. This is also only useful if the returned value is a domain object.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use JMS\SecurityExtraBundle\Annotation\SecureReturn;\n\
\n\
class MyService {\n\
\    /**\n\
\     * @SecureReturn(permissions="VIEW")\n\
\     */\n\
\    public function secureMethod() {\n\
\        // ...\n\
\n\
\        return $domainObject;\n\
\    }\n\
}\n\
</code></pre>
RunAsTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@RunAs</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>This annotation lets you specify roles which are added only for the duration of the method invocation. These roles will not be taken into consideration for before, \
or after invocation access decisions.</p>\
<p>This is typically used to implement a two-tier service layer where you have public and private services, and private services are only to be invoked through a specific public service.</p>\
<p style="font-weight: bold; font-size: 1.1em">Example</p>\
<pre><code>\n\
use JMS\SecurityExtraBundle\Annotation\Secure;\n\
use JMS\SecurityExtraBundle\Annotation\RunAs;\n\
\n\
class MyPrivateService {\n\
\    /**\n\
\     * @Secure(roles="ROLE_PRIVATE_SERVICE")\n\
\     */\n\
\    public function aMethodOnlyToBeInvokedThroughASpecificChannel() {\n\
\        // ...\n\
\    }\n\
}\n\
\n\
class MyPublicService {\n\
\    protected $myPrivateService;\n\
\n\
\    /**\n\
\     * @Secure(roles="ROLE_USER")\n\
\     * @RunAs(roles="ROLE_PRIVATE_SERVICE")\n\
\     */\n\
\    public function canBeInvokedFromOtherServices() {\n\
\        return $this->myPrivateService->aMethodOnlyToBeInvokedThroughASpecificChannel();\n\
\    }\n\
}\n\
</code></pre>
SatisfiesParentSecurityPolicyTag.documentation=<p style="font-weight: bold; font-size: 1.2em">@SatisfiesParentSecurityPolicy</p>\
<p style="font-weight: bold; font-size: 1.1em">Description</p>\
<p>This must be defined on a method that overrides a method which has security metadata. It is there to ensure that you are aware the security of the overridden method \
cannot be enforced anymore, and that you must copy over all annotations if you want to keep them.</p>
