/* The following code was generated by JFlex 1.4.3 on 22/03/27 21:35 */

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.netbeans.modules.php.editor.lexer;

import java.util.Objects;
import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;
import org.netbeans.modules.web.common.api.ByteStack;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/03/27 21:35 from the specification file
 * <tt>/home/junichi11/NetBeansProjects/netbeans/php/php.editor/tools/Php5ColoringScanner.flex</tt>
 */
public class PHP5ColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_END_NOWDOC = 22;
  public static final int ST_PHP_NOWDOC = 18;
  public static final int ST_PHP_END_HEREDOC = 16;
  public static final int ST_PHP_COMMENT = 32;
  public static final int ST_PHP_START_HEREDOC = 14;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 8;
  public static final int ST_PHP_IN_SCRIPTING = 2;
  public static final int ST_PHP_LOOKING_FOR_CONSTANT_NAME = 28;
  public static final int ST_PHP_LOOKING_FOR_STATIC_PROPERTY = 10;
  public static final int ST_PHP_DOC_COMMENT = 34;
  public static final int ST_PHP_LINE_COMMENT = 36;
  public static final int ST_PHP_LOOKING_FOR_FUNCTION_NAME = 26;
  public static final int ST_PHP_BACKQUOTE = 6;
  public static final int ST_PHP_START_NOWDOC = 20;
  public static final int ST_PHP_HEREDOC = 12;
  public static final int ST_HALTED_COMPILER = 40;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 38;
  public static final int ST_PHP_LOOKING_FOR_PARAMETER_NAME = 44;
  public static final int ST_PHP_LOOKING_FOR_TRUE_FALSE_NULL = 42;
  public static final int ST_PHP_VAR_OFFSET = 30;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_DOUBLE_QUOTES = 4;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\20\1\17\2\0\1\23\22\0\1\20\1\34\1\25\1\113"+
    "\1\24\1\40\1\41\1\110\1\111\1\75\1\36\1\33\1\112\1\5"+
    "\1\3\1\37\1\6\1\12\10\1\1\121\1\22\1\35\1\31\1\32"+
    "\1\45\1\44\1\50\1\11\1\100\1\52\1\4\1\10\1\105\1\107"+
    "\1\101\1\123\1\120\1\104\1\116\1\51\1\46\1\102\1\124\1\47"+
    "\1\77\1\103\1\106\1\122\1\117\1\7\1\115\1\15\1\114\1\26"+
    "\1\21\1\43\1\2\1\27\1\61\1\65\1\72\1\67\1\70\1\56"+
    "\1\64\1\107\1\53\1\71\1\120\1\57\1\73\1\54\1\60\1\76"+
    "\1\124\1\63\1\62\1\55\1\106\1\66\1\117\1\74\1\115\1\15"+
    "\1\30\1\42\1\125\1\44\1\14\52\15\1\15\12\15\1\15\4\15"+
    "\1\15\5\15\27\15\1\15\37\15\1\15\10\15\u01c2\13\4\0\14\13"+
    "\16\0\5\13\7\0\1\13\1\0\1\13\201\0\5\13\1\0\2\13"+
    "\2\0\4\13\10\0\1\13\1\0\3\13\1\0\1\13\1\0\24\13"+
    "\1\0\123\13\1\0\213\13\10\0\236\13\11\0\46\13\2\0\1\13"+
    "\7\0\47\13\110\0\33\13\5\0\3\13\55\0\53\13\25\0\12\16"+
    "\4\0\2\13\1\0\143\13\1\0\1\13\17\0\2\13\7\0\2\13"+
    "\12\16\3\13\2\0\1\13\20\0\1\13\1\0\36\13\35\0\131\13"+
    "\13\0\1\13\16\0\12\16\41\13\11\0\2\13\4\0\1\13\5\0"+
    "\26\13\4\0\1\13\11\0\1\13\3\0\1\13\27\0\31\13\107\0"+
    "\1\13\1\0\13\13\127\0\66\13\3\0\1\13\22\0\1\13\7\0"+
    "\12\13\4\0\12\16\1\0\7\13\1\0\7\13\5\0\10\13\2\0"+
    "\2\13\2\0\26\13\1\0\7\13\1\0\1\13\3\0\4\13\3\0"+
    "\1\13\20\0\1\13\15\0\2\13\1\0\3\13\4\0\12\16\2\13"+
    "\23\0\6\13\4\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13"+
    "\1\0\2\13\1\0\2\13\37\0\4\13\1\0\1\13\7\0\12\16"+
    "\2\0\3\13\20\0\11\13\1\0\3\13\1\0\26\13\1\0\7\13"+
    "\1\0\2\13\1\0\5\13\3\0\1\13\22\0\1\13\17\0\2\13"+
    "\4\0\12\16\25\0\10\13\2\0\2\13\2\0\26\13\1\0\7\13"+
    "\1\0\2\13\1\0\5\13\3\0\1\13\36\0\2\13\1\0\3\13"+
    "\4\0\12\16\1\0\1\13\21\0\1\13\1\0\6\13\3\0\3\13"+
    "\1\0\4\13\3\0\2\13\1\0\1\13\1\0\2\13\3\0\2\13"+
    "\3\0\3\13\3\0\14\13\26\0\1\13\25\0\12\16\25\0\10\13"+
    "\1\0\3\13\1\0\27\13\1\0\12\13\1\0\5\13\3\0\1\13"+
    "\32\0\2\13\6\0\2\13\4\0\12\16\25\0\10\13\1\0\3\13"+
    "\1\0\27\13\1\0\12\13\1\0\5\13\3\0\1\13\40\0\1\13"+
    "\1\0\2\13\4\0\12\16\1\0\2\13\22\0\10\13\1\0\3\13"+
    "\1\0\51\13\2\0\1\13\20\0\1\13\21\0\2\13\4\0\12\16"+
    "\12\0\6\13\5\0\22\13\3\0\30\13\1\0\11\13\1\0\1\13"+
    "\2\0\7\13\72\0\60\13\1\0\2\13\14\0\7\13\11\0\12\16"+
    "\47\0\2\13\1\0\1\13\2\0\2\13\1\0\1\13\2\0\1\13"+
    "\6\0\4\13\1\0\7\13\1\0\3\13\1\0\1\13\1\0\1\13"+
    "\2\0\2\13\1\0\4\13\1\0\2\13\11\0\1\13\2\0\5\13"+
    "\1\0\1\13\11\0\12\16\2\0\4\13\40\0\1\13\37\0\12\16"+
    "\26\0\10\13\1\0\44\13\33\0\5\13\163\0\53\13\24\0\1\13"+
    "\12\16\6\0\6\13\4\0\4\13\3\0\1\13\3\0\2\13\7\0"+
    "\3\13\4\0\15\13\14\0\1\13\1\0\12\16\6\0\46\13\1\0"+
    "\1\13\5\0\1\13\2\0\53\13\1\0\u014d\13\1\0\4\13\2\0"+
    "\7\13\1\0\1\13\1\0\4\13\2\0\51\13\1\0\4\13\2\0"+
    "\41\13\1\0\4\13\2\0\7\13\1\0\1\13\1\0\4\13\2\0"+
    "\17\13\1\0\71\13\1\0\4\13\2\0\103\13\45\0\20\13\20\0"+
    "\125\13\14\0\u026c\13\2\0\21\13\1\0\32\13\5\0\113\13\25\0"+
    "\15\13\1\0\4\13\16\0\22\13\16\0\22\13\16\0\15\13\1\0"+
    "\3\13\17\0\64\13\43\0\1\13\4\0\1\13\3\0\12\16\46\0"+
    "\12\16\6\0\130\13\10\0\51\13\1\0\1\13\5\0\106\13\12\0"+
    "\35\13\51\0\12\16\36\13\2\0\5\13\13\0\54\13\25\0\7\13"+
    "\10\0\12\16\46\0\27\13\11\0\65\13\53\0\12\16\6\0\12\16"+
    "\15\0\1\13\135\0\57\13\21\0\7\13\4\0\12\16\51\0\36\13"+
    "\15\0\2\13\12\16\54\13\32\0\44\13\34\0\12\16\3\0\3\13"+
    "\12\16\44\13\153\0\4\13\1\0\4\13\3\0\2\13\11\0\300\13"+
    "\100\0\u0116\13\2\0\6\13\2\0\46\13\2\0\6\13\2\0\10\13"+
    "\1\0\1\13\1\0\1\13\1\0\1\13\1\0\37\13\2\0\65\13"+
    "\1\0\7\13\1\0\1\13\3\0\3\13\1\0\7\13\3\0\4\13"+
    "\2\0\6\13\4\0\15\13\5\0\3\13\1\0\7\13\164\0\1\13"+
    "\15\0\1\13\20\0\15\13\145\0\1\13\4\0\1\13\2\0\12\13"+
    "\1\0\1\13\3\0\5\13\6\0\1\13\1\0\1\13\1\0\1\13"+
    "\1\0\4\13\1\0\13\13\2\0\4\13\5\0\5\13\4\0\1\13"+
    "\64\0\2\13\u0a7b\0\57\13\1\0\57\13\1\0\205\13\6\0\4\13"+
    "\3\0\2\13\14\0\46\13\1\0\1\13\5\0\1\13\2\0\70\13"+
    "\7\0\1\13\20\0\27\13\11\0\7\13\1\0\7\13\1\0\7\13"+
    "\1\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13"+
    "\120\0\1\13\u01d5\0\2\13\52\0\5\13\5\0\2\13\4\0\126\13"+
    "\6\0\3\13\1\0\132\13\1\0\4\13\5\0\51\13\3\0\136\13"+
    "\21\0\33\13\65\0\20\13\u0200\0\u19b6\13\112\0\u51cd\13\63\0\u048d\13"+
    "\103\0\56\13\2\0\u010d\13\3\0\20\13\12\16\2\13\24\0\57\13"+
    "\20\0\31\13\10\0\106\13\61\0\11\13\2\0\147\13\2\0\4\13"+
    "\1\0\4\13\14\0\13\13\115\0\12\13\1\0\3\13\1\0\4\13"+
    "\1\0\27\13\35\0\64\13\16\0\62\13\34\0\12\16\30\0\6\13"+
    "\3\0\1\13\4\0\12\16\34\13\12\0\27\13\31\0\35\13\7\0"+
    "\57\13\34\0\1\13\12\16\46\0\51\13\27\0\3\13\1\0\10\13"+
    "\4\0\12\16\6\0\27\13\3\0\1\13\5\0\60\13\1\0\1\13"+
    "\3\0\2\13\2\0\5\13\2\0\1\13\1\0\1\13\30\0\3\13"+
    "\2\0\13\13\7\0\3\13\14\0\6\13\2\0\6\13\2\0\6\13"+
    "\11\0\7\13\1\0\7\13\221\0\43\13\15\0\12\16\6\0\u2ba4\13"+
    "\14\0\27\13\4\0\61\13\u2104\0\u016e\13\2\0\152\13\46\0\7\13"+
    "\14\0\5\13\5\0\1\13\1\0\12\13\1\0\15\13\1\0\5\13"+
    "\1\0\1\13\1\0\2\13\1\0\2\13\1\0\154\13\41\0\u016b\13"+
    "\22\0\100\13\2\0\66\13\50\0\14\13\164\0\5\13\1\0\207\13"+
    "\23\0\12\16\7\0\32\13\6\0\32\13\13\0\131\13\3\0\6\13"+
    "\2\0\6\13\2\0\6\13\2\0\3\13\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\27\0\2\1\1\2\1\3\1\4\1\5\1\4\1\6"+
    "\1\3\4\4\1\7\1\5\1\10\1\5\1\11\1\12"+
    "\1\13\1\14\14\6\1\5\25\4\1\2\1\5\1\15"+
    "\1\16\3\4\1\5\1\4\1\17\1\20\1\21\1\22"+
    "\2\21\1\20\3\21\4\23\1\24\1\23\3\25\1\21"+
    "\1\2\1\21\1\26\1\27\1\26\1\30\1\2\1\31"+
    "\1\2\2\31\3\32\1\33\1\0\2\2\1\34\1\35"+
    "\2\34\1\36\2\37\1\3\1\40\1\3\1\41\1\42"+
    "\1\40\1\43\4\0\4\44\2\45\1\46\1\47\1\50"+
    "\7\51\1\0\1\52\1\53\2\0\1\3\1\0\1\4"+
    "\1\3\1\0\6\4\1\54\2\0\2\4\1\55\2\4"+
    "\1\0\1\4\1\0\1\56\2\0\1\21\2\0\2\6"+
    "\1\0\1\57\1\16\1\60\1\0\1\61\1\62\4\4"+
    "\1\63\4\4\1\64\1\4\1\65\36\4\13\0\1\66"+
    "\2\4\1\67\3\0\2\70\2\71\1\72\1\73\1\71"+
    "\3\0\1\70\2\71\1\74\1\0\1\75\3\0\1\76"+
    "\1\0\1\27\1\0\1\30\3\0\1\77\1\0\1\31"+
    "\2\100\1\0\1\33\1\0\1\101\3\0\1\102\1\0"+
    "\1\70\1\0\1\103\1\0\1\104\1\105\1\44\1\106"+
    "\5\0\1\107\3\0\1\110\2\0\10\4\1\0\10\4"+
    "\2\3\1\111\3\4\1\0\1\4\3\0\1\112\5\4"+
    "\1\113\4\4\1\114\3\4\1\115\6\4\1\116\13\4"+
    "\1\117\16\4\1\120\12\0\2\4\3\121\1\122\1\123"+
    "\1\0\1\124\1\0\1\76\1\77\1\125\1\126\1\127"+
    "\1\44\10\0\11\4\1\130\7\4\1\131\1\132\1\133"+
    "\6\4\4\0\1\134\6\4\1\135\12\4\1\136\2\4"+
    "\1\137\1\4\1\140\3\4\1\141\1\4\1\142\1\143"+
    "\4\4\1\144\12\4\12\0\2\4\1\123\1\44\1\145"+
    "\3\0\1\146\1\0\14\4\1\147\2\4\1\0\1\4"+
    "\1\150\1\4\1\151\1\152\1\4\1\153\2\154\3\0"+
    "\4\4\1\155\10\4\1\156\1\4\1\157\1\160\1\161"+
    "\1\162\6\4\1\163\1\164\1\4\1\165\1\166\1\167"+
    "\1\170\1\4\1\171\3\4\1\172\10\0\1\173\1\0"+
    "\1\174\1\175\1\44\1\0\1\107\3\0\12\4\1\176"+
    "\3\4\3\177\1\200\3\4\3\0\1\4\1\201\13\4"+
    "\1\202\1\203\1\204\1\205\1\206\4\4\1\207\1\210"+
    "\5\0\1\44\1\211\1\1\3\4\1\212\5\4\1\213"+
    "\4\4\2\0\1\214\1\215\1\4\2\216\1\0\1\4"+
    "\1\217\2\4\1\220\1\221\3\4\1\222\5\4\1\223"+
    "\3\0\1\44\1\0\1\224\3\4\1\225\6\4\1\226"+
    "\2\0\1\227\1\0\1\230\1\4\1\231\5\4\1\232"+
    "\1\4\1\233\1\234\1\4\1\0\1\44\1\0\2\4"+
    "\1\235\1\236\4\4\1\237\2\0\1\50\1\4\1\240"+
    "\1\241\1\242\3\4\1\243\1\0\1\44\1\0\2\4"+
    "\1\244\1\4\1\245\1\246\2\0\1\4\1\247\1\4"+
    "\1\250\1\251\1\44\1\0\3\4\2\0\2\4\1\0"+
    "\1\252\2\4\1\253\1\0\1\254\1\255\1\0\1\256"+
    "\1\4\2\0\1\4\1\0\1\257\14\0\1\260\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[820];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\254\0\u0102\0\u0158\0\u01ae\0\u0204\0\u025a"+
    "\0\u02b0\0\u0306\0\u035c\0\u03b2\0\u0408\0\u045e\0\u04b4\0\u050a"+
    "\0\u0560\0\u05b6\0\u060c\0\u0662\0\u06b8\0\u070e\0\u0764\0\u07ba"+
    "\0\u0810\0\u0866\0\u08bc\0\u0912\0\u0968\0\u09be\0\u0a14\0\u0a6a"+
    "\0\u0ac0\0\u0b16\0\u0b6c\0\u0bc2\0\u0c18\0\u0866\0\u0866\0\u0c6e"+
    "\0\u0cc4\0\u0866\0\u0866\0\u0866\0\u0d1a\0\u0d70\0\u0dc6\0\u0e1c"+
    "\0\u0e72\0\u0ec8\0\u0f1e\0\u0f74\0\u0fca\0\u1020\0\u1076\0\u0866"+
    "\0\u10cc\0\u1122\0\u1178\0\u11ce\0\u1224\0\u127a\0\u12d0\0\u1326"+
    "\0\u137c\0\u13d2\0\u1428\0\u147e\0\u14d4\0\u152a\0\u1580\0\u15d6"+
    "\0\u162c\0\u1682\0\u16d8\0\u172e\0\u1784\0\u17da\0\u1830\0\u1886"+
    "\0\u0866\0\u18dc\0\u1932\0\u1988\0\u19de\0\u1a34\0\u1a8a\0\u0866"+
    "\0\u1ae0\0\u1b36\0\u0866\0\u1b8c\0\u1be2\0\u1c38\0\u1c8e\0\u1ce4"+
    "\0\u1d3a\0\u0866\0\u1d90\0\u1de6\0\u1e3c\0\u1e92\0\u1ee8\0\u1f3e"+
    "\0\u1f94\0\u1fea\0\u2040\0\u2096\0\u1de6\0\u0866\0\u20ec\0\u2142"+
    "\0\u2198\0\u21ee\0\u2244\0\u229a\0\u22f0\0\u2346\0\u0866\0\u239c"+
    "\0\u23f2\0\u2448\0\u249e\0\u24f4\0\u249e\0\u0866\0\u254a\0\u25a0"+
    "\0\u25f6\0\u0866\0\u0866\0\u264c\0\u26a2\0\u0866\0\u26f8\0\u0866"+
    "\0\u0866\0\u274e\0\u0866\0\u27a4\0\u27fa\0\u2850\0\u28a6\0\u28fc"+
    "\0\u0866\0\u2952\0\u29a8\0\u29fe\0\u2a54\0\u0866\0\u2aaa\0\u06b8"+
    "\0\u0866\0\u2b00\0\u2b56\0\u2bac\0\u2c02\0\u2c58\0\u2cae\0\u2d04"+
    "\0\u2d5a\0\u2db0\0\u2e06\0\u2e5c\0\u2eb2\0\u2f08\0\u2f5e\0\u2fb4"+
    "\0\u300a\0\u3060\0\u30b6\0\u310c\0\u3162\0\u31b8\0\u320e\0\u0866"+
    "\0\u3264\0\u32ba\0\u3310\0\u3366\0\u0bc2\0\u33bc\0\u3412\0\u3468"+
    "\0\u34be\0\u1830\0\u3514\0\u0cc4\0\u356a\0\u0866\0\u35c0\0\u3616"+
    "\0\u366c\0\u36c2\0\u3718\0\u376e\0\u0866\0\u37c4\0\u381a\0\u3870"+
    "\0\u0bc2\0\u38c6\0\u391c\0\u3972\0\u39c8\0\u0bc2\0\u3a1e\0\u3a74"+
    "\0\u3aca\0\u3b20\0\u0bc2\0\u3b76\0\u0bc2\0\u3bcc\0\u3c22\0\u3c78"+
    "\0\u3cce\0\u3d24\0\u3d7a\0\u3dd0\0\u3e26\0\u3e7c\0\u3ed2\0\u3f28"+
    "\0\u3f7e\0\u3fd4\0\u402a\0\u4080\0\u40d6\0\u412c\0\u4182\0\u41d8"+
    "\0\u422e\0\u4284\0\u42da\0\u4330\0\u4386\0\u43dc\0\u4432\0\u4488"+
    "\0\u44de\0\u4534\0\u458a\0\u45e0\0\u4636\0\u468c\0\u1886\0\u46e2"+
    "\0\u4738\0\u478e\0\u47e4\0\u483a\0\u4890\0\u48e6\0\u0866\0\u493c"+
    "\0\u4992\0\u0866\0\u49e8\0\u1b8c\0\u4a3e\0\u4a94\0\u4aea\0\u49e8"+
    "\0\u0866\0\u0866\0\u0866\0\u4a3e\0\u4b40\0\u1ce4\0\u4b96\0\u4bec"+
    "\0\u4b40\0\u4b96\0\u0866\0\u4c42\0\u0866\0\u4c98\0\u4cee\0\u4d44"+
    "\0\u4d9a\0\u4df0\0\u0866\0\u2142\0\u0866\0\u21ee\0\u229a\0\u2244"+
    "\0\u4e46\0\u4e9c\0\u4ef2\0\u239c\0\u0866\0\u23f2\0\u0866\0\u24f4"+
    "\0\u0866\0\u4f48\0\u264c\0\u4f9e\0\u0866\0\u4ff4\0\u504a\0\u50a0"+
    "\0\u0866\0\u50f6\0\u0866\0\u0866\0\u514c\0\u51a2\0\u51f8\0\u524e"+
    "\0\u52a4\0\u2c02\0\u52fa\0\u0866\0\u5350\0\u53a6\0\u53fc\0\u0866"+
    "\0\u5452\0\u54a8\0\u54fe\0\u5554\0\u55aa\0\u5600\0\u5656\0\u56ac"+
    "\0\u5702\0\u5758\0\u57ae\0\u5804\0\u585a\0\u58b0\0\u5906\0\u595c"+
    "\0\u59b2\0\u5a08\0\u5a5e\0\u5ab4\0\u5b0a\0\u5b60\0\u5bb6\0\u5c0c"+
    "\0\u5c62\0\u5cb8\0\u5d0e\0\u5d64\0\u5dba\0\u5e10\0\u0866\0\u5e66"+
    "\0\u5ebc\0\u5f12\0\u5f68\0\u5fbe\0\u0bc2\0\u6014\0\u606a\0\u60c0"+
    "\0\u6116\0\u0bc2\0\u616c\0\u61c2\0\u6218\0\u616c\0\u626e\0\u62c4"+
    "\0\u631a\0\u6370\0\u63c6\0\u641c\0\u0bc2\0\u6472\0\u64c8\0\u651e"+
    "\0\u6574\0\u65ca\0\u6620\0\u6676\0\u66cc\0\u6722\0\u6778\0\u67ce"+
    "\0\u0bc2\0\u6824\0\u687a\0\u68d0\0\u6926\0\u697c\0\u69d2\0\u6a28"+
    "\0\u6a7e\0\u6ad4\0\u6b2a\0\u6b80\0\u6bd6\0\u6c2c\0\u6c82\0\u0bc2"+
    "\0\u6cd8\0\u6d2e\0\u6d84\0\u6dda\0\u6e30\0\u6e86\0\u6edc\0\u6f32"+
    "\0\u6f88\0\u6fde\0\u7034\0\u708a\0\u0866\0\u1ae0\0\u1c38\0\u0866"+
    "\0\u70e0\0\u7136\0\u0866\0\u718c\0\u0866\0\u0866\0\u0866\0\u0866"+
    "\0\u0866\0\u71e2\0\u7238\0\u728e\0\u72e4\0\u733a\0\u7390\0\u73e6"+
    "\0\u743c\0\u7492\0\u74e8\0\u753e\0\u7594\0\u75ea\0\u7640\0\u7696"+
    "\0\u76ec\0\u7742\0\u7798\0\u0bc2\0\u77ee\0\u7844\0\u789a\0\u78f0"+
    "\0\u7946\0\u799c\0\u79f2\0\u7a48\0\u0bc2\0\u0bc2\0\u7a9e\0\u7af4"+
    "\0\u7b4a\0\u7ba0\0\u7bf6\0\u7c4c\0\u7ca2\0\u7cf8\0\u7d4e\0\u7da4"+
    "\0\u5e10\0\u7dfa\0\u7e50\0\u7ea6\0\u7efc\0\u7f52\0\u7fa8\0\u0bc2"+
    "\0\u7ffe\0\u8054\0\u80aa\0\u8100\0\u8156\0\u81ac\0\u8202\0\u8258"+
    "\0\u82ae\0\u8304\0\u0bc2\0\u835a\0\u83b0\0\u0bc2\0\u8406\0\u0bc2"+
    "\0\u845c\0\u84b2\0\u8508\0\u0bc2\0\u855e\0\u0bc2\0\u0bc2\0\u85b4"+
    "\0\u860a\0\u8660\0\u86b6\0\u0bc2\0\u870c\0\u8762\0\u87b8\0\u880e"+
    "\0\u8864\0\u88ba\0\u8910\0\u8966\0\u89bc\0\u8a12\0\u8a68\0\u8abe"+
    "\0\u8b14\0\u8b6a\0\u8bc0\0\u8c16\0\u8c6c\0\u8cc2\0\u8d18\0\u8d6e"+
    "\0\u8dc4\0\u8e1a\0\u0866\0\u8e70\0\u0866\0\u8ec6\0\u8f1c\0\u8f72"+
    "\0\u0866\0\u8fc8\0\u901e\0\u9074\0\u90ca\0\u9120\0\u9176\0\u91cc"+
    "\0\u9222\0\u9278\0\u92ce\0\u9324\0\u937a\0\u93d0\0\u0bc2\0\u9426"+
    "\0\u947c\0\u94d2\0\u9528\0\u0bc2\0\u957e\0\u0bc2\0\u95d4\0\u962a"+
    "\0\u0bc2\0\u0866\0\u9680\0\u96d6\0\u972c\0\u9782\0\u97d8\0\u982e"+
    "\0\u9884\0\u98da\0\u0bc2\0\u9930\0\u9986\0\u99dc\0\u9a32\0\u9a88"+
    "\0\u9ade\0\u9b34\0\u9b8a\0\u0bc2\0\u9be0\0\u0bc2\0\u0bc2\0\u0bc2"+
    "\0\u0bc2\0\u9c36\0\u9c8c\0\u9ce2\0\u9d38\0\u9d8e\0\u9de4\0\u0bc2"+
    "\0\u0bc2\0\u9e3a\0\u0bc2\0\u0bc2\0\u0bc2\0\u0bc2\0\u9e90\0\u0bc2"+
    "\0\u9ee6\0\u9f3c\0\u9f92\0\u0bc2\0\u9fe8\0\ua03e\0\ua094\0\ua0ea"+
    "\0\ua140\0\ua196\0\ua1ec\0\ua242\0\u0866\0\ua298\0\ua2ee\0\u0bc2"+
    "\0\ua344\0\ua39a\0\ua3f0\0\ua446\0\ua49c\0\ua4f2\0\ua548\0\ua59e"+
    "\0\ua5f4\0\ua64a\0\ua6a0\0\ua6f6\0\ua74c\0\ua7a2\0\ua7f8\0\ua84e"+
    "\0\ua8a4\0\ua8fa\0\ua950\0\ua9a6\0\u0866\0\ua9fc\0\uaa52\0\u0bc2"+
    "\0\uaaa8\0\uaafe\0\uab54\0\uabaa\0\uac00\0\uac56\0\uacac\0\u0bc2"+
    "\0\uad02\0\uad58\0\uadae\0\uae04\0\uae5a\0\uaeb0\0\uaf06\0\uaf5c"+
    "\0\uafb2\0\ub008\0\ub05e\0\u0bc2\0\u0bc2\0\u0bc2\0\u0bc2\0\u0bc2"+
    "\0\ub0b4\0\ub10a\0\ub160\0\ub1b6\0\u0bc2\0\u0bc2\0\ub20c\0\ub262"+
    "\0\ub2b8\0\ub30e\0\ub364\0\ub3ba\0\u0866\0\ub410\0\ub466\0\ub4bc"+
    "\0\ub512\0\u0bc2\0\ub568\0\ub5be\0\ub614\0\ub66a\0\ub6c0\0\u0bc2"+
    "\0\ub716\0\ub76c\0\ub7c2\0\ub818\0\ub86e\0\ub8c4\0\u0bc2\0\u0bc2"+
    "\0\ub91a\0\u0866\0\ub970\0\ub9c6\0\uba1c\0\uba72\0\ubac8\0\ubb1e"+
    "\0\u0bc2\0\u0bc2\0\ubb74\0\ubbca\0\ubc20\0\ubc76\0\ubccc\0\ubd22"+
    "\0\ubd78\0\ubdce\0\ube24\0\u0bc2\0\ube7a\0\ubed0\0\ubf26\0\ubf7c"+
    "\0\ubfd2\0\u0bc2\0\uc028\0\uc07e\0\uc0d4\0\u0bc2\0\uc12a\0\uc180"+
    "\0\uc1d6\0\uc22c\0\uc282\0\uc2d8\0\u0bc2\0\uc32e\0\uc384\0\u0bc2"+
    "\0\uc3da\0\u0bc2\0\uc430\0\u0bc2\0\uc486\0\uc4dc\0\uc532\0\uc588"+
    "\0\uc5de\0\u0bc2\0\uc634\0\u0bc2\0\u0bc2\0\uc68a\0\uc6e0\0\uc736"+
    "\0\uc78c\0\uc7e2\0\uc838\0\u0bc2\0\u0bc2\0\uc88e\0\uc8e4\0\uc93a"+
    "\0\uc990\0\u0bc2\0\uc9e6\0\uca3c\0\uca92\0\ucae8\0\u0bc2\0\u0bc2"+
    "\0\u0bc2\0\ucb3e\0\ucb94\0\ucbea\0\u0bc2\0\ucc40\0\ucc96\0\uccec"+
    "\0\ucd42\0\ucd98\0\u0bc2\0\ucdee\0\u0bc2\0\u0bc2\0\uce44\0\uce9a"+
    "\0\ucef0\0\u0bc2\0\ucf46\0\u0bc2\0\u0866\0\uca92\0\ucf9c\0\ucff2"+
    "\0\ud048\0\ud09e\0\ud0f4\0\ud14a\0\ud1a0\0\ud1f6\0\ud24c\0\u0bc2"+
    "\0\ud2a2\0\ud2f8\0\u0866\0\ud34e\0\u0bc2\0\u0bc2\0\ud3a4\0\u0bc2"+
    "\0\ud3fa\0\ud450\0\ud4a6\0\ud4fc\0\ud552\0\u0bc2\0\ud5a8\0\ud5fe"+
    "\0\ud654\0\ud6aa\0\ud700\0\ud756\0\ud7ac\0\ud802\0\ud858\0\ud8ae"+
    "\0\ud904\0\ud95a\0\u0866\0\ud9b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[820];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\35\30\1\31\70\30\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\33\3\44\1\32"+
    "\2\45\1\46\1\47\1\45\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\74\1\105\1\73\1\106\1\107\1\110\1\76"+
    "\1\36\1\44\1\111\1\112\1\41\1\46\1\113\1\114"+
    "\1\111\1\115\1\113\1\101\1\103\1\106\1\116\1\44"+
    "\1\117\1\120\1\121\1\122\1\46\1\123\1\124\1\125"+
    "\1\44\1\126\1\127\2\44\1\130\24\131\1\132\1\133"+
    "\1\134\1\131\1\135\75\131\24\136\1\137\1\136\1\140"+
    "\1\133\1\141\75\136\5\142\1\143\22\142\1\144\14\142"+
    "\1\145\62\142\1\146\1\142\1\146\2\142\3\146\1\142"+
    "\3\146\1\142\2\45\2\142\1\45\22\142\27\146\1\142"+
    "\12\146\5\142\4\146\1\147\3\146\1\142\17\150\1\151"+
    "\3\150\1\152\1\153\1\150\1\154\1\150\1\155\75\150"+
    "\2\156\1\157\1\156\1\157\2\156\3\157\1\156\3\157"+
    "\2\156\1\160\25\156\27\157\1\156\12\157\5\156\4\157"+
    "\1\156\3\157\1\156\2\32\1\161\1\32\1\161\2\32"+
    "\3\161\1\32\3\161\1\32\1\0\1\162\25\32\27\161"+
    "\1\32\12\161\5\32\4\161\1\32\3\161\1\32\2\163"+
    "\1\164\1\163\1\164\2\163\3\164\2\163\2\164\1\163"+
    "\1\165\3\163\1\166\22\163\27\164\1\163\12\164\5\163"+
    "\4\164\1\163\3\164\1\163\2\167\1\170\1\167\1\170"+
    "\2\167\3\170\1\167\3\170\2\167\1\171\25\167\27\170"+
    "\1\167\12\170\5\167\4\170\1\167\3\170\1\167\2\32"+
    "\1\172\1\32\1\172\2\32\3\172\1\32\3\172\1\32"+
    "\1\173\1\174\2\32\1\175\22\32\27\172\1\32\12\172"+
    "\5\32\4\172\1\32\3\172\1\32\2\176\1\177\1\176"+
    "\1\177\1\200\1\176\3\177\1\176\3\177\1\176\2\45"+
    "\2\176\1\45\21\176\1\201\27\177\1\176\12\177\5\176"+
    "\4\177\1\176\3\177\3\176\1\177\1\176\1\177\2\176"+
    "\3\177\1\176\3\177\1\176\2\45\2\176\1\45\22\176"+
    "\27\177\1\176\12\177\1\176\1\202\3\176\4\177\1\176"+
    "\3\177\1\176\2\203\1\204\1\203\1\204\2\203\3\204"+
    "\1\203\3\204\1\203\2\45\2\203\1\45\22\203\27\204"+
    "\1\203\12\204\5\203\4\204\1\203\3\204\1\203\1\32"+
    "\1\205\1\44\1\206\1\44\1\32\1\207\3\44\1\205"+
    "\3\44\1\32\2\210\1\211\1\206\1\210\1\212\1\206"+
    "\1\210\2\206\6\32\1\206\5\32\1\206\27\44\1\206"+
    "\12\44\1\210\2\206\1\210\1\213\4\44\1\206\3\44"+
    "\1\206\36\214\1\215\67\214\36\216\1\217\67\216\17\220"+
    "\1\221\3\220\1\222\11\220\1\223\2\220\1\224\4\220"+
    "\1\225\60\220\17\226\2\227\2\226\1\227\102\226\126\230"+
    "\10\231\1\232\6\231\2\45\2\231\1\45\25\231\1\233"+
    "\2\231\1\233\1\234\1\232\24\231\1\234\24\231\1\235"+
    "\1\231\1\235\2\231\3\235\1\231\3\235\1\231\2\45"+
    "\2\231\1\45\22\231\14\235\1\236\12\235\1\231\1\237"+
    "\1\236\2\235\1\237\5\235\5\231\4\235\1\231\3\235"+
    "\1\231\35\30\1\240\125\30\1\0\2\30\1\241\4\30"+
    "\1\242\5\30\1\0\1\30\1\0\4\30\1\243\1\0"+
    "\6\30\1\0\2\30\2\0\12\30\1\0\14\30\127\0"+
    "\1\33\1\244\1\245\1\246\1\0\1\33\3\0\1\33"+
    "\55\0\1\246\36\0\1\44\1\247\1\0\1\44\1\0"+
    "\11\44\27\0\27\44\1\0\12\44\5\0\4\44\1\0"+
    "\3\44\2\0\1\250\1\0\1\251\2\0\1\250\3\0"+
    "\1\250\16\0\1\70\75\0\2\44\1\0\1\44\1\0"+
    "\1\44\1\252\7\44\27\0\3\44\1\253\2\44\1\253"+
    "\2\44\1\254\6\44\1\255\3\44\1\256\1\257\1\252"+
    "\1\0\2\44\1\256\3\44\1\254\3\44\5\0\1\44"+
    "\1\257\2\44\1\0\1\255\2\44\6\0\1\70\23\0"+
    "\1\70\1\260\74\0\1\33\1\244\1\245\1\246\1\0"+
    "\1\33\1\261\1\0\1\262\1\33\52\0\1\262\2\0"+
    "\1\246\3\0\1\261\32\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\1\72\11\44\1\72\14\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\1\263\1\44\1\264\1\265\1\44"+
    "\1\266\1\265\3\44\1\263\1\264\13\44\1\0\3\44"+
    "\1\266\4\44\1\267\1\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\6\0\1\51"+
    "\7\0\1\270\10\0\1\44\1\271\13\44\1\271\11\44"+
    "\1\0\12\44\1\272\4\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\27\44\1\0"+
    "\12\44\5\0\4\44\1\0\3\44\20\0\2\45\2\0"+
    "\1\45\104\0\1\273\1\0\1\273\2\0\3\273\1\0"+
    "\3\273\30\0\27\273\1\0\12\273\5\0\4\273\1\0"+
    "\3\273\1\0\24\274\1\275\1\276\1\277\1\274\1\300"+
    "\75\274\31\0\1\67\1\70\124\0\1\70\1\67\124\0"+
    "\1\70\1\0\1\70\123\0\1\67\125\0\1\301\1\70"+
    "\2\0\1\302\1\0\1\303\117\0\1\70\4\0\1\67"+
    "\120\0\1\70\4\0\1\304\1\305\117\0\1\70\1\306"+
    "\124\0\1\70\7\0\1\70\115\0\1\70\10\0\1\70"+
    "\114\0\1\70\101\0\1\307\24\0\1\310\12\0\1\67"+
    "\61\0\2\44\1\0\1\44\1\0\11\44\27\0\1\44"+
    "\1\311\13\44\1\311\11\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\312\1\0\11\44"+
    "\27\0\22\44\1\312\4\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\3\44"+
    "\1\313\5\44\27\0\1\44\1\314\1\44\1\315\2\44"+
    "\1\315\5\44\1\316\1\314\1\44\1\313\7\44\1\0"+
    "\1\44\1\316\10\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\317\1\0\11\44\27\0\2\44\1\320"+
    "\10\44\1\320\6\44\1\317\4\44\1\0\10\44\1\321"+
    "\1\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\322\1\0\11\44\27\0\1\323\4\44\1\324\4\44"+
    "\1\323\7\44\1\322\4\44\1\0\3\44\1\324\6\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\2\44\1\325\6\44\27\0\3\44\1\326\2\44"+
    "\1\327\1\330\1\325\3\44\1\331\10\44\1\332\1\44"+
    "\1\0\1\44\1\331\10\44\5\0\1\44\1\332\2\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\317\1\0\11\44"+
    "\27\0\2\44\1\320\10\44\1\320\6\44\1\333\4\44"+
    "\1\0\10\44\1\321\1\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\1\44"+
    "\1\334\13\44\1\334\11\44\1\0\11\44\1\335\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\1\263\1\44\1\264\1\265\1\44\1\266"+
    "\1\265\2\44\1\336\1\263\1\264\13\44\1\0\3\44"+
    "\1\266\4\44\1\267\1\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\5\44"+
    "\1\337\21\44\1\0\3\44\1\337\6\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\1\44\1\311\13\44\1\311\1\44\1\340\7\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\341\1\0\11\44\27\0\7\44\1\342\12\44"+
    "\1\341\4\44\1\0\5\44\1\343\4\44\5\0\2\44"+
    "\1\344\1\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\1\345\10\44\1\346\1\345\14\44"+
    "\1\0\6\44\1\346\3\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\6\0\1\51"+
    "\7\0\1\270\10\0\1\44\1\271\10\44\1\347\2\44"+
    "\1\271\11\44\1\0\12\44\1\272\4\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\2\44\1\350\7\44\1\351\1\350\13\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\1\352\1\44\1\353\6\44\1\354"+
    "\1\352\1\353\13\44\1\0\6\44\1\354\3\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\2\44\1\355\2\44\1\356\5\44\1\355"+
    "\13\44\1\0\12\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\1\44\1\357"+
    "\1\360\10\44\1\360\1\44\1\357\11\44\1\0\10\44"+
    "\1\361\1\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\341\1\0\11\44\27\0\7\44\1\343\12\44"+
    "\1\341\4\44\1\0\5\44\1\343\4\44\5\0\2\44"+
    "\1\344\1\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\2\44\1\325\6\44\27\0\3\44\1\326\2\44"+
    "\1\326\1\44\1\325\3\44\1\331\10\44\1\332\1\44"+
    "\1\0\1\44\1\331\10\44\5\0\1\44\1\332\2\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\3\44\1\362\2\44\1\362\5\44\1\363\12\44"+
    "\1\0\1\44\1\363\10\44\5\0\4\44\1\0\3\44"+
    "\1\0\26\272\1\364\61\272\1\276\15\272\10\0\1\365"+
    "\1\366\6\0\1\367\25\0\1\370\1\371\1\372\1\0"+
    "\1\373\1\374\2\0\1\365\1\0\1\370\1\372\1\375"+
    "\1\371\1\0\1\366\1\0\1\373\7\0\1\375\1\0"+
    "\1\374\4\0\1\376\133\0\1\377\12\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\5\44\1\u0100\21\44\1\0"+
    "\3\44\1\u0100\6\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\2\44\1\355"+
    "\10\44\1\355\13\44\1\0\12\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\27\44\1\0\11\44\1\u0101\5\0\4\44\1\0\3\44"+
    "\122\0\1\u0102\5\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\2\44\1\350\10\44\1\350\13\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\1\0\24\131\1\u0103\1\0"+
    "\1\u0104\1\131\1\u0105\77\131\1\u0106\1\131\1\u0106\2\131"+
    "\3\u0106\1\131\1\u0107\2\u0106\6\131\1\u0108\1\u0109\1\u0104"+
    "\1\131\1\u010a\15\131\27\u0106\1\131\12\u0106\5\131\4\u0106"+
    "\1\131\3\u0106\153\131\1\u010b\1\u0109\1\u0104\1\131\1\u010c"+
    "\75\131\24\136\1\u010d\1\136\1\u010e\1\0\1\u010f\77\136"+
    "\1\u0106\1\136\1\u0106\2\136\3\u0106\1\136\1\u0110\2\u0106"+
    "\6\136\1\u0111\1\136\1\u010e\1\u0109\1\u010a\15\136\27\u0106"+
    "\1\136\12\u0106\5\136\4\u0106\1\136\3\u0106\153\136\1\u010b"+
    "\1\136\1\u010e\1\u0109\1\u0112\75\136\32\0\1\u0113\117\0"+
    "\1\u010b\106\0\1\u0114\121\0\2\146\1\0\1\146\1\0"+
    "\11\146\27\0\27\146\1\0\12\146\5\0\4\146\1\0"+
    "\3\146\122\0\1\u0115\4\0\17\150\1\0\3\150\1\0"+
    "\1\u0116\1\150\1\u0117\1\150\1\u0118\77\150\1\u0119\1\150"+
    "\1\u0119\2\150\3\u0119\1\150\3\u0119\1\150\1\0\1\151"+
    "\2\150\1\0\1\u0116\1\150\1\u0117\1\150\1\u0118\15\150"+
    "\27\u0119\1\150\12\u0119\5\150\4\u0119\1\150\3\u0119\3\150"+
    "\1\u0119\1\150\1\u0119\2\150\3\u0119\1\150\3\u0119\1\150"+
    "\1\u011a\1\151\2\150\1\0\1\u0116\1\150\1\u0117\1\150"+
    "\1\u0118\15\150\27\u0119\1\150\12\u0119\5\150\4\u0119\1\150"+
    "\3\u0119\1\150\2\0\1\u0106\1\0\1\u0106\2\0\3\u0106"+
    "\1\0\3\u0106\12\0\1\u010a\15\0\27\u0106\1\0\12\u0106"+
    "\5\0\4\u0106\1\0\3\u0106\1\0\126\150\17\157\1\u011b"+
    "\3\157\1\u011b\102\157\2\0\1\157\1\0\1\157\2\0"+
    "\3\157\1\0\3\157\2\0\1\u011c\25\0\27\157\1\0"+
    "\12\157\5\0\4\157\1\0\3\157\2\0\2\161\1\0"+
    "\1\161\1\0\11\161\3\0\1\u011d\23\0\27\161\1\0"+
    "\12\161\5\0\4\161\1\0\3\161\3\0\1\161\1\0"+
    "\1\161\2\0\3\161\1\0\3\161\2\0\1\u011e\25\0"+
    "\27\161\1\0\12\161\5\0\4\161\1\0\3\161\1\0"+
    "\17\163\1\0\3\163\1\0\103\163\2\u011f\1\163\1\u011f"+
    "\1\163\5\u011f\1\163\2\u011f\1\163\1\0\2\163\1\u0120"+
    "\1\0\22\163\27\u011f\1\163\12\u011f\5\163\4\u011f\1\163"+
    "\3\u011f\3\163\1\u0121\1\163\1\u0121\2\163\3\u0121\1\163"+
    "\3\u0121\1\163\1\u0122\1\u0123\2\163\1\u0122\22\163\27\u0121"+
    "\1\163\12\u0121\5\163\4\u0121\1\163\3\u0121\3\163\1\u0121"+
    "\1\163\1\u0121\2\163\3\u0121\1\163\3\u0121\1\163\1\165"+
    "\1\u0123\2\163\1\u0122\22\163\27\u0121\1\163\12\u0121\5\163"+
    "\4\u0121\1\163\3\u0121\1\163\17\u0124\1\u0125\3\u0124\1\u0125"+
    "\102\u0124\2\0\1\u0124\1\0\1\u0124\2\0\3\u0124\1\0"+
    "\3\u0124\2\0\1\u0126\25\0\27\u0124\1\0\12\u0124\5\0"+
    "\4\u0124\1\0\3\u0124\2\0\2\172\1\0\1\172\1\0"+
    "\11\172\3\0\1\u0127\23\0\27\172\1\0\12\172\5\0"+
    "\4\172\1\0\3\172\3\0\1\172\1\0\1\172\2\0"+
    "\3\172\1\0\3\172\1\0\1\173\1\u0128\2\0\1\173"+
    "\22\0\27\172\1\0\12\172\5\0\4\172\1\0\3\172"+
    "\3\0\1\172\1\0\1\172\2\0\3\172\1\0\3\172"+
    "\2\0\1\u0128\25\0\27\172\1\0\12\172\5\0\4\172"+
    "\1\0\3\172\2\0\2\177\1\0\1\177\1\0\11\177"+
    "\27\0\27\177\1\0\12\177\5\0\4\177\1\0\3\177"+
    "\33\0\1\u0129\100\0\1\u012a\121\0\2\u012b\1\0\1\u012b"+
    "\1\0\11\u012b\2\u012c\2\0\1\u012c\5\0\1\u012d\14\0"+
    "\27\u012b\1\0\12\u012b\5\0\4\u012b\1\0\3\u012b\2\0"+
    "\1\205\1\u012e\3\0\1\205\3\0\1\205\114\0\1\205"+
    "\1\u012e\3\0\1\205\1\261\2\0\1\205\61\0\1\261"+
    "\33\0\1\u012f\1\0\1\u012f\2\0\3\u012f\1\0\3\u012f"+
    "\30\0\27\u012f\1\0\12\u012f\5\0\4\u012f\1\0\3\u012f"+
    "\1\0\36\214\1\u0130\125\214\1\u0130\1\u0131\66\214\36\216"+
    "\1\u0132\125\216\1\u0132\1\u0133\66\216\17\220\1\221\3\220"+
    "\1\221\14\220\1\221\4\220\1\221\60\220\17\0\1\u0134"+
    "\106\0\17\220\1\221\3\220\1\221\13\220\1\u0135\1\221"+
    "\4\220\1\221\60\220\32\0\1\u0136\125\0\1\310\112\0"+
    "\2\227\2\0\1\227\152\0\1\u0137\10\0\1\u0137\152\0"+
    "\1\u0138\66\0\1\u0139\13\0\1\u0139\43\0\2\u013a\1\0"+
    "\1\u013a\1\0\11\u013a\2\u013b\2\0\1\u013b\22\0\27\u013a"+
    "\1\0\12\u013a\5\0\4\u013a\1\u013c\3\u013a\2\0\2\u013a"+
    "\1\0\1\u013d\1\0\11\u013a\2\u013b\2\0\1\u013b\22\0"+
    "\7\u013a\1\u013e\12\u013a\1\u013d\4\u013a\1\0\5\u013a\1\u013e"+
    "\4\u013a\5\0\4\u013a\1\u013c\3\u013a\2\0\2\u013a\1\0"+
    "\1\u013a\1\0\11\u013a\2\u013b\2\0\1\u013b\22\0\2\u013a"+
    "\1\u013f\10\u013a\1\u013f\13\u013a\1\0\12\u013a\5\0\4\u013a"+
    "\1\u013c\3\u013a\1\0\35\30\1\0\2\30\1\0\4\30"+
    "\1\0\5\30\1\0\1\30\1\0\4\30\2\0\6\30"+
    "\1\0\2\30\2\0\12\30\1\0\14\30\31\0\1\u0140"+
    "\125\0\1\u0140\44\0\1\u0141\3\0\1\u0141\115\0\1\u0142"+
    "\5\0\1\u0142\26\0\1\33\4\0\1\33\3\0\1\33"+
    "\114\0\1\250\2\0\1\246\1\0\1\250\3\0\1\250"+
    "\55\0\1\246\36\0\1\205\3\0\1\u012e\1\205\3\0"+
    "\1\205\20\0\1\u012e\73\0\2\44\1\0\1\44\1\0"+
    "\2\44\1\u0143\6\44\27\0\3\44\1\u0144\1\u0145\1\44"+
    "\1\u0144\1\u0146\1\u0143\1\u0147\7\44\1\u0145\2\44\1\u0148"+
    "\1\u0149\1\44\1\0\2\44\1\u0148\2\44\1\u0146\1\u0147"+
    "\2\44\1\u014a\5\0\1\44\1\u0149\2\44\1\0\3\44"+
    "\2\0\1\250\1\u014b\1\0\1\246\1\0\1\250\3\0"+
    "\1\250\55\0\1\246\40\0\1\70\123\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\5\44\1\u014c\1\44\1\u014d"+
    "\17\44\1\0\3\44\1\u014c\1\44\1\u014d\4\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\4\44\1\u014e\14\44\1\u014e\5\44\1\0"+
    "\10\44\1\u014f\1\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\14\44\1\u0150"+
    "\12\44\1\0\1\44\1\u0150\10\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\2\44\1\u0151\10\44\1\u0151\13\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\27\44\1\0\11\44\1\u0152\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\27\44\1\0\1\u0153\3\44\1\u0153\5\44\5\0"+
    "\4\44\1\0\3\44\2\0\1\u0154\2\0\1\u0154\1\0"+
    "\1\u0154\1\0\3\u0154\35\0\1\u0154\1\0\1\u0154\3\0"+
    "\1\u0154\2\0\1\u0154\3\0\1\u0154\1\0\2\u0154\1\0"+
    "\1\u0154\5\0\1\u0154\33\0\1\u0155\3\0\1\u0155\114\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\1\44\1\u0156"+
    "\13\44\1\u0156\11\44\1\0\12\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\11\44\1\u0157\15\44\1\0\6\44\1\u0157\3\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\3\44\1\u0158\2\44\1\u0158\20\44\1\0"+
    "\12\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\3\44\1\u0159\2\44\1\u0159"+
    "\20\44\1\0\12\44\5\0\4\44\1\0\3\44\36\0"+
    "\1\u015a\71\0\2\44\1\0\1\u015b\1\0\11\44\27\0"+
    "\22\44\1\u015b\4\44\1\0\12\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\273\1\0\1\273\1\0\11\273\27\0"+
    "\27\273\1\0\12\273\5\0\4\273\1\0\3\273\1\0"+
    "\2\274\1\0\1\274\1\0\2\274\3\0\2\274\2\0"+
    "\6\274\1\275\1\276\1\277\1\274\1\0\15\274\27\0"+
    "\1\274\12\0\5\274\4\0\1\274\3\0\153\274\1\0"+
    "\1\276\1\277\1\274\1\300\75\274\32\0\1\70\124\0"+
    "\1\70\3\0\1\u015c\152\0\1\u015d\14\0\1\u015d\64\0"+
    "\1\u015e\106\0\2\306\2\0\1\306\134\0\1\u015f\112\0"+
    "\2\310\2\0\1\310\103\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\2\44\1\u0160\4\44\1\u0161\3\44\1\u0160"+
    "\13\44\1\0\5\44\1\u0161\4\44\5\0\4\44\1\0"+
    "\2\44\1\u0162\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\14\44\1\u0163\12\44\1\0\1\44\1\u0163\10\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\1\44\1\u0164\13\44\1\u0164\11\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\4\44\1\311\14\44"+
    "\1\311\5\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\27\44"+
    "\1\0\12\44\5\0\2\44\1\u0165\1\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\25\44"+
    "\1\u0166\1\44\1\0\12\44\5\0\1\44\1\u0166\2\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\11\44\1\u0167\15\44\1\0\6\44\1\u0167\3\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\2\44\1\u0168\6\44\27\0\10\44\1\u0168\13\44"+
    "\1\u0169\2\44\1\0\2\44\1\u0169\7\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\u016a\1\0\11\44"+
    "\27\0\22\44\1\u016a\4\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\7\44\1\u016b\4\44\1\u016c\7\44\1\u016d\2\44"+
    "\1\0\1\44\1\u016c\1\u016d\2\44\1\u016b\4\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\7\44\1\u016e\4\44\1\u016c\7\44\1\u016d"+
    "\2\44\1\0\1\44\1\u016c\1\u016d\2\44\1\u016b\4\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\22\44\1\u016f\4\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\14\44\1\u0170\12\44\1\0\1\44"+
    "\1\u0170\10\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\27\44\1\0\1\u0171"+
    "\3\44\1\u0171\5\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\20\44\1\u0172"+
    "\6\44\1\0\12\44\5\0\2\44\1\u0165\1\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\2\44\1\u0173\10\44\1\u0173\13\44\1\0\10\44\1\u0174"+
    "\1\44\5\0\1\u0175\3\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\1\44\1\u0176\13\44"+
    "\1\u0176\11\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\12\44"+
    "\1\u0177\14\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\14\44"+
    "\1\u0178\12\44\1\0\1\44\1\u0178\10\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\23\44\1\u0179\3\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\11\44\1\u017a\15\44\1\0\6\44\1\u017a\3\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\2\44\1\u017b\10\44\1\u017b\1\44"+
    "\1\u017c\11\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\2\44"+
    "\1\u017b\10\44\1\u017b\13\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\5\44\1\u017d\21\44\1\0\3\44\1\u017d\6\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\7\44\1\u017e\17\44\1\0\5\44"+
    "\1\u017e\4\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\1\u017f\11\44\1\u017f"+
    "\14\44\1\0\12\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\12\44\1\u0180"+
    "\14\44\1\0\12\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\1\44\1\u0181"+
    "\13\44\1\u0181\11\44\1\0\12\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\5\44\1\u0182\21\44\1\0\12\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\3\44\1\u0183\2\44\1\u0183\20\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\7\44\1\u0184\1\44\1\u0185\2\44\1\u0186"+
    "\12\44\1\0\1\44\1\u0186\3\44\1\u0184\1\u0185\3\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\1\u0187\1\44\1\u0188\7\44\1\u0187"+
    "\1\u0188\13\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\7\44"+
    "\1\u0189\17\44\1\0\5\44\1\u0189\4\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\26\44\1\u018a\1\0\12\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\1\u018b\4\44\1\u018c\4\44\1\u018b\14\44\1\0\3\44"+
    "\1\u018c\6\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\1\44\1\u018d\13\44"+
    "\1\u018d\11\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\3\44\1\u018e\5\44"+
    "\27\0\17\44\1\u018e\7\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\14\44\1\u018f\12\44\1\0\1\44\1\u018f\10\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\u0190"+
    "\1\0\11\44\27\0\22\44\1\u0190\4\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\1\0\126\272\57\0\1\u0191"+
    "\24\0\1\u0191\67\0\1\u0192\4\0\1\u0193\4\0\1\u0192"+
    "\20\0\1\u0193\35\0\1\u0194\53\0\1\u0194\44\0\1\u0195"+
    "\63\0\1\u0195\104\0\1\u0196\13\0\1\u0196\110\0\1\u0197"+
    "\11\0\1\u0197\116\0\1\u0198\2\0\1\u0198\126\0\1\u0199"+
    "\25\0\1\u0199\73\0\1\u019a\2\0\1\u019a\52\0\2\44"+
    "\1\0\1\u019b\1\0\11\44\27\0\22\44\1\u019b\4\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\5\44\1\u019c\21\44"+
    "\1\0\3\44\1\u019c\6\44\5\0\4\44\1\0\3\44"+
    "\1\0\2\131\1\0\1\131\1\0\2\131\3\0\2\131"+
    "\2\0\6\131\1\u0108\1\u0109\1\u0104\1\131\1\0\15\131"+
    "\27\0\1\131\12\0\5\131\4\0\1\131\3\0\25\131"+
    "\1\0\1\u0109\1\u0104\1\131\1\u010c\75\131\1\0\2\u0106"+
    "\1\0\1\u0106\1\0\11\u0106\27\0\27\u0106\1\0\12\u0106"+
    "\4\0\1\u019d\4\u0106\1\0\3\u0106\1\0\1\131\2\u0107"+
    "\1\131\1\u0107\1\131\11\u0107\5\131\1\u0103\1\0\1\u0104"+
    "\1\131\1\u0105\15\131\27\u0107\1\131\12\u0107\4\131\1\u019e"+
    "\4\u0107\1\131\3\u0107\1\131\2\136\1\0\1\136\1\0"+
    "\2\136\3\0\2\136\2\0\6\136\1\u0111\1\136\1\u010e"+
    "\1\u0109\1\0\15\136\27\0\1\136\12\0\5\136\4\0"+
    "\1\136\3\0\25\136\1\0\1\136\1\u010e\1\u0109\1\u0112"+
    "\76\136\2\u0110\1\136\1\u0110\1\136\11\u0110\5\136\1\u010d"+
    "\1\136\1\u010e\1\0\1\u010f\15\136\27\u0110\1\136\12\u0110"+
    "\4\136\1\u019f\4\u0110\1\136\3\u0110\1\136\32\0\1\u01a0"+
    "\73\0\2\150\1\u01a1\1\150\1\u01a1\2\150\3\u01a1\2\150"+
    "\2\u01a1\1\150\1\0\3\150\1\0\1\u01a2\1\150\1\u0117"+
    "\1\150\1\u01a3\15\150\27\u01a1\1\150\12\u01a1\5\150\4\u01a1"+
    "\1\150\3\u01a1\20\150\1\0\3\150\1\0\121\150\1\0"+
    "\3\150\1\0\1\u01a3\1\150\1\u0117\1\150\1\u01a4\75\150"+
    "\17\u0119\1\u01a5\3\u0119\1\u01a5\102\u0119\2\0\1\u0119\1\0"+
    "\1\u0119\2\0\3\u0119\1\0\3\u0119\2\0\1\u011a\25\0"+
    "\27\u0119\1\0\12\u0119\5\0\4\u0119\1\0\3\u0119\1\0"+
    "\17\u0121\1\u01a6\3\u0121\1\u01a6\102\u0121\2\163\1\u011f\1\163"+
    "\1\u011f\2\163\3\u011f\2\163\2\u011f\1\163\1\u0122\3\163"+
    "\1\u0122\22\163\27\u011f\1\163\12\u011f\5\163\4\u011f\1\163"+
    "\3\u011f\3\163\1\u0121\1\163\1\u0121\2\163\3\u0121\1\163"+
    "\3\u0121\1\163\1\0\1\u0123\2\163\1\0\22\163\27\u0121"+
    "\1\163\12\u0121\5\163\4\u0121\1\163\3\u0121\1\163\32\0"+
    "\1\u01a7\112\0\2\u012c\2\0\1\u012c\5\0\1\u012d\75\0"+
    "\1\205\4\0\1\205\3\0\1\205\114\0\2\u012f\1\0"+
    "\1\u012f\1\0\11\u012f\27\0\27\u012f\1\0\12\u012f\5\0"+
    "\4\u012f\1\0\3\u012f\1\0\36\214\1\u0130\1\u01a8\66\214"+
    "\36\216\1\u0132\1\u01a9\66\216\17\220\1\221\3\220\1\221"+
    "\14\220\1\221\4\220\1\221\14\220\1\u01aa\14\220\1\u01aa"+
    "\26\220\17\0\2\u0136\2\0\1\u0136\161\0\1\u01ab\24\0"+
    "\1\u01ab\100\0\1\u01ac\24\0\1\u01ac\127\0\1\u01ad\36\0"+
    "\2\u013b\2\0\1\u013b\75\0\1\u013c\5\0\2\u013a\1\0"+
    "\1\u013a\1\0\11\u013a\2\u013b\2\0\1\u013b\22\0\11\u013a"+
    "\1\u01ae\15\u013a\1\0\6\u013a\1\u01ae\3\u013a\5\0\4\u013a"+
    "\1\u013c\3\u013a\2\0\2\u013a\1\0\1\u013a\1\0\11\u013a"+
    "\2\u013b\2\0\1\u013b\22\0\2\u013a\1\u01af\10\u013a\1\u01af"+
    "\13\u013a\1\0\12\u013a\5\0\4\u013a\1\u013c\3\u013a\2\0"+
    "\2\u013a\1\0\1\u013a\1\0\11\u013a\2\u013b\2\0\1\u013b"+
    "\22\0\1\u013a\1\u01b0\13\u013a\1\u01b0\11\u013a\1\0\12\u013a"+
    "\5\0\4\u013a\1\u013c\3\u013a\110\0\1\u01b1\65\0\1\u01b2"+
    "\13\0\1\u01b2\43\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\5\44\1\u01b3\21\44\1\0\3\44\1\u01b3\4\44"+
    "\1\u01b4\1\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\2\44\1\u01b5\10\44"+
    "\1\u01b5\13\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\5\44"+
    "\1\u01b6\21\44\1\0\3\44\1\u01b6\6\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\1\44\1\u01b7\13\44\1\u01b7\11\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\5\44\1\u01b8\21\44\1\0\3\44"+
    "\1\u01b8\6\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\11\44\1\u01b9\15\44"+
    "\1\0\6\44\1\u01b9\3\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\u01ba\1\0\11\44\27\0\22\44"+
    "\1\u01ba\4\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\2\44"+
    "\1\u01bb\10\44\1\u01bb\13\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\1\250\4\0\1\250\3\0\1\250"+
    "\114\0\2\44\1\0\1\44\1\0\11\44\27\0\7\44"+
    "\1\u01bc\17\44\1\0\5\44\1\u01bc\4\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\u01bd\1\0\11\44"+
    "\27\0\22\44\1\u01bd\4\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\2\44"+
    "\1\u01be\6\44\27\0\4\44\1\u01bf\1\u01c0\2\44\1\u01be"+
    "\3\44\1\u01c1\4\44\1\u01bf\5\44\1\0\1\44\1\u01c1"+
    "\1\44\1\u01c0\6\44\5\0\2\44\1\u01c2\1\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\25\44\1\u01c3\1\44\1\0\12\44\5\0\1\44\1\u01c3"+
    "\2\44\1\0\3\44\2\0\2\44\1\0\1\u01c4\1\0"+
    "\11\44\27\0\22\44\1\u01c4\4\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\11\44\1\u01c5\15\44\1\0\6\44\1\u01c5"+
    "\3\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\1\u01c6\11\44\1\u01c6\14\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\7\44\1\u01c7\17\44"+
    "\1\0\5\44\1\u01c7\4\44\5\0\4\44\1\0\3\44"+
    "\2\0\1\u0154\1\261\1\0\1\u0154\1\0\1\u0154\1\0"+
    "\3\u0154\35\0\1\u0154\1\0\1\u0154\3\0\1\u0154\2\0"+
    "\1\u0154\3\0\1\u0154\1\0\2\u0154\1\0\1\u0154\5\0"+
    "\1\u0154\27\0\1\262\3\0\1\u0155\3\0\1\u0155\114\0"+
    "\2\44\1\0\1\u01c8\1\0\11\44\27\0\22\44\1\u01c8"+
    "\4\44\1\0\12\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\14\44\1\u01c9"+
    "\12\44\1\0\1\44\1\u01c9\10\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\2\44\1\u01ca\10\44\1\u01ca\13\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\24\44\1\u01cb\2\44\1\0\2\44\1\u01cb"+
    "\7\44\5\0\4\44\1\0\3\44\36\0\1\u015c\71\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\2\44\1\u01cc"+
    "\10\44\1\u01cc\13\44\1\0\12\44\5\0\4\44\1\0"+
    "\3\44\3\0\1\u01cd\1\0\1\u01cd\2\0\3\u01cd\1\0"+
    "\3\u01cd\2\0\1\u015c\4\0\1\u01ce\20\0\27\u01cd\1\0"+
    "\12\u01cd\1\u01cf\4\0\4\u01cd\1\0\3\u01cd\73\0\1\u01d0"+
    "\5\0\1\u01d0\44\0\2\u01d1\2\0\1\u01d1\103\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\4\44\1\u01d2\14\44"+
    "\1\u01d2\5\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\27\44"+
    "\1\0\10\44\1\u01d3\1\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\27\44"+
    "\1\0\10\44\1\u01d4\1\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\7\44"+
    "\1\u01d5\17\44\1\0\5\44\1\u01d5\4\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\2\44\1\u01d6\10\44\1\u01d6\13\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\u01d7"+
    "\1\0\11\44\27\0\22\44\1\u01d7\4\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\11\44\1\u01d8\15\44\1\0\6\44"+
    "\1\u01d8\3\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\2\44\1\u01d9\10\44"+
    "\1\u01d9\13\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\11\44"+
    "\1\u01da\15\44\1\0\6\44\1\u01da\3\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\u01db\1\0\11\44"+
    "\27\0\22\44\1\u01db\4\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\7\44\1\u01dc\17\44\1\0\5\44\1\u01dc\4\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\11\44\1\u01dd\15\44\1\0\6\44"+
    "\1\u01dd\3\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\15\44\1\u01de\11\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\u01df\1\0\11\44\27\0\22\44\1\u01df\4\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\11\44\1\u01e0\15\44"+
    "\1\0\6\44\1\u01e0\3\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\22\44"+
    "\1\u01e1\4\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\5\44"+
    "\1\u01e2\21\44\1\0\3\44\1\u01e2\6\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\u01e3\1\0\11\44"+
    "\27\0\22\44\1\u01e3\4\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\1\u01e4\11\44\1\u01e4\14\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\13\44\1\u01e5\13\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\7\44\1\u01e6\17\44\1\0\5\44\1\u01e6"+
    "\4\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\22\44\1\u01e7\4\44\1\0"+
    "\12\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\2\44\1\u01e8\6\44\27\0\10\44\1\u01e8"+
    "\16\44\1\0\12\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\7\44\1\u01e9"+
    "\17\44\1\0\5\44\1\u01e9\4\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\5\44\1\u01ea\21\44\1\0\12\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\7\44\1\u01eb\17\44\1\0\5\44\1\u01eb\4\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\1\u01ec\11\44\1\u01ec\14\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\3\44\1\u01ed\5\44\27\0\17\44\1\u01ed\7\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\11\44\1\u01ee\15\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\21\44\1\u01ef\5\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\7\44\1\u01f0\4\44"+
    "\1\u01f1\12\44\1\0\1\44\1\u01f1\3\44\1\u01f0\4\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\24\44\1\u01f2\2\44\1\0\2\44"+
    "\1\u01f2\7\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\11\44\1\u01f3\15\44"+
    "\1\0\6\44\1\u01f3\3\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\u01f4\1\0\11\44\27\0\22\44"+
    "\1\u01f4\4\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\3\44"+
    "\1\u01f5\2\44\1\u01f5\20\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\14\44\1\u01f6\12\44\1\0\1\44\1\u01f6\10\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\24\44\1\u01f7\2\44\1\0\2\44"+
    "\1\u01f7\7\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\22\44\1\u01f8\4\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\7\44\1\u01f9\17\44"+
    "\1\0\5\44\1\u01f9\4\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\3\44"+
    "\1\u01fa\2\44\1\u01fa\11\44\1\u01fb\6\44\1\0\12\44"+
    "\5\0\4\44\1\0\1\u01fb\2\44\2\0\2\44\1\0"+
    "\1\u01fc\1\0\11\44\27\0\22\44\1\u01fc\4\44\1\0"+
    "\12\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\11\44\1\u01fd\15\44\1\0"+
    "\6\44\1\u01fd\3\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\u01fe\1\0\11\44\27\0\22\44\1\u01fe"+
    "\4\44\1\0\12\44\5\0\4\44\1\0\3\44\47\0"+
    "\1\u01ff\11\0\1\u01ff\113\0\1\u0200\11\0\1\u0200\116\0"+
    "\1\u0201\2\0\1\u0201\142\0\1\u0202\31\0\1\u0202\52\0"+
    "\1\u0203\10\0\1\u0203\113\0\1\u0204\13\0\1\u0204\150\0"+
    "\1\u0205\74\0\1\u0206\25\0\1\u0206\71\0\1\u0207\13\0"+
    "\1\u0207\124\0\1\u0208\14\0\1\u0208\27\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\11\44\1\u0209\15\44\1\0"+
    "\6\44\1\u0209\3\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\11\44\1\u020a"+
    "\15\44\1\0\6\44\1\u020a\3\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\u01a1\1\0\1\u01a1\1\0\11\u01a1\27\0"+
    "\27\u01a1\1\0\12\u01a1\4\0\1\u020b\4\u01a1\1\0\3\u01a1"+
    "\1\0\2\150\1\0\1\150\1\0\2\150\3\0\2\150"+
    "\2\0\1\150\1\0\3\150\1\0\1\u01a2\1\150\1\u0117"+
    "\1\150\1\0\15\150\27\0\1\150\12\0\5\150\4\0"+
    "\1\150\3\0\20\150\1\0\3\150\2\0\1\150\1\u0117"+
    "\1\150\1\u01a4\75\150\17\220\1\221\3\220\1\221\14\220"+
    "\1\221\4\220\1\221\24\220\1\u020c\5\220\1\u020c\25\220"+
    "\62\0\1\u01ad\14\0\1\u01ad\105\0\1\u020d\24\0\1\u020d"+
    "\25\0\1\u020d\63\0\1\u020d\36\0\2\u013a\1\0\1\u013a"+
    "\1\0\2\u013a\1\u020e\6\u013a\2\u013b\2\0\1\u013b\22\0"+
    "\10\u013a\1\u020e\16\u013a\1\0\12\u013a\5\0\4\u013a\1\u013c"+
    "\3\u013a\2\0\2\u013a\1\0\1\u013a\1\0\11\u013a\2\u013b"+
    "\2\0\1\u013b\22\0\7\u013a\1\u020f\17\u013a\1\0\5\u013a"+
    "\1\u020f\4\u013a\5\0\4\u013a\1\u013c\3\u013a\2\0\2\u013a"+
    "\1\0\1\u0210\1\0\11\u013a\2\u013b\2\0\1\u013b\22\0"+
    "\22\u013a\1\u0210\4\u013a\1\0\12\u013a\5\0\4\u013a\1\u013c"+
    "\3\u013a\77\0\1\u0211\3\0\1\u0211\76\0\1\u0212\25\0"+
    "\1\u0212\25\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\11\44\1\u0213\15\44\1\0\6\44\1\u0213\3\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\3\44\1\u0214\2\44\1\u0214\20\44\1\0"+
    "\12\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\25\44\1\u0215\1\44\1\0"+
    "\12\44\5\0\1\44\1\u0215\2\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\1\44\1\u0216"+
    "\13\44\1\u0216\11\44\1\0\12\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\2\44\1\u0217\10\44\1\u0217\13\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\3\44\1\u0218\2\44\1\u0218\20\44\1\0"+
    "\12\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\2\44\1\u0219\10\44\1\u0219"+
    "\13\44\1\0\12\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\7\44\1\u021a"+
    "\17\44\1\0\5\44\1\u021a\4\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\11\44\1\u021b\15\44\1\0\6\44\1\u021b\3\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\3\44\1\u021c\2\44\1\u021c\20\44\1\0"+
    "\12\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\1\u021d\11\44\1\u021d\14\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\u021e\1\0\11\44\27\0\22\44\1\u021e\4\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\2\44\1\u021f\6\44\27\0\10\44"+
    "\1\u021f\16\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\27\44"+
    "\1\0\12\44\5\0\2\44\1\u0220\1\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\27\44"+
    "\1\0\11\44\1\u0221\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\2\u0222\2\0\1\u0222"+
    "\22\0\27\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\5\44"+
    "\1\u0223\21\44\1\0\3\44\1\u0223\6\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\27\44\1\0\12\44\5\0\1\u0224\3\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\2\44\1\u0225\10\44\1\u0225\13\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\u0226\1\0"+
    "\11\44\27\0\22\44\1\u0226\4\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\11\44\1\u0227\15\44\1\0\6\44\1\u0227"+
    "\3\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\7\44\1\u0228\17\44\1\0"+
    "\5\44\1\u0228\4\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\27\44\1\0"+
    "\12\44\5\0\3\44\1\u0229\1\0\3\44\2\0\2\u01cd"+
    "\1\0\1\u01cd\1\0\11\u01cd\1\u022a\3\0\1\u022b\22\0"+
    "\27\u01cd\1\0\12\u01cd\5\0\4\u01cd\1\0\3\u01cd\3\0"+
    "\1\u022c\1\0\1\u022c\2\0\3\u022c\1\0\3\u022c\30\0"+
    "\27\u022c\1\0\12\u022c\5\0\4\u022c\1\0\3\u022c\3\0"+
    "\1\u022d\1\0\1\u022d\2\0\3\u022d\1\0\3\u022d\30\0"+
    "\27\u022d\1\0\12\u022d\5\0\4\u022d\1\0\3\u022d\50\0"+
    "\1\u022e\13\0\1\u022e\43\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\1\u022f\11\44\1\u022f\14\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\1\44\1\u0230\13\44\1\u0230\11\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\5\44\1\u0231\21\44"+
    "\1\0\3\44\1\u0231\6\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\1\44"+
    "\1\u0232\13\44\1\u0232\11\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\27\44\1\0\12\44\5\0\1\u0233\3\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\14\44\1\u0234\12\44\1\0\1\44\1\u0234\10\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\27\44\1\0\10\44\1\u0235\1\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\2\44\1\u0236\10\44\1\u0236\13\44\1\0"+
    "\12\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\1\44\1\u0237\13\44\1\u0237"+
    "\11\44\1\0\12\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\u0238\1\0\11\44\27\0\2\44\1\u0239"+
    "\10\44\1\u0239\6\44\1\u0238\4\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\27\44\1\0\10\44\1\u023a\1\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\13\44\1\u023b\13\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\7\44\1\u023c\17\44\1\0\5\44\1\u023c"+
    "\4\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\u023d\1\0\11\44\27\0\22\44\1\u023d\4\44\1\0"+
    "\12\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\15\44\1\u023e\11\44\1\0"+
    "\12\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\7\44\1\u023f\17\44\1\0"+
    "\5\44\1\u023f\4\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\27\44\1\0"+
    "\12\44\5\0\2\44\1\u0240\1\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\7\44\1\u0241"+
    "\17\44\1\0\12\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\24\44\1\u0242"+
    "\2\44\1\0\12\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\5\44\1\u0243"+
    "\21\44\1\0\3\44\1\u0243\6\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\6\44\1\u0244\20\44\1\0\12\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\24\44\1\u0245\2\44\1\0\2\44\1\u0245\7\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\2\44\1\u0246\10\44\1\u0246\13\44\1\0"+
    "\12\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\5\44\1\u0247\21\44\1\0"+
    "\3\44\1\u0247\6\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\7\44\1\u0248"+
    "\17\44\1\0\5\44\1\u0248\4\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\27\44\1\0\11\44\1\u0249\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\2\44"+
    "\1\u024a\10\44\1\u024a\13\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\u024b\1\0\11\44"+
    "\27\0\22\44\1\u024b\4\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\14\44\1\u024c\12\44\1\0\1\44\1\u024c\10\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\27\44\1\0\11\44\1\u024d\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\21\44\1\u024e\5\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\u024f\1\0"+
    "\11\44\27\0\22\44\1\u024f\4\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\7\44\1\u0250\17\44\1\0\5\44\1\u0250"+
    "\4\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\2\44\1\u0251\10\44\1\u0251"+
    "\13\44\1\0\12\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\3\44\1\u0252"+
    "\2\44\1\u0252\20\44\1\0\12\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\5\44\1\u0253\21\44\1\0\3\44\1\u0253\6\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\7\44\1\u0254\17\44\1\0\5\44\1\u0254"+
    "\4\44\5\0\4\44\1\0\3\44\51\0\1\u0255\10\0"+
    "\1\u0255\123\0\1\u0256\24\0\1\u0256\71\0\1\u0257\10\0"+
    "\1\u0257\50\0\1\u0258\63\0\1\u0258\114\0\1\u0259\24\0"+
    "\1\u0259\71\0\1\u025a\10\0\1\u025a\55\0\1\u025b\53\0"+
    "\1\u025b\44\0\1\u025c\13\0\1\u0259\47\0\1\u025c\4\0"+
    "\1\u025d\103\0\1\u025e\25\0\1\u025e\30\0\1\u0255\63\0"+
    "\1\u0255\36\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\4\44\1\u025f\14\44\1\u025f\5\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\u0260\1\0"+
    "\11\44\27\0\22\44\1\u0260\4\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\1\0\17\220\1\221\3\220\1\221"+
    "\14\220\1\221\4\220\1\221\1\220\1\u0261\13\220\1\u0261"+
    "\42\220\1\0\2\u013a\1\0\1\u013a\1\0\11\u013a\2\u0262"+
    "\2\0\1\u0262\22\0\27\u013a\1\0\12\u013a\5\0\4\u013a"+
    "\1\u0263\3\u013a\2\0\2\u013a\1\0\1\u013a\1\0\11\u013a"+
    "\2\u013b\2\0\1\u013b\22\0\5\u013a\1\u0264\21\u013a\1\0"+
    "\3\u013a\1\u0264\6\u013a\5\0\4\u013a\1\u013c\3\u013a\2\0"+
    "\2\u013a\1\0\1\u013a\1\0\11\u013a\2\u013b\2\0\1\u013b"+
    "\22\0\3\u013a\1\u0265\2\u013a\1\u0265\20\u013a\1\0\12\u013a"+
    "\5\0\4\u013a\1\u013c\3\u013a\77\0\1\u0266\3\0\1\u0266"+
    "\24\0\2\44\1\0\1\u0267\1\0\11\44\27\0\22\44"+
    "\1\u0267\4\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\24\44"+
    "\1\u0268\2\44\1\0\2\44\1\u0268\7\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\u0269\1\0\11\44"+
    "\27\0\22\44\1\u0269\4\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\1\44\1\u026a\1\0\1\44\1\0"+
    "\11\44\27\0\27\44\1\0\12\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\5\44\1\u026b\21\44\1\0\3\44\1\u026b\6\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\u026c\1\0"+
    "\11\44\27\0\22\44\1\u026c\4\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\14\44\1\u026d\12\44\1\0\1\44\1\u026d"+
    "\10\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\27\44\1\0\11\44\1\u026e"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\7\44\1\u026f\17\44\1\0\5\44"+
    "\1\u026f\4\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\4\44\1\u0270\14\44"+
    "\1\u0270\5\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\1\44"+
    "\1\u0271\13\44\1\u0271\11\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\24\44\1\u0272\2\44\1\0\2\44\1\u0272\7\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\5\44\1\u0273\21\44\1\0\3\44"+
    "\1\u0273\6\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\5\44\1\u0274\21\44"+
    "\1\0\3\44\1\u0274\6\44\5\0\4\44\1\0\3\44"+
    "\3\0\1\u0275\1\0\1\u0276\2\0\3\u0275\3\0\1\u0275"+
    "\1\0\2\u0222\2\0\1\u0222\22\0\5\u0275\1\u0277\14\u0275"+
    "\1\u0276\4\u0275\1\0\3\u0275\1\u0277\6\u0275\5\0\4\u0275"+
    "\1\0\3\u0275\2\0\2\44\1\0\1\44\1\0\2\44"+
    "\1\u0278\6\44\27\0\10\44\1\u0278\16\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\24\44\1\u0279\2\44\1\0\2\44"+
    "\1\u0279\7\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\11\44\1\u027a\15\44"+
    "\1\0\6\44\1\u027a\3\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\5\44"+
    "\1\u027b\21\44\1\0\3\44\1\u027b\6\44\5\0\4\44"+
    "\1\0\3\44\20\0\1\u022a\107\0\2\u022c\1\0\1\u022c"+
    "\1\0\11\u022c\6\0\1\u027c\20\0\27\u022c\1\0\12\u022c"+
    "\5\0\4\u022c\1\0\3\u022c\2\0\2\u022d\1\0\1\u022d"+
    "\1\0\11\u022d\27\0\27\u022d\1\0\12\u022d\1\u027d\4\0"+
    "\4\u022d\1\0\3\u022d\54\0\1\u027e\25\0\1\u027e\25\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\3\44\1\u027f"+
    "\2\44\1\u027f\20\44\1\0\12\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\3\44\1\u0280\2\44\1\u0280\20\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\1\44\1\u0281\13\44\1\u0281\11\44\1\0"+
    "\12\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\2\44\1\u0282\10\44\1\u0282"+
    "\13\44\1\0\12\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\27\44\1\0"+
    "\1\u0283\3\44\1\u0283\5\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\11\44"+
    "\1\u0284\15\44\1\0\6\44\1\u0284\3\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\1\44\1\u0285\13\44\1\u0285\11\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\2\44\1\u0286\6\44\27\0\10\44\1\u0286\16\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\2\44\1\u0287\10\44"+
    "\1\u0287\13\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\3\44"+
    "\1\u0288\2\44\1\u0288\20\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\4\44\1\u0289\14\44\1\u0289\5\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\17\44\1\u028a\7\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\25\44\1\u028b\1\44\1\0\12\44"+
    "\5\0\1\44\1\u028b\2\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\7\44\1\u028c\17\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\24\44\1\u028d\2\44"+
    "\1\0\2\44\1\u028d\7\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\16\44"+
    "\1\u028e\10\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\27\44"+
    "\1\0\11\44\1\u028f\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\11\44\1\u0290"+
    "\15\44\1\0\6\44\1\u0290\3\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\3\44\1\u0291\2\44\1\u0291\20\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\3\44\1\u0292\5\44\27\0\17\44\1\u0292\7\44\1\0"+
    "\12\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\24\44\1\u0293\2\44\1\0"+
    "\2\44\1\u0293\7\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\7\44\1\u0294"+
    "\17\44\1\0\5\44\1\u0294\4\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\7\44\1\u0295\17\44\1\0\5\44\1\u0295\4\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\24\44\1\u0296\2\44\1\0\2\44\1\u0296"+
    "\7\44\5\0\4\44\1\0\3\44\56\0\1\u0259\25\0"+
    "\1\u0259\26\0\1\u0297\13\0\1\u0259\47\0\1\u0297\4\0"+
    "\1\u025d\77\0\1\u025a\13\0\1\u025a\134\0\1\u0255\5\0"+
    "\1\u0255\45\0\1\u0259\54\0\1\u025d\145\0\1\u0259\67\0"+
    "\1\u0298\24\0\1\u0298\105\0\1\u0299\20\0\1\u0299\71\0"+
    "\1\u029a\2\0\1\u029a\52\0\2\44\1\0\1\44\1\0"+
    "\11\44\2\u029b\2\0\1\u029b\22\0\27\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\1\0\17\220\1\221\3\220"+
    "\1\221\14\220\1\221\4\220\1\221\5\220\1\u029c\25\220"+
    "\1\u029c\24\220\17\0\2\u0262\2\0\1\u0262\75\0\1\u0263"+
    "\125\0\1\u029d\5\0\2\u013a\1\0\1\u013a\1\0\11\u013a"+
    "\2\u013b\2\0\1\u013b\22\0\24\u013a\1\u020e\2\u013a\1\0"+
    "\2\u013a\1\u020e\7\u013a\5\0\4\u013a\1\u013c\3\u013a\2\0"+
    "\2\u013a\1\0\1\u013a\1\0\11\u013a\2\u013b\2\0\1\u013b"+
    "\22\0\7\u013a\1\u020e\17\u013a\1\0\5\u013a\1\u020e\4\u013a"+
    "\5\0\4\u013a\1\u013c\3\u013a\56\0\1\u029e\25\0\1\u029e"+
    "\23\0\1\44\1\u029f\1\0\1\44\1\0\11\44\27\0"+
    "\27\44\1\0\12\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\7\44\1\u02a0"+
    "\17\44\1\0\5\44\1\u02a0\4\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\14\44\1\u02a1\12\44\1\0\1\44\1\u02a1\10\44\5\0"+
    "\4\44\1\0\3\44\2\0\1\44\1\u02a2\1\0\1\44"+
    "\1\0\11\44\27\0\27\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\7\44\1\u02a3\17\44\1\0\5\44\1\u02a3\4\44"+
    "\5\0\4\44\1\0\3\44\2\0\1\44\1\u02a4\1\0"+
    "\1\44\1\0\11\44\27\0\27\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\14\44\1\u02a5\12\44\1\0\1\44\1\u02a5"+
    "\10\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\1\u02a6\11\44\1\u02a6\14\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\1\44"+
    "\1\u02a7\1\0\1\44\1\0\11\44\27\0\27\44\1\0"+
    "\12\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\14\44\1\u02a8\12\44\1\0"+
    "\1\44\1\u02a8\10\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\u02a9\1\0\11\44\27\0\22\44\1\u02a9"+
    "\4\44\1\0\12\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\11\44\1\u02aa"+
    "\15\44\1\0\6\44\1\u02aa\3\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\7\44\1\u02ab\17\44\1\0\5\44\1\u02ab\4\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\11\44\1\u02ac\15\44\1\0\6\44\1\u02ac"+
    "\3\44\5\0\4\44\1\0\3\44\10\0\1\u02ad\64\0"+
    "\1\u02ad\124\0\1\u02ae\22\0\1\u02ae\10\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\27\44\1\0\11\44\1\u02af"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\27\44\1\0\12\44\5\0\1\u02b0"+
    "\3\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\1\u02b1\11\44\1\u02b1\14\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\20\0\1\u022a\3\0\1\u022b"+
    "\121\0\1\u02b2\3\0\1\u02b3\200\0\1\u02b4\3\0\1\u02b4"+
    "\24\0\2\44\1\0\1\44\1\0\11\44\27\0\11\44"+
    "\1\u02b5\15\44\1\0\6\44\1\u02b5\3\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\u02b6\1\0\11\44"+
    "\27\0\22\44\1\u02b6\4\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\24\44\1\u02b7\2\44\1\0\2\44\1\u02b7\7\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\2\44\1\u02b8\10\44\1\u02b8\13\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\7\44\1\u02b9\17\44"+
    "\1\0\5\44\1\u02b9\4\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\u02ba\1\0\11\44\27\0\22\44"+
    "\1\u02ba\4\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\2\44"+
    "\1\u02bb\10\44\1\u02bb\13\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\4\44\1\u02bc\14\44\1\u02bc\5\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\24\44\1\u02bd\2\44\1\0\2\44"+
    "\1\u02bd\7\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\u02be\1\0\11\44\27\0\22\44\1\u02be\4\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\11\44\1\u02bf\15\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\u02c0\1\0\11\44\27\0\22\44\1\u02c0\4\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\27\44\1\0\10\44"+
    "\1\u02c1\1\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\11\44\1\u02c2\15\44"+
    "\1\0\6\44\1\u02c2\3\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\7\44"+
    "\1\u02c3\17\44\1\0\5\44\1\u02c3\4\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\u02c4\1\0\11\44"+
    "\27\0\22\44\1\u02c4\4\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\51\0\1\u02c5\10\0\1\u02c5\50\0\1\u0259"+
    "\63\0\1\u0259\41\0\1\u02c6\63\0\1\u02c6\121\0\1\u0259"+
    "\20\0\1\u0259\30\0\1\u02c7\6\0\2\u029b\2\0\1\u029b"+
    "\32\0\1\u02c7\47\0\17\220\1\221\3\220\1\221\14\220"+
    "\1\221\4\220\1\221\30\220\1\u02c8\3\220\1\u02c8\23\220"+
    "\17\0\2\u02c9\2\0\1\u02c9\103\0\1\44\1\u02ca\1\0"+
    "\1\44\1\0\11\44\27\0\27\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\5\44\1\u02cb\21\44\1\0\3\44\1\u02cb"+
    "\6\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\27\44\1\0\1\u02cc\3\44"+
    "\1\u02cc\5\44\5\0\4\44\1\0\3\44\2\0\1\44"+
    "\1\u02cd\1\0\1\44\1\0\11\44\27\0\27\44\1\0"+
    "\12\44\5\0\4\44\1\0\3\44\2\0\1\44\1\u02ce"+
    "\1\0\1\44\1\0\11\44\27\0\27\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\2\0\1\44\1\u02cf\1\0"+
    "\1\44\1\0\11\44\27\0\27\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\4\44\1\u02d0\14\44\1\u02d0\5\44\1\0"+
    "\12\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\24\44\1\u02d1\2\44\1\0"+
    "\2\44\1\u02d1\7\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\2\44\1\u02d2"+
    "\10\44\1\u02d2\13\44\1\0\12\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\2\44\1\u02d3\10\44\1\u02d3\13\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\24\44\1\u02d4\2\44\1\0\2\44\1\u02d4"+
    "\7\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\u02d5\1\0\11\44\27\0\22\44\1\u02d5\4\44\1\0"+
    "\12\44\5\0\4\44\1\0\3\44\56\0\1\u02d6\25\0"+
    "\1\u02d6\120\0\1\u02d7\3\0\1\u02d7\24\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\3\44\1\u02d8\2\44\1\u02d8"+
    "\20\44\1\0\12\44\5\0\4\44\1\0\3\44\20\0"+
    "\1\u02b2\163\0\1\u02d9\25\0\1\u02d9\23\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\27\44\1\0\12\44\5\0"+
    "\1\u02da\3\44\1\0\3\44\2\0\1\44\1\u02db\1\0"+
    "\1\44\1\0\11\44\27\0\27\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\7\44\1\u02dc\17\44\1\0\5\44\1\u02dc"+
    "\4\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\24\44\1\u02dd\2\44\1\0"+
    "\2\44\1\u02dd\7\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\24\44\1\u02de"+
    "\2\44\1\0\2\44\1\u02de\7\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\1\u02df\11\44\1\u02df\14\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\u02e0\1\0\11\44"+
    "\27\0\22\44\1\u02e0\4\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\1\44\1\u02e1\1\0\1\44\1\0"+
    "\11\44\27\0\27\44\1\0\12\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\22\44\1\u02e2\4\44\1\0\12\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\3\44\1\u02e3\2\44\1\u02e3\20\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\u02e4\1\0"+
    "\11\44\27\0\22\44\1\u02e4\4\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\u02e5\1\0"+
    "\11\44\27\0\22\44\1\u02e5\4\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\u02e6\1\0"+
    "\11\44\27\0\22\44\1\u02e6\4\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\52\0\1\u0259\2\0\1\u0259\120\0"+
    "\1\u0259\13\0\1\u0259\111\0\1\u02e7\13\0\1\u02e7\42\0"+
    "\17\220\1\221\3\220\1\221\14\220\1\221\4\220\1\221"+
    "\7\220\1\u02e8\25\220\1\u02e8\22\220\17\0\2\u02c9\2\0"+
    "\1\u02c9\33\0\1\u02e9\24\0\1\u02e9\22\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\1\u02ea\11\44\1\u02ea\14\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\2\44\1\u02eb\10\44"+
    "\1\u02eb\13\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\2\0\1\44\1\u02ec\1\0\1\44\1\0\11\44\27\0"+
    "\27\44\1\0\12\44\5\0\4\44\1\0\3\44\2\0"+
    "\1\44\1\u02ed\1\0\1\44\1\0\11\44\27\0\27\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\1\44"+
    "\1\u02ee\1\0\1\44\1\0\11\44\27\0\27\44\1\0"+
    "\12\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\1\u02ef\11\44\1\u02ef\14\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\24\44\1\u02f0\2\44"+
    "\1\0\2\44\1\u02f0\7\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\1\44"+
    "\1\u02f1\13\44\1\u02f1\11\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\27\44\1\0\11\44\1\u02f2\5\0\4\44\1\0"+
    "\3\44\5\0\1\u02f3\63\0\1\u02f3\114\0\1\u02f4\24\0"+
    "\1\u02f4\53\0\1\u02f5\74\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\1\u02f6\11\44\1\u02f6\14\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\u02f7"+
    "\1\0\11\44\27\0\22\44\1\u02f7\4\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\u02f8"+
    "\1\0\11\44\27\0\22\44\1\u02f8\4\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\2\44\1\u02f9\6\44\27\0\10\44\1\u02f9\16\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\1\u02fa\11\44\1\u02fa"+
    "\14\44\1\0\12\44\5\0\4\44\1\0\3\44\2\0"+
    "\2\44\1\0\1\44\1\0\11\44\27\0\1\u02fb\11\44"+
    "\1\u02fb\14\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\2\0\2\44\1\0\1\44\1\0\11\44\27\0\7\44"+
    "\1\u02fc\17\44\1\0\5\44\1\u02fc\4\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\4\44\1\u02fd\14\44\1\u02fd\5\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\47\0\1\u02fe\11\0\1\u02fe"+
    "\45\0\17\220\1\221\3\220\1\221\6\220\1\u02ff\5\220"+
    "\1\221\4\220\1\221\60\220\50\0\1\u0300\10\0\1\u0300"+
    "\45\0\2\44\1\0\1\44\1\0\11\44\27\0\3\44"+
    "\1\u0301\2\44\1\u0301\20\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\24\44\1\u0302\2\44\1\0\2\44\1\u0302\7\44"+
    "\5\0\4\44\1\0\3\44\2\0\1\44\1\u0303\1\0"+
    "\1\44\1\0\11\44\27\0\27\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\25\44\1\u0304\1\44\1\0\12\44\5\0"+
    "\1\44\1\u0304\2\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\27\44\1\0\11\44\1\u0305"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\u0306"+
    "\1\0\11\44\27\0\22\44\1\u0306\4\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\52\0\1\u0307\2\0\1\u0307"+
    "\55\0\1\u0308\63\0\1\u0308\54\0\2\u02f5\2\0\1\u02f5"+
    "\103\0\2\44\1\0\1\44\1\0\11\44\27\0\3\44"+
    "\1\u0309\2\44\1\u0309\20\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\2\44"+
    "\1\u030a\6\44\27\0\10\44\1\u030a\16\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\3\44\1\u030b\2\44\1\u030b\20\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\2\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\14\44\1\u030c\12\44"+
    "\1\0\1\44\1\u030c\10\44\5\0\4\44\1\0\3\44"+
    "\74\0\1\u030d\22\0\1\u030d\7\0\17\220\1\u030e\1\u02ff"+
    "\2\220\1\u030e\14\220\1\221\4\220\1\221\60\220\51\0"+
    "\1\u030f\2\0\1\u030f\52\0\1\44\1\u0310\1\0\1\44"+
    "\1\0\11\44\27\0\27\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\u0311\1\0\11\44"+
    "\27\0\22\44\1\u0311\4\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\2\44\1\0\1\44\1\0\11\44"+
    "\27\0\27\44\1\0\1\u0312\3\44\1\u0312\5\44\5\0"+
    "\4\44\1\0\3\44\53\0\1\u0313\14\0\1\u0313\131\0"+
    "\1\u0314\22\0\1\u0314\10\0\2\44\1\0\1\44\1\0"+
    "\11\44\27\0\24\44\1\u0315\2\44\1\0\2\44\1\u0315"+
    "\7\44\5\0\4\44\1\0\3\44\2\0\2\44\1\0"+
    "\1\44\1\0\11\44\27\0\24\44\1\u0316\2\44\1\0"+
    "\2\44\1\u0316\7\44\5\0\4\44\1\0\3\44\65\0"+
    "\1\u0317\20\0\1\u0317\21\0\1\44\1\u0318\1\0\1\44"+
    "\1\0\11\44\27\0\27\44\1\0\12\44\5\0\4\44"+
    "\1\0\3\44\2\0\1\44\1\u0319\1\0\1\44\1\0"+
    "\11\44\27\0\27\44\1\0\12\44\5\0\4\44\1\0"+
    "\3\44\2\0\2\44\1\0\1\44\1\0\11\44\27\0"+
    "\5\44\1\u031a\21\44\1\0\3\44\1\u031a\6\44\5\0"+
    "\4\44\1\0\3\44\63\0\1\u031b\14\0\1\u031b\32\0"+
    "\1\u031c\63\0\1\u031c\36\0\2\44\1\0\1\u031d\1\0"+
    "\11\44\27\0\22\44\1\u031d\4\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\2\0\2\44\1\0\1\u031e\1\0"+
    "\11\44\27\0\22\44\1\u031e\4\44\1\0\12\44\5\0"+
    "\4\44\1\0\3\44\107\0\1\u031f\20\0\1\44\1\u0320"+
    "\1\0\1\44\1\0\11\44\27\0\27\44\1\0\12\44"+
    "\5\0\4\44\1\0\3\44\2\0\2\44\1\0\1\44"+
    "\1\0\11\44\27\0\11\44\1\u0321\15\44\1\0\6\44"+
    "\1\u0321\3\44\5\0\4\44\1\0\3\44\52\0\1\u0322"+
    "\2\0\1\u0322\121\0\1\u0323\10\0\1\u0323\45\0\2\44"+
    "\1\0\1\u0324\1\0\11\44\27\0\22\44\1\u0324\4\44"+
    "\1\0\12\44\5\0\4\44\1\0\3\44\56\0\1\u0313"+
    "\25\0\1\u0313\106\0\1\u0325\20\0\1\u0325\21\0\2\44"+
    "\1\0\1\44\1\0\11\44\27\0\1\44\1\u0326\13\44"+
    "\1\u0326\11\44\1\0\12\44\5\0\4\44\1\0\3\44"+
    "\5\0\1\u0327\63\0\1\u0327\54\0\2\u0327\2\0\1\u0327"+
    "\5\0\1\u0328\113\0\2\u0328\2\0\1\u0328\1\0\1\u0329"+
    "\50\0\1\u032a\3\0\1\u032a\5\0\1\u032b\113\0\1\u032c"+
    "\3\0\1\u032c\132\0\1\u032d\114\0\1\u032e\3\0\1\u032e"+
    "\132\0\1\u032f\114\0\1\u0330\3\0\1\u0330\132\0\1\u0331"+
    "\114\0\1\u0332\3\0\1\u0332\42\0\2\u0330\2\0\1\u0330"+
    "\6\0\1\u0333\171\0\1\u0334\3\0\1\u0334\50\0\1\u0330"+
    "\210\0\1\u0330\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[55814];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\27\0\2\1\1\11\13\1\2\11\2\1\3\11\13\1"+
    "\1\11\30\1\1\11\6\1\1\11\2\1\1\11\6\1"+
    "\1\11\13\1\1\11\10\1\1\11\3\1\1\0\2\1"+
    "\1\11\3\1\2\11\2\1\1\11\1\1\2\11\1\1"+
    "\1\11\4\0\1\1\1\11\4\1\1\11\2\1\1\11"+
    "\6\1\1\0\2\1\2\0\1\1\1\0\2\1\1\0"+
    "\6\1\1\11\2\0\5\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\11\2\0\2\1\1\0\1\1\1\11\1\1"+
    "\1\0\54\1\13\0\1\11\2\1\1\11\3\0\3\1"+
    "\3\11\1\1\3\0\3\1\1\11\1\0\1\11\3\0"+
    "\1\1\1\0\1\11\1\0\1\11\3\0\1\1\1\0"+
    "\2\1\1\11\1\0\1\11\1\0\1\11\3\0\1\11"+
    "\1\0\1\1\1\0\1\11\1\0\2\11\2\1\5\0"+
    "\1\11\3\0\1\11\2\0\10\1\1\0\16\1\1\0"+
    "\1\1\3\0\1\11\61\1\12\0\2\1\1\11\2\1"+
    "\1\11\1\1\1\0\1\11\1\0\5\11\1\1\10\0"+
    "\32\1\4\0\56\1\12\0\2\1\1\11\1\1\1\11"+
    "\3\0\1\11\1\0\17\1\1\0\7\1\1\11\1\1"+
    "\3\0\46\1\10\0\1\11\1\0\3\1\1\0\1\1"+
    "\3\0\16\1\1\11\6\1\3\0\30\1\5\0\1\1"+
    "\1\11\17\1\2\0\3\1\1\11\1\1\1\0\20\1"+
    "\3\0\1\1\1\0\14\1\2\0\1\1\1\0\15\1"+
    "\1\0\1\1\1\0\11\1\2\0\11\1\1\0\1\1"+
    "\1\0\6\1\2\0\4\1\1\11\1\1\1\0\3\1"+
    "\2\0\2\1\1\0\3\1\1\11\1\0\2\1\1\0"+
    "\2\1\2\0\1\1\1\0\1\1\14\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[820];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private final ByteStack stack = new ByteStack();
    private String heredoc = null;
    private int hereocLength = 0;
    private int parenBalanceInScripting = 0; // for named arguments [NETBEANS-4443] PHP 8.0
    private int parenBalanceInConst = 0; // for context sensitive lexer
    private int bracketBalanceInConst = 0; // for context sensitive lexer
    private boolean aspTagsAllowed;
    private boolean shortTagsAllowed;
    private boolean isInConst;
    private LexerInput input;

    public PHP5ColoringLexer(LexerRestartInfo info, boolean shortTagsAllowed, boolean aspTagsAllowed, boolean inPHP) {
        this.input = info.input();
        this.aspTagsAllowed = aspTagsAllowed;
        this.shortTagsAllowed = shortTagsAllowed;

        if (info.state() != null) {
            //reset state
            setState((LexerState) info.state());
        } else {
            //initial state
            stack.push(YYINITIAL);
            if (inPHP) {
                stack.push(ST_PHP_IN_SCRIPTING);
                zzState = ST_PHP_IN_SCRIPTING;
                zzLexicalState = ST_PHP_IN_SCRIPTING;
            } else {
                zzState = YYINITIAL;
                zzLexicalState = YYINITIAL;
            }
        }

    }

    public static final class LexerState  {
        final ByteStack stack;
        /* the current state of the DFA */
        final int zzState;
        /* the current lexical state */
        final int zzLexicalState;
        /* remember the heredoc */
        final String heredoc;
        /* and the lenght of */
        final int hereocLength;
        final int parenBalanceInScripting;

        LexerState(ByteStack stack, int zzState, int zzLexicalState, String heredoc, int hereocLength, int parenBalanceInScripting) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.heredoc = heredoc;
            this.hereocLength = hereocLength;
            this.parenBalanceInScripting = parenBalanceInScripting;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null || obj.getClass() != this.getClass()) {
                return false;
            }

            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                && (this.zzLexicalState == state.zzLexicalState)
                && (this.hereocLength == state.hereocLength)
                && ((this.heredoc == null && state.heredoc == null) || (this.heredoc != null && state.heredoc != null && this.heredoc.equals(state.heredoc))))
                && (this.parenBalanceInScripting == state.parenBalanceInScripting);
        }

        @Override
        public int hashCode() {
            int hash = 3;
            hash = 71 * hash + Objects.hashCode(this.stack);
            hash = 71 * hash + this.zzState;
            hash = 71 * hash + this.zzLexicalState;
            hash = 71 * hash + Objects.hashCode(this.heredoc);
            hash = 71 * hash + this.hereocLength;
            hash = 71 * hash + this.parenBalanceInScripting;
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.copyOf(), zzState, zzLexicalState, heredoc, hereocLength, parenBalanceInScripting);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.heredoc = state.heredoc;
        this.hereocLength = state.hereocLength;
        this.parenBalanceInScripting = state.parenBalanceInScripting;
    }

    protected boolean isHeredocState(int state) {
        return state == ST_PHP_HEREDOC || state == ST_PHP_START_HEREDOC || state == ST_PHP_END_HEREDOC || state == ST_PHP_NOWDOC;
    }

    public int[] getParamenters() {
        return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }

    protected int getZZStartRead() {
        return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
        return this.zzPushbackPos;
    }

    protected void pushBack(int i) {
        yypushback(i);
    }

    protected void popState() {
        yybegin(stack.pop());
    }

    protected void pushState(final int state) {
        stack.push(getZZLexicalState());
        yybegin(state);
    }

    private boolean isLabelChar(char c) {
        return c == '_'
                || (c >= 'a' && c <= 'z')
                || (c >= 'A' && c <= 'Z')
                || (c >= 0x7f && c <= 0xff);
    }

    private boolean isEndNowdoc() {
        String yytext = yytext().trim();
        int lastIndexOfNewline = yytext.lastIndexOf('\n');
        if (lastIndexOfNewline == -1) {
            lastIndexOfNewline = yytext.lastIndexOf('\r');
        }
        if (lastIndexOfNewline != -1) {
            yytext = yytext.substring(lastIndexOfNewline);
        }
        return isEndHereOrNowdoc(yytext);
    }

    private boolean isEndHeredoc() {
        return isEndHereOrNowdoc(yytext());
    }

    private boolean isEndHereOrNowdoc(String text) {
        // check whether ID exists
        String trimedText = text.trim();
        boolean isEnd = false;
        if (trimedText.startsWith(heredoc)) {
            if (trimedText.length() == heredoc.length()) {
                isEnd = true;
            } else if (trimedText.length() > heredoc.length()
                    && !isLabelChar(trimedText.charAt(heredoc.length()))) {
                // e.g.
                // $test = <<< END
                // ENDING
                // END
                isEnd = true;
            }
        }
        return isEnd;
    }

    /**
     * Returns the smallest of multiple index values.
     *
     * @param values values
     * @return the smallest of multiple index values, -1 if all values are -1
     */
    private static int minIndex(int... values) {
        assert values.length != 0 : "No values"; // NOI18N
        boolean first = true;
        int min = -1;
        for (int value : values) {
            if (value == -1) {
                continue;
            }
            if (first) {
                first = false;
                min = value;
                continue;
            }
            min = Math.min(min, value);
        }
        return min;
    }

    /**
     * Get the first whitespace index of text.
     *
     * @param text the text
     * @return the first index of whitespace if whitespace exists, otherwise -1
     */
    private static int firstWhitespaceIndexOf(String text) {
        return minIndex(
            text.indexOf(' '),
            text.indexOf('\n'),
            text.indexOf('\r'),
            text.indexOf('\t')
        );
    }
 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PHP5ColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PHP5ColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1774) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PHPTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32:
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens
    return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 177: break;
        case 105:
          { return PHPTokenId.PHP_FALSE;
          }
        case 178: break;
        case 26:
          { yypushback(1);
    yybegin(ST_PHP_NOWDOC);
          }
        case 179: break;
        case 36:
          { String yytext = yytext();
    switch (yytext.charAt(yytext.length() - 1)) {
        case '?':
        case '%':
            yypushback(1);
            break;
        default:
            popState();
    }
     return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 180: break;
        case 84:
          { yypushback(2);
        return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 181: break;
        case 120:
          { return PHPTokenId.PHP_TYPE_MIXED;
          }
        case 182: break;
        case 68:
          { popState();
    return PHPTokenId.PHPDOC_COMMENT_END;
          }
        case 183: break;
        case 146:
          { return PHPTokenId.PHP_INCLUDE;
          }
        case 184: break;
        case 166:
          { return PHPTokenId.PHP_ENDDECLARE;
          }
        case 185: break;
        case 38:
          { return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 186: break;
        case 63:
          { /* <ST_PHP_NOWDOC>{NEWLINE}{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\r\n]? */
        if (isEndNowdoc()) {
            String yytext = yytext();
            int trailingNewlineOffset = (yytext.endsWith("\n") || yytext.endsWith("\r")) ? 2 : 0;
            int lastIndexOfNewline = yytext.lastIndexOf('\n', yylength() - trailingNewlineOffset);
            if (lastIndexOfNewline == -1) {
                lastIndexOfNewline = yytext.lastIndexOf('\r', yylength() - trailingNewlineOffset);
            }
            int back = yylength() - lastIndexOfNewline - 1; // -1 [\r\n] length
            yypushback(back);
            yybegin(ST_PHP_END_NOWDOC);
            return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
        } else {
            yypushback(1); // [\r\n] length
        }
          }
        case 187: break;
        case 134:
          { return PHPTokenId.PHP_GLOBAL;
          }
        case 188: break;
        case 170:
          { return PHPTokenId.PHP__FUNCTION__;
          }
        case 189: break;
        case 18:
          { popState();
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 190: break;
        case 43:
          { if (shortTagsAllowed ) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 191: break;
        case 59:
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 192: break;
        case 130:
          { return PHPTokenId.PHP_TYPE_OBJECT;
          }
        case 193: break;
        case 95:
          { return PHPTokenId.PHP_LIST;
          }
        case 194: break;
        case 104:
          { return PHPTokenId.PHP_EMPTY;
          }
        case 195: break;
        case 14:
          { pushState(ST_PHP_LINE_COMMENT);
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 196: break;
        case 100:
          { return PHPTokenId.PHP_CASE;
          }
        case 197: break;
        case 46:
          { return PHPTokenId.PHP_VARIABLE;
          }
        case 198: break;
        case 49:
          { //popState();
        yybegin(YYINITIAL);
        if (yylength() > 2) {
            yypushback(yylength()-2);
        }
        stack.clear();
    return PHPTokenId.PHP_CLOSETAG;
          }
        case 199: break;
        case 23:
          { int trailingNewLineLength = 1;
        int label_len = yylength() - trailingNewLineLength;
        int back = trailingNewLineLength;

        if (yytext().charAt(label_len - 1)==';') {
           label_len--;
           back++;
        }

        if (isEndHeredoc()) {
            int indexOfHeredocId = yytext().indexOf(heredoc);
            back += label_len - indexOfHeredocId;
            yypushback(back);
            yybegin(ST_PHP_END_HEREDOC);
        } else {
            yypushback(yylength() - trailingNewLineLength);
            yybegin(ST_PHP_HEREDOC);
        }
          }
        case 200: break;
        case 8:
          { if(isInConst) {
        isInConst = false;
        parenBalanceInConst = 0;
        bracketBalanceInConst = 0;
    }
    return PHPTokenId.PHP_SEMICOLON;
          }
        case 201: break;
        case 48:
          { if (aspTagsAllowed) {
            yybegin(YYINITIAL);
            stack.clear();
        return PHPTokenId.PHP_CLOSETAG;
    }
    return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 202: break;
        case 37:
          { return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 203: break;
        case 92:
          { pushState(ST_PHP_DOC_COMMENT);
    yypushback(yylength()-3);
    return PHPTokenId.PHPDOC_COMMENT_START;
          }
        case 204: break;
        case 148:
          { return PHPTokenId.PHP__FILE__;
          }
        case 205: break;
        case 110:
          { return PHPTokenId.PHP_ISSET;
          }
        case 206: break;
        case 53:
          { return PHPTokenId.PHP_IF;
          }
        case 207: break;
        case 60:
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 208: break;
        case 70:
          { if (aspTagsAllowed) {
            yybegin(YYINITIAL);
            stack.clear();
        return PHPTokenId.PHP_CLOSETAG;
    }
    String text = yytext();
    if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
        popState();
    }
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 209: break;
        case 51:
          { return PHPTokenId.PHP_AS;
          }
        case 210: break;
        case 24:
          { heredoc=null;
    hereocLength=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 0;
    // mark just the label
    if (yytext().charAt(yylength() - 1)==';') {
        back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_HEREDOC_TAG_END;
          }
        case 211: break;
        case 175:
          { pushState(ST_HALTED_COMPILER);
    return PHPTokenId.PHP_HALT_COMPILER;
          }
        case 212: break;
        case 80:
          { return PHPTokenId.PHP_USE;
          }
        case 213: break;
        case 114:
          { return PHPTokenId.PHP_TYPE_FLOAT;
          }
        case 214: break;
        case 174:
          { return PHPTokenId.PHP__NAMESPACE__;
          }
        case 215: break;
        case 152:
          { return PHPTokenId.PHP_READONLY;
          }
        case 216: break;
        case 69:
          { popState();
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 217: break;
        case 173:
          { return PHPTokenId.PHP_INCLUDE_ONCE;
          }
        case 218: break;
        case 160:
          { return PHPTokenId.PHP_NAMESPACE;
          }
        case 219: break;
        case 67:
          { popState();
    return PHPTokenId.PHP_COMMENT_END;
          }
        case 220: break;
        case 154:
          { return PHPTokenId.PHP_ITERABLE;
          }
        case 221: break;
        case 108:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    hereocLength = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        hereocLength--;
    }
    // HEREDOC PHP 5.3
    if (yytext().charAt(startString) == '"') {
        hereocLength -= 2;
        startString ++;
    }
    heredoc = yytext().substring(startString,hereocLength+startString);
    yybegin(ST_PHP_START_HEREDOC);
    return PHPTokenId.PHP_HEREDOC_TAG_START;
          }
        case 222: break;
        case 66:
          { // const keyword is also used within group uses. so check "=", otherwise it matches the following:
    // use A\{const CONSTANTA, function myFunction,...}
    popState();
    String match = yytext();
    String[] segments = match.split("[ \n\r\t]+");
    int back = 1;
    if(segments.length > 1) {
        int wsLength = yylength() - 1 - segments[0].length(); // - "=" - {LABEL}
        back +=  wsLength;
    }
    yypushback(back);
    return PHPTokenId.PHP_STRING;
          }
        case 223: break;
        case 40:
          { popState();
    return PHPTokenId.T_INLINE_HTML;
          }
        case 224: break;
        case 30:
          { popState();
    parenBalanceInScripting++; // [NETBEANS-4443] PHP 8.0 Named Arguments
    return PHPTokenId.PHP_TOKEN;
          }
        case 225: break;
        case 6:
          { return PHPTokenId.PHP_OPERATOR;
          }
        case 226: break;
        case 11:
          { pushState(ST_PHP_BACKQUOTE);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 227: break;
        case 56:
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 228: break;
        case 3:
          { return PHPTokenId.PHP_NUMBER;
          }
        case 229: break;
        case 81:
          { yypushback(1);
    pushState(ST_PHP_VAR_OFFSET);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 230: break;
        case 143:
          { return PHPTokenId.PHP_REQUIRE;
          }
        case 231: break;
        case 145:
          { return PHPTokenId.PHP_DECLARE;
          }
        case 232: break;
        case 117:
          { return PHPTokenId.PHP_CLONE;
          }
        case 233: break;
        case 112:
          { return PHPTokenId.PHP_TRAIT;
          }
        case 234: break;
        case 58:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_TOKEN;
          }
        case 235: break;
        case 75:
          { return PHPTokenId.PHP_NEW;
          }
        case 236: break;
        case 86:
          { yypushback(2);
    return PHPTokenId.PHP_COMMENT;
          }
        case 237: break;
        case 65:
          { return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 238: break;
        case 19:
          { yypushback(1);
        popState();
          }
        case 239: break;
        case 139:
          { return PHPTokenId.PHP_EXTENDS;
          }
        case 240: break;
        case 93:
          { return PHPTokenId.PHP_NULL;
          }
        case 241: break;
        case 102:
          { pushState(ST_PHP_IN_SCRIPTING);
    //yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_OPENTAG;
    //return createSymbol(ASTSymbol.T_OPEN_TAG);
          }
        case 242: break;
        case 125:
          { return PHPTokenId.PHP_WHILE;
          }
        case 243: break;
        case 159:
          { return PHPTokenId.PHP_ENDSWITCH;
          }
        case 244: break;
        case 147:
          { return PHPTokenId.PHP_PRIVATE;
          }
        case 245: break;
        case 127:
          { yypushback(yylength() - 4); // 4: enum length
    return PHPTokenId.PHP_ENUM;
          }
        case 246: break;
        case 1:
          { return PHPTokenId.T_INLINE_HTML;
          }
        case 247: break;
        case 169:
          { return PHPTokenId.PHP_YIELD_FROM;
          }
        case 248: break;
        case 103:
          { return PHPTokenId.PHP_ENDIF;
          }
        case 249: break;
        case 33:
          { yypushback(1);
    popState();
        if (yylength() > 0)
            return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 250: break;
        case 101:
          { popState();
    String yytext = yytext();
    if ("true".equalsIgnoreCase(yytext)) { // NOI18N
        return PHPTokenId.PHP_TRUE;
    } else if ("false".equalsIgnoreCase(yytext)) { // NOI18N
        return PHPTokenId.PHP_FALSE;
    } else if ("null".equalsIgnoreCase(yytext)) { // NOI18N
        return PHPTokenId.PHP_NULL;
    }
    assert false : "expected \"true\", \"false\", or \"null\" but "  + "\"" + yytext + "\""; // NOI18N
    yypushback(yylength());
          }
        case 251: break;
        case 131:
          { return PHPTokenId.PHP_STATIC;
          }
        case 252: break;
        case 144:
          { return PHPTokenId.PHP_DEFAULT;
          }
        case 253: break;
        case 17:
          { return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 254: break;
        case 34:
          { popState();
    return PHPTokenId.PHP_TOKEN;
          }
        case 255: break;
        case 71:
          { // [NETBEANS-4443] PHP 8.0 Named Arguments
    // we can use keywords as parameter names
    // e.g. array: $array, default: 0
    int index = firstWhitespaceIndexOf(yytext());
    if (index == -1) {
        yypushback(1); // ":".length()
    } else {
        yypushback(yylength() - index);
    }
    popState();
    return PHPTokenId.PHP_STRING;
          }
        case 256: break;
        case 149:
          { return PHPTokenId.PHP__LINE__;
          }
        case 257: break;
        case 44:
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 258: break;
        case 88:
          { return PHPTokenId.PHP_EXIT;
          }
        case 259: break;
        case 42:
          { if (aspTagsAllowed) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 260: break;
        case 47:
          { pushState(ST_PHP_COMMENT);
    return PHPTokenId.PHP_COMMENT_START;
          }
        case 261: break;
        case 107:
          { return PHPTokenId.PHP_BREAK;
          }
        case 262: break;
        case 31:
          { if(parenBalanceInConst == 0 && bracketBalanceInConst == 0) {
        isInConst = false;
    }
    yypushback(1);
    popState();
          }
        case 263: break;
        case 22:
          { yypushback(1);
        yybegin(ST_PHP_HEREDOC);
          }
        case 264: break;
        case 162:
          { return PHPTokenId.PHP_INSTEADOF;
          }
        case 265: break;
        case 119:
          { return PHPTokenId.PHP_MATCH;
          }
        case 266: break;
        case 25:
          { /* <ST_PHP_NOWDOC>{NOWDOC_CHARS}|{NEWLINE} */
        // retrun PHPTokenId when the closing marker is found
          }
        case 267: break;
        case 163:
          { return PHPTokenId.PHP_PROTECTED;
          }
        case 268: break;
        case 72:
          { String text = yytext();
    if ((text.charAt(1)=='%' && aspTagsAllowed)
        || (text.charAt(1)=='?')) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.T_OPEN_TAG_WITH_ECHO;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 269: break;
        case 41:
          { popState();
    yypushback(1);
          }
        case 270: break;
        case 121:
          { return PHPTokenId.PHP_PRINT;
          }
        case 271: break;
        case 79:
          { return PHPTokenId.PHP_VAR;
          }
        case 272: break;
        case 176:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.T_INLINE_HTML;
          }
        case 273: break;
        case 13:
          { if (isInConst) {
        pushState(ST_PHP_LOOKING_FOR_CONSTANT_NAME);
    } else if (parenBalanceInScripting > 0) {
        // [NETBEANS-4443] PHP 8.0 Named Arguments
        // look for ", parameterName:"
        pushState(ST_PHP_LOOKING_FOR_PARAMETER_NAME);
    }
    return PHPTokenId.PHP_TOKEN;
          }
        case 274: break;
        case 113:
          { return PHPTokenId.PHP_THROW;
          }
        case 275: break;
        case 135:
          { return PHPTokenId.PHP_PARENT;
          }
        case 276: break;
        case 133:
          { return PHPTokenId.PHP_SWITCH;
          }
        case 277: break;
        case 87:
          { yypushback(2); // go back to mark end of comment in the next token
        return PHPTokenId.PHPDOC_COMMENT;
          }
        case 278: break;
        case 77:
          { return PHPTokenId.PHP_TYPE_INT;
          }
        case 279: break;
        case 123:
          { return PHPTokenId.PHP_CASTING;
          }
        case 280: break;
        case 50:
          { return PHPTokenId.PHP_TEXTUAL_OPERATOR;
          }
        case 281: break;
        case 39:
          { popState();return PHPTokenId.WHITESPACE;
          }
        case 282: break;
        case 76:
          { return PHPTokenId.PHP_DIE;
          }
        case 283: break;
        case 158:
          { return PHPTokenId.PHP__CLASS__;
          }
        case 284: break;
        case 2:
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 285: break;
        case 118:
          { return PHPTokenId.PHP_CLASS;
          }
        case 286: break;
        case 141:
          { return PHPTokenId.PHP_FINALLY;
          }
        case 287: break;
        case 161:
          { return PHPTokenId.PHP_INTERFACE;
          }
        case 288: break;
        case 157:
          { return PHPTokenId.PHP__TRAIT__;
          }
        case 289: break;
        case 122:
          { return PHPTokenId.PHP_UNSET;
          }
        case 290: break;
        case 12:
          { return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 291: break;
        case 28:
          { yypushback(1);
    popState();
          }
        case 292: break;
        case 136:
          { return PHPTokenId.PHP_PUBLIC;
          }
        case 293: break;
        case 21:
          { int indexOfNewline = yytext().indexOf("\r");
        if (indexOfNewline == -1) {
            indexOfNewline = yytext().indexOf("\n");
        }
        if (indexOfNewline > 0) {
            // if index equals 0, don't pushback (infinite loop)
            yypushback(yylength() - indexOfNewline);
        }
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 294: break;
        case 172:
          { return PHPTokenId.PHP_REQUIRE_ONCE;
          }
        case 295: break;
        case 165:
          { return PHPTokenId.PHP_ENDFOREACH;
          }
        case 296: break;
        case 45:
          { // PHP 7.4 Arrow Functions 2.0
    // https://wiki.php.net/rfc/arrow_functions_v2
    return PHPTokenId.PHP_FN;
          }
        case 297: break;
        case 85:
          { return PHPTokenId.PHP_NULLSAFE_OBJECT_OPERATOR;
          }
        case 298: break;
        case 132:
          { return PHPTokenId.PHP_TYPE_STRING;
          }
        case 299: break;
        case 90:
          { return PHPTokenId.PHP_EVAL;
          }
        case 300: break;
        case 82:
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_NULLSAFE_OBJECT_OPERATOR;
          }
        case 301: break;
        case 97:
          { return PHPTokenId.PHP_GOTO;
          }
        case 302: break;
        case 115:
          { isInConst = true;
    parenBalanceInConst = 0;
    bracketBalanceInConst = 0;
    pushState(ST_PHP_LOOKING_FOR_CONSTANT_NAME);
    return PHPTokenId.PHP_CONST;
          }
        case 303: break;
        case 20:
          { popState();
        return PHPTokenId.PHP_STRING;
          }
        case 304: break;
        case 153:
          { return PHPTokenId.PHP_ABSTRACT;
          }
        case 305: break;
        case 27:
          { heredoc=null; hereocLength=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 0;
    // mark just the label
    if (yytext().charAt(yylength() - 1)==';') {
        back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_NOWDOC_TAG_END;
          }
        case 306: break;
        case 5:
          { if ("?".equals(yytext())) { // NOI18N
        // [NETBEANS-4443] PHP 8.0 Named Arguments
        // look for "? [true|false|null] : ..."
        pushState(ST_PHP_LOOKING_FOR_TRUE_FALSE_NULL);
    } else if ("(".equals(yytext())) { // NOI18N
        // [NETBEANS-4443] PHP 8.0 Named Arguments
        // look for "(parameterName:"
        pushState(ST_PHP_LOOKING_FOR_PARAMETER_NAME);
    }
    if(isInConst) {
        // for checking arrays
        // e.g. const CONST = [1, 2], const GOTO = 1;
        String text = yytext();
        switch (text) {
            case "[":
                bracketBalanceInConst++;
                break;
            case "]":
                bracketBalanceInConst--;
                break;
            case "(":
                parenBalanceInConst++;
                break;
            case ")":
                parenBalanceInConst--;
                break;
            default:
                break;
        }
    }
    // [NETBEANS-4443] PHP 8.0 Named Arguments
    switch (yytext()) {
        case "(":
            parenBalanceInScripting++;
            break;
        case ")":
            parenBalanceInScripting--;
            break;
        default:
            break;
    }
    return PHPTokenId.PHP_TOKEN;
          }
        case 307: break;
        case 9:
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 308: break;
        case 64:
          { /* <ST_START_NOWDOC>{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\r\n]? */
    // there is no [\r\n] if it is the last line
    // i.e. not [\r\n] but EOF, so check not [\r\n] but [\r\n]?
    if (isEndNowdoc()) {
        int indexOfNowdocId = yytext().indexOf(heredoc);
        int back = yylength() - indexOfNowdocId - heredoc.length();
        yypushback(back);
        heredoc=null;
        hereocLength=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_NOWDOC_TAG_END;
    } else {
        yypushback(1);
        yybegin(ST_PHP_NOWDOC);
    }
          }
        case 309: break;
        case 91:
          { return PHPTokenId.PHP_ECHO;
          }
        case 310: break;
        case 106:
          { return PHPTokenId.PHP_FINAL;
          }
        case 311: break;
        case 164:
          { return PHPTokenId.PHP__METHOD__;
          }
        case 312: break;
        case 10:
          { return PHPTokenId.PHP_NS_SEPARATOR;
          }
        case 313: break;
        case 124:
          { return PHPTokenId.PHP_YIELD;
          }
        case 314: break;
        case 151:
          { pushState(ST_PHP_LOOKING_FOR_FUNCTION_NAME);
    return PHPTokenId.PHP_FUNCTION;
          }
        case 315: break;
        case 138:
          { return PHPTokenId.PHP__DIR__;
          }
        case 316: break;
        case 4:
          { return  PHPTokenId.PHP_STRING;
          }
        case 317: break;
        case 155:
          { return PHPTokenId.PHP_CONTINUE;
          }
        case 318: break;
        case 62:
          { /* {NEWLINE}{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\n\r]? */
        int trailingNewLineLength = 1;
        if (isEndHeredoc()) {
            String yytext = yytext();
            int newlineLength = yytext.startsWith("\r\n") ? 2 : 1;
            int back = yylength() - newlineLength;
            yypushback(back);
            yybegin(ST_PHP_END_HEREDOC);
        } else {
            // handle variable
            char previousChar = ' ';
            int indexOfVariable = -1;
            for (int i = 0; i < yylength(); i++) {
                char currentChar = yytext().charAt(i);
                if (currentChar == '$' && previousChar == '{') {
                    indexOfVariable = i - 1;
                    break;
                }
                if (currentChar == '$' && previousChar != '\\') {
                    indexOfVariable = i;
                    break;
                }
                previousChar = currentChar;
            }

            if (indexOfVariable == -1) {
                yypushback(trailingNewLineLength);
            } else {
                yypushback(yylength() - indexOfVariable);
                return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
            }
        }
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 319: break;
        case 168:
          { return PHPTokenId.PHP_IMPLEMENTS;
          }
        case 320: break;
        case 137:
          { // [NETBEANS-4443] PHP 8.0: Named Arguments
    int index = firstWhitespaceIndexOf(yytext());
    if (index == -1) {
        yypushback(2); // "::".length()
    } else {
        yypushback(yylength() - index);
    }
    popState();
    String yytext = yytext();
    if ("parent".equalsIgnoreCase(yytext)) { // NOI18N
        return PHPTokenId.PHP_PARENT;
    } else if ("self".equalsIgnoreCase(yytext)) { // NOI18N
        return PHPTokenId.PHP_SELF;
    } else if ("static".equalsIgnoreCase(yytext)) { // NOI18N
        return PHPTokenId.PHP_STATIC;
    }
    assert false : "expected \"parent\", \"self\", or \"static\" but " + "\"" + yytext() + "\""; // NOI18N
    yypushback(yylength());
          }
        case 321: break;
        case 74:
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_NULLSAFE_OBJECT_OPERATOR;
          }
        case 322: break;
        case 78:
          { return PHPTokenId.PHP_TRY;
          }
        case 323: break;
        case 109:
          { return PHPTokenId.PHP_ARRAY;
          }
        case 324: break;
        case 7:
          { return PHPTokenId.WHITESPACE;
          }
        case 325: break;
        case 129:
          { return PHPTokenId.PHP_RETURN;
          }
        case 326: break;
        case 35:
          { return PHPTokenId.PHP_TOKEN;
          }
        case 327: break;
        case 111:
          { return PHPTokenId.PHP_TYPE_NEVER;
          }
        case 328: break;
        case 16:
          { return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 329: break;
        case 116:
          { return PHPTokenId.PHP_CATCH;
          }
        case 330: break;
        case 156:
          { return PHPTokenId.PHP_CALLABLE;
          }
        case 331: break;
        case 83:
          { String text = yytext();
        int lastIndexOfDollar = text.lastIndexOf('$');
        yypushback(text.length() - lastIndexOfDollar);
        return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 332: break;
        case 61:
          { return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 333: break;
        case 167:
          { return PHPTokenId.PHP_INSTANCEOF;
          }
        case 334: break;
        case 142:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
        int startString=3+bprefix;
        /* 3 is <<<, 2 is quotes, 1 is newline */
        hereocLength = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
        while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
            startString++;
            hereocLength--;
        }
        // first quate
        startString++;
        heredoc = yytext().substring(startString, hereocLength+startString);
        yybegin(ST_PHP_START_NOWDOC);
        return PHPTokenId.PHP_NOWDOC_TAG_START;
          }
        case 335: break;
        case 98:
          { return PHPTokenId.PHP_TYPE_BOOL;
          }
        case 336: break;
        case 126:
          { return PHPTokenId.PHP_ENDFOR;
          }
        case 337: break;
        case 73:
          { return PHPTokenId.PHP_FOR;
          }
        case 338: break;
        case 140:
          { return PHPTokenId.PHP_FOREACH;
          }
        case 339: break;
        case 55:
          { pushState(ST_PHP_LOOKING_FOR_STATIC_PROPERTY);
    return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 340: break;
        case 29:
          { popState();
    return PHPTokenId.PHP_STRING;
          }
        case 341: break;
        case 89:
          { return PHPTokenId.PHP_ELSE;
          }
        case 342: break;
        case 96:
          { return PHPTokenId.PHP_SELF;
          }
        case 343: break;
        case 57:
          { yypushback(1);
    return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 344: break;
        case 15:
          { int lastState = stack.peek();
    if (lastState != ST_PHP_IN_SCRIPTING && lastState != YYINITIAL) {
        // probably in some sub state -> "{$" or "${"
        popState();
    }
    return PHPTokenId.PHP_CURLY_CLOSE;
          }
        case 345: break;
        case 52:
          { return PHPTokenId.PHP_DO;
          }
        case 346: break;
        case 99:
          { return PHPTokenId.PHP_TYPE_VOID;
          }
        case 347: break;
        case 150:
          { return PHPTokenId.PHP_ENDWHILE;
          }
        case 348: break;
        case 128:
          { return PHPTokenId.PHP_ELSEIF;
          }
        case 349: break;
        case 94:
          { return PHPTokenId.PHP_TRUE;
          }
        case 350: break;
        case 54:
          { return PHPTokenId.PHP_ATTRIBUTE;
          }
        case 351: break;
        case 171:
          { yypushback(yylength() - 4); // 4: enum length
    return PHPTokenId.PHP_STRING;
          }
        case 352: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
            switch (zzLexicalState) {
            case ST_PHP_COMMENT: {
              if (input.readLength() > 0) {
                input.backup(1);  // backup eof
                return PHPTokenId.PHP_COMMENT;
              }
              else {
                  return null;
              }
            }
            case 821: break;
            case ST_PHP_DOC_COMMENT: {
              if (input.readLength() > 0) {
                    input.backup(1);  // backup eof
                    return PHPTokenId.PHPDOC_COMMENT;
                }
                else {
                    return null;
                }
            }
            case 822: break;
            default:
              {        if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return PHPTokenId.UNKNOWN_TOKEN;
        } else {
            return null;
        }
 }
            }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
