# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: NetBeans

on:
  push:
  pull_request:
    # unlocked event is used as super secret restart button
    types: [opened, synchronize, unlocked]

# cancel other PR workflow run in the same head-base group if it exists (e.g. during PR syncs)
# if this is not a PR run (no github.head_ref and github.base_ref defined), use an UID as group
concurrency: 
  group: ${{ github.head_ref || github.run_id }}-${{ github.base_ref }}
  cancel-in-progress: true

env:

  # note to self: don't remove the minus again
  OPTS: >-
    -Dtest-unit-sys-prop.ignore.random.failures=true

  # what to build and test, see nbbuild/cluster.properties
  CLUSTER_CONFIG: 'full'

  # flags for conditional, long running steps or jobs configurable with labels. If this is not a PR, everything will run.
  # 'Java' label
  test_java: ${{ contains(github.event.pull_request.labels.*.name, 'Java') || contains(github.event.pull_request.labels.*.name, 'ci:all-tests') || github.event_name != 'pull_request' }}

  # 'JavaDoc' or 'API Change' labels
  test_javadoc: ${{ contains(github.event.pull_request.labels.*.name, 'JavaDoc') || contains(github.event.pull_request.labels.*.name, 'API Change') || contains(github.event.pull_request.labels.*.name, 'ci:all-tests') || github.event_name != 'pull_request' }}

  # 'JavaScript' label
  test_javascript: ${{ contains(github.event.pull_request.labels.*.name, 'JavaScript') || contains(github.event.pull_request.labels.*.name, 'ci:all-tests') || github.event_name != 'pull_request' }}

  # 'PHP' label
  test_php: ${{ contains(github.event.pull_request.labels.*.name, 'PHP') || contains(github.event.pull_request.labels.*.name, 'ci:all-tests') || github.event_name != 'pull_request' }}

  # 'Groovy' label
  test_groovy: ${{ contains(github.event.pull_request.labels.*.name, 'Groovy') || contains(github.event.pull_request.labels.*.name, 'ci:all-tests') || github.event_name != 'pull_request' }}

  # 'Rust' label
  test_rust: ${{ contains(github.event.pull_request.labels.*.name, 'Rust') || contains(github.event.pull_request.labels.*.name, 'ci:all-tests') || github.event_name != 'pull_request' }}

  # 'Platform' label
  test_platform: ${{ contains(github.event.pull_request.labels.*.name, 'Platform') || contains(github.event.pull_request.labels.*.name, 'ci:all-tests') || github.event_name != 'pull_request' }}

  # 'tests' label for building all tests
  test_tests: ${{ contains(github.event.pull_request.labels.*.name, 'tests') || contains(github.event.pull_request.labels.*.name, 'ci:all-tests') || github.event_name != 'pull_request' }}

  # 'LSP' label for enabling Language Server Protocol tests
  test_lsp: ${{ contains(github.event.pull_request.labels.*.name, 'LSP') || contains(github.event.pull_request.labels.*.name, 'ci:all-tests') || github.event_name != 'pull_request' }}

  # 'GraalVM' label for tests requirering GraalVM
  test_graalvm: ${{ contains(github.event.pull_request.labels.*.name, 'GraalVM') || contains(github.event.pull_request.labels.*.name, 'ci:all-tests') || github.event_name != 'pull_request' }}

  # 'VSCode Extension' label for building and testing the VSCode Extension
  test_vscode_extension: ${{ contains(github.event.pull_request.labels.*.name, 'VSCode Extension') || contains(github.event.pull_request.labels.*.name, 'ci:all-tests') || github.event_name != 'pull_request' }}

  # 'Ant', 'Gradle', 'Maven' and 'MX' labels trigger build-tools job
  # see job condition (env vars don't work for job conditions https://github.com/actions/runner/issues/1189 )

  # special commands:
  # 'ci:all-tests' enables everything
  # 'ci:no-build' disables the build job (and test jobs too)
  # 'ci:dev-build' produces an artifact containing a runnable NetBeans zip distribution
  
  # default java distribution used by the setup-java action
  # see https://github.com/actions/setup-java#supported-distributions
  default_java_distribution: 'zulu'


jobs:

  nb-javac-smokecheck:
    name: "NetBeans on nb-javac"
    # Run test job only when the 'nb-javac' label is added
    if: ${{ contains(github.event.pull_request.labels.*.name, 'nb-javac') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
            distribution: 'zulu'
            java-version: 11
      - name: Caching dependencies
        uses: actions/cache/restore@v3
        with:
          path: ~/.hgexternalcache
          key: ${{ runner.os }}-${{ hashFiles('*/external/binaries-list', '*/*/external/binaries-list') }}
          restore-keys: ${{ runner.os }}-
      - name: Download External Binaries
        run: ant $OPTS download-all-extbins
      - name: Build NetBeans with nb-javac
        run: ant $OPTS build -Dnbjavac.class.path=java/libs.javacapi/external/*.jar
      - name: Setup Xvfb
        run: |
          echo "DISPLAY=:99.0" >> $GITHUB_ENV
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
      - name: Test with Commit Validation
        run: ant $OPTS commit-validation -Dnbjavac.class.path=java/libs.javacapi/external/*.jar
