/* The following code was generated by JFlex 1.4.3 on 2023/03/21 15:18 */

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.netbeans.modules.php.editor.parser;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import org.netbeans.modules.php.editor.parser.astnodes.*;
import org.netbeans.modules.web.common.api.ByteStack;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP2", "UUF_UNUSED_FIELD"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2023/03/21 15:18 from the specification file
 * <tt>/home/junichi11/NetBeansProjects/netbeans/php/php.editor/tools/ASTPHP5Scanner.flex</tt>
 */
public class ASTPHP5Scanner implements Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_DOCBLOCK = 28;
  public static final int ST_END_HEREDOC = 12;
  public static final int ST_DOUBLE_QUOTES = 4;
  public static final int ST_LOOKING_FOR_VARNAME = 22;
  public static final int ST_LOOKING_FOR_PROPERTY = 20;
  public static final int ST_IN_SHORT_ECHO = 32;
  public static final int ST_END_NOWDOC = 18;
  public static final int ST_COMMENT = 26;
  public static final int ST_ONE_LINE_COMMENT = 30;
  public static final int ST_HALTED_COMPILER = 34;
  public static final int ST_START_NOWDOC = 16;
  public static final int ST_VAR_OFFSET = 24;
  public static final int ST_IN_SCRIPTING = 2;
  public static final int ST_HEREDOC = 8;
  public static final int YYINITIAL = 0;
  public static final int ST_NOWDOC = 14;
  public static final int ST_START_HEREDOC = 10;
  public static final int ST_BACKQUOTE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
    16, 16, 17, 17
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\23\1\22\2\0\1\24\22\0\1\23\1\67\1\26\1\44"+
    "\1\25\1\73\1\74\1\105\1\63\1\64\1\71\1\5\1\77\1\56"+
    "\1\3\1\72\1\6\1\12\6\14\2\1\1\61\1\31\1\70\1\32"+
    "\1\57\1\60\1\102\1\10\1\11\1\41\1\35\1\4\1\36\1\54"+
    "\1\51\1\33\1\65\1\53\1\47\1\50\1\37\1\13\1\55\1\66"+
    "\1\43\1\42\1\34\1\40\1\62\1\52\1\7\1\46\1\17\1\45"+
    "\1\21\1\100\1\76\1\2\1\27\1\10\1\11\1\41\1\35\1\4"+
    "\1\36\1\54\1\51\1\33\1\65\1\53\1\47\1\50\1\37\1\13"+
    "\1\55\1\66\1\43\1\104\1\34\1\40\1\62\1\52\1\7\1\46"+
    "\1\17\1\30\1\75\1\103\1\101\1\16\52\17\1\17\12\17\1\17"+
    "\4\17\1\17\5\17\27\17\1\17\37\17\1\17\10\17\u01c2\15\4\0"+
    "\14\15\16\0\5\15\7\0\1\15\1\0\1\15\201\0\5\15\1\0"+
    "\2\15\2\0\4\15\1\0\1\15\6\0\1\15\1\0\3\15\1\0"+
    "\1\15\1\0\24\15\1\0\123\15\1\0\213\15\10\0\246\15\1\0"+
    "\46\15\2\0\1\15\7\0\47\15\110\0\33\15\5\0\3\15\55\0"+
    "\53\15\25\0\12\20\4\0\2\15\1\0\143\15\1\0\1\15\17\0"+
    "\2\15\7\0\2\15\12\20\3\15\2\0\1\15\20\0\1\15\1\0"+
    "\36\15\35\0\131\15\13\0\1\15\16\0\12\20\41\15\11\0\2\15"+
    "\4\0\1\15\5\0\26\15\4\0\1\15\11\0\1\15\3\0\1\15"+
    "\27\0\31\15\7\0\13\15\65\0\25\15\1\0\10\15\106\0\66\15"+
    "\3\0\1\15\22\0\1\15\7\0\12\15\4\0\12\20\1\0\20\15"+
    "\4\0\10\15\2\0\2\15\2\0\26\15\1\0\7\15\1\0\1\15"+
    "\3\0\4\15\3\0\1\15\20\0\1\15\15\0\2\15\1\0\3\15"+
    "\4\0\12\20\2\15\12\0\1\15\10\0\6\15\4\0\2\15\2\0"+
    "\26\15\1\0\7\15\1\0\2\15\1\0\2\15\1\0\2\15\37\0"+
    "\4\15\1\0\1\15\7\0\12\20\2\0\3\15\20\0\11\15\1\0"+
    "\3\15\1\0\26\15\1\0\7\15\1\0\2\15\1\0\5\15\3\0"+
    "\1\15\22\0\1\15\17\0\2\15\4\0\12\20\11\0\1\15\13\0"+
    "\10\15\2\0\2\15\2\0\26\15\1\0\7\15\1\0\2\15\1\0"+
    "\5\15\3\0\1\15\36\0\2\15\1\0\3\15\4\0\12\20\1\0"+
    "\1\15\21\0\1\15\1\0\6\15\3\0\3\15\1\0\4\15\3\0"+
    "\2\15\1\0\1\15\1\0\2\15\3\0\2\15\3\0\3\15\3\0"+
    "\14\15\26\0\1\15\25\0\12\20\25\0\10\15\1\0\3\15\1\0"+
    "\27\15\1\0\20\15\3\0\1\15\32\0\3\15\5\0\2\15\4\0"+
    "\12\20\20\0\1\15\4\0\10\15\1\0\3\15\1\0\27\15\1\0"+
    "\12\15\1\0\5\15\3\0\1\15\40\0\1\15\1\0\2\15\4\0"+
    "\12\20\1\0\2\15\22\0\10\15\1\0\3\15\1\0\51\15\2\0"+
    "\1\15\20\0\1\15\5\0\3\15\10\0\3\15\4\0\12\20\12\0"+
    "\6\15\5\0\22\15\3\0\30\15\1\0\11\15\1\0\1\15\2\0"+
    "\7\15\37\0\12\20\21\0\60\15\1\0\2\15\14\0\7\15\11\0"+
    "\12\20\47\0\2\15\1\0\1\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\6\0\4\15\1\0\7\15\1\0\3\15\1\0\1\15\1\0"+
    "\1\15\2\0\2\15\1\0\4\15\1\0\2\15\11\0\1\15\2\0"+
    "\5\15\1\0\1\15\11\0\12\20\2\0\4\15\40\0\1\15\37\0"+
    "\12\20\26\0\10\15\1\0\44\15\33\0\5\15\163\0\53\15\24\0"+
    "\1\15\12\20\6\0\6\15\4\0\4\15\3\0\1\15\3\0\2\15"+
    "\7\0\3\15\4\0\15\15\14\0\1\15\1\0\12\20\6\0\46\15"+
    "\1\0\1\15\5\0\1\15\2\0\53\15\1\0\u014d\15\1\0\4\15"+
    "\2\0\7\15\1\0\1\15\1\0\4\15\2\0\51\15\1\0\4\15"+
    "\2\0\41\15\1\0\4\15\2\0\7\15\1\0\1\15\1\0\4\15"+
    "\2\0\17\15\1\0\71\15\1\0\4\15\2\0\103\15\45\0\20\15"+
    "\20\0\126\15\2\0\6\15\3\0\u026c\15\2\0\21\15\1\0\32\15"+
    "\5\0\113\15\6\0\10\15\7\0\15\15\1\0\4\15\16\0\22\15"+
    "\16\0\22\15\16\0\15\15\1\0\3\15\17\0\64\15\43\0\1\15"+
    "\4\0\1\15\3\0\12\20\46\0\12\20\6\0\130\15\10\0\5\15"+
    "\2\0\42\15\1\0\1\15\5\0\106\15\12\0\37\15\47\0\12\20"+
    "\36\15\2\0\5\15\13\0\54\15\4\0\32\15\6\0\12\20\46\0"+
    "\27\15\11\0\65\15\53\0\12\20\6\0\12\20\15\0\1\15\135\0"+
    "\57\15\21\0\7\15\4\0\12\20\51\0\36\15\15\0\2\15\12\20"+
    "\54\15\32\0\44\15\34\0\12\20\3\0\3\15\12\20\44\15\2\0"+
    "\11\15\140\0\4\15\1\0\4\15\3\0\2\15\11\0\300\15\100\0"+
    "\u0116\15\2\0\6\15\2\0\46\15\2\0\6\15\2\0\10\15\1\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\37\15\2\0\65\15\1\0"+
    "\7\15\1\0\1\15\3\0\3\15\1\0\7\15\3\0\4\15\2\0"+
    "\6\15\4\0\15\15\5\0\3\15\1\0\7\15\164\0\1\15\15\0"+
    "\1\15\20\0\15\15\145\0\1\15\4\0\1\15\2\0\12\15\1\0"+
    "\1\15\3\0\5\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\4\15\1\0\13\15\2\0\4\15\5\0\5\15\4\0\1\15\64\0"+
    "\2\15\u0a7b\0\57\15\1\0\57\15\1\0\205\15\6\0\4\15\3\0"+
    "\2\15\14\0\46\15\1\0\1\15\5\0\1\15\2\0\70\15\7\0"+
    "\1\15\20\0\27\15\11\0\7\15\1\0\7\15\1\0\7\15\1\0"+
    "\7\15\1\0\7\15\1\0\7\15\1\0\7\15\1\0\7\15\120\0"+
    "\1\15\u01d5\0\2\15\52\0\5\15\5\0\2\15\4\0\126\15\6\0"+
    "\3\15\1\0\132\15\1\0\4\15\5\0\52\15\2\0\136\15\21\0"+
    "\33\15\65\0\20\15\u0200\0\u19b6\15\112\0\u51eb\15\25\0\u048d\15\103\0"+
    "\56\15\2\0\u010d\15\3\0\20\15\12\20\2\15\24\0\57\15\20\0"+
    "\37\15\2\0\106\15\61\0\11\15\2\0\147\15\2\0\44\15\1\0"+
    "\10\15\77\0\13\15\1\0\3\15\1\0\4\15\1\0\27\15\35\0"+
    "\64\15\16\0\62\15\34\0\12\20\30\0\6\15\3\0\1\15\1\0"+
    "\1\15\2\0\12\20\34\15\12\0\27\15\31\0\35\15\7\0\57\15"+
    "\34\0\1\15\12\20\6\0\5\15\1\0\12\15\12\20\5\15\1\0"+
    "\51\15\27\0\3\15\1\0\10\15\4\0\12\20\6\0\27\15\3\0"+
    "\1\15\3\0\62\15\1\0\1\15\3\0\2\15\2\0\5\15\2\0"+
    "\1\15\1\0\1\15\30\0\3\15\2\0\13\15\7\0\3\15\14\0"+
    "\6\15\2\0\6\15\2\0\6\15\11\0\7\15\1\0\7\15\1\0"+
    "\53\15\1\0\12\15\12\0\163\15\15\0\12\20\6\0\u2ba4\15\14\0"+
    "\27\15\4\0\61\15\u2104\0\u016e\15\2\0\152\15\46\0\7\15\14\0"+
    "\5\15\5\0\1\15\1\0\12\15\1\0\15\15\1\0\5\15\1\0"+
    "\1\15\1\0\2\15\1\0\2\15\1\0\154\15\41\0\u016b\15\22\0"+
    "\100\15\2\0\66\15\50\0\14\15\164\0\5\15\1\0\207\15\23\0"+
    "\12\20\7\0\32\15\6\0\32\15\13\0\131\15\3\0\6\15\2\0"+
    "\6\15\2\0\6\15\2\0\3\15\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\22\0\2\1\1\2\1\3\1\4\1\5\1\4\1\6"+
    "\1\3\5\4\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\11\4\1\17\1\20\6\4\1\21\1\22"+
    "\1\23\1\24\1\4\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\2\1\44\2\2\1\45\1\2\1\46"+
    "\2\2\1\47\1\2\1\50\1\2\2\50\2\51\3\52"+
    "\1\53\1\2\1\54\1\2\2\54\3\55\1\56\1\2"+
    "\1\57\1\60\2\57\1\61\1\62\1\63\1\4\1\5"+
    "\1\6\1\63\1\64\1\65\1\66\1\67\1\16\1\21"+
    "\1\22\1\23\1\24\1\25\1\27\1\30\1\31\1\32"+
    "\1\33\1\70\1\35\1\36\1\71\1\72\1\73\1\74"+
    "\2\2\3\75\2\74\1\76\1\1\1\0\1\77\1\100"+
    "\1\1\1\0\1\101\1\0\1\4\1\0\1\101\1\0"+
    "\1\102\6\4\1\103\1\104\3\0\3\4\1\105\2\4"+
    "\2\0\1\106\1\107\1\110\3\0\1\111\1\0\1\112"+
    "\1\113\1\114\6\4\1\115\3\4\1\116\13\4\1\117"+
    "\10\4\1\120\1\121\1\122\1\123\1\124\1\0\1\125"+
    "\1\126\1\127\1\4\12\0\1\130\1\131\1\130\1\132"+
    "\1\0\1\133\1\134\1\135\1\136\1\17\1\137\1\140"+
    "\2\0\1\141\1\142\1\143\1\144\1\145\1\146\4\0"+
    "\2\110\2\147\1\150\1\151\1\147\3\0\1\110\3\152"+
    "\3\0\1\153\1\0\2\154\1\0\1\53\3\0\1\155"+
    "\1\0\1\54\2\156\1\0\1\56\1\0\1\157\2\0"+
    "\1\160\2\0\1\161\2\0\1\162\1\163\1\164\2\0"+
    "\1\101\1\0\10\4\1\165\1\0\1\166\10\4\2\101"+
    "\1\167\1\170\1\4\1\171\2\4\2\0\1\172\6\4"+
    "\1\173\3\4\1\174\1\175\2\4\1\176\2\4\1\177"+
    "\24\4\1\200\1\201\2\125\1\202\1\203\12\0\1\204"+
    "\1\205\1\206\2\0\1\207\1\0\1\210\1\0\2\140"+
    "\1\0\1\211\1\0\1\211\1\44\1\211\1\46\1\212"+
    "\1\0\1\213\1\0\1\153\1\155\1\214\2\160\1\215"+
    "\2\0\20\4\1\216\1\217\1\4\1\220\23\4\1\221"+
    "\13\4\1\222\2\4\1\223\5\4\17\0\1\224\3\0"+
    "\1\44\1\46\1\212\2\0\12\4\1\225\4\4\1\0"+
    "\1\4\1\226\1\4\1\227\1\230\4\4\1\231\1\4"+
    "\1\232\1\233\4\4\1\234\2\4\1\235\1\236\2\4"+
    "\1\237\1\240\1\241\5\4\1\242\1\243\1\244\3\4"+
    "\1\245\1\4\6\0\1\246\5\0\2\247\5\0\3\250"+
    "\2\251\1\0\13\4\1\252\2\4\3\253\1\254\7\4"+
    "\1\255\7\4\1\256\1\257\1\4\1\260\1\4\1\0"+
    "\1\261\1\262\2\4\3\0\1\263\6\0\1\264\6\0"+
    "\1\4\1\265\7\4\1\266\4\4\2\0\2\4\1\267"+
    "\3\4\1\270\1\271\1\272\1\273\5\4\1\274\1\0"+
    "\1\4\1\275\1\276\4\0\1\277\2\300\4\0\1\4"+
    "\1\301\3\4\1\302\5\4\1\303\2\0\1\304\5\4"+
    "\1\305\1\4\1\306\1\307\1\310\1\4\1\0\1\4"+
    "\1\311\1\312\5\0\1\313\2\4\1\314\4\4\1\315"+
    "\2\0\1\316\1\4\1\317\2\4\1\320\1\4\1\0"+
    "\1\321\5\0\2\4\1\322\1\4\1\323\1\324\2\0"+
    "\1\4\1\325\1\326\1\0\1\4\1\327\10\0\3\4"+
    "\2\0\1\4\1\330\1\4\7\0\1\331\2\4\1\332"+
    "\1\0\1\333\1\334\2\0\1\335\1\0\1\336\1\4"+
    "\6\0\1\4\2\0\1\337\1\0\1\4\7\0\1\340"+
    "\7\0\1\77\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[842];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a"+
    "\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a"+
    "\0\u08c0\0\u0906\0\u094c\0\u0992\0\u0578\0\u0578\0\u0578\0\u09d8"+
    "\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08"+
    "\0\u0c4e\0\u0c94\0\u0578\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2"+
    "\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u0578"+
    "\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c"+
    "\0\u0578\0\u0578\0\u0578\0\u0578\0\u0578\0\u1252\0\u1298\0\u12de"+
    "\0\u1324\0\u0578\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u0578\0\u1482"+
    "\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626\0\u0578\0\u166c"+
    "\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u0578"+
    "\0\u189c\0\u18e2\0\u1928\0\u196e\0\u0578\0\u19b4\0\u19fa\0\u1a40"+
    "\0\u0578\0\u1a86\0\u1acc\0\u1b12\0\u0578\0\u0578\0\u1b58\0\u0578"+
    "\0\u0578\0\u0578\0\u0578\0\u0578\0\u0578\0\u0578\0\u0578\0\u0578"+
    "\0\u0578\0\u0578\0\u0578\0\u0578\0\u0578\0\u0578\0\u0578\0\u0578"+
    "\0\u0578\0\u0578\0\u0578\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6"+
    "\0\u0578\0\u1cfc\0\u0578\0\u1d42\0\u0578\0\u04a6\0\u1d88\0\u1dce"+
    "\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe"+
    "\0\u2044\0\u0578\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8"+
    "\0\u0578\0\u0578\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c"+
    "\0\u087a\0\u23d2\0\u2418\0\u245e\0\u1252\0\u087a\0\u24a4\0\u24ea"+
    "\0\u0992\0\u2530\0\u2576\0\u0578\0\u25bc\0\u2602\0\u0578\0\u087a"+
    "\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u087a\0\u27ec"+
    "\0\u2832\0\u2878\0\u087a\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6"+
    "\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u0578\0\u2bc0"+
    "\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u0578"+
    "\0\u0578\0\u0578\0\u0578\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u0578"+
    "\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u0fdc\0\u3020\0\u3066\0\u30ac"+
    "\0\u30f2\0\u3138\0\u317e\0\u31c4\0\u320a\0\u0578\0\u3250\0\u3296"+
    "\0\u0578\0\u32dc\0\u0578\0\u3322\0\u0578\0\u0578\0\u3368\0\u33ae"+
    "\0\u33f4\0\u0578\0\u0578\0\u0578\0\u0578\0\u0578\0\u0578\0\u343a"+
    "\0\u12de\0\u3480\0\u34c6\0\u350c\0\u3552\0\u3480\0\u0578\0\u0578"+
    "\0\u0578\0\u34c6\0\u13f6\0\u3598\0\u35de\0\u3624\0\u3598\0\u0578"+
    "\0\u35de\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u3782\0\u166c\0\u0578"+
    "\0\u16b2\0\u0578\0\u173e\0\u17ca\0\u1784\0\u37c8\0\u380e\0\u3854"+
    "\0\u189c\0\u0578\0\u18e2\0\u0578\0\u196e\0\u0578\0\u389a\0\u38e0"+
    "\0\u3926\0\u396c\0\u39b2\0\u0578\0\u1c2a\0\u39f8\0\u0578\0\u0578"+
    "\0\u0578\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u3be2"+
    "\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40\0\u3d86\0\u3dcc\0\u0578"+
    "\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6\0\u3ffc"+
    "\0\u4042\0\u4088\0\u40ce\0\u087a\0\u4114\0\u087a\0\u415a\0\u41a0"+
    "\0\u41e6\0\u08c0\0\u0578\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u4344"+
    "\0\u438a\0\u087a\0\u43d0\0\u4416\0\u445c\0\u087a\0\u44a2\0\u44e8"+
    "\0\u452e\0\u087a\0\u4574\0\u45ba\0\u087a\0\u4600\0\u4646\0\u468c"+
    "\0\u46d2\0\u4718\0\u475e\0\u47a4\0\u47ea\0\u4830\0\u4876\0\u48bc"+
    "\0\u4902\0\u4948\0\u498e\0\u49d4\0\u4a1a\0\u4a60\0\u4aa6\0\u4aec"+
    "\0\u4b32\0\u0578\0\u0578\0\u0578\0\u4b78\0\u0578\0\u087a\0\u4bbe"+
    "\0\u4c04\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8\0\u4dee"+
    "\0\u4e34\0\u0578\0\u0578\0\u0578\0\u4e7a\0\u4ec0\0\u0578\0\u4f06"+
    "\0\u4f4c\0\u4f92\0\u0578\0\u4fd8\0\u501e\0\u0578\0\u5064\0\u1298"+
    "\0\u50aa\0\u13b0\0\u50f0\0\u5136\0\u517c\0\u0578\0\u51c2\0\u0578"+
    "\0\u0578\0\u0578\0\u5208\0\u524e\0\u0578\0\u5294\0\u52da\0\u5320"+
    "\0\u5366\0\u53ac\0\u53f2\0\u5438\0\u547e\0\u54c4\0\u550a\0\u5550"+
    "\0\u5596\0\u55dc\0\u5622\0\u5668\0\u56ae\0\u56f4\0\u573a\0\u087a"+
    "\0\u5780\0\u57c6\0\u087a\0\u580c\0\u5852\0\u5898\0\u58de\0\u5924"+
    "\0\u596a\0\u59b0\0\u59f6\0\u5a3c\0\u5a82\0\u5ac8\0\u5b0e\0\u5b54"+
    "\0\u5b9a\0\u5be0\0\u5c26\0\u5c6c\0\u5cb2\0\u5cf8\0\u087a\0\u5d3e"+
    "\0\u5d84\0\u5dca\0\u5e10\0\u5e56\0\u5e9c\0\u5ee2\0\u5f28\0\u5f6e"+
    "\0\u5fb4\0\u5ffa\0\u087a\0\u6040\0\u6086\0\u087a\0\u60cc\0\u6112"+
    "\0\u6158\0\u619e\0\u61e4\0\u622a\0\u6270\0\u62b6\0\u62fc\0\u6342"+
    "\0\u6388\0\u63ce\0\u6414\0\u645a\0\u64a0\0\u64e6\0\u652c\0\u6572"+
    "\0\u65b8\0\u65fe\0\u0578\0\u6644\0\u668a\0\u66d0\0\u6716\0\u675c"+
    "\0\u0578\0\u67a2\0\u67e8\0\u682e\0\u6874\0\u68ba\0\u6900\0\u6946"+
    "\0\u698c\0\u69d2\0\u6a18\0\u6a5e\0\u6aa4\0\u087a\0\u6aea\0\u6b30"+
    "\0\u6b76\0\u6bbc\0\u6c02\0\u6c48\0\u087a\0\u6c8e\0\u087a\0\u087a"+
    "\0\u6cd4\0\u6d1a\0\u6d60\0\u6da6\0\u087a\0\u6dec\0\u087a\0\u087a"+
    "\0\u6e32\0\u6e78\0\u6ebe\0\u6f04\0\u6f4a\0\u6f90\0\u6fd6\0\u087a"+
    "\0\u087a\0\u701c\0\u7062\0\u087a\0\u087a\0\u087a\0\u70a8\0\u70ee"+
    "\0\u7134\0\u717a\0\u71c0\0\u7206\0\u087a\0\u087a\0\u724c\0\u7292"+
    "\0\u72d8\0\u087a\0\u731e\0\u7364\0\u73aa\0\u73f0\0\u7436\0\u747c"+
    "\0\u74c2\0\u0578\0\u7508\0\u754e\0\u7594\0\u75da\0\u7620\0\u0578"+
    "\0\u7666\0\u76ac\0\u76f2\0\u7738\0\u777e\0\u77c4\0\u0578\0\u1298"+
    "\0\u13b0\0\u0578\0\u780a\0\u7850\0\u7896\0\u78dc\0\u7922\0\u7968"+
    "\0\u79ae\0\u79f4\0\u7a3a\0\u7a80\0\u7ac6\0\u7b0c\0\u7b52\0\u7b98"+
    "\0\u7bde\0\u7c24\0\u0578\0\u7c6a\0\u7cb0\0\u087a\0\u7cf6\0\u7d3c"+
    "\0\u7d82\0\u7dc8\0\u7e0e\0\u7e54\0\u7e9a\0\u087a\0\u7ee0\0\u7f26"+
    "\0\u7f6c\0\u7fb2\0\u7ff8\0\u803e\0\u8084\0\u087a\0\u087a\0\u80ca"+
    "\0\u087a\0\u8110\0\u8156\0\u087a\0\u087a\0\u819c\0\u81e2\0\u8228"+
    "\0\u826e\0\u82b4\0\u0578\0\u82fa\0\u8340\0\u8386\0\u83cc\0\u8412"+
    "\0\u8458\0\u0578\0\u849e\0\u84e4\0\u852a\0\u8570\0\u85b6\0\u85fc"+
    "\0\u8642\0\u087a\0\u8688\0\u86ce\0\u8714\0\u875a\0\u87a0\0\u87e6"+
    "\0\u882c\0\u087a\0\u8872\0\u88b8\0\u88fe\0\u8944\0\u898a\0\u89d0"+
    "\0\u8a16\0\u8a5c\0\u8aa2\0\u8ae8\0\u8b2e\0\u8b74\0\u087a\0\u087a"+
    "\0\u087a\0\u087a\0\u8bba\0\u8c00\0\u8c46\0\u8c8c\0\u8cd2\0\u8d18"+
    "\0\u8d5e\0\u8da4\0\u087a\0\u0578\0\u8dea\0\u8e30\0\u8e76\0\u8ebc"+
    "\0\u0578\0\u0578\0\u8f02\0\u8f48\0\u8f8e\0\u8fd4\0\u901a\0\u9060"+
    "\0\u087a\0\u90a6\0\u90ec\0\u9132\0\u087a\0\u9178\0\u91be\0\u9204"+
    "\0\u924a\0\u9290\0\u087a\0\u92d6\0\u931c\0\u087a\0\u9362\0\u93a8"+
    "\0\u93ee\0\u9434\0\u947a\0\u087a\0\u94c0\0\u087a\0\u087a\0\u087a"+
    "\0\u9506\0\u954c\0\u9592\0\u0578\0\u0578\0\u95d8\0\u961e\0\u9664"+
    "\0\u96aa\0\u96f0\0\u087a\0\u9736\0\u977c\0\u087a\0\u97c2\0\u9808"+
    "\0\u984e\0\u9894\0\u087a\0\u98da\0\u9920\0\u087a\0\u9966\0\u087a"+
    "\0\u99ac\0\u99f2\0\u9a38\0\u9a7e\0\u9ac4\0\u087a\0\u9b0a\0\u9b50"+
    "\0\u9b96\0\u9bdc\0\u9c22\0\u9c68\0\u9cae\0\u087a\0\u9cf4\0\u087a"+
    "\0\u087a\0\u9d3a\0\u9d80\0\u9dc6\0\u087a\0\u087a\0\u9e0c\0\u9e52"+
    "\0\u0578\0\u9e98\0\u9ede\0\u9f24\0\u9f6a\0\u9fb0\0\u9ff6\0\ua03c"+
    "\0\ua082\0\ua0c8\0\ua10e\0\ua154\0\ua19a\0\ua1e0\0\ua226\0\ua26c"+
    "\0\ua2b2\0\ua2f8\0\ua33e\0\ua384\0\ua3ca\0\ua410\0\ua456\0\ua49c"+
    "\0\u087a\0\ua4e2\0\ua528\0\u0578\0\ua56e\0\u087a\0\u087a\0\ua5b4"+
    "\0\ua5fa\0\u0578\0\ua640\0\u087a\0\ua686\0\ua6cc\0\ua712\0\ua758"+
    "\0\ua79e\0\ua7e4\0\ua82a\0\ua870\0\ua8b6\0\ua8fc\0\ua712\0\ua942"+
    "\0\ua988\0\ua9ce\0\uaa14\0\uaa5a\0\uaaa0\0\uaae6\0\uab2c\0\uab72"+
    "\0\u0578\0\uabb8\0\uabfe\0\uac44\0\uac8a\0\uacd0\0\uad16\0\uad5c"+
    "\0\u0578\0\uada2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[842];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\70\23\1\24\15\23\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\26\1\37\1\26"+
    "\3\40\1\25\1\41\3\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\40\1\67\1\40\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\2\40\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\115\1\60\1\116\21\117\1\120\3\117\1\121"+
    "\1\122\1\117\1\123\55\117\21\124\1\125\3\124\1\126"+
    "\1\124\1\127\1\130\55\124\21\131\1\132\1\133\1\131"+
    "\1\134\1\135\2\131\1\136\55\131\2\137\1\140\1\137"+
    "\1\140\2\137\3\140\1\137\1\140\1\137\3\140\3\137"+
    "\1\141\7\137\11\140\2\137\10\140\4\137\1\140\2\137"+
    "\2\140\15\137\1\140\1\137\2\25\1\142\1\25\1\142"+
    "\2\25\3\142\1\25\1\142\1\25\3\142\3\25\1\143"+
    "\7\25\11\142\2\25\10\142\4\25\1\142\2\25\2\142"+
    "\15\25\1\142\1\25\2\144\1\145\1\144\1\145\2\144"+
    "\3\145\1\144\1\145\2\144\2\145\2\144\1\146\1\144"+
    "\1\147\6\144\11\145\2\144\10\145\4\144\1\145\2\144"+
    "\2\145\15\144\1\145\1\144\2\150\1\151\1\150\1\151"+
    "\2\150\3\151\1\150\1\151\1\150\3\151\3\150\1\152"+
    "\7\150\11\151\2\150\10\151\4\150\1\151\2\150\2\151"+
    "\15\150\1\151\1\150\2\25\1\153\1\25\1\153\2\25"+
    "\3\153\1\25\1\153\1\25\3\153\3\25\1\154\7\25"+
    "\11\153\2\25\10\153\4\25\1\153\2\25\2\153\15\25"+
    "\1\153\1\25\2\155\1\156\1\155\1\156\2\155\3\156"+
    "\1\155\1\156\1\155\3\156\2\155\3\42\6\155\11\156"+
    "\2\155\10\156\1\157\1\155\1\160\1\155\1\156\2\155"+
    "\2\156\15\155\1\156\1\155\2\161\1\162\1\161\1\162"+
    "\2\161\3\162\1\161\1\162\1\161\3\162\13\161\11\162"+
    "\2\161\10\162\4\161\1\162\2\161\2\162\15\161\1\162"+
    "\1\161\1\25\1\163\1\164\1\165\1\164\1\166\1\167"+
    "\3\164\1\163\1\164\1\163\3\164\1\25\4\170\1\43"+
    "\1\171\1\172\1\173\1\47\1\174\11\164\1\170\1\63"+
    "\10\164\1\175\1\176\1\177\1\200\1\164\1\201\1\100"+
    "\2\164\1\202\1\203\1\204\1\205\1\206\1\207\1\210"+
    "\1\211\1\111\1\212\1\113\1\114\1\213\1\164\1\170"+
    "\71\214\1\215\14\214\71\216\1\217\14\216\22\220\1\221"+
    "\1\220\1\222\32\220\1\223\1\224\12\220\1\224\12\220"+
    "\32\0\1\225\53\0\106\226\70\23\1\227\75\23\1\230"+
    "\7\23\1\0\2\23\1\231\10\23\1\232\1\23\107\0"+
    "\1\26\1\233\1\234\1\235\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\72\0\1\40\1\236\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\1\240\1\0\1\241"+
    "\2\0\1\240\3\0\1\240\1\0\1\240\15\0\1\242"+
    "\54\0\2\40\1\0\1\40\1\0\1\40\1\243\11\40"+
    "\1\237\11\0\4\40\1\244\1\40\1\245\2\40\2\0"+
    "\1\40\1\246\1\247\5\40\4\0\1\250\2\0\2\40"+
    "\15\0\1\40\6\0\1\251\24\0\1\252\54\0\1\26"+
    "\1\233\1\234\1\235\1\0\1\26\1\253\1\0\1\254"+
    "\1\26\1\255\1\26\72\0\2\40\1\0\1\40\1\0"+
    "\5\40\1\256\5\40\1\237\11\0\11\40\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\3\40\1\257\7\40\1\237\11\0"+
    "\4\40\1\260\2\40\1\261\1\262\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\261\2\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\4\0\1\44\4\0\10\40"+
    "\1\263\2\0\10\40\4\0\1\40\2\0\2\40\1\0"+
    "\1\264\13\0\1\40\1\265\1\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\10\40\1\266\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\11\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\3\0"+
    "\1\267\1\0\1\267\2\0\3\267\1\0\1\267\1\0"+
    "\3\267\13\0\11\267\2\0\10\267\4\0\1\267\2\0"+
    "\2\267\15\0\1\267\23\0\3\42\63\0\1\270\1\0"+
    "\1\270\2\0\3\270\1\0\1\270\1\0\3\270\13\0"+
    "\11\270\2\0\10\270\4\0\1\270\2\0\2\270\15\0"+
    "\1\270\1\0\21\271\1\272\3\271\1\273\1\274\1\271"+
    "\1\275\55\271\32\0\1\276\24\0\1\277\27\0\2\40"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\3\40\1\300"+
    "\1\301\2\40\1\302\1\40\2\0\2\40\1\303\5\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\302\2\0\2\40"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\10\40\1\304"+
    "\2\0\3\40\1\305\4\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\306\1\0\5\40"+
    "\1\307\5\40\1\237\11\0\1\310\10\40\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\5\40\1\311\5\40\1\237\11\0"+
    "\1\312\3\40\1\313\1\314\3\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\315\1\0\2\40\1\316\10\40\1\237\11\0\11\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\4\40\1\317\2\40\1\320\1\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\320\2\0\2\40\1\0"+
    "\1\40\1\0\2\40\1\321\2\40\1\322\5\40\1\237"+
    "\11\0\11\40\2\0\1\40\1\323\6\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\1\40\1\324\7\40\2\0"+
    "\4\40\1\325\3\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\2\0\2\40\1\0\1\326\1\0\13\40\1\237"+
    "\11\0\11\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\46\0\1\327\41\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\1\330\10\40\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\1\331\10\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\2\40\1\332\10\40"+
    "\1\237\11\0\11\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\3\40\1\333\4\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\5\40\1\334\5\40\1\237\11\0"+
    "\11\40\2\0\1\40\1\335\6\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\5\40\1\336\2\40\1\337\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\33\0"+
    "\1\340\23\0\1\341\1\342\60\0\1\343\24\0\1\344"+
    "\104\0\1\345\1\346\1\347\106\0\1\350\25\0\2\40"+
    "\1\0\1\40\1\0\2\40\1\351\10\40\1\237\11\0"+
    "\11\40\2\0\10\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\11\0\1\352\1\353\1\0\1\354\7\0\1\355"+
    "\7\0\1\356\1\0\1\357\1\360\1\0\1\361\1\0"+
    "\1\362\1\363\40\0\1\362\33\0\1\364\105\0\1\365"+
    "\24\0\1\366\10\0\1\367\1\0\1\370\45\0\1\371"+
    "\36\0\1\372\46\0\1\373\36\0\1\374\1\375\45\0"+
    "\1\376\24\0\1\377\31\0\1\u0100\17\0\1\u0101\1\0"+
    "\1\u0102\4\0\1\u0103\41\0\1\u0104\43\0\1\u0105\42\0"+
    "\1\u0106\42\0\1\u0107\53\0\21\265\1\u0108\63\265\1\274"+
    "\21\117\1\u0109\3\117\1\u010a\1\0\1\117\1\u010b\165\117"+
    "\1\u010c\1\117\1\u010c\2\117\3\u010c\1\117\1\u010c\1\117"+
    "\1\u010d\2\u010c\1\117\1\u0109\3\117\1\u010e\1\u010f\1\117"+
    "\1\u0110\2\117\11\u010c\2\117\10\u010c\4\117\1\u010c\2\117"+
    "\2\u010c\15\117\1\u010c\22\117\1\u0109\3\117\1\u0111\1\u010f"+
    "\1\117\1\u0112\55\117\21\124\1\u0113\3\124\1\u0114\1\124"+
    "\1\0\1\u0115\165\124\1\u010c\1\124\1\u010c\2\124\3\u010c"+
    "\1\124\1\u010c\1\124\1\u0116\2\u010c\1\124\1\u0113\3\124"+
    "\1\u0117\1\124\1\u0118\1\u0110\2\124\11\u010c\2\124\10\u010c"+
    "\4\124\1\u010c\2\124\2\u010c\15\124\1\u010c\22\124\1\u0113"+
    "\3\124\1\u0111\1\124\1\u0118\1\u0119\55\124\21\131\1\u011a"+
    "\1\0\1\131\1\0\1\u011b\2\131\1\u011c\165\131\1\u011d"+
    "\1\131\1\u011d\2\131\3\u011d\1\131\1\u011d\1\131\3\u011d"+
    "\1\131\1\u011a\1\0\1\133\1\0\1\u011b\2\131\1\u011c"+
    "\2\131\11\u011d\2\131\10\u011d\4\131\1\u011d\2\131\2\u011d"+
    "\15\131\1\u011d\3\131\1\u011d\1\131\1\u011d\2\131\3\u011d"+
    "\1\131\1\u011d\1\131\3\u011d\1\131\1\u011a\1\u011e\1\133"+
    "\1\0\1\u011b\2\131\1\u011c\2\131\11\u011d\2\131\10\u011d"+
    "\4\131\1\u011d\2\131\2\u011d\15\131\1\u011d\1\131\2\0"+
    "\1\u010c\1\0\1\u010c\2\0\3\u010c\1\0\1\u010c\1\0"+
    "\3\u010c\10\0\1\u0110\2\0\11\u010c\2\0\10\u010c\4\0"+
    "\1\u010c\2\0\2\u010c\15\0\1\u010c\26\0\1\u0111\60\0"+
    "\22\u011f\1\u0120\1\u011f\1\u0120\61\u011f\2\0\1\u011f\1\0"+
    "\1\u011f\2\0\3\u011f\1\0\1\u011f\1\0\3\u011f\3\0"+
    "\1\u0121\7\0\11\u011f\2\0\10\u011f\4\0\1\u011f\2\0"+
    "\2\u011f\15\0\1\u011f\2\0\2\142\1\0\1\142\1\0"+
    "\13\142\10\0\1\u0122\1\0\11\142\2\0\10\142\4\0"+
    "\1\142\2\0\2\142\15\0\1\142\3\0\1\142\1\0"+
    "\1\142\2\0\3\142\1\0\1\142\1\0\3\142\3\0"+
    "\1\u0123\7\0\11\142\2\0\10\142\4\0\1\142\2\0"+
    "\2\142\15\0\1\142\1\0\22\144\1\0\1\144\1\0"+
    "\62\144\2\u0124\1\144\1\u0124\1\144\7\u0124\1\144\2\u0124"+
    "\2\144\1\0\1\144\1\0\4\144\1\u0125\1\144\11\u0124"+
    "\2\144\10\u0124\4\144\1\u0124\2\144\2\u0124\15\144\1\u0124"+
    "\3\144\1\u0126\1\144\1\u0126\2\144\3\u0126\1\144\1\u0126"+
    "\1\144\3\u0126\2\144\1\u0127\1\u0128\1\u0127\6\144\11\u0126"+
    "\2\144\10\u0126\4\144\1\u0126\2\144\2\u0126\15\144\1\u0126"+
    "\3\144\1\u0126\1\144\1\u0126\2\144\3\u0126\1\144\1\u0126"+
    "\1\144\3\u0126\2\144\1\146\1\u0128\1\u0127\6\144\11\u0126"+
    "\2\144\10\u0126\4\144\1\u0126\2\144\2\u0126\15\144\1\u0126"+
    "\1\144\22\u0129\1\u012a\1\u0129\1\u012a\61\u0129\2\0\1\u0129"+
    "\1\0\1\u0129\2\0\3\u0129\1\0\1\u0129\1\0\3\u0129"+
    "\3\0\1\u012b\7\0\11\u0129\2\0\10\u0129\4\0\1\u0129"+
    "\2\0\2\u0129\15\0\1\u0129\2\0\2\153\1\0\1\153"+
    "\1\0\13\153\10\0\1\u012c\1\0\11\153\2\0\10\153"+
    "\4\0\1\153\2\0\2\153\15\0\1\153\3\0\1\153"+
    "\1\0\1\153\2\0\3\153\1\0\1\153\1\0\3\153"+
    "\3\0\1\u012d\7\0\11\153\2\0\10\153\4\0\1\153"+
    "\2\0\2\153\15\0\1\153\2\0\2\156\1\0\1\156"+
    "\1\0\13\156\12\0\11\156\2\0\10\156\4\0\1\156"+
    "\2\0\2\156\15\0\1\156\60\0\1\u012e\104\0\1\u012f"+
    "\30\0\2\162\1\0\1\162\1\0\13\162\12\0\11\162"+
    "\2\0\10\162\4\0\1\162\2\0\2\162\15\0\1\162"+
    "\2\0\1\163\1\u0130\3\0\1\163\3\0\1\163\1\0"+
    "\1\163\72\0\2\164\1\0\1\164\1\0\13\164\12\0"+
    "\11\164\2\0\10\164\4\0\1\164\2\0\2\164\15\0"+
    "\1\164\2\0\1\u0131\1\u0130\3\0\1\u0131\1\u0132\1\0"+
    "\1\u0133\1\u0131\1\0\1\u0131\71\0\71\214\1\0\14\214"+
    "\72\0\1\u0134\13\0\71\u0135\1\u0136\105\u0135\1\u0136\1\u0137"+
    "\13\u0135\22\220\1\221\1\220\1\222\32\220\2\221\12\220"+
    "\1\221\12\220\22\0\1\221\142\0\1\u0138\26\0\60\23"+
    "\1\0\7\23\1\0\2\23\1\0\10\23\1\0\1\23"+
    "\32\0\1\u0139\22\0\1\u013a\62\0\1\u0139\114\0\1\u013b"+
    "\45\0\1\26\4\0\1\26\3\0\1\26\1\0\1\26"+
    "\72\0\1\240\2\0\1\235\1\0\1\240\3\0\1\240"+
    "\1\0\1\240\72\0\1\u013c\3\0\1\u013d\1\u013c\3\0"+
    "\1\u013c\1\0\1\u013c\41\0\1\u013d\30\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\1\40\1\u013e\1\u013f"+
    "\1\u0140\1\u0141\1\40\1\u0142\2\40\2\0\1\40\1\u0143"+
    "\1\u0144\1\u0145\4\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\3\0\1\u0146\1\0\1\u0146\2\0\3\u0146\1\0"+
    "\1\u0146\1\0\3\u0146\13\0\11\u0146\2\0\10\u0146\4\0"+
    "\1\u0146\2\0\2\u0146\15\0\1\u0146\2\0\1\240\1\u0147"+
    "\1\0\1\235\1\0\1\240\3\0\1\240\1\0\1\240"+
    "\74\0\1\u0148\103\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\1\u0149\1\u014a\7\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\2\40\1\u014b\2\40"+
    "\1\u014c\3\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\11\40\2\0\3\40\1\u014d\4\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\7\40\1\u014e\1\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\u014e"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\11\40\2\0\7\40\1\u014f\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\2\40"+
    "\1\u0150\10\40\1\237\11\0\11\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\1\u0151\2\0"+
    "\1\u0151\1\0\1\u0151\1\0\3\u0151\1\0\1\u0151\20\0"+
    "\2\u0151\2\0\1\u0151\52\0\1\u0152\3\0\1\u0152\101\0"+
    "\1\u0153\3\0\1\u0153\1\0\1\u0153\72\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\10\40\1\u0154\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\13\40\1\237\11\0\7\40"+
    "\1\u0155\1\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\u0155\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\2\40\1\u0156\6\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\10\40\1\u0157\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\u0158\1\0\13\40\1\237\11\0\11\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\71\0\1\u0159\16\0\2\267\1\0\1\267\1\0\13\267"+
    "\1\u015a\11\0\11\267\2\0\10\267\4\0\1\267\2\0"+
    "\2\267\15\0\1\267\2\0\2\270\1\0\1\270\1\0"+
    "\13\270\12\0\11\270\2\0\10\270\4\0\1\270\2\0"+
    "\2\270\15\0\1\270\1\0\110\271\1\0\1\271\1\0"+
    "\2\271\3\0\1\271\1\0\2\271\2\0\1\271\1\272"+
    "\3\271\1\273\1\274\1\271\1\0\2\271\11\0\2\271"+
    "\10\0\4\271\1\0\2\271\2\0\15\271\1\0\22\271"+
    "\1\272\3\271\1\0\1\274\1\271\1\275\55\271\32\0"+
    "\1\u015b\54\0\2\40\1\0\1\40\1\0\13\40\1\237"+
    "\11\0\1\40\1\u015c\4\40\1\u015d\1\u015e\1\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\u015e\2\0"+
    "\2\40\1\0\1\40\1\0\13\40\1\237\11\0\7\40"+
    "\1\u015f\1\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\u015f\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\11\40\2\0\7\40\1\u0160\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\2\40\1\u0161\10\40\1\237\11\0\11\40\2\0"+
    "\1\u0162\7\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\10\40\1\u0163\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\3\40\1\u0164\2\40\1\u0165\2\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\u0166\1\0\13\40\1\237\11\0\11\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\10\40\1\u0167\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\4\40\1\u0168\4\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\4\40\1\u0169\4\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\11\40\2\0\4\40\1\u016a\3\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\2\40\1\u016b\5\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\7\40\1\u016c"+
    "\1\40\2\0\10\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\u016c\2\0\2\40\1\0\1\u016d\1\0\13\40\1\237"+
    "\11\0\11\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\1\40\1\u016e\5\40\1\u016f\1\40\2\0"+
    "\1\40\1\u0170\6\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\u016f\2\0\2\40\1\0\1\40\1\0\13\40\1\237"+
    "\11\0\4\40\1\u0171\4\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\2\40\1\u0172\2\40\1\u0173\5\40\1\237\11\0"+
    "\11\40\2\0\10\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\2\0\2\40\1\0\1\40\1\0\2\40\1\u0174"+
    "\10\40\1\237\11\0\11\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\1\u0175\10\40\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\2\40\1\u0176\10\40\1\237\11\0"+
    "\1\40\1\u0177\7\40\2\0\10\40\4\0\1\40\2\0"+
    "\1\40\1\u0178\15\0\1\40\2\0\2\40\1\0\1\u0179"+
    "\1\0\13\40\1\237\11\0\11\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\7\40\1\u017a\1\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\u017a"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\1\40\1\u017b\7\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\1\u017c\10\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\1\40\1\u017d\7\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\5\40\1\u017e\5\40"+
    "\1\237\11\0\11\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\3\40\1\u017f\7\40\1\237\11\0\11\40\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\5\40\1\u0180\5\40\1\237\11\0"+
    "\1\u0181\10\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\33\0\1\u0182\132\0\1\u0183\50\0\1\u0184"+
    "\1\0\1\u0185\113\0\1\u0186\54\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\10\40\1\u0187\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\44\0\1\u0188"+
    "\55\0\1\u0189\17\0\1\u018a\63\0\1\u018b\133\0\1\u018c"+
    "\61\0\1\u018d\141\0\1\u018e\75\0\1\u018f\102\0\1\u0190"+
    "\55\0\1\u0191\133\0\1\u0192\132\0\1\u0193\60\0\1\u0194"+
    "\35\0\1\u0195\57\0\1\u0196\41\0\1\u0196\33\0\1\u0197"+
    "\75\0\3\u0198\44\0\1\u0199\10\0\1\u019a\25\0\1\u019b"+
    "\1\0\1\u019c\64\0\1\u019d\105\0\1\u0100\17\0\1\u0101"+
    "\1\0\1\u0102\60\0\106\265\2\117\1\0\1\117\1\0"+
    "\2\117\3\0\1\117\1\0\2\117\2\0\1\117\1\u0109"+
    "\3\117\1\u010e\1\u010f\1\117\1\0\2\117\11\0\2\117"+
    "\10\0\4\117\1\0\2\117\2\0\15\117\1\0\22\117"+
    "\1\u0109\3\117\1\0\1\u010f\1\117\1\u0112\55\117\1\0"+
    "\2\u010c\1\0\1\u010c\1\0\13\u010c\12\0\11\u010c\1\0"+
    "\1\u019e\10\u010c\1\u019f\3\0\1\u010c\2\0\2\u010c\15\0"+
    "\1\u010c\1\0\1\117\2\u010d\1\117\1\u010d\1\117\13\u010d"+
    "\1\u0109\3\117\1\u010a\1\0\1\117\1\u010b\2\117\11\u010d"+
    "\1\117\1\u01a0\10\u010d\1\u01a1\3\117\1\u010d\2\117\2\u010d"+
    "\15\117\1\u010d\1\117\2\124\1\0\1\124\1\0\2\124"+
    "\3\0\1\124\1\0\2\124\2\0\1\124\1\u0113\3\124"+
    "\1\u0117\1\124\1\u0118\1\0\2\124\11\0\2\124\10\0"+
    "\4\124\1\0\2\124\2\0\15\124\1\0\22\124\1\u0113"+
    "\3\124\1\0\1\124\1\u0118\1\u0119\56\124\2\u0116\1\124"+
    "\1\u0116\1\124\13\u0116\1\u0113\3\124\1\u0114\1\124\1\0"+
    "\1\u0115\2\124\11\u0116\1\124\1\u01a2\10\u0116\1\u01a3\3\124"+
    "\1\u0116\2\124\2\u0116\15\124\1\u0116\1\124\22\131\1\0"+
    "\1\131\1\0\63\131\1\u01a4\1\131\1\u01a4\2\131\3\u01a4"+
    "\1\131\1\u01a4\2\131\2\u01a4\1\131\1\u011a\1\0\1\131"+
    "\1\0\1\u01a5\2\131\1\u01a6\2\131\11\u01a4\2\131\10\u01a4"+
    "\4\131\1\u01a4\2\131\2\u01a4\15\131\1\u01a4\22\131\1\u011a"+
    "\1\0\1\131\1\0\1\u01a6\2\131\1\u01a7\55\131\22\u011d"+
    "\1\u01a8\1\u011d\1\u01a8\61\u011d\2\0\1\u011d\1\0\1\u011d"+
    "\2\0\3\u011d\1\0\1\u011d\1\0\3\u011d\3\0\1\u011e"+
    "\7\0\11\u011d\2\0\10\u011d\4\0\1\u011d\2\0\2\u011d"+
    "\15\0\1\u011d\1\0\22\u0126\1\u01a9\1\u0126\1\u01a9\61\u0126"+
    "\2\144\1\u0124\1\144\1\u0124\2\144\3\u0124\1\144\1\u0124"+
    "\2\144\2\u0124\2\144\1\u0127\1\144\1\u0127\6\144\11\u0124"+
    "\2\144\10\u0124\4\144\1\u0124\2\144\2\u0124\15\144\1\u0124"+
    "\3\144\1\u0126\1\144\1\u0126\2\144\3\u0126\1\144\1\u0126"+
    "\1\144\3\u0126\2\144\1\0\1\u0128\1\0\6\144\11\u0126"+
    "\2\144\10\u0126\4\144\1\u0126\2\144\2\u0126\15\144\1\u0126"+
    "\1\144\57\0\1\u01aa\27\0\1\u0131\4\0\1\u0131\3\0"+
    "\1\u0131\1\0\1\u0131\72\0\1\u0131\1\u0130\3\0\1\u0131"+
    "\3\0\1\u0131\1\0\1\u0131\72\0\1\u01ab\2\0\1\u01ab"+
    "\1\0\1\u01ab\1\0\3\u01ab\1\0\1\u01ab\20\0\2\u01ab"+
    "\2\0\1\u01ab\52\0\1\u01ac\3\0\1\u01ac\73\0\71\u0135"+
    "\1\u0136\1\u01ad\13\u0135\51\0\1\u01ae\77\0\1\u01af\43\0"+
    "\1\u013c\1\u013d\3\0\1\u013c\3\0\1\u013c\1\0\1\u013c"+
    "\72\0\1\u013c\4\0\1\u013c\3\0\1\u013c\1\0\1\u013c"+
    "\72\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\10\40\1\u01b0\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\1\u01b1\10\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\1\u01b2\4\40\1\u01b3\3\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\2\40\1\u01b4\10\40"+
    "\1\237\11\0\11\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\1\40\1\u01b5\6\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\1\u01b6\10\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\u01b7\1\0\13\40\1\237\11\0"+
    "\11\40\2\0\10\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\2\0\2\40\1\0\1\40\1\0\2\40\1\u01b8"+
    "\10\40\1\237\11\0\11\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\u0146\1\0\1\u0146"+
    "\1\0\13\u0146\1\237\11\0\11\u0146\2\0\10\u0146\4\0"+
    "\1\u0146\2\0\2\u0146\15\0\1\u0146\2\0\1\240\4\0"+
    "\1\240\3\0\1\240\1\0\1\240\72\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\1\40\1\u0166\7\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\u01b9\1\0\13\40\1\237\11\0"+
    "\11\40\2\0\10\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\2\0\2\40\1\0\1\40\1\0\13\40\1\237"+
    "\11\0\1\u01ba\1\40\1\u01bb\1\u01bc\3\40\1\u01bd\1\40"+
    "\2\0\4\40\1\u01be\3\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\u01bd\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\11\40\2\0\2\40\1\u01bf\5\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\40\1\0\5\40\1\u01c0\5\40\1\237\11\0\11\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\u01c1\1\0\13\40\1\237\11\0"+
    "\11\40\2\0\10\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\2\0\2\40\1\0\1\40\1\0\13\40\1\237"+
    "\11\0\1\40\1\u01c2\7\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\11\40\2\0\1\40\1\u01c3"+
    "\6\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\1\u0151\1\253\1\0\1\u0151\1\0\1\u0151\1\0\3\u0151"+
    "\1\0\1\u0151\20\0\2\u0151\2\0\1\u0151\46\0\1\254"+
    "\3\0\1\u0152\3\0\1\u0152\75\0\1\255\3\0\1\u0153"+
    "\3\0\1\u0153\1\0\1\u0153\72\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\1\40\1\u01c4\7\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\2\40\1\u01c5\10\40\1\237"+
    "\11\0\11\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\2\40"+
    "\1\u01c6\10\40\1\237\11\0\11\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\71\0\1\u0195\16\0"+
    "\2\40\1\0\1\u01c7\1\0\13\40\1\237\11\0\11\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\11\40\2\0\1\40\1\u01c8\6\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\1\40\1\u01c9\7\40\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\u01ca\1\0\13\40\1\237\11\0\11\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\13\40\1\237\11\0\11\40"+
    "\2\0\1\40\1\u01cb\6\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\1\u01cc\10\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\5\40\1\u01cd\5\40\1\237\11\0\11\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\2\40\1\u01ce\10\40\1\237"+
    "\11\0\1\u01cf\10\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\1\40\1\u01d0\6\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\u01d1\1\0\13\40\1\237\11\0\11\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\2\40\1\u01d2\10\40\1\237"+
    "\11\0\11\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\6\40\1\u01d3\2\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\u01d4\1\0\13\40\1\237\11\0\11\40\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\u01d5\1\0\13\40\1\237\11\0\11\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\13\40\1\237\11\0\6\40"+
    "\1\u01d6\2\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\u01d7\1\0\13\40"+
    "\1\237\11\0\11\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\1\40\1\u01d8\6\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\1\40\1\u01d9"+
    "\5\40\1\u01da\1\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\u01da\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\7\40\1\u01db\1\40\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\u01db\2\0\2\40"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\4\40\1\u01dc"+
    "\4\40\2\0\10\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\2\0\2\40\1\0\1\40\1\0\13\40\1\237"+
    "\11\0\1\40\1\u01dd\7\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\1\40\1\u01de\7\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\13\40\1\237\11\0\2\40"+
    "\1\u01df\6\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\5\40\1\u01e0\3\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\5\40\1\u01e1\3\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\11\40\2\0\1\40\1\u01e2\6\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\1\40\1\u01e3\7\40\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\6\40\1\u01e4"+
    "\2\40\2\0\10\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\2\0\2\40\1\0\1\40\1\0\13\40\1\237"+
    "\11\0\11\40\2\0\1\40\1\u01e5\6\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\5\40\1\u01e6\5\40\1\237\11\0\11\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\3\40\1\u01e7\7\40\1\237"+
    "\11\0\11\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\11\40\2\0\1\40\1\u01e8\6\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\1\40\1\u01e9\7\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\4\40\1\u01ea\4\40\2\0\10\40\4\0\1\u01eb\2\0"+
    "\2\40\15\0\1\40\23\0\1\u0184\126\0\1\u01ec\55\0"+
    "\1\u01ed\131\0\1\u01ee\133\0\1\u01ef\54\0\1\u01f0\111\0"+
    "\1\u01f1\60\0\1\u01f2\134\0\1\u01f3\41\0\1\u01f3\44\0"+
    "\1\u01f4\52\0\1\u01f5\77\0\1\u01f6\1\0\1\u01f6\2\0"+
    "\3\u01f6\1\0\1\u01f6\1\0\3\u01f6\3\0\1\u0195\2\0"+
    "\1\u01f7\4\0\11\u01f6\2\0\10\u01f6\4\0\1\u01f6\2\0"+
    "\2\u01f6\15\0\1\u01f6\1\u01f8\41\0\1\u01f9\66\0\3\u0198"+
    "\55\0\1\u019a\25\0\3\u01fa\45\0\1\u01fb\7\0\1\u01fc"+
    "\65\0\1\u01fd\45\0\1\u019b\66\0\1\u0102\161\0\1\u01fe"+
    "\26\0\21\117\1\u0109\3\117\1\u010a\1\0\1\117\1\u010b"+
    "\26\117\1\u01ff\26\117\21\124\1\u0113\3\124\1\u0114\1\124"+
    "\1\0\1\u0115\26\124\1\u0200\26\124\1\0\2\u01a4\1\0"+
    "\1\u01a4\1\0\13\u01a4\12\0\11\u01a4\1\0\1\u0201\10\u01a4"+
    "\4\0\1\u01a4\2\0\2\u01a4\15\0\1\u01a4\1\0\2\131"+
    "\1\0\1\131\1\0\2\131\3\0\1\131\1\0\2\131"+
    "\2\0\1\131\1\u011a\1\0\1\131\1\0\1\u01a5\2\131"+
    "\1\0\2\131\11\0\2\131\10\0\4\131\1\0\2\131"+
    "\2\0\15\131\1\0\22\131\1\u011a\1\0\1\131\2\0"+
    "\2\131\1\u01a7\55\131\1\0\1\u01ab\1\u0132\1\0\1\u01ab"+
    "\1\0\1\u01ab\1\0\3\u01ab\1\0\1\u01ab\20\0\2\u01ab"+
    "\2\0\1\u01ab\46\0\1\u0133\3\0\1\u01ac\3\0\1\u01ac"+
    "\150\0\1\u0202\63\0\1\u0203\53\0\2\40\1\0\1\40"+
    "\1\0\2\40\1\u0204\10\40\1\237\11\0\11\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\13\40\1\237\11\0\10\40"+
    "\1\u0205\2\0\10\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\2\0\2\40\1\0\1\40\1\0\13\40\1\237"+
    "\11\0\11\40\2\0\1\40\1\u0206\6\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\4\40\1\u0207\4\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\13\40\1\237\11\0\11\40"+
    "\2\0\2\40\1\u0208\5\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\2\40"+
    "\1\u0209\10\40\1\237\11\0\11\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\4\40\1\u020a\4\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\1\40\1\u020b\7\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\1\40\1\u020c\6\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\4\40\1\u020d"+
    "\4\40\2\0\10\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\2\0\2\40\1\0\1\40\1\0\13\40\1\237"+
    "\11\0\3\40\1\u020e\5\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\u020f"+
    "\1\0\13\40\1\237\11\0\11\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\40\1\0\5\40\1\u0210\5\40\1\237\11\0\11\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\11\40\2\0\4\40\1\u0211\3\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\3\40\1\u0212\4\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\13\40\1\237\3\u0213\6\0\11\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\1\u0214\10\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\11\40\2\0\1\u0215\7\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\10\40\1\u0216\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\11\40\2\0"+
    "\1\u0217\7\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\11\40\2\0\5\40\1\u0218\2\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\10\40\1\u0219\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\5\40\1\u021a\3\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\u021b\1\0\2\40\1\u021c\10\40"+
    "\1\237\11\0\11\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\1\40\1\u021d\7\40\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\u021e\1\0\13\40\1\237\11\0\11\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\13\40\1\237\11\0\1\40"+
    "\1\u021f\7\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\11\40\2\0\4\40\1\u0220\3\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\5\40\1\u0221\3\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\4\40\1\u0222\4\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\2\40\1\u0223\10\40\1\237\11\0\11\40\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\2\40\1\u0224\10\40\1\237\11\0"+
    "\11\40\2\0\10\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\2\0\2\40\1\0\1\40\1\0\13\40\1\237"+
    "\11\0\11\40\2\0\1\40\1\u0225\6\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\1\40\1\u0226\7\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\13\40\1\237\11\0\7\40"+
    "\1\u0227\1\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\u0227\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\1\40\1\u0228\7\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\11\40\2\0\3\40"+
    "\1\u0229\4\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\2\40\1\u022a\10\40"+
    "\1\237\11\0\11\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\1\u022b\10\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\1\40\1\u022c\7\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\7\40\1\u022d\1\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\u022d\2\0\2\40\1\0\1\u022e\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\1\u022f\10\40\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\6\40\1\u0230"+
    "\2\40\2\0\10\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\2\0\2\40\1\0\1\40\1\0\5\40\1\u0231"+
    "\5\40\1\237\11\0\11\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\10\40\1\u0232\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\1\u0233\10\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\2\40\1\u0234\6\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\3\40\1\u0235\4\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\u0236\1\0\13\40\1\237\11\0\11\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\2\40\1\u0237\10\40\1\237"+
    "\11\0\11\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\1\u0238\10\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\u0239"+
    "\1\0\13\40\1\237\11\0\11\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\1\40\1\u023a\7\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\2\40\1\u023b\10\40"+
    "\1\237\11\0\11\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\11\0\1\u023c\144\0\1\u023d\46\0"+
    "\1\u023e\101\0\1\u023f\105\0\1\u0240\16\0\1\u0241\40\0"+
    "\1\u0242\32\0\1\u0243\104\0\1\u0244\101\0\1\u0245\134\0"+
    "\1\u0246\121\0\1\u0247\37\0\2\u01f6\1\0\1\u01f6\1\0"+
    "\13\u01f6\1\0\1\u0248\1\0\1\u0249\6\0\11\u01f6\2\0"+
    "\10\u01f6\4\0\1\u01f6\2\0\2\u01f6\15\0\1\u01f6\3\0"+
    "\1\u024a\1\0\1\u024a\2\0\3\u024a\1\0\1\u024a\1\0"+
    "\3\u024a\13\0\11\u024a\2\0\10\u024a\4\0\1\u024a\2\0"+
    "\2\u024a\15\0\1\u024a\3\0\1\u024b\1\0\1\u024b\2\0"+
    "\3\u024b\1\0\1\u024b\1\0\3\u024b\13\0\11\u024b\2\0"+
    "\10\u024b\4\0\1\u024b\2\0\2\u024b\15\0\1\u024b\44\0"+
    "\1\u024c\64\0\3\u01fa\55\0\1\u01fc\65\0\1\u024d\33\0"+
    "\1\u024e\77\0\1\u024f\1\0\1\u024f\2\0\3\u024f\1\0"+
    "\1\u024f\2\0\2\u024f\13\0\11\u024f\2\0\10\u024f\4\0"+
    "\1\u024f\2\0\2\u024f\15\0\1\u024f\1\0\2\117\1\u0250"+
    "\1\117\1\u0250\2\117\3\u0250\1\117\1\u0250\2\117\2\u0250"+
    "\1\117\1\u0109\3\117\1\u010a\1\0\1\117\1\u010b\2\117"+
    "\11\u0250\2\117\10\u0250\4\117\1\u0250\2\117\2\u0250\15\117"+
    "\1\u0250\1\117\2\124\1\u0251\1\124\1\u0251\2\124\3\u0251"+
    "\1\124\1\u0251\2\124\2\u0251\1\124\1\u0113\3\124\1\u0114"+
    "\1\124\1\0\1\u0115\2\124\11\u0251\2\124\10\u0251\4\124"+
    "\1\u0251\2\124\2\u0251\15\124\1\u0251\1\124\22\0\2\u0252"+
    "\1\u0253\136\0\1\u0254\31\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\1\u0255\10\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\1\40\1\u0256"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\11\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\u0257\1\0\13\40\1\237\11\0\11\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\6\40\1\u0258\2\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\u0259\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\7\40\1\u025a\1\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\u025a\2\0"+
    "\2\40\1\0\1\u025b\1\0\13\40\1\237\11\0\11\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\11\40\2\0\3\40\1\u025c\4\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\1\40\1\u025d\7\40\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\2\40\1\u025e"+
    "\6\40\2\0\10\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\2\0\2\40\1\0\1\40\1\0\13\40\1\237"+
    "\11\0\6\40\1\u025f\2\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\10\40\1\u0260\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\1\u0261\10\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\1\u0262\10\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\3\0\1\u0263\1\0\1\u0264\2\0\3\u0263"+
    "\1\0\1\u0263\3\0\1\u0263\2\0\3\u0213\6\0\1\u0265"+
    "\10\u0263\2\0\10\u0263\4\0\1\u0263\2\0\2\u0263\15\0"+
    "\1\u0263\2\0\2\40\1\0\1\40\1\0\13\40\1\237"+
    "\11\0\3\40\1\u0266\5\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\2\40\1\u0267\10\40\1\237\11\0\11\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\13\40\1\237\11\0\3\40"+
    "\1\u0268\5\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\2\40\1\u0269\6\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\40\1\0\2\40\1\u026a\10\40\1\237\11\0\11\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\4\40\1\u026b\4\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\2\40\1\u026c\5\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\11\40\2\0"+
    "\1\40\1\u026d\6\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\2\0\2\40\1\0\1\u026e\1\0\13\40\1\237"+
    "\11\0\11\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\10\40\1\u026f\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\6\40\1\u0270\2\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\13\40\1\237\11\0\11\40"+
    "\2\0\1\40\1\u0271\6\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\1\u0272\10\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\11\40\2\0\7\40\1\u0273"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\3\40\1\u0274\7\40\1\237\11\0"+
    "\11\40\2\0\10\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\2\0\2\40\1\0\1\40\1\0\13\40\1\237"+
    "\11\0\4\40\1\u0275\4\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\6\40\1\u0276\2\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\13\40\1\237\11\0\11\40"+
    "\2\0\3\40\1\u0277\4\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\4\40\1\u0278\4\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\4\40\1\u0279\4\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\10\40\1\u027a\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\3\u027b\6\0\11\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\11\40\2\0\1\40\1\u027c"+
    "\6\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\13\40\1\237\11\0\6\40"+
    "\1\u027d\2\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\6\40\1\u027e\2\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\1\40\1\u027f\7\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\47\0\1\u0280\43\0\1\u0281\16\0\1\u0282\40\0\1\u0283"+
    "\64\0\1\u0284\103\0\1\u0285\120\0\1\u0286\54\0\1\u0241"+
    "\40\0\1\u0242\70\0\1\u0287\72\0\1\u0247\105\0\1\u0288"+
    "\110\0\1\u0289\71\0\1\u0247\40\0\1\u028a\43\0\1\u0248"+
    "\64\0\2\u024a\1\0\1\u024a\1\0\13\u024a\5\0\1\u028b"+
    "\4\0\11\u024a\2\0\10\u024a\4\0\1\u024a\2\0\2\u024a"+
    "\15\0\1\u024a\2\0\2\u024b\1\0\1\u024b\1\0\13\u024b"+
    "\12\0\11\u024b\2\0\10\u024b\4\0\1\u024b\2\0\2\u024b"+
    "\15\0\1\u024b\1\u028c\33\0\1\u028d\62\0\1\u028e\140\0"+
    "\1\u028f\64\0\1\u0252\117\0\1\u0290\52\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\1\40\1\u0291\7\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\1\40\1\u0292\1\0\1\40\1\0\13\40\1\237"+
    "\11\0\11\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\1\40\1\u0293\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\1\40\1\u0294\7\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\13\40\1\237\11\0\7\40"+
    "\1\u0295\1\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\u0295\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\7\40\1\u0296\1\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\u0296\2\0\1\40\1\u0297"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\11\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\5\40\1\u0298\5\40\1\237"+
    "\11\0\11\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\1\40\1\u0299\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\7\40\1\u029a\1\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\u029a\2\0"+
    "\2\40\1\0\1\40\1\0\13\40\1\237\11\0\11\40"+
    "\2\0\1\40\1\u029b\6\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\u029c\1\0\13\40"+
    "\1\237\11\0\11\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\1\40\1\u029d\7\40\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\11\40\2\0"+
    "\1\40\1\u029e\6\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\10\0\1\u029f\146\0\1\u02a0\36\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\6\40\1\u02a1\2\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\2\40\1\u02a2\10\40"+
    "\1\237\11\0\11\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\u02a3\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\2\40\1\u02a4\6\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\13\40\1\237\11\0\6\40"+
    "\1\u02a5\2\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\u02a6\1\0\13\40"+
    "\1\237\11\0\11\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\1\40\1\u02a7\7\40\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\u02a8\1\0\13\40\1\237\11\0\11\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\13\40\1\237\11\0\11\40"+
    "\2\0\3\40\1\u02a9\4\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\11\40\2\0\1\u02aa\7\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\5\40\1\u02ab\5\40\1\237\11\0\11\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\2\40\1\u02ac\10\40\1\237"+
    "\11\0\11\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\11\40\2\0\1\40\1\u02ad\6\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\5\40\1\u02ae\3\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\11\40\2\0\1\40\1\u02af\6\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\u02b0\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\23\0\3\u027b\11\0\1\u02b1"+
    "\50\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\1\40\1\u02b2\7\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\u02b3\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\24\0\1\u0280\40\0\1\u02b4"+
    "\31\0\1\u02b5\120\0\1\u0282\40\0\1\u0283\67\0\1\u02b6"+
    "\73\0\1\u02b7\55\0\1\u02b8\105\0\1\u0247\124\0\1\u0288"+
    "\40\0\1\u02b9\75\0\1\u02b6\53\0\1\u0248\1\0\1\u0249"+
    "\103\0\1\u02ba\1\0\1\u02bb\136\0\1\u02bc\73\0\1\u02bd"+
    "\64\0\3\u02be\103\0\3\u02bf\62\0\1\40\1\u02c0\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\11\40\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\1\40"+
    "\1\u02c1\1\0\1\40\1\0\13\40\1\237\11\0\11\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\1\u02c2\10\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\11\40\2\0\7\40\1\u02c3\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\1\40\1\u02c4\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\11\40\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\1\40"+
    "\1\u02c5\1\0\1\40\1\0\13\40\1\237\11\0\11\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\2\40\1\u02c6\6\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\6\40\1\u02c7\2\40\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\2\40\1\u02c8\10\40\1\237\11\0"+
    "\11\40\2\0\10\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\2\0\2\40\1\0\1\40\1\0\2\40\1\u02c9"+
    "\10\40\1\237\11\0\11\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\6\40\1\u02ca\2\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\u02cb\1\0\13\40\1\237\11\0\11\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\35\0\1\u02cc\126\0\1\u02cd\31\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\1\40\1\u02ce\7\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\13\40\1\237\11\0\6\40"+
    "\1\u02cf\2\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\1\40\1\u02d0\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\5\40\1\u02d1\5\40\1\237\11\0\11\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\u02d2\1\0\13\40\1\237\11\0\11\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\4\40\1\u02d3\4\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\4\40\1\u02d4\4\40\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\6\40\1\u02d5"+
    "\2\40\2\0\10\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\2\0\2\40\1\0\1\u02d6\1\0\13\40\1\237"+
    "\11\0\11\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\u02d7\1\0\13\40"+
    "\1\237\11\0\11\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\1\u02d8\7\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\1\40\1\u02d9"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\11\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\44\0"+
    "\1\u02da\43\0\2\40\1\0\1\u02db\1\0\13\40\1\237"+
    "\11\0\11\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\40\0\1\u0282\71\0\1\u02b6\40\0\1\u02dc"+
    "\44\0\1\u02b7\40\0\1\u02dd\64\0\1\u0241\64\0\1\u02ba"+
    "\117\0\1\u02de\73\0\3\u02df\63\0\1\u02e0\1\0\1\u02e0"+
    "\2\0\3\u02e0\1\0\1\u02e0\1\0\3\u02e0\2\0\3\u02be"+
    "\1\u02e1\5\0\11\u02e0\2\0\10\u02e0\4\0\1\u02e0\2\0"+
    "\2\u02e0\15\0\1\u02e0\23\0\3\u02bf\22\0\1\u02e2\37\0"+
    "\1\40\1\u02e3\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\11\40\2\0\10\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\2\0\2\40\1\0\1\40\1\0\5\40\1\u02e4"+
    "\5\40\1\237\11\0\11\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\2\40\1\u02e5\10\40\1\237\11\0\11\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\1\40\1\u02e6\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\11\40\2\0\10\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\2\0\1\40\1\u02e7\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\11\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\5\40\1\u02e8\5\40\1\237\11\0\11\40\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\10\40\1\u02e9"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\6\40\1\u02ea\2\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\3\40\1\u02eb\4\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\5\0\1\u02ec"+
    "\150\0\1\u02ed\37\0\2\40\1\0\1\u02ee\1\0\13\40"+
    "\1\237\11\0\11\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\40\1\0"+
    "\5\40\1\u02ef\5\40\1\237\11\0\11\40\2\0\10\40"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\2\0\2\40"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\3\40\1\u02f0"+
    "\5\40\2\0\10\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\2\0\2\40\1\0\1\40\1\0\5\40\1\u02f1"+
    "\5\40\1\237\11\0\11\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\1\40\1\u02f2\7\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\u02f3\1\0\13\40\1\237\11\0\11\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\5\40\1\u02f4\5\40"+
    "\1\237\11\0\11\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\14\0\1\u02f5\73\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\2\40\1\u02f6\6\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\23\0\3\u02de\32\0\1\346\30\0\1\u02f7\1\0\1\u02f7"+
    "\2\0\3\u02f7\1\0\1\u02f7\1\0\3\u02f7\1\0\1\u02f8"+
    "\3\u02df\6\0\11\u02f7\2\0\10\u02f7\4\0\1\u02f7\2\0"+
    "\2\u02f7\15\0\1\u02f7\2\0\2\u02e0\1\0\1\u02e0\1\0"+
    "\13\u02e0\1\0\3\u02f9\6\0\11\u02e0\1\0\1\u02fa\10\u02e0"+
    "\4\0\1\u02e0\2\0\2\u02e0\15\0\1\u02e0\3\0\1\u02e0"+
    "\1\0\1\u02e0\2\0\3\u02e0\1\0\1\u02e0\1\0\3\u02e0"+
    "\13\0\11\u02e0\2\0\10\u02e0\4\0\1\u02e0\2\0\2\u02e0"+
    "\15\0\1\u02e0\11\0\1\u02fb\76\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\4\40\1\u02fc\4\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\40\1\0\13\40\1\237\11\0\6\40"+
    "\1\u02fd\2\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\1\40\1\u02fe\1\0\1\40\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\11\40\2\0\2\40\1\u02ff"+
    "\5\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\2\40\1\0\1\u0300\1\0\13\40\1\237\11\0\11\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\11\40\2\0\3\40\1\u0301\4\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\40\0\1\u0302\52\0\1\u0303\102\0"+
    "\2\40\1\0\1\40\1\0\13\40\1\237\11\0\4\40"+
    "\1\u0304\4\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\3\40\1\u0305\5\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\2\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\7\40\1\u0306\1\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\u0306"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\u0307\11\0"+
    "\11\40\2\0\10\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\2\0\2\40\1\0\1\40\1\0\13\40\1\237"+
    "\11\0\4\40\1\u0308\4\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\51\0\1\u0309\36\0\2\u02f7"+
    "\1\0\1\u02f7\1\0\13\u02f7\1\u02f8\3\u030a\6\0\11\u02f7"+
    "\1\0\1\u030b\10\u02f7\4\0\1\u02f7\2\0\2\u02f7\6\0"+
    "\1\u030c\6\0\1\u02f7\3\0\1\u02f7\1\0\1\u02f7\2\0"+
    "\3\u02f7\1\0\1\u02f7\1\0\3\u02f7\13\0\11\u02f7\2\0"+
    "\10\u02f7\4\0\1\u02f7\2\0\2\u02f7\15\0\1\u02f7\3\0"+
    "\1\u030d\1\0\1\u030d\2\0\3\u030d\1\0\1\u030d\1\0"+
    "\3\u030d\1\0\1\u030e\3\u02f9\6\0\11\u030d\2\0\10\u030d"+
    "\4\0\1\u030d\2\0\2\u030d\15\0\1\u030d\3\0\1\u030f"+
    "\1\0\1\u030f\2\0\3\u030f\1\0\1\u030f\1\0\3\u030f"+
    "\6\0\1\u02fa\4\0\11\u030f\2\0\10\u030f\4\0\1\u030f"+
    "\2\0\2\u030f\11\0\1\u0310\3\0\1\u030f\1\u02fa\37\0"+
    "\1\u0311\47\0\1\40\1\u0312\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\11\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\2\0\2\40\1\0\1\u0313\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\2\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\11\40\2\0\7\40\1\u0314"+
    "\4\0\1\40\2\0\2\40\15\0\1\40\36\0\1\u0315"+
    "\120\0\1\u0316\36\0\2\40\1\0\1\40\1\0\13\40"+
    "\1\237\11\0\6\40\1\u0317\2\40\2\0\10\40\4\0"+
    "\1\40\2\0\2\40\15\0\1\40\3\0\1\u0318\1\0"+
    "\1\u0318\2\0\3\u0318\1\0\1\u0318\1\0\3\u0318\13\0"+
    "\11\u0318\2\0\10\u0318\4\0\1\u0318\2\0\2\u0318\15\0"+
    "\1\u0318\2\0\2\40\1\0\1\40\1\0\13\40\1\237"+
    "\11\0\6\40\1\u0319\2\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\23\0\3\u030a\1\u031a\160\0"+
    "\1\u031b\7\0\1\u02f7\1\0\1\u02f7\2\0\3\u02f7\1\0"+
    "\1\u02f7\1\0\3\u02f7\1\0\1\u02f8\11\0\11\u02f7\2\0"+
    "\10\u02f7\4\0\1\u02f7\2\0\2\u02f7\15\0\1\u02f7\2\0"+
    "\2\u030d\1\0\1\u030d\1\0\13\u030d\1\u030e\3\u031c\6\0"+
    "\11\u030d\1\0\1\u031d\10\u030d\4\0\1\u030d\2\0\2\u030d"+
    "\2\0\1\u031e\3\0\1\u031f\6\0\1\u030d\3\0\1\u030d"+
    "\1\0\1\u030d\2\0\3\u030d\1\0\1\u030d\1\0\3\u030d"+
    "\13\0\11\u030d\2\0\10\u030d\4\0\1\u030d\2\0\2\u030d"+
    "\15\0\1\u030d\2\0\2\u030f\1\0\1\u030f\1\0\13\u030f"+
    "\5\0\1\u02fa\4\0\11\u030f\2\0\10\u030f\4\0\1\u030f"+
    "\2\0\2\u030f\11\0\1\u0310\3\0\1\u030f\1\u02fa\22\0"+
    "\3\u02f9\20\0\1\u02fa\114\0\1\u0320\32\0\1\40\1\u0321"+
    "\1\0\1\40\1\0\13\40\1\237\11\0\11\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\2\0"+
    "\1\40\1\u0322\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\11\40\2\0\10\40\4\0\1\40\2\0\2\40\15\0"+
    "\1\40\2\0\2\40\1\0\1\40\1\0\13\40\1\237"+
    "\11\0\1\u0323\10\40\2\0\10\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\43\0\1\u0324\41\0\1\u0324\5\0"+
    "\1\u0325\102\0\2\40\1\0\1\u0326\1\0\13\40\1\237"+
    "\11\0\11\40\2\0\10\40\4\0\1\40\2\0\2\40"+
    "\15\0\1\40\2\0\2\u0318\1\0\1\u0318\1\0\13\u0318"+
    "\1\u0307\11\0\11\u0318\2\0\10\u0318\4\0\1\u0318\2\0"+
    "\2\u0318\15\0\1\u0318\2\0\2\40\1\0\1\u0327\1\0"+
    "\13\40\1\237\11\0\11\40\2\0\10\40\4\0\1\40"+
    "\2\0\2\40\15\0\1\40\3\0\1\u0328\1\0\1\u0328"+
    "\2\0\3\u0328\1\0\1\u0328\1\0\3\u0328\13\0\11\u0328"+
    "\2\0\10\u0328\4\0\1\u0328\2\0\2\u0328\15\0\1\u0328"+
    "\23\0\3\u030a\20\0\1\u030b\27\0\1\u030c\32\0\3\u031c"+
    "\44\0\1\u031e\114\0\1\u0329\77\0\1\u032a\15\0\1\u030d"+
    "\1\0\1\u030d\2\0\3\u030d\1\0\1\u030d\1\0\3\u030d"+
    "\1\0\1\u030e\11\0\11\u030d\2\0\10\u030d\4\0\1\u030d"+
    "\2\0\2\u030d\15\0\1\u030d\41\0\1\u032b\46\0\1\40"+
    "\1\u032c\1\0\1\40\1\0\13\40\1\237\11\0\11\40"+
    "\2\0\10\40\4\0\1\40\2\0\2\40\15\0\1\40"+
    "\2\0\2\40\1\0\1\40\1\0\13\40\1\237\11\0"+
    "\11\40\2\0\1\40\1\u032d\6\40\4\0\1\40\2\0"+
    "\2\40\15\0\1\40\40\0\1\u032e\46\0\1\u032f\2\u0328"+
    "\1\u032f\1\u0328\1\u032f\13\u0328\1\u032f\3\u0330\6\u032f\11\u0328"+
    "\1\u032f\1\u0331\10\u0328\4\u032f\1\u0328\2\u032f\2\u0328\2\u032f"+
    "\1\u0332\12\u032f\1\u0328\1\u032f\22\0\3\u031c\20\0\1\u031d"+
    "\23\0\1\u031e\3\0\1\u031f\20\0\1\u0333\76\0\2\40"+
    "\1\0\1\u0334\1\0\13\40\1\237\11\0\11\40\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\35\0"+
    "\1\u0315\51\0\22\u032f\1\0\1\u032f\1\0\44\u032f\1\u0332"+
    "\36\u032f\3\u0330\44\u032f\1\u0332\16\u032f\1\u0335\1\u032f\1\u0335"+
    "\2\u032f\3\u0335\1\u032f\1\u0335\1\u032f\3\u0335\2\u032f\1\0"+
    "\1\u032f\1\0\1\u032f\1\u0331\4\u032f\11\u0335\2\u032f\10\u0335"+
    "\4\u032f\1\u0335\2\u032f\2\u0335\2\u032f\1\u0332\6\u032f\1\u0336"+
    "\3\u032f\1\u0335\1\u0331\22\u032f\1\0\1\u032f\1\0\44\u032f"+
    "\1\u0332\1\u0337\13\u032f\54\0\1\u0338\32\0\2\40\1\0"+
    "\1\40\1\0\13\40\1\237\11\0\10\40\1\u0339\2\0"+
    "\10\40\4\0\1\40\2\0\2\40\15\0\1\40\1\0"+
    "\1\u032f\2\u0335\1\u032f\1\u0335\1\u032f\13\u0335\1\u032f\1\0"+
    "\1\u032f\1\0\1\u032f\1\u0331\4\u032f\11\u0335\2\u032f\10\u0335"+
    "\4\u032f\1\u0335\2\u032f\2\u0335\2\u032f\1\u0332\6\u032f\1\u0336"+
    "\3\u032f\1\u0335\1\u0331\22\u032f\3\u0330\20\u032f\1\u0331\23\u032f"+
    "\1\u0332\14\u032f\4\0\1\u033a\102\0\2\40\1\0\1\40"+
    "\1\0\13\40\1\237\11\0\11\40\2\0\10\40\4\0"+
    "\1\40\1\u033b\1\0\2\40\15\0\1\40\23\0\3\u033a"+
    "\5\0\1\u033c\137\0\1\u033d\43\0\3\u033c\1\0\1\u033e"+
    "\26\0\1\u033f\27\0\1\u0340\31\0\1\u0341\131\0\1\u0342"+
    "\101\0\1\u0343\111\0\1\u0344\101\0\1\u0345\111\0\1\u0346"+
    "\101\0\1\u0347\111\0\1\u0348\52\0\3\u0346\32\0\1\u0349"+
    "\103\0\1\u034a\56\0\1\u0346\164\0\1\u0346";

  private static int [] zzUnpackTrans() {
    int [] result = new int[44520];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\22\0\2\1\1\11\17\1\3\11\13\1\1\11\14\1"+
    "\1\11\10\1\5\11\4\1\1\11\4\1\1\11\7\1"+
    "\1\11\10\1\1\11\4\1\1\11\3\1\1\11\3\1"+
    "\2\11\1\1\24\11\5\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\0\3\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\11\6\1\2\11\3\0\6\1"+
    "\2\0\3\1\3\0\1\11\1\0\1\1\1\11\27\1"+
    "\1\11\10\1\4\11\1\1\1\0\2\1\1\11\1\1"+
    "\12\0\2\1\1\11\1\1\1\0\1\11\1\1\1\11"+
    "\1\1\2\11\1\1\2\0\6\11\4\0\3\1\3\11"+
    "\1\1\3\0\2\1\1\11\1\1\3\0\1\1\1\0"+
    "\1\1\1\11\1\0\1\11\3\0\1\1\1\0\2\1"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\1\2\0"+
    "\1\11\2\0\3\11\2\0\1\1\1\0\11\1\1\0"+
    "\1\11\20\1\2\0\1\11\46\1\3\11\1\1\1\11"+
    "\1\1\12\0\3\11\2\0\1\11\1\0\1\1\1\0"+
    "\1\11\1\1\1\0\1\11\1\0\5\1\1\0\1\11"+
    "\1\0\3\11\2\1\1\11\2\0\74\1\17\0\1\11"+
    "\3\0\2\1\1\11\2\0\17\1\1\0\50\1\6\0"+
    "\1\11\5\0\1\11\1\1\5\0\1\11\2\1\1\11"+
    "\1\1\1\0\16\1\1\11\27\1\1\0\4\1\3\0"+
    "\1\11\6\0\1\11\6\0\16\1\2\0\20\1\1\0"+
    "\2\1\1\11\4\0\2\11\1\1\4\0\14\1\2\0"+
    "\14\1\1\0\1\1\2\11\5\0\11\1\2\0\7\1"+
    "\1\0\1\1\5\0\6\1\2\0\3\1\1\0\1\1"+
    "\1\11\10\0\3\1\2\0\3\1\7\0\3\1\1\11"+
    "\1\0\2\1\2\0\1\11\1\0\2\1\6\0\1\1"+
    "\2\0\1\1\1\0\1\1\7\0\1\11\7\0\1\11"+
    "\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[842];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private final List commentList = new ArrayList();
    private String heredoc = null;
    private int heredocBodyStart = -1;
    private int heredocBodyLength = 0;
    private final StringBuilder heredocBody = new StringBuilder();
    private String nowdoc = null;
    private int nowdoc_len  = 0;
    private int nowdocBodyStart = -1;
    private int nowdocBodyLength = 0;
    private final StringBuilder nowdocBody = new StringBuilder();
    private String comment = null;
    private boolean asp_tags = false;
    private boolean short_tags_allowed = true;
    private ByteStack stack = new ByteStack();
    private char yy_old_buffer[] = new char[ZZ_BUFFERSIZE];
    private int yy_old_pushbackPos;
    protected int commentStartPosition;
    private int whitespaceEndPosition;
    private boolean isEndedPhp;
    private final PHPDocCommentParser docParser = new PHPDocCommentParser();
    private final PHPVarCommentParser varParser = new PHPVarCommentParser();

    public ASTPHP5Scanner(java.io.Reader in, boolean short_tags_allowed, boolean asp_tags_allowed) {
        this(in);
        this.asp_tags = asp_tags_allowed;
        this.short_tags_allowed = short_tags_allowed;
    }
    //private AST ast;

    private int bracket = 0;

    /**
     * Returns balance beween '{' and '}'. If it's equesl 0,
     * then number of '{' == number of '}', if > 0 then '{' > '}' and
     * if return number < 0 then '{' < '}'
     */
    public int getCurlyBalance() {
        return bracket;
    }

    public int getWhitespaceEndPosition() {
        return whitespaceEndPosition;
    }

    public boolean isEndedPhp() {
        return isEndedPhp;
    }

    public boolean useAspTagsAsPhp() {
        return asp_tags;
    }

    public void reset(java.io.Reader reader) {
        yyreset(reader);
    }

    public void setState(int state) {
        yybegin(state);
    }

    public int getState() {
        return yystate();
    }

    public void setInScriptingState() {
        yybegin(ST_IN_SCRIPTING);
    }

    public void resetCommentList() {
        commentList.clear();
    }

    public List getCommentList() {
        return commentList;
    }

    protected void addComment(Comment.Type type) {
        int leftPosition = getTokenStartPosition();
        //System.out.println("#####AddCommnet start: " + commentStartPosition + " end: " + (leftPosition + getTokenLength()) + ", type: " + type);
        Comment comm;
        if (type == Comment.Type.TYPE_PHPDOC) {
            comm = docParser.parse(commentStartPosition, leftPosition + getTokenLength(),  comment);
            comment = null;
        }
        else if(type == Comment.Type.TYPE_VARTYPE) {
            comm = varParser.parse(commentStartPosition, leftPosition + getTokenLength(),  comment);
            comment = null;
            if (comm == null) {
                comm = new Comment(commentStartPosition, leftPosition + getTokenLength(), /*ast,*/ type);
            }
        }
        else {
            comm = new Comment(commentStartPosition, leftPosition + getTokenLength(), /*ast,*/ type);
        }
        commentList.add(comm);
    }

    public void setUseAspTagsAsPhp(boolean useAspTagsAsPhp) {
        asp_tags = useAspTagsAsPhp;
    }

    private void pushState(int state) {
        stack.push(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.pop());
    }

    public int getCurrentLine() {
        return yyline;
    }

    protected int getTokenStartPosition() {
        return zzStartRead - zzPushbackPos;
    }

    protected int getTokenLength() {
        return zzMarkedPos - zzStartRead;
    }

    public int getLength() {
        return zzEndRead - zzPushbackPos;
    }

    private void handleCommentStart() {
        commentStartPosition = getTokenStartPosition();
    }

    private void handleLineCommentEnd() {
        addComment(Comment.Type.TYPE_SINGLE_LINE);
    }

    private void handleMultilineCommentEnd() {
        addComment(Comment.Type.TYPE_MULTILINE);
    }

    private void handlePHPDocEnd() {
        addComment(Comment.Type.TYPE_PHPDOC);
    }

    private void handleVarComment() {
        commentStartPosition = getTokenStartPosition();
        addComment(Comment.Type.TYPE_VARTYPE);
    }

    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    private Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        Symbol symbol = new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
        return symbol;
    }

    private void updateNowdocBodyInfo() {
        if (nowdocBodyStart == -1) {
            nowdocBodyStart = getTokenStartPosition();
        }
        nowdocBody.append(yytext());
        nowdocBodyLength += getTokenLength();
    }

    private Symbol createFullNowdocBodySymbol() {
        Symbol symbol = new Symbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE, nowdocBodyStart, nowdocBodyStart + nowdocBodyLength);
        symbol.value = nowdocBody.toString();
        return symbol;
    }

    private void updateHeredocBodyInfo() {
        if (heredocBodyStart == -1) {
            heredocBodyStart = getTokenStartPosition();
        }
        heredocBody.append(yytext());
        heredocBodyLength += getTokenLength();
    }

    private void resetHeredocBodyInfo() {
        heredocBodyStart = -1;
        heredocBodyLength = 0;
        heredocBody.delete(0, heredocBody.length());
    }

    private Symbol createFullHeredocBodySymbol() {
        Symbol symbol = new Symbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE, heredocBodyStart, heredocBodyStart + heredocBodyLength);
        symbol.value = heredocBody.toString();
        resetHeredocBodyInfo();
        return symbol;
    }

    private boolean isLabelChar(char c) {
        return c == '_'
                || (c >= 'a' && c <= 'z')
                || (c >= 'A' && c <= 'Z')
                || (c >= 0x7f && c <= 0xff);
    }

    private boolean isEndHereOrNowdoc(String hereOrNowdoc) {
        // check whether ID exists
        String trimedText = yytext().trim();
        boolean isEnd = false;
        if (trimedText.startsWith(hereOrNowdoc)) {
            if (trimedText.length() == hereOrNowdoc.length()) {
                isEnd = true;
            } else if (trimedText.length() > hereOrNowdoc.length()
                    && !isLabelChar(trimedText.charAt(hereOrNowdoc.length()))) {
                // e.g.
                // $test = <<< END
                // ENDING
                // END
                isEnd = true;
            }
        }
        return isEnd;
    }

    public int[] getParamenters(){
        return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline};
    }

    private boolean parsePHPDoc(){
        /*final IDocumentorLexer documentorLexer = getDocumentorLexer(zzReader);
        if(documentorLexer == null){
            return false;
        }
        yypushback(zzMarkedPos - zzStartRead);
        int[] parameters = getParamenters();
        documentorLexer.reset(zzReader, zzBuffer, parameters);
        Object phpDocBlock = documentorLexer.parse();
        commentList.add(phpDocBlock);
        reset(zzReader, documentorLexer.getBuffer(), documentorLexer.getParamenters());*/

        //System.out.println("#######ParsePHPDoc()");
        //return true;
        return false;
    }


    /*protected IDocumentorLexer getDocumentorLexer(java.io.Reader  reader) {
        return null;
    }*/

    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
        this.zzReader = reader;
        this.zzBuffer = buffer;
        this.zzMarkedPos = parameters[0];
        this.zzPushbackPos = parameters[1];
        this.zzCurrentPos = parameters[2];
        this.zzStartRead = parameters[3];
        this.zzEndRead = parameters[4];
        this.yyline = parameters[5];
        this.yychar = this.zzStartRead - this.zzPushbackPos;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ASTPHP5Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ASTPHP5Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1832) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    /*if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }*/
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 60:
          { //    yymore();
          }
        case 225: break;
        case 223:
          { comment = yytext();
    handleVarComment();
          }
        case 226: break;
        case 206:
          { return createFullSymbol(ASTPHP5Symbols.T_INTERFACE);
          }
        case 227: break;
        case 167:
          { int removeChars = (yytext().charAt(0) == 'b')?4:3;
    heredoc = yytext().substring(removeChars).trim();    // for 'b<<<' or '<<<'
    if (heredoc.charAt(0) == '"') {
        heredoc = heredoc.substring(1, heredoc.length()-1);
    }
    yybegin(ST_START_HEREDOC);
    return createSymbol(ASTPHP5Symbols.T_START_HEREDOC);
          }
        case 228: break;
        case 29:
          { return createSymbol(ASTPHP5Symbols.T_OR);
          }
        case 229: break;
        case 171:
          { yypushback(yylength() - 4); // 4: enum length
    return createFullSymbol(ASTPHP5Symbols.T_ENUM);
          }
        case 230: break;
        case 165:
          { return createFullSymbol(ASTPHP5Symbols.T_PRINT);
          }
        case 231: break;
        case 191:
          { return createSymbol(ASTPHP5Symbols.T_UNSET_CAST);
          }
        case 232: break;
        case 1:
          { return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
          }
        case 233: break;
        case 24:
          { return createSymbol(ASTPHP5Symbols.T_RGREATER);
          }
        case 234: break;
        case 177:
          { return createFullSymbol(ASTPHP5Symbols.T_GLOBAL);
          }
        case 235: break;
        case 25:
          { return createSymbol(ASTPHP5Symbols.T_TIMES);
          }
        case 236: break;
        case 116:
          { String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?')) {
        yypushback(1);
        yybegin(ST_IN_SHORT_ECHO);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 237: break;
        case 80:
          { return createSymbol(ASTPHP5Symbols.T_MINUS_EQUAL);
          }
        case 238: break;
        case 101:
          { return createSymbol(ASTPHP5Symbols.T_BOOLEAN_OR);
          }
        case 239: break;
        case 12:
          { pushState(ST_IN_SCRIPTING);
    bracket++;
    return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
          }
        case 240: break;
        case 46:
          { /* <ST_END_NOWDOC>{LABEL}";"?[\n\r] */
    nowdoc=null;
    nowdoc_len=0;
    nowdocBody.delete(0, nowdocBody.length());
    nowdocBodyStart = -1;
    nowdocBodyLength = 0;
    yybegin(ST_IN_SCRIPTING);
    int back = 0;
    if (yytext().charAt(yylength() - 1)==';') {
        back++;
    }
    yypushback(back);
    return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
          }
        case 241: break;
        case 22:
          { return createSymbol(ASTPHP5Symbols.T_CLOSE_PARENTHESE);
          }
        case 242: break;
        case 47:
          { yypushback(yylength());
    popState();
          }
        case 243: break;
        case 23:
          { return createSymbol(ASTPHP5Symbols.T_NOT);
          }
        case 244: break;
        case 19:
          { return createSymbol(ASTPHP5Symbols.T_QUESTION_MARK);
          }
        case 245: break;
        case 131:
          { return createFullSymbol(ASTPHP5Symbols.T_VAR);
          }
        case 246: break;
        case 57:
          { popState();
    return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
          }
        case 247: break;
        case 217:
          { return createFullSymbol(ASTPHP5Symbols.T_FUNC_C);
          }
        case 248: break;
        case 154:
          { return createFullSymbol(ASTPHP5Symbols.T_TRAIT);
          }
        case 249: break;
        case 174:
          { return createFullSymbol(ASTPHP5Symbols.T_STATIC);
          }
        case 250: break;
        case 216:
          { return createFullSymbol(ASTPHP5Symbols.T_NAME_RELATIVE);
          }
        case 251: break;
        case 144:
          { return createFullSymbol(ASTPHP5Symbols.T_EVAL);
          }
        case 252: break;
        case 176:
          { return createFullSymbol(ASTPHP5Symbols.T_RETURN);
          }
        case 253: break;
        case 157:
          { return createFullSymbol(ASTPHP5Symbols.T_UNSET);
          }
        case 254: break;
        case 136:
          { if (!parsePHPDoc()) {
        handleCommentStart();
        yybegin(ST_DOCBLOCK);
    }
          }
        case 255: break;
        case 28:
          { return createSymbol(ASTPHP5Symbols.T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG);
          }
        case 256: break;
        case 93:
          { return createSymbol(ASTPHP5Symbols.T_DIV_EQUAL);
          }
        case 257: break;
        case 48:
          { popState();
    return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 258: break;
        case 212:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDFOREACH);
          }
        case 259: break;
        case 210:
          { return createFullSymbol(ASTPHP5Symbols.T_METHOD_C);
          }
        case 260: break;
        case 38:
          { /*<ST_BACKQUOTE>{BACKQUOTE_CHARS}+*/
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 261: break;
        case 187:
          { return createFullSymbol(ASTPHP5Symbols.T_FINALLY);
          }
        case 262: break;
        case 79:
          { return createSymbol(ASTPHP5Symbols.T_ATTRIBUTE);
          }
        case 263: break;
        case 106:
          { yypushback(1);
    /*<ST_BACKQUOTE>{BACKQUOTE_CHARS}*("{""{"+|"$""$"+|(("{"+|"$"+)[`]))*/
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 264: break;
        case 89:
          { return createSymbol(ASTPHP5Symbols.T_IS_SMALLER_OR_EQUAL);
          }
        case 265: break;
        case 130:
          { return createSymbol(ASTPHP5Symbols.T_COALESCE_EQUAL);
          }
        case 266: break;
        case 73:
          { return createFullSymbol(ASTPHP5Symbols.T_CONSTANT_ENCAPSED_STRING);
          }
        case 267: break;
        case 121:
          { return createFullSymbol(ASTPHP5Symbols.T_LOGICAL_AND);
          }
        case 268: break;
        case 159:
          { return createFullSymbol(ASTPHP5Symbols.T_CONST);
          }
        case 269: break;
        case 147:
          { return createFullSymbol(ASTPHP5Symbols.T_GOTO);
          }
        case 270: break;
        case 129:
          { pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ASTPHP5Symbols.T_NULLSAFE_OBJECT_OPERATOR);
          }
        case 271: break;
        case 124:
          { return createFullSymbol(ASTPHP5Symbols.T_EXIT);
          }
        case 272: break;
        case 37:
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 273: break;
        case 139:
          { /* <ST_HEREDOC> {HEREDOC_CHARS}("{$" | "${") */
        yypushback(2);
        updateHeredocBodyInfo();
        return createFullHeredocBodySymbol();
          }
        case 274: break;
        case 198:
          { return createFullSymbol(ASTPHP5Symbols.T_CALLABLE);
          }
        case 275: break;
        case 132:
          { return createSymbol(ASTPHP5Symbols.T_IS_NOT_IDENTICAL);
          }
        case 276: break;
        case 42:
          { yypushback(1);
    yybegin(ST_HEREDOC);
          }
        case 277: break;
        case 173:
          { /* not a keyword, hust for recognize constans.*/
    return createFullSymbol(ASTPHP5Symbols.T_DEFINE);
          }
        case 278: break;
        case 45:
          { yypushback(1);
    yybegin(ST_NOWDOC);
          }
        case 279: break;
        case 100:
          { return createSymbol(ASTPHP5Symbols.T_OR_EQUAL);
          }
        case 280: break;
        case 152:
          { return createFullSymbol(ASTPHP5Symbols.T_BREAK);
          }
        case 281: break;
        case 107:
          { /* {NEWLINE}{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\n\r]? */
        int trailingNewLineLength = 1;
        int labelLength = yylength() - trailingNewLineLength;
        int back = trailingNewLineLength;

        if (yytext().charAt(labelLength-1) == ';') {
           labelLength--;
           back++;
        }

        if (isEndHereOrNowdoc(heredoc)) {
            int indexOfHeredocId = yytext().indexOf(heredoc);
            back += labelLength - indexOfHeredocId;
            yypushback(back);
            yybegin(ST_END_HEREDOC);
        } else {
            // handle variable
            char previousChar = ' ';
            int indexOfVariable = -1;
            for (int i = 0; i < yylength(); i++) {
                char currentChar = yytext().charAt(i);
                if (currentChar == '$' && previousChar == '{') {
                    indexOfVariable = i - 1;
                    break;
                }
                if (currentChar == '$' && previousChar != '\\') {
                    indexOfVariable = i;
                    break;
                }
                previousChar = currentChar;
            }

            if (indexOfVariable == -1) {
                yypushback(trailingNewLineLength);
            } else {
                yypushback(yylength() - indexOfVariable);
                updateHeredocBodyInfo();
                return createFullHeredocBodySymbol();
            }
        }
        updateHeredocBodyInfo();
        if (yystate() == ST_END_HEREDOC) {
            return createFullHeredocBodySymbol();
        }
          }
        case 282: break;
        case 62:
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_ECHO);
          }
        case 283: break;
        case 175:
          { return createFullSymbol(ASTPHP5Symbols.T_SWITCH);
          }
        case 284: break;
        case 36:
          { /*<ST_DOUBLE_QUOTES>{DOUBLE_QUOTES_CHARS}+*/
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 285: break;
        case 33:
          { return createSymbol(ASTPHP5Symbols.T_TILDA);
          }
        case 286: break;
        case 76:
          { return createFullSymbol(ASTPHP5Symbols.T_IF);
          }
        case 287: break;
        case 188:
          { return createFullSymbol(ASTPHP5Symbols.T_REQUIRE);
          }
        case 288: break;
        case 20:
          { return createSymbol(ASTPHP5Symbols.T_NEKUDOTAIM);
          }
        case 289: break;
        case 163:
          { return createFullSymbol(ASTPHP5Symbols.T_MATCH);
          }
        case 290: break;
        case 56:
          { return createSymbol(ASTPHP5Symbols.T_REFERENCE);
          }
        case 291: break;
        case 94:
          { handleCommentStart();
    yybegin(ST_COMMENT);
          }
        case 292: break;
        case 208:
          { return createFullSymbol(ASTPHP5Symbols.T_NAMESPACE);
          }
        case 293: break;
        case 119:
          { // PHP 8.1: Explicit octal integer literal notation
    // https://wiki.php.net/rfc/explicit_octal_notation
    return createFullSymbol(ASTPHP5Symbols.T_LNUMBER);
          }
        case 294: break;
        case 214:
          { return createFullSymbol(ASTPHP5Symbols.T_IMPLEMENTS);
          }
        case 295: break;
        case 162:
          { return createFullSymbol(ASTPHP5Symbols.T_YIELD);
          }
        case 296: break;
        case 17:
          { return createSymbol(ASTPHP5Symbols.T_MINUS);
          }
        case 297: break;
        case 44:
          { /* <ST_NOWDOC>{NOWDOC_CHARS}|{NEWLINE} */
        updateNowdocBodyInfo();
          }
        case 298: break;
        case 204:
          { return createFullSymbol(ASTPHP5Symbols.T_CLASS_C);
          }
        case 299: break;
        case 117:
          { return createFullSymbol(ASTPHP5Symbols.T_NAME_QUALIFIED);
          }
        case 300: break;
        case 222:
          { return createFullSymbol(ASTPHP5Symbols.T_NS_C);
          }
        case 301: break;
        case 166:
          { return createSymbol(ASTPHP5Symbols.T_INT_CAST);
          }
        case 302: break;
        case 114:
          { handlePHPDocEnd();
    yybegin(ST_IN_SCRIPTING);
          }
        case 303: break;
        case 172:
          { return createFullSymbol(ASTPHP5Symbols.T_ELSEIF);
          }
        case 304: break;
        case 86:
          { return createSymbol(ASTPHP5Symbols.T_COALESCE);
          }
        case 305: break;
        case 211:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDDECLARE);
          }
        case 306: break;
        case 81:
          { return createSymbol(ASTPHP5Symbols.T_DEC);
          }
        case 307: break;
        case 103:
          { yypushback(1);
    /*<ST_DOUBLE_QUOTES>{DOUBLE_QUOTES_CHARS}*("{""{"+|"$""$"+|(("{"+|"$"+)[\"]))*/
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 308: break;
        case 196:
          { return createFullSymbol(ASTPHP5Symbols.T_ABSTRACT);
          }
        case 309: break;
        case 143:
          { return createFullSymbol(ASTPHP5Symbols.T_ELSE);
          }
        case 310: break;
        case 207:
          { return createFullSymbol(ASTPHP5Symbols.T_INSTEADOF);
          }
        case 311: break;
        case 82:
          { pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
          }
        case 312: break;
        case 13:
          { return createSymbol(ASTPHP5Symbols.T_SEMICOLON);
          }
        case 313: break;
        case 2:
          { // do nothing
          }
        case 314: break;
        case 50:
          { popState();
    pushState(ST_IN_SCRIPTING);
    return createFullSymbol(ASTPHP5Symbols.T_STRING_VARNAME);
          }
        case 315: break;
        case 146:
          { return createFullSymbol(ASTPHP5Symbols.T_LIST);
          }
        case 316: break;
        case 18:
          { return createSymbol(ASTPHP5Symbols.T_LGREATER);
          }
        case 317: break;
        case 113:
          { handleMultilineCommentEnd();
    yybegin(ST_IN_SCRIPTING);
          }
        case 318: break;
        case 137:
          { yypushback(1);
    pushState(ST_VAR_OFFSET);
    return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 319: break;
        case 170:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDFOR);
          }
        case 320: break;
        case 3:
          { return createFullSymbol(ASTPHP5Symbols.T_LNUMBER);
          }
        case 321: break;
        case 41:
          { /* <ST_HEREDOC> "$" | "{" */
        updateHeredocBodyInfo();
          }
        case 322: break;
        case 148:
          { handleCommentStart();
          }
        case 323: break;
        case 151:
          { return createFullSymbol(ASTPHP5Symbols.T_ARRAY);
          }
        case 324: break;
        case 142:
          { return createFullSymbol(ASTPHP5Symbols.T_ECHO);
          }
        case 325: break;
        case 51:
          { return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
          }
        case 326: break;
        case 98:
          { return createSymbol(ASTPHP5Symbols.T_AND_EQUAL);
          }
        case 327: break;
        case 55:
          { bracket++; return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
          }
        case 328: break;
        case 155:
          { return createFullSymbol(ASTPHP5Symbols.T_THROW);
          }
        case 329: break;
        case 138:
          { /* <ST_HEREDOC> {HEREDOC_CHARS}"$"{LABEL}"["? */
        String text = yytext();
        int lastIndexOfDollar = text.lastIndexOf('$');
        yypushback(text.length() - lastIndexOfDollar);
        updateHeredocBodyInfo();
        return createFullHeredocBodySymbol();
          }
        case 330: break;
        case 164:
          { return createFullSymbol(ASTPHP5Symbols.T_WHILE);
          }
        case 331: break;
        case 205:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDSWITCH);
          }
        case 332: break;
        case 64:
          { if (asp_tags) {
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
        //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 333: break;
        case 190:
          { return createSymbol(ASTPHP5Symbols.T_ARRAY_CAST);
          }
        case 334: break;
        case 105:
          { pushState(ST_IN_SCRIPTING);
    yypushback(yylength()-1);
    bracket++;
    return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN_WITH_DOLAR);
          }
        case 335: break;
        case 184:
          { return createFullSymbol(ASTPHP5Symbols.T_DEFAULT);
          }
        case 336: break;
        case 180:
          { return createSymbol(ASTPHP5Symbols.T_DOUBLE_CAST);
          }
        case 337: break;
        case 11:
          { yybegin(ST_BACKQUOTE);
    return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 338: break;
        case 16:
          { return createSymbol(ASTPHP5Symbols.T_OPEN_RECT);
          }
        case 339: break;
        case 158:
          { return createFullSymbol(ASTPHP5Symbols.T_CATCH);
          }
        case 340: break;
        case 109:
          { /* <ST_NOWDOC>{NEWLINE}{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\r\n]? */
        if (isEndHereOrNowdoc(nowdoc)) {
            String yytext = yytext();
            int newlineLength = yytext.startsWith("\r\n") ? 2 : 1;
            int back = yylength() - newlineLength;
            yypushback(back);
            updateNowdocBodyInfo();
            yybegin(ST_END_NOWDOC);
            if (nowdocBodyLength > 0) {
                return createFullNowdocBodySymbol();
            }
        } else {
            yypushback(1);
            updateNowdocBodyInfo();
        }
          }
        case 341: break;
        case 61:
          { String yytext = yytext();
    switch (yytext.charAt(yytext.length() - 1)) {
        case '?':
        case '%':
        case '>':
            yypushback(1);
            break;
        default:
            handleLineCommentEnd();
            yybegin(ST_IN_SCRIPTING);
    }
//    yymore();
          }
        case 342: break;
        case 104:
          { pushState(ST_LOOKING_FOR_VARNAME);
    return createSymbol(ASTPHP5Symbols.T_DOLLAR_OPEN_CURLY_BRACES);
          }
        case 343: break;
        case 35:
          { /* This is a temporary fix which is dependant on flex and it's implementation */
    if (!stack.isEmpty()) {
        popState();
    }
    bracket--;
    return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
          }
        case 344: break;
        case 140:
          { return createSymbol(ASTPHP5Symbols.T_NULLSAFE_OBJECT_OPERATOR);
          }
        case 345: break;
        case 95:
          { return createSymbol(ASTPHP5Symbols.T_MOD_EQUAL);
          }
        case 346: break;
        case 26:
          { return createSymbol(ASTPHP5Symbols.T_DIV);
          }
        case 347: break;
        case 108:
          { /* <ST_START_HEREDOC>{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\n\r]? */
    int trailingNewLineLength = 1;
    int labelLength = yylength() - trailingNewLineLength;
    int back = trailingNewLineLength;
    String yytext = yytext();

    if (yytext.charAt(labelLength - 1) == ';') {
        labelLength--;
        back++;
    }

    if (isEndHereOrNowdoc(heredoc)) {
        int indexOfHeredocId = yytext().indexOf(heredoc);
        back += labelLength - indexOfHeredocId;
        yypushback(back);
        yybegin(ST_END_HEREDOC);
    } else {
        yypushback(yylength());
        yybegin(ST_HEREDOC);
    }
          }
        case 348: break;
        case 32:
          { return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
          }
        case 349: break;
        case 133:
          { return createSymbol(ASTPHP5Symbols.T_SPACESHIP);
          }
        case 350: break;
        case 6:
          { return createSymbol(ASTPHP5Symbols.T_PLUS);
          }
        case 351: break;
        case 160:
          { return createFullSymbol(ASTPHP5Symbols.T_CLASS);
          }
        case 352: break;
        case 125:
          { return createFullSymbol(ASTPHP5Symbols.T_FOR);
          }
        case 353: break;
        case 168:
          { yypushback(3);
    pushState(ST_LOOKING_FOR_PROPERTY);
    return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 354: break;
        case 83:
          { return createSymbol(ASTPHP5Symbols.T_IS_GREATER_OR_EQUAL);
          }
        case 355: break;
        case 77:
          { return createFullSymbol(ASTPHP5Symbols.T_DO);
          }
        case 356: break;
        case 99:
          { return createSymbol(ASTPHP5Symbols.T_BOOLEAN_AND);
          }
        case 357: break;
        case 40:
          { /* <ST_HEREDOC> {HEREDOC_CHARS} */
        int indexOfNewline = yytext().indexOf("\r");
        if (indexOfNewline == -1) {
            indexOfNewline = yytext().indexOf("\n");
        }
        if (indexOfNewline > 0) {
            // if index equals 0, don't pushback (infinite loop)
            yypushback(yylength() - indexOfNewline);
        }
        updateHeredocBodyInfo();
          }
        case 358: break;
        case 4:
          { return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 359: break;
        case 183:
          { return createFullSymbol(ASTPHP5Symbols.T_INCLUDE);
          }
        case 360: break;
        case 5:
          { return createSymbol(ASTPHP5Symbols.T_NEKUDA);
          }
        case 361: break;
        case 149:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDIF);
          }
        case 362: break;
        case 126:
          { return createFullSymbol(ASTPHP5Symbols.T_NEW);
          }
        case 363: break;
        case 58:
          { bracket--; return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
          }
        case 364: break;
        case 213:
          { return createFullSymbol(ASTPHP5Symbols.T_INSTANCEOF);
          }
        case 365: break;
        case 49:
          { yypushback(yylength());
    popState();
    pushState(ST_IN_SCRIPTING);
          }
        case 366: break;
        case 169:
          { isEndedPhp = false;
    whitespaceEndPosition = getTokenStartPosition() + yylength();
    yybegin(ST_IN_SCRIPTING);
    //return T_OPEN_TAG;
    //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
          }
        case 367: break;
        case 68:
          { return createSymbol(ASTPHP5Symbols.T_PLUS_EQUAL);
          }
        case 368: break;
        case 78:
          { // PHP 7.4 Arrow Functions 2.0
    // https://wiki.php.net/rfc/arrow_functions_v2
    return createFullSymbol(ASTPHP5Symbols.T_FN);
          }
        case 369: break;
        case 8:
          { whitespaceEndPosition = getTokenStartPosition() + yylength();
          }
        case 370: break;
        case 189:
          { return createFullSymbol(ASTPHP5Symbols.T_PRIVATE);
          }
        case 371: break;
        case 220:
          { return createFullSymbol(ASTPHP5Symbols.T_REQUIRE_ONCE);
          }
        case 372: break;
        case 218:
          { yypushback(yylength() - 4); // 4: enum length
    return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 373: break;
        case 186:
          { return createFullSymbol(ASTPHP5Symbols.T_FOREACH);
          }
        case 374: break;
        case 161:
          { return createFullSymbol(ASTPHP5Symbols.T_CLONE);
          }
        case 375: break;
        case 153:
          { return createFullSymbol(ASTPHP5Symbols.T_ISSET);
          }
        case 376: break;
        case 21:
          { return createSymbol(ASTPHP5Symbols.T_OPEN_PARENTHESE);
          }
        case 377: break;
        case 178:
          { return createFullSymbol(ASTPHP5Symbols.T_PUBLIC);
          }
        case 378: break;
        case 15:
          { handleCommentStart();
    yybegin(ST_ONE_LINE_COMMENT);
//    yymore();
          }
        case 379: break;
        case 128:
          { return createSymbol(ASTPHP5Symbols.T_SR_EQUAL);
          }
        case 380: break;
        case 63:
          { if (short_tags_allowed || yylength()>2) { /* yyleng>2 means it's not <? but <script> */
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
        //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 381: break;
        case 150:
          { return createFullSymbol(ASTPHP5Symbols.T_EMPTY);
          }
        case 382: break;
        case 224:
          { yybegin(ST_HALTED_COMPILER);
    return createSymbol(ASTPHP5Symbols.T_HALT_COMPILER);
          }
        case 383: break;
        case 88:
          { return createSymbol(ASTPHP5Symbols.T_IS_NOT_EQUAL);
          }
        case 384: break;
        case 91:
          { return createSymbol(ASTPHP5Symbols.T_MUL_EQUAL);
          }
        case 385: break;
        case 97:
          { yypushback(yylength() - 1);
    return createSymbol(ASTPHP5Symbols.T_REFERENCE);
          }
        case 386: break;
        case 110:
          { /* <ST_START_NOWDOC>{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\r\n]? */
    // there is no [\r\n] if it is the last line
    // i.e. not [\r\n] but EOF, so check not [\r\n] but [\r\n]?
    if (isEndHereOrNowdoc(nowdoc)) {
        int indexOfNowdocId = yytext().indexOf(nowdoc);
        int back = yylength() - indexOfNowdocId - nowdoc.length();
        yypushback(back);
        nowdoc = null;
        nowdoc_len = 0;
        nowdocBody.delete(0, nowdocBody.length());
        nowdocBodyStart = -1;
        nowdocBodyLength = 0;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
    } else {
        yypushback(1); // [\r\n] length
        yybegin(ST_NOWDOC);
        updateNowdocBodyInfo();
    }
          }
        case 387: break;
        case 134:
          { return createSymbol(ASTPHP5Symbols.T_SL_EQUAL);
          }
        case 388: break;
        case 123:
          { return createFullSymbol(ASTPHP5Symbols.T_TRY);
          }
        case 389: break;
        case 156:
          { return createFullSymbol(ASTPHP5Symbols.T_FINAL);
          }
        case 390: break;
        case 202:
          { return createSymbol(ASTPHP5Symbols.T_OBJECT_CAST);
          }
        case 391: break;
        case 179:
          { return createSymbol(ASTPHP5Symbols.T_BOOL_CAST);
          }
        case 392: break;
        case 39:
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 393: break;
        case 7:
          { return createSymbol(ASTPHP5Symbols.T_NS_SEPARATOR);
          }
        case 394: break;
        case 115:
          { if (asp_tags || yytext().charAt(0)!='%') { /* asp comment? */
        isEndedPhp = true;
        handleLineCommentEnd();
        yypushback(yylength());
        yybegin(ST_IN_SCRIPTING);
        //return T_COMMENT;
    }
          }
        case 395: break;
        case 201:
          { return createSymbol(ASTPHP5Symbols.T_STRING_CAST);
          }
        case 396: break;
        case 120:
          { return createFullSymbol(ASTPHP5Symbols.T_LOGICAL_XOR);
          }
        case 397: break;
        case 65:
          { return createFullSymbol(ASTPHP5Symbols.T_DNUMBER);
          }
        case 398: break;
        case 27:
          { return createSymbol(ASTPHP5Symbols.T_PRECENT);
          }
        case 399: break;
        case 221:
          { comment = yytext();
    handleVarComment();
    // if we want to handle the var comment in  ast, then return the T_VAR_Comment symbol
    // but it needs some changes in parser grammar. see issue #154967
    //return createFullSymbol(ASTPHP5Symbols.T_VAR_COMMENT);
          }
        case 400: break;
        case 85:
          { isEndedPhp = true;
    yybegin(YYINITIAL);
    return createSymbol(ASTPHP5Symbols.T_SEMICOLON);  /* implicit ';' at php-end tag */
          }
        case 401: break;
        case 96:
          { if (asp_tags) {
        yybegin(YYINITIAL);
        return createSymbol(ASTPHP5Symbols.T_SEMICOLON);  /* implicit ';' at php-end tag */
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 402: break;
        case 197:
          { return createFullSymbol(ASTPHP5Symbols.T_FUNCTION);
          }
        case 403: break;
        case 195:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDWHILE);
          }
        case 404: break;
        case 30:
          { return createSymbol(ASTPHP5Symbols.T_KOVA);
          }
        case 405: break;
        case 43:
          { /* <ST_END_HEREDOC>{TABS_AND_SPACES}{LABEL}";"? */
    heredoc=null;
    resetHeredocBodyInfo();
    yybegin(ST_IN_SCRIPTING);
    int back = 0;
    // mark just the label
    if (yytext().charAt(yylength() - 1)==';') {
        back++;
    }
    yypushback(back);
    return createSymbol(ASTPHP5Symbols.T_END_HEREDOC);
          }
        case 406: break;
        case 10:
          { yybegin(ST_DOUBLE_QUOTES);
    return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 407: break;
        case 199:
          { return createFullSymbol(ASTPHP5Symbols.T_CONTINUE);
          }
        case 408: break;
        case 122:
          { return createSymbol(ASTPHP5Symbols.T_IS_IDENTICAL);
          }
        case 409: break;
        case 75:
          { return createSymbol(ASTPHP5Symbols.T_DOUBLE_ARROW);
          }
        case 410: break;
        case 141:
          { int len = yylength();
    yypushback(2); // go back to mark end of comment in the next token
    comment = yytext();
          }
        case 411: break;
        case 203:
          { return createFullSymbol(ASTPHP5Symbols.T_TRAIT_C);
          }
        case 412: break;
        case 87:
          { return createSymbol(ASTPHP5Symbols.T_PAAMAYIM_NEKUDOTAYIM);
          }
        case 413: break;
        case 127:
          { return createFullSymbol(ASTPHP5Symbols.T_USE);
          }
        case 414: break;
        case 84:
          { return createSymbol(ASTPHP5Symbols.T_SR);
          }
        case 415: break;
        case 14:
          { return createSymbol(ASTPHP5Symbols.T_EQUAL);
          }
        case 416: break;
        case 31:
          { return createSymbol(ASTPHP5Symbols.T_COMMA);
          }
        case 417: break;
        case 181:
          { return createFullSymbol(ASTPHP5Symbols.T_DIR);
          }
        case 418: break;
        case 209:
          { return createFullSymbol(ASTPHP5Symbols.T_PROTECTED);
          }
        case 419: break;
        case 52:
          { yypushback(1);
    popState();
    /*<ST_VAR_OFFSET>[ \n\r\t\\'#]*/
    return createSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 420: break;
        case 66:
          { return createSymbol(ASTPHP5Symbols.T_CONCAT_EQUAL);
          }
        case 421: break;
        case 112:
          { /* treat numbers (almost) as strings inside encapsulated strings */
    return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
          }
        case 422: break;
        case 9:
          { return createSymbol(ASTPHP5Symbols.T_DOLLAR);
          }
        case 423: break;
        case 67:
          { return createSymbol(ASTPHP5Symbols.T_INC);
          }
        case 424: break;
        case 70:
          { return createFullSymbol(ASTPHP5Symbols.T_LOGICAL_OR);
          }
        case 425: break;
        case 200:
          { return createFullSymbol(ASTPHP5Symbols.T_READONLY);
          }
        case 426: break;
        case 90:
          { return createSymbol(ASTPHP5Symbols.T_SL);
          }
        case 427: break;
        case 69:
          { return createFullSymbol(ASTPHP5Symbols.T_AS);
          }
        case 428: break;
        case 219:
          { return createFullSymbol(ASTPHP5Symbols.T_INCLUDE_ONCE);
          }
        case 429: break;
        case 135:
          { return createSymbol(ASTPHP5Symbols.T_POW_EQUAL);
          }
        case 430: break;
        case 74:
          { return createSymbol(ASTPHP5Symbols.T_IS_EQUAL);
          }
        case 431: break;
        case 71:
          { return createFullSymbol(ASTPHP5Symbols.T_NAME_FULLY_QUALIFIED);
          }
        case 432: break;
        case 34:
          { return createSymbol(ASTPHP5Symbols.T_AT);
          }
        case 433: break;
        case 53:
          { return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 434: break;
        case 194:
          { return createFullSymbol(ASTPHP5Symbols.T_LINE);
          }
        case 435: break;
        case 192:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    /* 3 is <<<, 2 is quotes, 1 is newline */
    nowdoc_len = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        nowdoc_len--;
    }
    // first quate
    startString++;
    nowdoc = yytext().substring(startString,nowdoc_len+startString);
    yybegin(ST_START_NOWDOC);
    return createSymbol(ASTPHP5Symbols.T_START_NOWDOC);
          }
        case 436: break;
        case 182:
          { return createFullSymbol(ASTPHP5Symbols.T_EXTENDS);
          }
        case 437: break;
        case 72:
          { return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 438: break;
        case 215:
          { return createSymbol(ASTPHP5Symbols.T_YIELD_FROM);
          }
        case 439: break;
        case 185:
          { return createFullSymbol(ASTPHP5Symbols.T_DECLARE);
          }
        case 440: break;
        case 145:
          { return createFullSymbol(ASTPHP5Symbols.T_CASE);
          }
        case 441: break;
        case 102:
          { return createSymbol(ASTPHP5Symbols.T_XOR_EQUAL);
          }
        case 442: break;
        case 92:
          { return createSymbol(ASTPHP5Symbols.T_POW);
          }
        case 443: break;
        case 193:
          { return createFullSymbol(ASTPHP5Symbols.T_FILE);
          }
        case 444: break;
        case 111:
          { return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
          }
        case 445: break;
        case 118:
          { return createSymbol(ASTPHP5Symbols.T_ELLIPSIS);
          }
        case 446: break;
        case 54:
          { return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 447: break;
        case 59:
          {
          }
        case 448: break;
        default:
          if (zzInput == YYEOF && (zzStartRead == zzCurrentPos || zzLexicalState == ST_DOCBLOCK)) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case ST_DOCBLOCK: {
              if (yytext().length() > 0) {
        yypushback(1);  // backup eof
        comment = yytext();
    }
    else {
        return createSymbol(ASTPHP5Symbols.EOF);
    }
            }
            case 843: break;
            default:
              {     return createSymbol(ASTPHP5Symbols.EOF);
 }
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
